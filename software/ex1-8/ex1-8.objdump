
ex1-8.elf:     file format elf32-littlenios2
ex1-8.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00013628 memsz 0x00013628 flags r-x
    LOAD off    0x00014648 vaddr 0x01013648 paddr 0x01015328 align 2**12
         filesz 0x00001ce0 memsz 0x00001ce0 flags rw-
    LOAD off    0x00017008 vaddr 0x01017008 paddr 0x01017008 align 2**12
         filesz 0x00000000 memsz 0x00000a8c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012e24  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000066c  01012fdc  01012fdc  00013fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001ce0  01013648  01015328  00014648  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000a8c  01017008  01017008  00017008  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00016328  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000e38  00000000  00000000  00016350  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001e29  00000000  00000000  00017188  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002c0e6  00000000  00000000  00018fb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008dc6  00000000  00000000  00045097  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00018038  00000000  00000000  0004de5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000021a0  00000000  00000000  00065e98  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000027bf  00000000  00000000  00068038  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000e2e4  00000000  00000000  0006a7f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00078adc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  00078b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0007d461  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0007d464  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0007d470  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0007d471  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0007d472  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0007d47d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0007d488  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0007d493  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000029  00000000  00000000  0007d49e  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00086ce4  00000000  00000000  0007d4c7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
01012fdc l    d  .rodata	00000000 .rodata
01013648 l    d  .rwdata	00000000 .rwdata
01017008 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 exercise1-8.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0100074c l     F .text	00000058 __sprint_r
01013262 l     O .rodata	00000010 blanks.3452
01013252 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
010027b0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
010041ac l     F .text	00000058 std
010042b8 l     F .text	00000008 __fp_lock
010042c0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
01013848 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
010152f4 l     O .rwdata	00000004 charset
01013298 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
010133e0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
01008784 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
010098b0 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
0100a124 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0100a184 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0100a284 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100a3a4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100a484 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100a5e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100a80c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01015318 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100aaa8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01014204 l     O .rwdata	00001060 jtag_uart_0
01015264 l     O .rwdata	0000002c character_lcd_0
01015290 l     O .rwdata	0000002c rs232_0
010152bc l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
0100abc4 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
01013588 l     O .rodata	00000016 __func__.4813
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100f3f8 l     F .text	0000022c altera_avalon_jtag_uart_irq
0100f624 l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0100fca0 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010108b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01010a9c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
01010d98 l     F .text	000000dc alt_file_locked
01010ffc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0101177c l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 vfprintf.c
01011c98 l     F .text	00000058 __sprint_r
01013638 l     O .rodata	00000010 blanks.3391
01013628 l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 alt_exit.c
01012db8 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_kill.c
01012f78 l     F .text	00000060 alt_get_errno
0101703c g     O .bss	00000004 aux_status_register
01000600 g     F .text	0000001c putchar
01005f68 g     F .text	00000094 _mprec_log10
01006054 g     F .text	00000088 __any_on
01007a98 g     F .text	00000070 _isatty_r
010133b8 g     O .rodata	00000028 __mprec_tinytens
0100a640 g     F .text	0000006c alt_main
01000624 g     F .text	000000a0 _puts_r
01017804 g     O .bss	00000100 alt_irq
01007b08 g     F .text	00000078 _lseek_r
01015328 g       *ABS*	00000000 __flash_rwdata_start
0100fe18 g     F .text	00000034 alt_up_character_lcd_send_cmd
010092a4 g     F .text	00000088 __eqdf2
0100afac g     F .text	000001b0 Check_for_Master_Boot_Record
01017a94 g       *ABS*	00000000 __alt_heap_start
0100ee74 g     F .text	000001f8 alt_up_sd_card_fclose
01011c24 g     F .text	00000074 _kill_r
01000588 g     F .text	00000044 printf
01011b64 g     F .text	000000a0 _signal_r
01007418 g     F .text	00000068 __sseek
01004214 g     F .text	000000a4 __sinit
01007618 g     F .text	00000130 __swbuf_r
01004eec g     F .text	00000084 _setlocale_r
01004314 g     F .text	00000068 __sfmoreglue
0100a6cc g     F .text	00000020 __malloc_unlock
01010500 g     F .text	00000090 alt_up_rs232_read_fd
01017060 g     O .bss	00000004 current_sector_modified
0100f168 g     F .text	00000090 Read_Sector_Data_Attempt_CRC
010059e4 g     F .text	000000e0 memmove
01004304 g     F .text	00000010 _cleanup
010060dc g     F .text	000000bc _Balloc
0100da20 g     F .text	000000c8 alt_up_sd_card_is_Present
0100acc4 g     F .text	00000050 Save_Modified_Sector
010093b4 g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100fd9c g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
01017058 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
01000020 g       *ABS*	00000000 __flash_exceptions_start
01007a24 g     F .text	00000074 _fstat_r
01017024 g     O .bss	00000004 errno
0101702c g     O .bss	00000004 alt_argv
0101d2e8 g       *ABS*	00000000 _gp
0100dfe0 g     F .text	000003a8 alt_up_sd_card_fopen
0100db5c g     F .text	000000d4 alt_up_sd_card_find_first
0101704c g     O .bss	00000004 command_argument_register
01012e18 g     F .text	00000020 getpid
01014084 g     O .rwdata	00000180 alt_fd_list
0100061c g     F .text	00000008 _putchar_r
0100d250 g     F .text	0000012c find_first_empty_record_in_root_directory
010109d8 g     F .text	00000094 alt_find_dev
01005944 g     F .text	000000a0 memcpy
0100ffb0 g     F .text	0000004c alt_up_character_lcd_write_fd
01017008 g     O .bss	00000002 myFileHandle
010042f8 g     F .text	0000000c _cleanup_r
0100954c g     F .text	000000f8 __floatsidf
01010b60 g     F .text	00000078 alt_io_redirect
010094c4 g     F .text	00000088 __ltdf2
01012fdc g       *ABS*	00000000 __DTOR_END__
0101048c g     F .text	00000074 alt_up_rs232_read_data
010006c4 g     F .text	00000014 puts
0100ce60 g     F .text	000001a4 find_first_empty_cluster
01005eb8 g     F .text	000000b0 __ratio
0100d95c g     F .text	000000c4 alt_up_sd_card_open_dev
01012d94 g     F .text	00000024 __vfiprintf_internal
0100f83c g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
010005cc g     F .text	00000034 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
010099ec g     F .text	00000008 __udivsi3
0100a2e4 g     F .text	000000c0 isatty
01011948 g     F .text	000000cc _raise_r
01011488 g     F .text	00000064 __assert_func
010132c8 g     O .rodata	000000c8 __mprec_tens
01004ec8 g     F .text	00000008 __locale_charset
010113f8 g     F .text	00000090 alt_icache_flush
01017018 g     O .bss	00000004 __malloc_top_pad
01011c20 g     F .text	00000004 _getpid_r
010152f0 g     O .rwdata	00000004 __mb_cur_max
01004ed0 g     F .text	0000000c _localeconv_r
010067d4 g     F .text	0000003c __i2b
010048ac g     F .text	0000049c __sfvwrite_r
01011a9c g     F .text	000000b4 __sigtramp_r
0100c13c g     F .text	000000c0 get_dir_divider_location
010073a0 g     F .text	00000070 _sbrk_r
0100bddc g     F .text	000000d0 filename_to_upper_case
0100e388 g     F .text	00000090 alt_up_sd_card_set_attributes
0100b15c g     F .text	00000284 Read_File_Record_At_Offset
01007b80 g     F .text	00000078 _read_r
01013c48 g     O .rwdata	0000000c __lc_ctype
01015310 g     O .rwdata	00000004 alt_max_fd
010103f4 g     F .text	00000050 alt_up_rs232_check_parity
01009e28 g     F .text	00000138 __unpack_d
0100c9fc g     F .text	00000464 find_file_in_directory
01007900 g     F .text	00000110 _fclose_r
01004178 g     F .text	00000034 fflush
0101701c g     O .bss	00000004 __malloc_max_sbrked_mem
01010bd8 g     F .text	000001c0 alt_irq_register
0100dae8 g     F .text	00000074 alt_up_sd_card_is_FAT16
01008c14 g     F .text	00000074 __adddf3
01005d98 g     F .text	00000120 __b2d
010081d4 g     F .text	000005b0 __umoddi3
0100a4f0 g     F .text	000000f0 lseek
010152ec g     O .rwdata	00000004 _global_impure_ptr
0100c4e8 g     F .text	00000514 get_home_directory_cluster_for_file
01006d3c g     F .text	000005f4 _realloc_r
01017a94 g       *ABS*	00000000 __bss_end
010110f4 g     F .text	0000010c alt_tick
01007bf8 g     F .text	000005dc __udivdi3
01013390 g     O .rodata	00000028 __mprec_bigtens
01006a30 g     F .text	00000120 __s2b
01011930 g     F .text	00000018 abort
0100971c g     F .text	00000194 __floatunsidf
01005cb8 g     F .text	00000060 __mcmp
01017064 g     O .bss	00000004 current_sector_index
010042e0 g     F .text	00000018 __fp_lock_all
0101105c g     F .text	00000098 alt_alarm_stop
0100aec8 g     F .text	000000e4 mark_cluster
01017068 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
0101405c g     O .rwdata	00000028 alt_dev_null
0100d37c g     F .text	000001b8 convert_filename_to_name_extension
01010298 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
010107b8 g     F .text	00000044 alt_dcache_flush_all
01005b84 g     F .text	00000070 __hi0bits
01017038 g     O .bss	00000004 is_sd_card_formated_as_FAT16
01009644 g     F .text	000000d8 __fixdfsi
0100d004 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
01015328 g       *ABS*	00000000 __ram_rwdata_end
01015308 g     O .rwdata	00000008 alt_dev_list
0100a988 g     F .text	00000120 write
01006c54 g     F .text	000000e8 _putc_r
0101705c g     O .bss	00000004 device_pointer
01013648 g       *ABS*	00000000 __ram_rodata_end
0100a1b0 g     F .text	000000d4 fstat
01010590 g     F .text	00000094 alt_up_rs232_write_fd
01012e38 g     F .text	00000140 kill
01006910 g     F .text	00000120 __pow5mult
01011cf0 g     F .text	000010a4 ___vfiprintf_internal_r
0101700c g     O .bss	00000004 __nlocale_changed
010099f4 g     F .text	00000008 __umodsi3
01017a94 g       *ABS*	00000000 end
0100f340 g     F .text	000000b8 altera_avalon_jtag_uart_init
01012fd8 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100fd14 g     F .text	00000088 alt_avalon_timer_sc_init
01009a94 g     F .text	00000080 __clzsi2
0100fa60 g     F .text	00000240 altera_avalon_jtag_uart_write
01004204 g     F .text	00000004 __sfp_lock_acquire
01005860 g     F .text	000000e4 memchr
0100fec0 g     F .text	00000078 alt_up_character_lcd_write
010007a4 g     F .text	00001eac ___vfprintf_internal_r
01004598 g     F .text	00000314 _free_r
01011780 g     F .text	000001b0 __call_exitprocs
01017010 g     O .bss	00000004 __mlocale_changed
010152fc g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
0101706c g     O .bss	00000004 _alt_tick_rate
010064a0 g     F .text	0000014c __lshift
01017070 g     O .bss	00000004 _alt_nticks
01011c04 g     F .text	0000001c signal
0100a6ec g     F .text	00000120 read
0100ab3c g     F .text	00000088 alt_sys_init
01010124 g     F .text	000000b0 alt_up_character_lcd_shift_display
01011648 g     F .text	00000134 __register_exitproc
01013648 g     O .rwdata	00000200 buffer
010103b4 g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
010065ec g     F .text	000001e8 __multiply
010101d4 g     F .text	00000090 alt_up_character_lcd_erase_pos
0100f6d4 g     F .text	00000074 altera_avalon_jtag_uart_close
01013648 g       *ABS*	00000000 __ram_rwdata_start
01012fdc g       *ABS*	00000000 __ram_rodata_start
01017074 g     O .bss	00000028 __malloc_current_mallinfo
01006198 g     F .text	0000017c __d2b
0101700a g     O .bss	00000002 myFileHandle2
01017034 g     O .bss	00000004 initialized
0100f1f8 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01011340 g     F .text	000000b8 alt_get_fd
0101729c g     O .bss	00000014 search_data
01009f60 g     F .text	000000c8 __fpcmp_parts_d
01007890 g     F .text	00000070 _close_r
010115b8 g     F .text	00000074 memcmp
0100f2a8 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01017a94 g       *ABS*	00000000 __alt_stack_base
0100f2f0 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01002674 g     F .text	0000013c __swsetup_r
0100904c g     F .text	00000258 __divdf3
0100437c g     F .text	000000f0 __sfp
010172b0 g     O .bss	00000054 boot_sector_data
01005ffc g     F .text	00000058 __copybits
01013c54 g     O .rwdata	00000408 __malloc_av_
01004210 g     F .text	00000004 __sinit_lock_release
01008c88 g     F .text	000003c4 __muldf3
010074fc g     F .text	00000060 __sread
01010320 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
01011220 g     F .text	00000120 alt_find_file
010107fc g     F .text	000000b4 alt_dev_llist_insert
0100a6ac g     F .text	00000020 __malloc_lock
0100a8cc g     F .text	000000bc sbrk
01003f7c g     F .text	000001fc _fflush_r
010077dc g     F .text	000000b4 _calloc_r
01017008 g       *ABS*	00000000 __bss_start
0101709c g     O .bss	00000200 data
01005ac4 g     F .text	00000098 memset
01000204 g     F .text	00000118 main
01017030 g     O .bss	00000004 alt_envp
01017020 g     O .bss	00000004 __malloc_max_total_mem
0100f250 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01007748 g     F .text	0000001c __swbuf
0100e418 g     F .text	0000008c alt_up_sd_card_get_attributes
0100abfc g     F .text	000000c8 Write_Sector_Data
0100e838 g     F .text	0000063c alt_up_sd_card_write
01010074 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01007410 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01007a10 g     F .text	00000014 fclose
01017904 g     O .bss	00000190 _atexit0
010029c8 g     F .text	000015b4 _dtoa_r
01005120 g     F .text	00000740 _malloc_r
01015314 g     O .rwdata	00000004 alt_errno
01011590 g     F .text	00000028 _fiprintf_r
01011a8c g     F .text	00000010 _init_signal
01004e10 g     F .text	000000b8 _fwalk
01006b50 g     F .text	00000104 putc
0100992c g     F .text	00000060 __divsi3
010133ec g     O .rodata	00000014 __thenan_df
0100fe80 g     F .text	00000040 alt_up_character_lcd_open_dev
0100446c g     F .text	0000012c _malloc_trim_r
01012fdc g       *ABS*	00000000 __CTOR_END__
01017040 g     O .bss	00000004 status_register
0100fe4c g     F .text	00000034 alt_up_character_lcd_init
0100755c g     F .text	000000bc strcmp
01017048 g     O .bss	00000004 command_register
01012fdc g       *ABS*	00000000 __flash_rodata_start
01012fdc g       *ABS*	00000000 __DTOR_LIST__
01010624 g     F .text	00000040 alt_up_rs232_open_dev
0100932c g     F .text	00000088 __nedf2
0100ab08 g     F .text	00000034 alt_irq_init
0100a86c g     F .text	00000060 alt_release_fd
0100ae10 g     F .text	000000b8 get_cluster_flag
01010264 g     F .text	00000034 alt_up_character_lcd_cursor_off
01013400 g     O .rodata	00000100 __clz_tab
0100b3e0 g     F .text	000002b8 Write_File_Record_At_Offset
01017014 g     O .bss	00000004 _PathLocale
01011500 g     F .text	00000014 atexit
01007764 g     F .text	00000078 _write_r
01004f70 g     F .text	0000001c setlocale
0100b698 g     F .text	00000640 Check_for_DOS_FAT
0100d534 g     F .text	000002d4 create_file
010152e8 g     O .rwdata	00000004 _impure_ptr
01017044 g     O .bss	00000004 CSD_register_w0
01017028 g     O .bss	00000004 alt_argc
0100031c g     F .text	00000134 writeTest
01010974 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01005d18 g     F .text	00000080 __ulp
01007330 g     F .text	00000040 __isinfd
010042c8 g     F .text	00000018 __fp_unlock_all
01015300 g     O .rwdata	00000008 alt_fs_list
0100beac g     F .text	00000290 check_file_name_for_FAT16_compliance
01017050 g     O .bss	00000004 buffer_memory
010102cc g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01010444 g     F .text	00000048 alt_up_rs232_write_data
01000020 g       *ABS*	00000000 __ram_exceptions_start
01004edc g     F .text	00000010 localeconv
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
01017054 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
01015328 g       *ABS*	00000000 _edata
01017a94 g       *ABS*	00000000 _end
01017304 g     O .bss	00000500 active_files
010001b8 g       *ABS*	00000000 __ram_exceptions_end
0100d808 g     F .text	00000154 copy_file_record_name_to_string
0100f748 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100bcd8 g     F .text	00000104 Look_for_FAT16
01000450 g     F .text	00000138 readTest
01007480 g     F .text	0000007c __swrite
010152f8 g     O .rwdata	00000004 __malloc_trim_threshold
01011200 g     F .text	00000020 altera_nios2_qsys_irq_init
01011514 g     F .text	00000038 exit
0101154c g     F .text	00000044 fiprintf
0101162c g     F .text	0000001c _vfiprintf_r
0100dc30 g     F .text	000003b0 alt_up_sd_card_find_next
01004d48 g     F .text	000000c8 _fwalk_reent
01006314 g     F .text	0000018c __mdiff
0100998c g     F .text	00000060 __modsi3
0100ad14 g     F .text	000000fc Read_Sector_Data
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01004208 g     F .text	00000004 __sfp_lock_release
0100ff38 g     F .text	00000078 alt_up_character_lcd_string
01012df8 g     F .text	00000020 _exit
01007370 g     F .text	00000030 __isnand
01010664 g     F .text	00000154 alt_alarm_start
010099fc g     F .text	00000098 __muldi3
0100f06c g     F .text	000000fc Read_Sector_Data_CRC
0100e4a4 g     F .text	00000394 alt_up_sd_card_read
01004f8c g     F .text	00000194 __smakebuf_r
010006d8 g     F .text	00000074 strlen
01011a28 g     F .text	00000064 _init_signal_r
01010e74 g     F .text	00000188 open
0100943c g     F .text	00000088 __gedf2
010114ec g     F .text	00000014 __assert
01010a6c g     F .text	00000030 alt_icache_flush_all
0100fffc g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0101531c g     O .rwdata	00000004 alt_priority_mask
01002650 g     F .text	00000024 __vfprintf_internal
01008b94 g     F .text	00000080 __subdf3
01005bf4 g     F .text	000000c4 __lo0bits
01015320 g     O .rwdata	00000008 alt_alarm_list
01010910 g     F .text	00000064 _do_ctors
01011b50 g     F .text	00000014 __sigtramp
01010378 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0100a028 g     F .text	000000fc close
0100a404 g     F .text	00000080 alt_load
01009b14 g     F .text	00000314 __pack_d
0100c1fc g     F .text	000002ec match_file_record_to_name_ext
01011a14 g     F .text	00000014 raise
00000000  w      *UND*	00000000 free
0100420c g     F .text	00000004 __sinit_lock_acquire
01006810 g     F .text	00000100 __multadd
01005b5c g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18de0104 	addi	r3,r3,30724
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18de0104 	addi	r3,r3,30724
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d4:	d6b4ba14 	ori	gp,gp,53992
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001dc:	109c0214 	ori	r2,r2,28680

    movhi r3, %hi(__bss_end)
 10001e0:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001e4:	18dea514 	ori	r3,r3,31380

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	100a4040 	call	100a404 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	100a6400 	call	100a640 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <main>:
char data[512];

short int myFileHandle;
short int myFileHandle2;

int main(void) {
 1000204:	defffb04 	addi	sp,sp,-20
 1000208:	dfc00415 	stw	ra,16(sp)
 100020c:	df000315 	stw	fp,12(sp)
 1000210:	df000304 	addi	fp,sp,12
	printf("SD Card Access Test\n");
 1000214:	01004074 	movhi	r4,257
 1000218:	210bf704 	addi	r4,r4,12252
 100021c:	10006c40 	call	10006c4 <puts>

	alt_up_sd_card_dev *device_reference = NULL;
 1000220:	e03ffe15 	stw	zero,-8(fp)
	int connected = 0;
 1000224:	e03ffd15 	stw	zero,-12(fp)

	printf("Opening SDCard\n");
 1000228:	01004074 	movhi	r4,257
 100022c:	210bfc04 	addi	r4,r4,12272
 1000230:	10006c40 	call	10006c4 <puts>
	device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0");
 1000234:	01004074 	movhi	r4,257
 1000238:	210c0004 	addi	r4,r4,12288
 100023c:	100d95c0 	call	100d95c <alt_up_sd_card_open_dev>
 1000240:	e0bffe15 	stw	r2,-8(fp)
	if (device_reference == NULL) {
 1000244:	e0bffe17 	ldw	r2,-8(fp)
 1000248:	1004c03a 	cmpne	r2,r2,zero
 100024c:	1000061e 	bne	r2,zero,1000268 <main+0x64>
		printf("SDCard Open FAILED\n");
 1000250:	01004074 	movhi	r4,257
 1000254:	210c0b04 	addi	r4,r4,12332
 1000258:	10006c40 	call	10006c4 <puts>
		return 0;
 100025c:	0005883a 	mov	r2,zero
 1000260:	e0bfff15 	stw	r2,-4(fp)
 1000264:	00002706 	br	1000304 <main+0x100>
	} else{
		printf("SDCard Open PASSED\n");
 1000268:	01004074 	movhi	r4,257
 100026c:	210c1004 	addi	r4,r4,12352
 1000270:	10006c40 	call	10006c4 <puts>
 1000274:	00000006 	br	1000278 <main+0x74>
		while (1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())) {
 1000278:	e0bffd17 	ldw	r2,-12(fp)
 100027c:	1004c03a 	cmpne	r2,r2,zero
 1000280:	1000151e 	bne	r2,zero,10002d8 <main+0xd4>
 1000284:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 1000288:	1005003a 	cmpeq	r2,r2,zero
 100028c:	1000121e 	bne	r2,zero,10002d8 <main+0xd4>
				printf("Card connected.\n");
 1000290:	01004074 	movhi	r4,257
 1000294:	210c1504 	addi	r4,r4,12372
 1000298:	10006c40 	call	10006c4 <puts>
				if (alt_up_sd_card_is_FAT16()) {
 100029c:	100dae80 	call	100dae8 <alt_up_sd_card_is_FAT16>
 10002a0:	1005003a 	cmpeq	r2,r2,zero
 10002a4:	1000061e 	bne	r2,zero,10002c0 <main+0xbc>
					printf("FAT16 file system detected.\n\n");
 10002a8:	01004074 	movhi	r4,257
 10002ac:	210c1904 	addi	r4,r4,12388
 10002b0:	10006c40 	call	10006c4 <puts>
					writeTest();
 10002b4:	100031c0 	call	100031c <writeTest>
					readTest();
 10002b8:	10004500 	call	1000450 <readTest>
 10002bc:	00000306 	br	10002cc <main+0xc8>
				} else {
					printf("Unknown file system.\n");
 10002c0:	01004074 	movhi	r4,257
 10002c4:	210c2104 	addi	r4,r4,12420
 10002c8:	10006c40 	call	10006c4 <puts>
				}
				connected = 1;
 10002cc:	00800044 	movi	r2,1
 10002d0:	e0bffd15 	stw	r2,-12(fp)
		printf("SDCard Open FAILED\n");
		return 0;
	} else{
		printf("SDCard Open PASSED\n");
		while (1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())) {
 10002d4:	003fe806 	br	1000278 <main+0x74>
					readTest();
				} else {
					printf("Unknown file system.\n");
				}
				connected = 1;
			} else if ((connected == 1) && (alt_up_sd_card_is_Present() == false)) {
 10002d8:	e0bffd17 	ldw	r2,-12(fp)
 10002dc:	10800058 	cmpnei	r2,r2,1
 10002e0:	103fe51e 	bne	r2,zero,1000278 <main+0x74>
 10002e4:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 10002e8:	1004c03a 	cmpne	r2,r2,zero
 10002ec:	103fe21e 	bne	r2,zero,1000278 <main+0x74>
				printf("Card disconnected.\n");
 10002f0:	01004074 	movhi	r4,257
 10002f4:	210c2704 	addi	r4,r4,12444
 10002f8:	10006c40 	call	10006c4 <puts>
				connected = 0;
 10002fc:	e03ffd15 	stw	zero,-12(fp)
			}
		}
 1000300:	003fdd06 	br	1000278 <main+0x74>
	}

	return 0;
}
 1000304:	e0bfff17 	ldw	r2,-4(fp)
 1000308:	e037883a 	mov	sp,fp
 100030c:	dfc00117 	ldw	ra,4(sp)
 1000310:	df000017 	ldw	fp,0(sp)
 1000314:	dec00204 	addi	sp,sp,8
 1000318:	f800283a 	ret

0100031c <writeTest>:

void writeTest(){
 100031c:	defffc04 	addi	sp,sp,-16
 1000320:	dfc00315 	stw	ra,12(sp)
 1000324:	df000215 	stw	fp,8(sp)
 1000328:	df000204 	addi	fp,sp,8
	printf("\n\nWriting Test\n");
 100032c:	01004074 	movhi	r4,257
 1000330:	210c2c04 	addi	r4,r4,12464
 1000334:	10006c40 	call	10006c4 <puts>

	bool write_signal;
	myFileHandle = alt_up_sd_card_fopen("test1.txt", false);			// create a new file test.txt to write to
 1000338:	01004074 	movhi	r4,257
 100033c:	210c3004 	addi	r4,r4,12480
 1000340:	000b883a 	mov	r5,zero
 1000344:	100dfe00 	call	100dfe0 <alt_up_sd_card_fopen>
 1000348:	d0a7480d 	sth	r2,-25312(gp)
	if(myFileHandle != -1) {
 100034c:	d0a7480b 	ldhu	r2,-25312(gp)
 1000350:	10bfffcc 	andi	r2,r2,65535
 1000354:	10a0001c 	xori	r2,r2,32768
 1000358:	10a00004 	addi	r2,r2,-32768
 100035c:	10bfffe0 	cmpeqi	r2,r2,-1
 1000360:	1000331e 	bne	r2,zero,1000430 <writeTest+0x114>
		printf("File was created and opened\n");
 1000364:	01004074 	movhi	r4,257
 1000368:	210c3304 	addi	r4,r4,12492
 100036c:	10006c40 	call	10006c4 <puts>
		int index = 0;
 1000370:	e03ffe15 	stw	zero,-8(fp)
		// write data in the buffer to the file
		while(buffer[index] != '\0'){
 1000374:	00001806 	br	10003d8 <writeTest+0xbc>
			write_signal = alt_up_sd_card_write(myFileHandle, buffer[index]);
 1000378:	d0a7480b 	ldhu	r2,-25312(gp)
 100037c:	113fffcc 	andi	r4,r2,65535
 1000380:	2120001c 	xori	r4,r4,32768
 1000384:	21200004 	addi	r4,r4,-32768
 1000388:	e0fffe17 	ldw	r3,-8(fp)
 100038c:	00804074 	movhi	r2,257
 1000390:	108d9204 	addi	r2,r2,13896
 1000394:	10c5883a 	add	r2,r2,r3
 1000398:	10800003 	ldbu	r2,0(r2)
 100039c:	11403fcc 	andi	r5,r2,255
 10003a0:	2940201c 	xori	r5,r5,128
 10003a4:	297fe004 	addi	r5,r5,-128
 10003a8:	100e8380 	call	100e838 <alt_up_sd_card_write>
 10003ac:	e0bfff15 	stw	r2,-4(fp)
			if(write_signal == false) {
 10003b0:	e0bfff17 	ldw	r2,-4(fp)
 10003b4:	1004c03a 	cmpne	r2,r2,zero
 10003b8:	1000041e 	bne	r2,zero,10003cc <writeTest+0xb0>
				printf("Error writing to file...\n");
 10003bc:	01004074 	movhi	r4,257
 10003c0:	210c3a04 	addi	r4,r4,12520
 10003c4:	10006c40 	call	10006c4 <puts>
				return;
 10003c8:	00001c06 	br	100043c <writeTest+0x120>
			}
			index++;
 10003cc:	e0bffe17 	ldw	r2,-8(fp)
 10003d0:	10800044 	addi	r2,r2,1
 10003d4:	e0bffe15 	stw	r2,-8(fp)
	myFileHandle = alt_up_sd_card_fopen("test1.txt", false);			// create a new file test.txt to write to
	if(myFileHandle != -1) {
		printf("File was created and opened\n");
		int index = 0;
		// write data in the buffer to the file
		while(buffer[index] != '\0'){
 10003d8:	e0fffe17 	ldw	r3,-8(fp)
 10003dc:	00804074 	movhi	r2,257
 10003e0:	108d9204 	addi	r2,r2,13896
 10003e4:	10c5883a 	add	r2,r2,r3
 10003e8:	10800003 	ldbu	r2,0(r2)
 10003ec:	10803fcc 	andi	r2,r2,255
 10003f0:	1080201c 	xori	r2,r2,128
 10003f4:	10bfe004 	addi	r2,r2,-128
 10003f8:	1004c03a 	cmpne	r2,r2,zero
 10003fc:	103fde1e 	bne	r2,zero,1000378 <writeTest+0x5c>
				printf("Error writing to file...\n");
				return;
			}
			index++;
		}
		printf("Writing Done!!!\n");
 1000400:	01004074 	movhi	r4,257
 1000404:	210c4104 	addi	r4,r4,12548
 1000408:	10006c40 	call	10006c4 <puts>
		printf("Closing file...\n");
 100040c:	01004074 	movhi	r4,257
 1000410:	210c4504 	addi	r4,r4,12564
 1000414:	10006c40 	call	10006c4 <puts>
		alt_up_sd_card_fclose(myFileHandle);
 1000418:	d0a7480b 	ldhu	r2,-25312(gp)
 100041c:	113fffcc 	andi	r4,r2,65535
 1000420:	2120001c 	xori	r4,r4,32768
 1000424:	21200004 	addi	r4,r4,-32768
 1000428:	100ee740 	call	100ee74 <alt_up_sd_card_fclose>
 100042c:	00000306 	br	100043c <writeTest+0x120>
	}
	else
		printf("File NOT created or opened\n");
 1000430:	01004074 	movhi	r4,257
 1000434:	210c4904 	addi	r4,r4,12580
 1000438:	10006c40 	call	10006c4 <puts>
}
 100043c:	e037883a 	mov	sp,fp
 1000440:	dfc00117 	ldw	ra,4(sp)
 1000444:	df000017 	ldw	fp,0(sp)
 1000448:	dec00204 	addi	sp,sp,8
 100044c:	f800283a 	ret

01000450 <readTest>:


void readTest(){
 1000450:	defffc04 	addi	sp,sp,-16
 1000454:	dfc00315 	stw	ra,12(sp)
 1000458:	df000215 	stw	fp,8(sp)
 100045c:	dc000115 	stw	r16,4(sp)
 1000460:	df000104 	addi	fp,sp,4
	printf("\n\nReading Test\n");
 1000464:	01004074 	movhi	r4,257
 1000468:	210c5004 	addi	r4,r4,12608
 100046c:	10006c40 	call	10006c4 <puts>
	myFileHandle2 = alt_up_sd_card_fopen("test1.txt", false);			// create a new file test.txt to write to
 1000470:	01004074 	movhi	r4,257
 1000474:	210c3004 	addi	r4,r4,12480
 1000478:	000b883a 	mov	r5,zero
 100047c:	100dfe00 	call	100dfe0 <alt_up_sd_card_fopen>
 1000480:	d0a7488d 	sth	r2,-25310(gp)
	if(myFileHandle2 < 0)
 1000484:	d0a7488b 	ldhu	r2,-25310(gp)
 1000488:	10bfffcc 	andi	r2,r2,65535
 100048c:	10a0001c 	xori	r2,r2,32768
 1000490:	10a00004 	addi	r2,r2,-32768
 1000494:	1004403a 	cmpge	r2,r2,zero
 1000498:	1000081e 	bne	r2,zero,10004bc <readTest+0x6c>
		printf("Problem creating file. Error %i\n", myFileHandle2);
 100049c:	d0a7488b 	ldhu	r2,-25310(gp)
 10004a0:	117fffcc 	andi	r5,r2,65535
 10004a4:	2960001c 	xori	r5,r5,32768
 10004a8:	29600004 	addi	r5,r5,-32768
 10004ac:	01004074 	movhi	r4,257
 10004b0:	210c5404 	addi	r4,r4,12624
 10004b4:	10005880 	call	1000588 <printf>
 10004b8:	00002d06 	br	1000570 <readTest+0x120>
	else{
		printf("SD accesses successfully, reading data...\n");
 10004bc:	01004074 	movhi	r4,257
 10004c0:	210c5d04 	addi	r4,r4,12660
 10004c4:	10006c40 	call	10006c4 <puts>
		printf("Data read from file = \n");
 10004c8:	01004074 	movhi	r4,257
 10004cc:	210c6804 	addi	r4,r4,12704
 10004d0:	10006c40 	call	10006c4 <puts>
		int i;
		for (i = 0; i < 32; i++) {	//  data32 is the new line character \n
 10004d4:	e03fff15 	stw	zero,-4(fp)
 10004d8:	00001706 	br	1000538 <readTest+0xe8>
			data[i] = alt_up_sd_card_read(myFileHandle2);
 10004dc:	e43fff17 	ldw	r16,-4(fp)
 10004e0:	d0a7488b 	ldhu	r2,-25310(gp)
 10004e4:	113fffcc 	andi	r4,r2,65535
 10004e8:	2120001c 	xori	r4,r4,32768
 10004ec:	21200004 	addi	r4,r4,-32768
 10004f0:	100e4a40 	call	100e4a4 <alt_up_sd_card_read>
 10004f4:	1007883a 	mov	r3,r2
 10004f8:	00804074 	movhi	r2,257
 10004fc:	109c2704 	addi	r2,r2,28828
 1000500:	1405883a 	add	r2,r2,r16
 1000504:	10c00005 	stb	r3,0(r2)
			printf("%c", data[i]);
 1000508:	e0ffff17 	ldw	r3,-4(fp)
 100050c:	00804074 	movhi	r2,257
 1000510:	109c2704 	addi	r2,r2,28828
 1000514:	10c5883a 	add	r2,r2,r3
 1000518:	10800003 	ldbu	r2,0(r2)
 100051c:	11003fcc 	andi	r4,r2,255
 1000520:	2100201c 	xori	r4,r4,128
 1000524:	213fe004 	addi	r4,r4,-128
 1000528:	10006000 	call	1000600 <putchar>
		printf("Problem creating file. Error %i\n", myFileHandle2);
	else{
		printf("SD accesses successfully, reading data...\n");
		printf("Data read from file = \n");
		int i;
		for (i = 0; i < 32; i++) {	//  data32 is the new line character \n
 100052c:	e0bfff17 	ldw	r2,-4(fp)
 1000530:	10800044 	addi	r2,r2,1
 1000534:	e0bfff15 	stw	r2,-4(fp)
 1000538:	e0bfff17 	ldw	r2,-4(fp)
 100053c:	10800810 	cmplti	r2,r2,32
 1000540:	103fe61e 	bne	r2,zero,10004dc <readTest+0x8c>
			data[i] = alt_up_sd_card_read(myFileHandle2);
			printf("%c", data[i]);
		}
		printf("\nClosing file after reading...\n");
 1000544:	01004074 	movhi	r4,257
 1000548:	210c6e04 	addi	r4,r4,12728
 100054c:	10006c40 	call	10006c4 <puts>
		alt_up_sd_card_fclose(myFileHandle2);
 1000550:	d0a7488b 	ldhu	r2,-25310(gp)
 1000554:	113fffcc 	andi	r4,r2,65535
 1000558:	2120001c 	xori	r4,r4,32768
 100055c:	21200004 	addi	r4,r4,-32768
 1000560:	100ee740 	call	100ee74 <alt_up_sd_card_fclose>
		printf("We are done reading!\n");
 1000564:	01004074 	movhi	r4,257
 1000568:	210c7604 	addi	r4,r4,12760
 100056c:	10006c40 	call	10006c4 <puts>
	}
}
 1000570:	e037883a 	mov	sp,fp
 1000574:	dfc00217 	ldw	ra,8(sp)
 1000578:	df000117 	ldw	fp,4(sp)
 100057c:	dc000017 	ldw	r16,0(sp)
 1000580:	dec00304 	addi	sp,sp,12
 1000584:	f800283a 	ret

01000588 <printf>:
 1000588:	defffb04 	addi	sp,sp,-20
 100058c:	dfc00115 	stw	ra,4(sp)
 1000590:	d9400215 	stw	r5,8(sp)
 1000594:	d9800315 	stw	r6,12(sp)
 1000598:	d9c00415 	stw	r7,16(sp)
 100059c:	00804074 	movhi	r2,257
 10005a0:	1094ba04 	addi	r2,r2,21224
 10005a4:	10c00017 	ldw	r3,0(r2)
 10005a8:	200b883a 	mov	r5,r4
 10005ac:	d8800204 	addi	r2,sp,8
 10005b0:	19000217 	ldw	r4,8(r3)
 10005b4:	100d883a 	mov	r6,r2
 10005b8:	d8800015 	stw	r2,0(sp)
 10005bc:	10026500 	call	1002650 <__vfprintf_internal>
 10005c0:	dfc00117 	ldw	ra,4(sp)
 10005c4:	dec00504 	addi	sp,sp,20
 10005c8:	f800283a 	ret

010005cc <_printf_r>:
 10005cc:	defffc04 	addi	sp,sp,-16
 10005d0:	dfc00115 	stw	ra,4(sp)
 10005d4:	d9800215 	stw	r6,8(sp)
 10005d8:	d9c00315 	stw	r7,12(sp)
 10005dc:	280d883a 	mov	r6,r5
 10005e0:	21400217 	ldw	r5,8(r4)
 10005e4:	d8c00204 	addi	r3,sp,8
 10005e8:	180f883a 	mov	r7,r3
 10005ec:	d8c00015 	stw	r3,0(sp)
 10005f0:	10007a40 	call	10007a4 <___vfprintf_internal_r>
 10005f4:	dfc00117 	ldw	ra,4(sp)
 10005f8:	dec00404 	addi	sp,sp,16
 10005fc:	f800283a 	ret

01000600 <putchar>:
 1000600:	00804074 	movhi	r2,257
 1000604:	1094ba04 	addi	r2,r2,21224
 1000608:	11800017 	ldw	r6,0(r2)
 100060c:	200b883a 	mov	r5,r4
 1000610:	3009883a 	mov	r4,r6
 1000614:	31800217 	ldw	r6,8(r6)
 1000618:	1006c541 	jmpi	1006c54 <_putc_r>

0100061c <_putchar_r>:
 100061c:	21800217 	ldw	r6,8(r4)
 1000620:	1006c541 	jmpi	1006c54 <_putc_r>

01000624 <_puts_r>:
 1000624:	defff604 	addi	sp,sp,-40
 1000628:	dc400715 	stw	r17,28(sp)
 100062c:	2023883a 	mov	r17,r4
 1000630:	2809883a 	mov	r4,r5
 1000634:	dfc00915 	stw	ra,36(sp)
 1000638:	dcc00815 	stw	r19,32(sp)
 100063c:	2827883a 	mov	r19,r5
 1000640:	10006d80 	call	10006d8 <strlen>
 1000644:	89400217 	ldw	r5,8(r17)
 1000648:	00c04074 	movhi	r3,257
 100064c:	18cc7c04 	addi	r3,r3,12784
 1000650:	01c00044 	movi	r7,1
 1000654:	12000044 	addi	r8,r2,1
 1000658:	d8c00515 	stw	r3,20(sp)
 100065c:	d9c00615 	stw	r7,24(sp)
 1000660:	d8c00304 	addi	r3,sp,12
 1000664:	01c00084 	movi	r7,2
 1000668:	8809883a 	mov	r4,r17
 100066c:	d80d883a 	mov	r6,sp
 1000670:	d8c00015 	stw	r3,0(sp)
 1000674:	dcc00315 	stw	r19,12(sp)
 1000678:	da000215 	stw	r8,8(sp)
 100067c:	d9c00115 	stw	r7,4(sp)
 1000680:	d8800415 	stw	r2,16(sp)
 1000684:	10048ac0 	call	10048ac <__sfvwrite_r>
 1000688:	00ffffc4 	movi	r3,-1
 100068c:	10000626 	beq	r2,zero,10006a8 <_puts_r+0x84>
 1000690:	1805883a 	mov	r2,r3
 1000694:	dfc00917 	ldw	ra,36(sp)
 1000698:	dcc00817 	ldw	r19,32(sp)
 100069c:	dc400717 	ldw	r17,28(sp)
 10006a0:	dec00a04 	addi	sp,sp,40
 10006a4:	f800283a 	ret
 10006a8:	00c00284 	movi	r3,10
 10006ac:	1805883a 	mov	r2,r3
 10006b0:	dfc00917 	ldw	ra,36(sp)
 10006b4:	dcc00817 	ldw	r19,32(sp)
 10006b8:	dc400717 	ldw	r17,28(sp)
 10006bc:	dec00a04 	addi	sp,sp,40
 10006c0:	f800283a 	ret

010006c4 <puts>:
 10006c4:	00804074 	movhi	r2,257
 10006c8:	1094ba04 	addi	r2,r2,21224
 10006cc:	200b883a 	mov	r5,r4
 10006d0:	11000017 	ldw	r4,0(r2)
 10006d4:	10006241 	jmpi	1000624 <_puts_r>

010006d8 <strlen>:
 10006d8:	208000cc 	andi	r2,r4,3
 10006dc:	2011883a 	mov	r8,r4
 10006e0:	1000161e 	bne	r2,zero,100073c <strlen+0x64>
 10006e4:	20c00017 	ldw	r3,0(r4)
 10006e8:	017fbff4 	movhi	r5,65279
 10006ec:	297fbfc4 	addi	r5,r5,-257
 10006f0:	01e02074 	movhi	r7,32897
 10006f4:	39e02004 	addi	r7,r7,-32640
 10006f8:	1945883a 	add	r2,r3,r5
 10006fc:	11c4703a 	and	r2,r2,r7
 1000700:	00c6303a 	nor	r3,zero,r3
 1000704:	1886703a 	and	r3,r3,r2
 1000708:	18000c1e 	bne	r3,zero,100073c <strlen+0x64>
 100070c:	280d883a 	mov	r6,r5
 1000710:	380b883a 	mov	r5,r7
 1000714:	21000104 	addi	r4,r4,4
 1000718:	20800017 	ldw	r2,0(r4)
 100071c:	1187883a 	add	r3,r2,r6
 1000720:	1946703a 	and	r3,r3,r5
 1000724:	0084303a 	nor	r2,zero,r2
 1000728:	10c4703a 	and	r2,r2,r3
 100072c:	103ff926 	beq	r2,zero,1000714 <strlen+0x3c>
 1000730:	20800007 	ldb	r2,0(r4)
 1000734:	10000326 	beq	r2,zero,1000744 <strlen+0x6c>
 1000738:	21000044 	addi	r4,r4,1
 100073c:	20800007 	ldb	r2,0(r4)
 1000740:	103ffd1e 	bne	r2,zero,1000738 <strlen+0x60>
 1000744:	2205c83a 	sub	r2,r4,r8
 1000748:	f800283a 	ret

0100074c <__sprint_r>:
 100074c:	30800217 	ldw	r2,8(r6)
 1000750:	defffe04 	addi	sp,sp,-8
 1000754:	dc000015 	stw	r16,0(sp)
 1000758:	dfc00115 	stw	ra,4(sp)
 100075c:	3021883a 	mov	r16,r6
 1000760:	0007883a 	mov	r3,zero
 1000764:	1000061e 	bne	r2,zero,1000780 <__sprint_r+0x34>
 1000768:	1805883a 	mov	r2,r3
 100076c:	30000115 	stw	zero,4(r6)
 1000770:	dfc00117 	ldw	ra,4(sp)
 1000774:	dc000017 	ldw	r16,0(sp)
 1000778:	dec00204 	addi	sp,sp,8
 100077c:	f800283a 	ret
 1000780:	10048ac0 	call	10048ac <__sfvwrite_r>
 1000784:	1007883a 	mov	r3,r2
 1000788:	1805883a 	mov	r2,r3
 100078c:	80000115 	stw	zero,4(r16)
 1000790:	80000215 	stw	zero,8(r16)
 1000794:	dfc00117 	ldw	ra,4(sp)
 1000798:	dc000017 	ldw	r16,0(sp)
 100079c:	dec00204 	addi	sp,sp,8
 10007a0:	f800283a 	ret

010007a4 <___vfprintf_internal_r>:
 10007a4:	defea404 	addi	sp,sp,-1392
 10007a8:	dd815815 	stw	r22,1376(sp)
 10007ac:	dc015215 	stw	r16,1352(sp)
 10007b0:	d9c15115 	stw	r7,1348(sp)
 10007b4:	dfc15b15 	stw	ra,1388(sp)
 10007b8:	df015a15 	stw	fp,1384(sp)
 10007bc:	ddc15915 	stw	r23,1380(sp)
 10007c0:	dd415715 	stw	r21,1372(sp)
 10007c4:	dd015615 	stw	r20,1368(sp)
 10007c8:	dcc15515 	stw	r19,1364(sp)
 10007cc:	dc815415 	stw	r18,1360(sp)
 10007d0:	dc415315 	stw	r17,1356(sp)
 10007d4:	282d883a 	mov	r22,r5
 10007d8:	3021883a 	mov	r16,r6
 10007dc:	d9014f15 	stw	r4,1340(sp)
 10007e0:	1004ed00 	call	1004ed0 <_localeconv_r>
 10007e4:	10800017 	ldw	r2,0(r2)
 10007e8:	d9c15117 	ldw	r7,1348(sp)
 10007ec:	d8814915 	stw	r2,1316(sp)
 10007f0:	d8814f17 	ldw	r2,1340(sp)
 10007f4:	10000226 	beq	r2,zero,1000800 <___vfprintf_internal_r+0x5c>
 10007f8:	10800e17 	ldw	r2,56(r2)
 10007fc:	10020d26 	beq	r2,zero,1001034 <___vfprintf_internal_r+0x890>
 1000800:	b080030b 	ldhu	r2,12(r22)
 1000804:	1080020c 	andi	r2,r2,8
 1000808:	10020e26 	beq	r2,zero,1001044 <___vfprintf_internal_r+0x8a0>
 100080c:	b0800417 	ldw	r2,16(r22)
 1000810:	10020c26 	beq	r2,zero,1001044 <___vfprintf_internal_r+0x8a0>
 1000814:	b200030b 	ldhu	r8,12(r22)
 1000818:	00800284 	movi	r2,10
 100081c:	40c0068c 	andi	r3,r8,26
 1000820:	18802f1e 	bne	r3,r2,10008e0 <___vfprintf_internal_r+0x13c>
 1000824:	b080038f 	ldh	r2,14(r22)
 1000828:	10002d16 	blt	r2,zero,10008e0 <___vfprintf_internal_r+0x13c>
 100082c:	b240038b 	ldhu	r9,14(r22)
 1000830:	b2800717 	ldw	r10,28(r22)
 1000834:	b2c00917 	ldw	r11,36(r22)
 1000838:	d9014f17 	ldw	r4,1340(sp)
 100083c:	dc402904 	addi	r17,sp,164
 1000840:	d8804004 	addi	r2,sp,256
 1000844:	00c10004 	movi	r3,1024
 1000848:	423fff4c 	andi	r8,r8,65533
 100084c:	800d883a 	mov	r6,r16
 1000850:	880b883a 	mov	r5,r17
 1000854:	da002c0d 	sth	r8,176(sp)
 1000858:	da402c8d 	sth	r9,178(sp)
 100085c:	da803015 	stw	r10,192(sp)
 1000860:	dac03215 	stw	r11,200(sp)
 1000864:	d8802d15 	stw	r2,180(sp)
 1000868:	d8c02e15 	stw	r3,184(sp)
 100086c:	d8802915 	stw	r2,164(sp)
 1000870:	d8c02b15 	stw	r3,172(sp)
 1000874:	d8002f15 	stw	zero,188(sp)
 1000878:	10007a40 	call	10007a4 <___vfprintf_internal_r>
 100087c:	d8814b15 	stw	r2,1324(sp)
 1000880:	10000416 	blt	r2,zero,1000894 <___vfprintf_internal_r+0xf0>
 1000884:	d9014f17 	ldw	r4,1340(sp)
 1000888:	880b883a 	mov	r5,r17
 100088c:	1003f7c0 	call	1003f7c <_fflush_r>
 1000890:	1002321e 	bne	r2,zero,100115c <___vfprintf_internal_r+0x9b8>
 1000894:	d8802c0b 	ldhu	r2,176(sp)
 1000898:	1080100c 	andi	r2,r2,64
 100089c:	10000326 	beq	r2,zero,10008ac <___vfprintf_internal_r+0x108>
 10008a0:	b080030b 	ldhu	r2,12(r22)
 10008a4:	10801014 	ori	r2,r2,64
 10008a8:	b080030d 	sth	r2,12(r22)
 10008ac:	d8814b17 	ldw	r2,1324(sp)
 10008b0:	dfc15b17 	ldw	ra,1388(sp)
 10008b4:	df015a17 	ldw	fp,1384(sp)
 10008b8:	ddc15917 	ldw	r23,1380(sp)
 10008bc:	dd815817 	ldw	r22,1376(sp)
 10008c0:	dd415717 	ldw	r21,1372(sp)
 10008c4:	dd015617 	ldw	r20,1368(sp)
 10008c8:	dcc15517 	ldw	r19,1364(sp)
 10008cc:	dc815417 	ldw	r18,1360(sp)
 10008d0:	dc415317 	ldw	r17,1356(sp)
 10008d4:	dc015217 	ldw	r16,1352(sp)
 10008d8:	dec15c04 	addi	sp,sp,1392
 10008dc:	f800283a 	ret
 10008e0:	0005883a 	mov	r2,zero
 10008e4:	0007883a 	mov	r3,zero
 10008e8:	dd401904 	addi	r21,sp,100
 10008ec:	d8814215 	stw	r2,1288(sp)
 10008f0:	802f883a 	mov	r23,r16
 10008f4:	d8c14315 	stw	r3,1292(sp)
 10008f8:	d8014b15 	stw	zero,1324(sp)
 10008fc:	d8014815 	stw	zero,1312(sp)
 1000900:	d8014415 	stw	zero,1296(sp)
 1000904:	d8014715 	stw	zero,1308(sp)
 1000908:	dd400c15 	stw	r21,48(sp)
 100090c:	d8000e15 	stw	zero,56(sp)
 1000910:	d8000d15 	stw	zero,52(sp)
 1000914:	b8800007 	ldb	r2,0(r23)
 1000918:	10001926 	beq	r2,zero,1000980 <___vfprintf_internal_r+0x1dc>
 100091c:	00c00944 	movi	r3,37
 1000920:	10c01726 	beq	r2,r3,1000980 <___vfprintf_internal_r+0x1dc>
 1000924:	b821883a 	mov	r16,r23
 1000928:	00000106 	br	1000930 <___vfprintf_internal_r+0x18c>
 100092c:	10c00326 	beq	r2,r3,100093c <___vfprintf_internal_r+0x198>
 1000930:	84000044 	addi	r16,r16,1
 1000934:	80800007 	ldb	r2,0(r16)
 1000938:	103ffc1e 	bne	r2,zero,100092c <___vfprintf_internal_r+0x188>
 100093c:	85e7c83a 	sub	r19,r16,r23
 1000940:	98000e26 	beq	r19,zero,100097c <___vfprintf_internal_r+0x1d8>
 1000944:	dc800e17 	ldw	r18,56(sp)
 1000948:	dc400d17 	ldw	r17,52(sp)
 100094c:	008001c4 	movi	r2,7
 1000950:	94e5883a 	add	r18,r18,r19
 1000954:	8c400044 	addi	r17,r17,1
 1000958:	adc00015 	stw	r23,0(r21)
 100095c:	dc800e15 	stw	r18,56(sp)
 1000960:	acc00115 	stw	r19,4(r21)
 1000964:	dc400d15 	stw	r17,52(sp)
 1000968:	14428b16 	blt	r2,r17,1001398 <___vfprintf_internal_r+0xbf4>
 100096c:	ad400204 	addi	r21,r21,8
 1000970:	d9014b17 	ldw	r4,1324(sp)
 1000974:	24c9883a 	add	r4,r4,r19
 1000978:	d9014b15 	stw	r4,1324(sp)
 100097c:	802f883a 	mov	r23,r16
 1000980:	b8800007 	ldb	r2,0(r23)
 1000984:	10013c26 	beq	r2,zero,1000e78 <___vfprintf_internal_r+0x6d4>
 1000988:	bdc00044 	addi	r23,r23,1
 100098c:	d8000405 	stb	zero,16(sp)
 1000990:	b8c00007 	ldb	r3,0(r23)
 1000994:	04ffffc4 	movi	r19,-1
 1000998:	d8014c15 	stw	zero,1328(sp)
 100099c:	d8014a15 	stw	zero,1320(sp)
 10009a0:	d8c14d15 	stw	r3,1332(sp)
 10009a4:	bdc00044 	addi	r23,r23,1
 10009a8:	d9414d17 	ldw	r5,1332(sp)
 10009ac:	00801604 	movi	r2,88
 10009b0:	28fff804 	addi	r3,r5,-32
 10009b4:	10c06036 	bltu	r2,r3,1000b38 <___vfprintf_internal_r+0x394>
 10009b8:	18c5883a 	add	r2,r3,r3
 10009bc:	1085883a 	add	r2,r2,r2
 10009c0:	00c04034 	movhi	r3,256
 10009c4:	18c27504 	addi	r3,r3,2516
 10009c8:	10c5883a 	add	r2,r2,r3
 10009cc:	11000017 	ldw	r4,0(r2)
 10009d0:	2000683a 	jmp	r4
 10009d4:	01001948 	cmpgei	r4,zero,101
 10009d8:	01000b38 	rdprs	r4,zero,44
 10009dc:	01000b38 	rdprs	r4,zero,44
 10009e0:	01001934 	movhi	r4,100
 10009e4:	01000b38 	rdprs	r4,zero,44
 10009e8:	01000b38 	rdprs	r4,zero,44
 10009ec:	01000b38 	rdprs	r4,zero,44
 10009f0:	01000b38 	rdprs	r4,zero,44
 10009f4:	01000b38 	rdprs	r4,zero,44
 10009f8:	01000b38 	rdprs	r4,zero,44
 10009fc:	01001714 	movui	r4,92
 1000a00:	01001924 	muli	r4,zero,100
 1000a04:	01000b38 	rdprs	r4,zero,44
 1000a08:	0100172c 	andhi	r4,zero,92
 1000a0c:	010019c0 	call	10019c <__alt_mem_onchip_memory2_0+0x10019c>
 1000a10:	01000b38 	rdprs	r4,zero,44
 1000a14:	010019ac 	andhi	r4,zero,102
 1000a18:	01001974 	movhi	r4,101
 1000a1c:	01001974 	movhi	r4,101
 1000a20:	01001974 	movhi	r4,101
 1000a24:	01001974 	movhi	r4,101
 1000a28:	01001974 	movhi	r4,101
 1000a2c:	01001974 	movhi	r4,101
 1000a30:	01001974 	movhi	r4,101
 1000a34:	01001974 	movhi	r4,101
 1000a38:	01001974 	movhi	r4,101
 1000a3c:	01000b38 	rdprs	r4,zero,44
 1000a40:	01000b38 	rdprs	r4,zero,44
 1000a44:	01000b38 	rdprs	r4,zero,44
 1000a48:	01000b38 	rdprs	r4,zero,44
 1000a4c:	01000b38 	rdprs	r4,zero,44
 1000a50:	01000b38 	rdprs	r4,zero,44
 1000a54:	01000b38 	rdprs	r4,zero,44
 1000a58:	01000b38 	rdprs	r4,zero,44
 1000a5c:	01000b38 	rdprs	r4,zero,44
 1000a60:	01000b38 	rdprs	r4,zero,44
 1000a64:	01001190 	cmplti	r4,zero,70
 1000a68:	010017fc 	xorhi	r4,zero,95
 1000a6c:	01000b38 	rdprs	r4,zero,44
 1000a70:	010017fc 	xorhi	r4,zero,95
 1000a74:	01000b38 	rdprs	r4,zero,44
 1000a78:	01000b38 	rdprs	r4,zero,44
 1000a7c:	01000b38 	rdprs	r4,zero,44
 1000a80:	01000b38 	rdprs	r4,zero,44
 1000a84:	01001960 	cmpeqi	r4,zero,101
 1000a88:	01000b38 	rdprs	r4,zero,44
 1000a8c:	01000b38 	rdprs	r4,zero,44
 1000a90:	01001244 	movi	r4,73
 1000a94:	01000b38 	rdprs	r4,zero,44
 1000a98:	01000b38 	rdprs	r4,zero,44
 1000a9c:	01000b38 	rdprs	r4,zero,44
 1000aa0:	01000b38 	rdprs	r4,zero,44
 1000aa4:	01000b38 	rdprs	r4,zero,44
 1000aa8:	01001290 	cmplti	r4,zero,74
 1000aac:	01000b38 	rdprs	r4,zero,44
 1000ab0:	01000b38 	rdprs	r4,zero,44
 1000ab4:	010018b0 	cmpltui	r4,zero,98
 1000ab8:	01000b38 	rdprs	r4,zero,44
 1000abc:	01000b38 	rdprs	r4,zero,44
 1000ac0:	01000b38 	rdprs	r4,zero,44
 1000ac4:	01000b38 	rdprs	r4,zero,44
 1000ac8:	01000b38 	rdprs	r4,zero,44
 1000acc:	01000b38 	rdprs	r4,zero,44
 1000ad0:	01000b38 	rdprs	r4,zero,44
 1000ad4:	01000b38 	rdprs	r4,zero,44
 1000ad8:	01000b38 	rdprs	r4,zero,44
 1000adc:	01000b38 	rdprs	r4,zero,44
 1000ae0:	01001884 	movi	r4,98
 1000ae4:	0100119c 	xori	r4,zero,70
 1000ae8:	010017fc 	xorhi	r4,zero,95
 1000aec:	010017fc 	xorhi	r4,zero,95
 1000af0:	010017fc 	xorhi	r4,zero,95
 1000af4:	010017e8 	cmpgeui	r4,zero,95
 1000af8:	0100119c 	xori	r4,zero,70
 1000afc:	01000b38 	rdprs	r4,zero,44
 1000b00:	01000b38 	rdprs	r4,zero,44
 1000b04:	01001770 	cmpltui	r4,zero,93
 1000b08:	01000b38 	rdprs	r4,zero,44
 1000b0c:	01001740 	call	100174 <__alt_mem_onchip_memory2_0+0x100174>
 1000b10:	01001250 	cmplti	r4,zero,73
 1000b14:	010017a0 	cmpeqi	r4,zero,94
 1000b18:	0100178c 	andi	r4,zero,94
 1000b1c:	01000b38 	rdprs	r4,zero,44
 1000b20:	01001a1c 	xori	r4,zero,104
 1000b24:	01000b38 	rdprs	r4,zero,44
 1000b28:	0100129c 	xori	r4,zero,74
 1000b2c:	01000b38 	rdprs	r4,zero,44
 1000b30:	01000b38 	rdprs	r4,zero,44
 1000b34:	01001914 	movui	r4,100
 1000b38:	d9014d17 	ldw	r4,1332(sp)
 1000b3c:	2000ce26 	beq	r4,zero,1000e78 <___vfprintf_internal_r+0x6d4>
 1000b40:	01400044 	movi	r5,1
 1000b44:	d9800f04 	addi	r6,sp,60
 1000b48:	d9c14015 	stw	r7,1280(sp)
 1000b4c:	d9414515 	stw	r5,1300(sp)
 1000b50:	d9814115 	stw	r6,1284(sp)
 1000b54:	280f883a 	mov	r7,r5
 1000b58:	d9000f05 	stb	r4,60(sp)
 1000b5c:	d8000405 	stb	zero,16(sp)
 1000b60:	d8014615 	stw	zero,1304(sp)
 1000b64:	d8c14c17 	ldw	r3,1328(sp)
 1000b68:	1880008c 	andi	r2,r3,2
 1000b6c:	1005003a 	cmpeq	r2,r2,zero
 1000b70:	d8815015 	stw	r2,1344(sp)
 1000b74:	1000031e 	bne	r2,zero,1000b84 <___vfprintf_internal_r+0x3e0>
 1000b78:	d9014517 	ldw	r4,1300(sp)
 1000b7c:	21000084 	addi	r4,r4,2
 1000b80:	d9014515 	stw	r4,1300(sp)
 1000b84:	d9414c17 	ldw	r5,1328(sp)
 1000b88:	2940210c 	andi	r5,r5,132
 1000b8c:	d9414e15 	stw	r5,1336(sp)
 1000b90:	28002d1e 	bne	r5,zero,1000c48 <___vfprintf_internal_r+0x4a4>
 1000b94:	d9814a17 	ldw	r6,1320(sp)
 1000b98:	d8814517 	ldw	r2,1300(sp)
 1000b9c:	30a1c83a 	sub	r16,r6,r2
 1000ba0:	0400290e 	bge	zero,r16,1000c48 <___vfprintf_internal_r+0x4a4>
 1000ba4:	00800404 	movi	r2,16
 1000ba8:	1404580e 	bge	r2,r16,1001d0c <___vfprintf_internal_r+0x1568>
 1000bac:	dc800e17 	ldw	r18,56(sp)
 1000bb0:	dc400d17 	ldw	r17,52(sp)
 1000bb4:	1027883a 	mov	r19,r2
 1000bb8:	07004074 	movhi	fp,257
 1000bbc:	e70c9884 	addi	fp,fp,12898
 1000bc0:	050001c4 	movi	r20,7
 1000bc4:	00000306 	br	1000bd4 <___vfprintf_internal_r+0x430>
 1000bc8:	843ffc04 	addi	r16,r16,-16
 1000bcc:	ad400204 	addi	r21,r21,8
 1000bd0:	9c00130e 	bge	r19,r16,1000c20 <___vfprintf_internal_r+0x47c>
 1000bd4:	94800404 	addi	r18,r18,16
 1000bd8:	8c400044 	addi	r17,r17,1
 1000bdc:	af000015 	stw	fp,0(r21)
 1000be0:	acc00115 	stw	r19,4(r21)
 1000be4:	dc800e15 	stw	r18,56(sp)
 1000be8:	dc400d15 	stw	r17,52(sp)
 1000bec:	a47ff60e 	bge	r20,r17,1000bc8 <___vfprintf_internal_r+0x424>
 1000bf0:	d9014f17 	ldw	r4,1340(sp)
 1000bf4:	b00b883a 	mov	r5,r22
 1000bf8:	d9800c04 	addi	r6,sp,48
 1000bfc:	d9c15115 	stw	r7,1348(sp)
 1000c00:	100074c0 	call	100074c <__sprint_r>
 1000c04:	d9c15117 	ldw	r7,1348(sp)
 1000c08:	10009e1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1000c0c:	843ffc04 	addi	r16,r16,-16
 1000c10:	dc800e17 	ldw	r18,56(sp)
 1000c14:	dc400d17 	ldw	r17,52(sp)
 1000c18:	dd401904 	addi	r21,sp,100
 1000c1c:	9c3fed16 	blt	r19,r16,1000bd4 <___vfprintf_internal_r+0x430>
 1000c20:	9425883a 	add	r18,r18,r16
 1000c24:	8c400044 	addi	r17,r17,1
 1000c28:	008001c4 	movi	r2,7
 1000c2c:	af000015 	stw	fp,0(r21)
 1000c30:	ac000115 	stw	r16,4(r21)
 1000c34:	dc800e15 	stw	r18,56(sp)
 1000c38:	dc400d15 	stw	r17,52(sp)
 1000c3c:	1441f516 	blt	r2,r17,1001414 <___vfprintf_internal_r+0xc70>
 1000c40:	ad400204 	addi	r21,r21,8
 1000c44:	00000206 	br	1000c50 <___vfprintf_internal_r+0x4ac>
 1000c48:	dc800e17 	ldw	r18,56(sp)
 1000c4c:	dc400d17 	ldw	r17,52(sp)
 1000c50:	d8800407 	ldb	r2,16(sp)
 1000c54:	10000b26 	beq	r2,zero,1000c84 <___vfprintf_internal_r+0x4e0>
 1000c58:	00800044 	movi	r2,1
 1000c5c:	94800044 	addi	r18,r18,1
 1000c60:	8c400044 	addi	r17,r17,1
 1000c64:	a8800115 	stw	r2,4(r21)
 1000c68:	d8c00404 	addi	r3,sp,16
 1000c6c:	008001c4 	movi	r2,7
 1000c70:	a8c00015 	stw	r3,0(r21)
 1000c74:	dc800e15 	stw	r18,56(sp)
 1000c78:	dc400d15 	stw	r17,52(sp)
 1000c7c:	1441da16 	blt	r2,r17,10013e8 <___vfprintf_internal_r+0xc44>
 1000c80:	ad400204 	addi	r21,r21,8
 1000c84:	d9015017 	ldw	r4,1344(sp)
 1000c88:	20000b1e 	bne	r4,zero,1000cb8 <___vfprintf_internal_r+0x514>
 1000c8c:	d8800444 	addi	r2,sp,17
 1000c90:	94800084 	addi	r18,r18,2
 1000c94:	8c400044 	addi	r17,r17,1
 1000c98:	a8800015 	stw	r2,0(r21)
 1000c9c:	00c00084 	movi	r3,2
 1000ca0:	008001c4 	movi	r2,7
 1000ca4:	a8c00115 	stw	r3,4(r21)
 1000ca8:	dc800e15 	stw	r18,56(sp)
 1000cac:	dc400d15 	stw	r17,52(sp)
 1000cb0:	1441c216 	blt	r2,r17,10013bc <___vfprintf_internal_r+0xc18>
 1000cb4:	ad400204 	addi	r21,r21,8
 1000cb8:	d9414e17 	ldw	r5,1336(sp)
 1000cbc:	00802004 	movi	r2,128
 1000cc0:	2880b126 	beq	r5,r2,1000f88 <___vfprintf_internal_r+0x7e4>
 1000cc4:	d8c14617 	ldw	r3,1304(sp)
 1000cc8:	19e1c83a 	sub	r16,r3,r7
 1000ccc:	0400260e 	bge	zero,r16,1000d68 <___vfprintf_internal_r+0x5c4>
 1000cd0:	00800404 	movi	r2,16
 1000cd4:	1403c90e 	bge	r2,r16,1001bfc <___vfprintf_internal_r+0x1458>
 1000cd8:	1027883a 	mov	r19,r2
 1000cdc:	07004074 	movhi	fp,257
 1000ce0:	e70c9484 	addi	fp,fp,12882
 1000ce4:	050001c4 	movi	r20,7
 1000ce8:	00000306 	br	1000cf8 <___vfprintf_internal_r+0x554>
 1000cec:	843ffc04 	addi	r16,r16,-16
 1000cf0:	ad400204 	addi	r21,r21,8
 1000cf4:	9c00130e 	bge	r19,r16,1000d44 <___vfprintf_internal_r+0x5a0>
 1000cf8:	94800404 	addi	r18,r18,16
 1000cfc:	8c400044 	addi	r17,r17,1
 1000d00:	af000015 	stw	fp,0(r21)
 1000d04:	acc00115 	stw	r19,4(r21)
 1000d08:	dc800e15 	stw	r18,56(sp)
 1000d0c:	dc400d15 	stw	r17,52(sp)
 1000d10:	a47ff60e 	bge	r20,r17,1000cec <___vfprintf_internal_r+0x548>
 1000d14:	d9014f17 	ldw	r4,1340(sp)
 1000d18:	b00b883a 	mov	r5,r22
 1000d1c:	d9800c04 	addi	r6,sp,48
 1000d20:	d9c15115 	stw	r7,1348(sp)
 1000d24:	100074c0 	call	100074c <__sprint_r>
 1000d28:	d9c15117 	ldw	r7,1348(sp)
 1000d2c:	1000551e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1000d30:	843ffc04 	addi	r16,r16,-16
 1000d34:	dc800e17 	ldw	r18,56(sp)
 1000d38:	dc400d17 	ldw	r17,52(sp)
 1000d3c:	dd401904 	addi	r21,sp,100
 1000d40:	9c3fed16 	blt	r19,r16,1000cf8 <___vfprintf_internal_r+0x554>
 1000d44:	9425883a 	add	r18,r18,r16
 1000d48:	8c400044 	addi	r17,r17,1
 1000d4c:	008001c4 	movi	r2,7
 1000d50:	af000015 	stw	fp,0(r21)
 1000d54:	ac000115 	stw	r16,4(r21)
 1000d58:	dc800e15 	stw	r18,56(sp)
 1000d5c:	dc400d15 	stw	r17,52(sp)
 1000d60:	14418216 	blt	r2,r17,100136c <___vfprintf_internal_r+0xbc8>
 1000d64:	ad400204 	addi	r21,r21,8
 1000d68:	d9014c17 	ldw	r4,1328(sp)
 1000d6c:	2080400c 	andi	r2,r4,256
 1000d70:	10004a1e 	bne	r2,zero,1000e9c <___vfprintf_internal_r+0x6f8>
 1000d74:	d9414117 	ldw	r5,1284(sp)
 1000d78:	91e5883a 	add	r18,r18,r7
 1000d7c:	8c400044 	addi	r17,r17,1
 1000d80:	008001c4 	movi	r2,7
 1000d84:	a9400015 	stw	r5,0(r21)
 1000d88:	a9c00115 	stw	r7,4(r21)
 1000d8c:	dc800e15 	stw	r18,56(sp)
 1000d90:	dc400d15 	stw	r17,52(sp)
 1000d94:	14416716 	blt	r2,r17,1001334 <___vfprintf_internal_r+0xb90>
 1000d98:	a8c00204 	addi	r3,r21,8
 1000d9c:	d9814c17 	ldw	r6,1328(sp)
 1000da0:	3080010c 	andi	r2,r6,4
 1000da4:	10002826 	beq	r2,zero,1000e48 <___vfprintf_internal_r+0x6a4>
 1000da8:	d8814a17 	ldw	r2,1320(sp)
 1000dac:	d9014517 	ldw	r4,1300(sp)
 1000db0:	1121c83a 	sub	r16,r2,r4
 1000db4:	0400240e 	bge	zero,r16,1000e48 <___vfprintf_internal_r+0x6a4>
 1000db8:	00800404 	movi	r2,16
 1000dbc:	14044f0e 	bge	r2,r16,1001efc <___vfprintf_internal_r+0x1758>
 1000dc0:	dc400d17 	ldw	r17,52(sp)
 1000dc4:	1027883a 	mov	r19,r2
 1000dc8:	07004074 	movhi	fp,257
 1000dcc:	e70c9884 	addi	fp,fp,12898
 1000dd0:	050001c4 	movi	r20,7
 1000dd4:	00000306 	br	1000de4 <___vfprintf_internal_r+0x640>
 1000dd8:	843ffc04 	addi	r16,r16,-16
 1000ddc:	18c00204 	addi	r3,r3,8
 1000de0:	9c00110e 	bge	r19,r16,1000e28 <___vfprintf_internal_r+0x684>
 1000de4:	94800404 	addi	r18,r18,16
 1000de8:	8c400044 	addi	r17,r17,1
 1000dec:	1f000015 	stw	fp,0(r3)
 1000df0:	1cc00115 	stw	r19,4(r3)
 1000df4:	dc800e15 	stw	r18,56(sp)
 1000df8:	dc400d15 	stw	r17,52(sp)
 1000dfc:	a47ff60e 	bge	r20,r17,1000dd8 <___vfprintf_internal_r+0x634>
 1000e00:	d9014f17 	ldw	r4,1340(sp)
 1000e04:	b00b883a 	mov	r5,r22
 1000e08:	d9800c04 	addi	r6,sp,48
 1000e0c:	100074c0 	call	100074c <__sprint_r>
 1000e10:	10001c1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1000e14:	843ffc04 	addi	r16,r16,-16
 1000e18:	dc800e17 	ldw	r18,56(sp)
 1000e1c:	dc400d17 	ldw	r17,52(sp)
 1000e20:	d8c01904 	addi	r3,sp,100
 1000e24:	9c3fef16 	blt	r19,r16,1000de4 <___vfprintf_internal_r+0x640>
 1000e28:	9425883a 	add	r18,r18,r16
 1000e2c:	8c400044 	addi	r17,r17,1
 1000e30:	008001c4 	movi	r2,7
 1000e34:	1f000015 	stw	fp,0(r3)
 1000e38:	1c000115 	stw	r16,4(r3)
 1000e3c:	dc800e15 	stw	r18,56(sp)
 1000e40:	dc400d15 	stw	r17,52(sp)
 1000e44:	1440cb16 	blt	r2,r17,1001174 <___vfprintf_internal_r+0x9d0>
 1000e48:	d8814a17 	ldw	r2,1320(sp)
 1000e4c:	d9414517 	ldw	r5,1300(sp)
 1000e50:	1140010e 	bge	r2,r5,1000e58 <___vfprintf_internal_r+0x6b4>
 1000e54:	2805883a 	mov	r2,r5
 1000e58:	d9814b17 	ldw	r6,1324(sp)
 1000e5c:	308d883a 	add	r6,r6,r2
 1000e60:	d9814b15 	stw	r6,1324(sp)
 1000e64:	90013b1e 	bne	r18,zero,1001354 <___vfprintf_internal_r+0xbb0>
 1000e68:	d9c14017 	ldw	r7,1280(sp)
 1000e6c:	dd401904 	addi	r21,sp,100
 1000e70:	d8000d15 	stw	zero,52(sp)
 1000e74:	003ea706 	br	1000914 <___vfprintf_internal_r+0x170>
 1000e78:	d8800e17 	ldw	r2,56(sp)
 1000e7c:	10053f1e 	bne	r2,zero,100237c <___vfprintf_internal_r+0x1bd8>
 1000e80:	d8000d15 	stw	zero,52(sp)
 1000e84:	b080030b 	ldhu	r2,12(r22)
 1000e88:	1080100c 	andi	r2,r2,64
 1000e8c:	103e8726 	beq	r2,zero,10008ac <___vfprintf_internal_r+0x108>
 1000e90:	00bfffc4 	movi	r2,-1
 1000e94:	d8814b15 	stw	r2,1324(sp)
 1000e98:	003e8406 	br	10008ac <___vfprintf_internal_r+0x108>
 1000e9c:	d9814d17 	ldw	r6,1332(sp)
 1000ea0:	00801944 	movi	r2,101
 1000ea4:	11806e16 	blt	r2,r6,1001060 <___vfprintf_internal_r+0x8bc>
 1000ea8:	d9414717 	ldw	r5,1308(sp)
 1000eac:	00c00044 	movi	r3,1
 1000eb0:	1943430e 	bge	r3,r5,1001bc0 <___vfprintf_internal_r+0x141c>
 1000eb4:	d8814117 	ldw	r2,1284(sp)
 1000eb8:	94800044 	addi	r18,r18,1
 1000ebc:	8c400044 	addi	r17,r17,1
 1000ec0:	a8800015 	stw	r2,0(r21)
 1000ec4:	008001c4 	movi	r2,7
 1000ec8:	a8c00115 	stw	r3,4(r21)
 1000ecc:	dc800e15 	stw	r18,56(sp)
 1000ed0:	dc400d15 	stw	r17,52(sp)
 1000ed4:	1441ca16 	blt	r2,r17,1001600 <___vfprintf_internal_r+0xe5c>
 1000ed8:	a8c00204 	addi	r3,r21,8
 1000edc:	d9014917 	ldw	r4,1316(sp)
 1000ee0:	00800044 	movi	r2,1
 1000ee4:	94800044 	addi	r18,r18,1
 1000ee8:	8c400044 	addi	r17,r17,1
 1000eec:	18800115 	stw	r2,4(r3)
 1000ef0:	008001c4 	movi	r2,7
 1000ef4:	19000015 	stw	r4,0(r3)
 1000ef8:	dc800e15 	stw	r18,56(sp)
 1000efc:	dc400d15 	stw	r17,52(sp)
 1000f00:	1441b616 	blt	r2,r17,10015dc <___vfprintf_internal_r+0xe38>
 1000f04:	1cc00204 	addi	r19,r3,8
 1000f08:	d9014217 	ldw	r4,1288(sp)
 1000f0c:	d9414317 	ldw	r5,1292(sp)
 1000f10:	000d883a 	mov	r6,zero
 1000f14:	000f883a 	mov	r7,zero
 1000f18:	100932c0 	call	100932c <__nedf2>
 1000f1c:	10017426 	beq	r2,zero,10014f0 <___vfprintf_internal_r+0xd4c>
 1000f20:	d9414717 	ldw	r5,1308(sp)
 1000f24:	d9814117 	ldw	r6,1284(sp)
 1000f28:	8c400044 	addi	r17,r17,1
 1000f2c:	2c85883a 	add	r2,r5,r18
 1000f30:	14bfffc4 	addi	r18,r2,-1
 1000f34:	28bfffc4 	addi	r2,r5,-1
 1000f38:	30c00044 	addi	r3,r6,1
 1000f3c:	98800115 	stw	r2,4(r19)
 1000f40:	008001c4 	movi	r2,7
 1000f44:	98c00015 	stw	r3,0(r19)
 1000f48:	dc800e15 	stw	r18,56(sp)
 1000f4c:	dc400d15 	stw	r17,52(sp)
 1000f50:	14418e16 	blt	r2,r17,100158c <___vfprintf_internal_r+0xde8>
 1000f54:	9cc00204 	addi	r19,r19,8
 1000f58:	d9414817 	ldw	r5,1312(sp)
 1000f5c:	d8800804 	addi	r2,sp,32
 1000f60:	8c400044 	addi	r17,r17,1
 1000f64:	9165883a 	add	r18,r18,r5
 1000f68:	98800015 	stw	r2,0(r19)
 1000f6c:	008001c4 	movi	r2,7
 1000f70:	99400115 	stw	r5,4(r19)
 1000f74:	dc800e15 	stw	r18,56(sp)
 1000f78:	dc400d15 	stw	r17,52(sp)
 1000f7c:	1440ed16 	blt	r2,r17,1001334 <___vfprintf_internal_r+0xb90>
 1000f80:	98c00204 	addi	r3,r19,8
 1000f84:	003f8506 	br	1000d9c <___vfprintf_internal_r+0x5f8>
 1000f88:	d9814a17 	ldw	r6,1320(sp)
 1000f8c:	d8814517 	ldw	r2,1300(sp)
 1000f90:	30a1c83a 	sub	r16,r6,r2
 1000f94:	043f4b0e 	bge	zero,r16,1000cc4 <___vfprintf_internal_r+0x520>
 1000f98:	00800404 	movi	r2,16
 1000f9c:	1404340e 	bge	r2,r16,1002070 <___vfprintf_internal_r+0x18cc>
 1000fa0:	1027883a 	mov	r19,r2
 1000fa4:	07004074 	movhi	fp,257
 1000fa8:	e70c9484 	addi	fp,fp,12882
 1000fac:	050001c4 	movi	r20,7
 1000fb0:	00000306 	br	1000fc0 <___vfprintf_internal_r+0x81c>
 1000fb4:	843ffc04 	addi	r16,r16,-16
 1000fb8:	ad400204 	addi	r21,r21,8
 1000fbc:	9c00130e 	bge	r19,r16,100100c <___vfprintf_internal_r+0x868>
 1000fc0:	94800404 	addi	r18,r18,16
 1000fc4:	8c400044 	addi	r17,r17,1
 1000fc8:	af000015 	stw	fp,0(r21)
 1000fcc:	acc00115 	stw	r19,4(r21)
 1000fd0:	dc800e15 	stw	r18,56(sp)
 1000fd4:	dc400d15 	stw	r17,52(sp)
 1000fd8:	a47ff60e 	bge	r20,r17,1000fb4 <___vfprintf_internal_r+0x810>
 1000fdc:	d9014f17 	ldw	r4,1340(sp)
 1000fe0:	b00b883a 	mov	r5,r22
 1000fe4:	d9800c04 	addi	r6,sp,48
 1000fe8:	d9c15115 	stw	r7,1348(sp)
 1000fec:	100074c0 	call	100074c <__sprint_r>
 1000ff0:	d9c15117 	ldw	r7,1348(sp)
 1000ff4:	103fa31e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1000ff8:	843ffc04 	addi	r16,r16,-16
 1000ffc:	dc800e17 	ldw	r18,56(sp)
 1001000:	dc400d17 	ldw	r17,52(sp)
 1001004:	dd401904 	addi	r21,sp,100
 1001008:	9c3fed16 	blt	r19,r16,1000fc0 <___vfprintf_internal_r+0x81c>
 100100c:	9425883a 	add	r18,r18,r16
 1001010:	8c400044 	addi	r17,r17,1
 1001014:	008001c4 	movi	r2,7
 1001018:	af000015 	stw	fp,0(r21)
 100101c:	ac000115 	stw	r16,4(r21)
 1001020:	dc800e15 	stw	r18,56(sp)
 1001024:	dc400d15 	stw	r17,52(sp)
 1001028:	14416116 	blt	r2,r17,10015b0 <___vfprintf_internal_r+0xe0c>
 100102c:	ad400204 	addi	r21,r21,8
 1001030:	003f2406 	br	1000cc4 <___vfprintf_internal_r+0x520>
 1001034:	d9014f17 	ldw	r4,1340(sp)
 1001038:	10042140 	call	1004214 <__sinit>
 100103c:	d9c15117 	ldw	r7,1348(sp)
 1001040:	003def06 	br	1000800 <___vfprintf_internal_r+0x5c>
 1001044:	d9014f17 	ldw	r4,1340(sp)
 1001048:	b00b883a 	mov	r5,r22
 100104c:	d9c15115 	stw	r7,1348(sp)
 1001050:	10026740 	call	1002674 <__swsetup_r>
 1001054:	d9c15117 	ldw	r7,1348(sp)
 1001058:	103dee26 	beq	r2,zero,1000814 <___vfprintf_internal_r+0x70>
 100105c:	003f8c06 	br	1000e90 <___vfprintf_internal_r+0x6ec>
 1001060:	d9014217 	ldw	r4,1288(sp)
 1001064:	d9414317 	ldw	r5,1292(sp)
 1001068:	000d883a 	mov	r6,zero
 100106c:	000f883a 	mov	r7,zero
 1001070:	10092a40 	call	10092a4 <__eqdf2>
 1001074:	1000f21e 	bne	r2,zero,1001440 <___vfprintf_internal_r+0xc9c>
 1001078:	00804074 	movhi	r2,257
 100107c:	108c9404 	addi	r2,r2,12880
 1001080:	94800044 	addi	r18,r18,1
 1001084:	8c400044 	addi	r17,r17,1
 1001088:	a8800015 	stw	r2,0(r21)
 100108c:	00c00044 	movi	r3,1
 1001090:	008001c4 	movi	r2,7
 1001094:	a8c00115 	stw	r3,4(r21)
 1001098:	dc800e15 	stw	r18,56(sp)
 100109c:	dc400d15 	stw	r17,52(sp)
 10010a0:	1442fa16 	blt	r2,r17,1001c8c <___vfprintf_internal_r+0x14e8>
 10010a4:	a8c00204 	addi	r3,r21,8
 10010a8:	d8800517 	ldw	r2,20(sp)
 10010ac:	d9014717 	ldw	r4,1308(sp)
 10010b0:	11015c0e 	bge	r2,r4,1001624 <___vfprintf_internal_r+0xe80>
 10010b4:	dc400d17 	ldw	r17,52(sp)
 10010b8:	d9814917 	ldw	r6,1316(sp)
 10010bc:	00800044 	movi	r2,1
 10010c0:	94800044 	addi	r18,r18,1
 10010c4:	8c400044 	addi	r17,r17,1
 10010c8:	18800115 	stw	r2,4(r3)
 10010cc:	008001c4 	movi	r2,7
 10010d0:	19800015 	stw	r6,0(r3)
 10010d4:	dc800e15 	stw	r18,56(sp)
 10010d8:	dc400d15 	stw	r17,52(sp)
 10010dc:	14431016 	blt	r2,r17,1001d20 <___vfprintf_internal_r+0x157c>
 10010e0:	18c00204 	addi	r3,r3,8
 10010e4:	d8814717 	ldw	r2,1308(sp)
 10010e8:	143fffc4 	addi	r16,r2,-1
 10010ec:	043f2b0e 	bge	zero,r16,1000d9c <___vfprintf_internal_r+0x5f8>
 10010f0:	00800404 	movi	r2,16
 10010f4:	1402a20e 	bge	r2,r16,1001b80 <___vfprintf_internal_r+0x13dc>
 10010f8:	dc400d17 	ldw	r17,52(sp)
 10010fc:	1027883a 	mov	r19,r2
 1001100:	07004074 	movhi	fp,257
 1001104:	e70c9484 	addi	fp,fp,12882
 1001108:	050001c4 	movi	r20,7
 100110c:	00000306 	br	100111c <___vfprintf_internal_r+0x978>
 1001110:	18c00204 	addi	r3,r3,8
 1001114:	843ffc04 	addi	r16,r16,-16
 1001118:	9c029c0e 	bge	r19,r16,1001b8c <___vfprintf_internal_r+0x13e8>
 100111c:	94800404 	addi	r18,r18,16
 1001120:	8c400044 	addi	r17,r17,1
 1001124:	1f000015 	stw	fp,0(r3)
 1001128:	1cc00115 	stw	r19,4(r3)
 100112c:	dc800e15 	stw	r18,56(sp)
 1001130:	dc400d15 	stw	r17,52(sp)
 1001134:	a47ff60e 	bge	r20,r17,1001110 <___vfprintf_internal_r+0x96c>
 1001138:	d9014f17 	ldw	r4,1340(sp)
 100113c:	b00b883a 	mov	r5,r22
 1001140:	d9800c04 	addi	r6,sp,48
 1001144:	100074c0 	call	100074c <__sprint_r>
 1001148:	103f4e1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 100114c:	dc800e17 	ldw	r18,56(sp)
 1001150:	dc400d17 	ldw	r17,52(sp)
 1001154:	d8c01904 	addi	r3,sp,100
 1001158:	003fee06 	br	1001114 <___vfprintf_internal_r+0x970>
 100115c:	d8802c0b 	ldhu	r2,176(sp)
 1001160:	00ffffc4 	movi	r3,-1
 1001164:	d8c14b15 	stw	r3,1324(sp)
 1001168:	1080100c 	andi	r2,r2,64
 100116c:	103dcc1e 	bne	r2,zero,10008a0 <___vfprintf_internal_r+0xfc>
 1001170:	003dce06 	br	10008ac <___vfprintf_internal_r+0x108>
 1001174:	d9014f17 	ldw	r4,1340(sp)
 1001178:	b00b883a 	mov	r5,r22
 100117c:	d9800c04 	addi	r6,sp,48
 1001180:	100074c0 	call	100074c <__sprint_r>
 1001184:	103f3f1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001188:	dc800e17 	ldw	r18,56(sp)
 100118c:	003f2e06 	br	1000e48 <___vfprintf_internal_r+0x6a4>
 1001190:	d9414c17 	ldw	r5,1328(sp)
 1001194:	29400414 	ori	r5,r5,16
 1001198:	d9414c15 	stw	r5,1328(sp)
 100119c:	d9814c17 	ldw	r6,1328(sp)
 10011a0:	3080080c 	andi	r2,r6,32
 10011a4:	10014f1e 	bne	r2,zero,10016e4 <___vfprintf_internal_r+0xf40>
 10011a8:	d8c14c17 	ldw	r3,1328(sp)
 10011ac:	1880040c 	andi	r2,r3,16
 10011b0:	1002ea1e 	bne	r2,zero,1001d5c <___vfprintf_internal_r+0x15b8>
 10011b4:	d9014c17 	ldw	r4,1328(sp)
 10011b8:	2080100c 	andi	r2,r4,64
 10011bc:	1002e726 	beq	r2,zero,1001d5c <___vfprintf_internal_r+0x15b8>
 10011c0:	3880000f 	ldh	r2,0(r7)
 10011c4:	39c00104 	addi	r7,r7,4
 10011c8:	d9c14015 	stw	r7,1280(sp)
 10011cc:	1023d7fa 	srai	r17,r2,31
 10011d0:	1021883a 	mov	r16,r2
 10011d4:	88037216 	blt	r17,zero,1001fa0 <___vfprintf_internal_r+0x17fc>
 10011d8:	01000044 	movi	r4,1
 10011dc:	98000416 	blt	r19,zero,10011f0 <___vfprintf_internal_r+0xa4c>
 10011e0:	d8c14c17 	ldw	r3,1328(sp)
 10011e4:	00bfdfc4 	movi	r2,-129
 10011e8:	1886703a 	and	r3,r3,r2
 10011ec:	d8c14c15 	stw	r3,1328(sp)
 10011f0:	8444b03a 	or	r2,r16,r17
 10011f4:	1002261e 	bne	r2,zero,1001a90 <___vfprintf_internal_r+0x12ec>
 10011f8:	9802251e 	bne	r19,zero,1001a90 <___vfprintf_internal_r+0x12ec>
 10011fc:	20803fcc 	andi	r2,r4,255
 1001200:	10029b26 	beq	r2,zero,1001c70 <___vfprintf_internal_r+0x14cc>
 1001204:	d8c01904 	addi	r3,sp,100
 1001208:	dd000f04 	addi	r20,sp,60
 100120c:	d8c14115 	stw	r3,1284(sp)
 1001210:	d8c14117 	ldw	r3,1284(sp)
 1001214:	dcc14515 	stw	r19,1300(sp)
 1001218:	a0c5c83a 	sub	r2,r20,r3
 100121c:	11c00a04 	addi	r7,r2,40
 1001220:	99c0010e 	bge	r19,r7,1001228 <___vfprintf_internal_r+0xa84>
 1001224:	d9c14515 	stw	r7,1300(sp)
 1001228:	dcc14615 	stw	r19,1304(sp)
 100122c:	d8800407 	ldb	r2,16(sp)
 1001230:	103e4c26 	beq	r2,zero,1000b64 <___vfprintf_internal_r+0x3c0>
 1001234:	d8814517 	ldw	r2,1300(sp)
 1001238:	10800044 	addi	r2,r2,1
 100123c:	d8814515 	stw	r2,1300(sp)
 1001240:	003e4806 	br	1000b64 <___vfprintf_internal_r+0x3c0>
 1001244:	d9814c17 	ldw	r6,1328(sp)
 1001248:	31800414 	ori	r6,r6,16
 100124c:	d9814c15 	stw	r6,1328(sp)
 1001250:	d8c14c17 	ldw	r3,1328(sp)
 1001254:	1880080c 	andi	r2,r3,32
 1001258:	1001271e 	bne	r2,zero,10016f8 <___vfprintf_internal_r+0xf54>
 100125c:	d9414c17 	ldw	r5,1328(sp)
 1001260:	2880040c 	andi	r2,r5,16
 1001264:	1002b61e 	bne	r2,zero,1001d40 <___vfprintf_internal_r+0x159c>
 1001268:	d9814c17 	ldw	r6,1328(sp)
 100126c:	3080100c 	andi	r2,r6,64
 1001270:	1002b326 	beq	r2,zero,1001d40 <___vfprintf_internal_r+0x159c>
 1001274:	3c00000b 	ldhu	r16,0(r7)
 1001278:	0009883a 	mov	r4,zero
 100127c:	39c00104 	addi	r7,r7,4
 1001280:	0023883a 	mov	r17,zero
 1001284:	d9c14015 	stw	r7,1280(sp)
 1001288:	d8000405 	stb	zero,16(sp)
 100128c:	003fd306 	br	10011dc <___vfprintf_internal_r+0xa38>
 1001290:	d9014c17 	ldw	r4,1328(sp)
 1001294:	21000414 	ori	r4,r4,16
 1001298:	d9014c15 	stw	r4,1328(sp)
 100129c:	d9414c17 	ldw	r5,1328(sp)
 10012a0:	2880080c 	andi	r2,r5,32
 10012a4:	1001081e 	bne	r2,zero,10016c8 <___vfprintf_internal_r+0xf24>
 10012a8:	d8c14c17 	ldw	r3,1328(sp)
 10012ac:	1880040c 	andi	r2,r3,16
 10012b0:	1002b01e 	bne	r2,zero,1001d74 <___vfprintf_internal_r+0x15d0>
 10012b4:	d9014c17 	ldw	r4,1328(sp)
 10012b8:	2080100c 	andi	r2,r4,64
 10012bc:	1002ad26 	beq	r2,zero,1001d74 <___vfprintf_internal_r+0x15d0>
 10012c0:	3c00000b 	ldhu	r16,0(r7)
 10012c4:	01000044 	movi	r4,1
 10012c8:	39c00104 	addi	r7,r7,4
 10012cc:	0023883a 	mov	r17,zero
 10012d0:	d9c14015 	stw	r7,1280(sp)
 10012d4:	d8000405 	stb	zero,16(sp)
 10012d8:	003fc006 	br	10011dc <___vfprintf_internal_r+0xa38>
 10012dc:	d9014f17 	ldw	r4,1340(sp)
 10012e0:	b00b883a 	mov	r5,r22
 10012e4:	d9800c04 	addi	r6,sp,48
 10012e8:	100074c0 	call	100074c <__sprint_r>
 10012ec:	103ee51e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 10012f0:	dc800e17 	ldw	r18,56(sp)
 10012f4:	d8c01904 	addi	r3,sp,100
 10012f8:	d9814c17 	ldw	r6,1328(sp)
 10012fc:	3080004c 	andi	r2,r6,1
 1001300:	1005003a 	cmpeq	r2,r2,zero
 1001304:	103ea51e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x5f8>
 1001308:	00800044 	movi	r2,1
 100130c:	dc400d17 	ldw	r17,52(sp)
 1001310:	18800115 	stw	r2,4(r3)
 1001314:	d8814917 	ldw	r2,1316(sp)
 1001318:	94800044 	addi	r18,r18,1
 100131c:	8c400044 	addi	r17,r17,1
 1001320:	18800015 	stw	r2,0(r3)
 1001324:	008001c4 	movi	r2,7
 1001328:	dc800e15 	stw	r18,56(sp)
 100132c:	dc400d15 	stw	r17,52(sp)
 1001330:	14421e0e 	bge	r2,r17,1001bac <___vfprintf_internal_r+0x1408>
 1001334:	d9014f17 	ldw	r4,1340(sp)
 1001338:	b00b883a 	mov	r5,r22
 100133c:	d9800c04 	addi	r6,sp,48
 1001340:	100074c0 	call	100074c <__sprint_r>
 1001344:	103ecf1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001348:	dc800e17 	ldw	r18,56(sp)
 100134c:	d8c01904 	addi	r3,sp,100
 1001350:	003e9206 	br	1000d9c <___vfprintf_internal_r+0x5f8>
 1001354:	d9014f17 	ldw	r4,1340(sp)
 1001358:	b00b883a 	mov	r5,r22
 100135c:	d9800c04 	addi	r6,sp,48
 1001360:	100074c0 	call	100074c <__sprint_r>
 1001364:	103ec026 	beq	r2,zero,1000e68 <___vfprintf_internal_r+0x6c4>
 1001368:	003ec606 	br	1000e84 <___vfprintf_internal_r+0x6e0>
 100136c:	d9014f17 	ldw	r4,1340(sp)
 1001370:	b00b883a 	mov	r5,r22
 1001374:	d9800c04 	addi	r6,sp,48
 1001378:	d9c15115 	stw	r7,1348(sp)
 100137c:	100074c0 	call	100074c <__sprint_r>
 1001380:	d9c15117 	ldw	r7,1348(sp)
 1001384:	103ebf1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001388:	dc800e17 	ldw	r18,56(sp)
 100138c:	dc400d17 	ldw	r17,52(sp)
 1001390:	dd401904 	addi	r21,sp,100
 1001394:	003e7406 	br	1000d68 <___vfprintf_internal_r+0x5c4>
 1001398:	d9014f17 	ldw	r4,1340(sp)
 100139c:	b00b883a 	mov	r5,r22
 10013a0:	d9800c04 	addi	r6,sp,48
 10013a4:	d9c15115 	stw	r7,1348(sp)
 10013a8:	100074c0 	call	100074c <__sprint_r>
 10013ac:	d9c15117 	ldw	r7,1348(sp)
 10013b0:	103eb41e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 10013b4:	dd401904 	addi	r21,sp,100
 10013b8:	003d6d06 	br	1000970 <___vfprintf_internal_r+0x1cc>
 10013bc:	d9014f17 	ldw	r4,1340(sp)
 10013c0:	b00b883a 	mov	r5,r22
 10013c4:	d9800c04 	addi	r6,sp,48
 10013c8:	d9c15115 	stw	r7,1348(sp)
 10013cc:	100074c0 	call	100074c <__sprint_r>
 10013d0:	d9c15117 	ldw	r7,1348(sp)
 10013d4:	103eab1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 10013d8:	dc800e17 	ldw	r18,56(sp)
 10013dc:	dc400d17 	ldw	r17,52(sp)
 10013e0:	dd401904 	addi	r21,sp,100
 10013e4:	003e3406 	br	1000cb8 <___vfprintf_internal_r+0x514>
 10013e8:	d9014f17 	ldw	r4,1340(sp)
 10013ec:	b00b883a 	mov	r5,r22
 10013f0:	d9800c04 	addi	r6,sp,48
 10013f4:	d9c15115 	stw	r7,1348(sp)
 10013f8:	100074c0 	call	100074c <__sprint_r>
 10013fc:	d9c15117 	ldw	r7,1348(sp)
 1001400:	103ea01e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001404:	dc800e17 	ldw	r18,56(sp)
 1001408:	dc400d17 	ldw	r17,52(sp)
 100140c:	dd401904 	addi	r21,sp,100
 1001410:	003e1c06 	br	1000c84 <___vfprintf_internal_r+0x4e0>
 1001414:	d9014f17 	ldw	r4,1340(sp)
 1001418:	b00b883a 	mov	r5,r22
 100141c:	d9800c04 	addi	r6,sp,48
 1001420:	d9c15115 	stw	r7,1348(sp)
 1001424:	100074c0 	call	100074c <__sprint_r>
 1001428:	d9c15117 	ldw	r7,1348(sp)
 100142c:	103e951e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001430:	dc800e17 	ldw	r18,56(sp)
 1001434:	dc400d17 	ldw	r17,52(sp)
 1001438:	dd401904 	addi	r21,sp,100
 100143c:	003e0406 	br	1000c50 <___vfprintf_internal_r+0x4ac>
 1001440:	d9000517 	ldw	r4,20(sp)
 1001444:	0102520e 	bge	zero,r4,1001d90 <___vfprintf_internal_r+0x15ec>
 1001448:	d9814717 	ldw	r6,1308(sp)
 100144c:	21807a16 	blt	r4,r6,1001638 <___vfprintf_internal_r+0xe94>
 1001450:	d8814117 	ldw	r2,1284(sp)
 1001454:	91a5883a 	add	r18,r18,r6
 1001458:	8c400044 	addi	r17,r17,1
 100145c:	a8800015 	stw	r2,0(r21)
 1001460:	008001c4 	movi	r2,7
 1001464:	a9800115 	stw	r6,4(r21)
 1001468:	dc800e15 	stw	r18,56(sp)
 100146c:	dc400d15 	stw	r17,52(sp)
 1001470:	1442f616 	blt	r2,r17,100204c <___vfprintf_internal_r+0x18a8>
 1001474:	a8c00204 	addi	r3,r21,8
 1001478:	d9414717 	ldw	r5,1308(sp)
 100147c:	2161c83a 	sub	r16,r4,r5
 1001480:	043f9d0e 	bge	zero,r16,10012f8 <___vfprintf_internal_r+0xb54>
 1001484:	00800404 	movi	r2,16
 1001488:	1402130e 	bge	r2,r16,1001cd8 <___vfprintf_internal_r+0x1534>
 100148c:	dc400d17 	ldw	r17,52(sp)
 1001490:	1027883a 	mov	r19,r2
 1001494:	07004074 	movhi	fp,257
 1001498:	e70c9484 	addi	fp,fp,12882
 100149c:	050001c4 	movi	r20,7
 10014a0:	00000306 	br	10014b0 <___vfprintf_internal_r+0xd0c>
 10014a4:	18c00204 	addi	r3,r3,8
 10014a8:	843ffc04 	addi	r16,r16,-16
 10014ac:	9c020d0e 	bge	r19,r16,1001ce4 <___vfprintf_internal_r+0x1540>
 10014b0:	94800404 	addi	r18,r18,16
 10014b4:	8c400044 	addi	r17,r17,1
 10014b8:	1f000015 	stw	fp,0(r3)
 10014bc:	1cc00115 	stw	r19,4(r3)
 10014c0:	dc800e15 	stw	r18,56(sp)
 10014c4:	dc400d15 	stw	r17,52(sp)
 10014c8:	a47ff60e 	bge	r20,r17,10014a4 <___vfprintf_internal_r+0xd00>
 10014cc:	d9014f17 	ldw	r4,1340(sp)
 10014d0:	b00b883a 	mov	r5,r22
 10014d4:	d9800c04 	addi	r6,sp,48
 10014d8:	100074c0 	call	100074c <__sprint_r>
 10014dc:	103e691e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 10014e0:	dc800e17 	ldw	r18,56(sp)
 10014e4:	dc400d17 	ldw	r17,52(sp)
 10014e8:	d8c01904 	addi	r3,sp,100
 10014ec:	003fee06 	br	10014a8 <___vfprintf_internal_r+0xd04>
 10014f0:	d8814717 	ldw	r2,1308(sp)
 10014f4:	143fffc4 	addi	r16,r2,-1
 10014f8:	043e970e 	bge	zero,r16,1000f58 <___vfprintf_internal_r+0x7b4>
 10014fc:	00800404 	movi	r2,16
 1001500:	1400180e 	bge	r2,r16,1001564 <___vfprintf_internal_r+0xdc0>
 1001504:	1029883a 	mov	r20,r2
 1001508:	07004074 	movhi	fp,257
 100150c:	e70c9484 	addi	fp,fp,12882
 1001510:	054001c4 	movi	r21,7
 1001514:	00000306 	br	1001524 <___vfprintf_internal_r+0xd80>
 1001518:	9cc00204 	addi	r19,r19,8
 100151c:	843ffc04 	addi	r16,r16,-16
 1001520:	a400120e 	bge	r20,r16,100156c <___vfprintf_internal_r+0xdc8>
 1001524:	94800404 	addi	r18,r18,16
 1001528:	8c400044 	addi	r17,r17,1
 100152c:	9f000015 	stw	fp,0(r19)
 1001530:	9d000115 	stw	r20,4(r19)
 1001534:	dc800e15 	stw	r18,56(sp)
 1001538:	dc400d15 	stw	r17,52(sp)
 100153c:	ac7ff60e 	bge	r21,r17,1001518 <___vfprintf_internal_r+0xd74>
 1001540:	d9014f17 	ldw	r4,1340(sp)
 1001544:	b00b883a 	mov	r5,r22
 1001548:	d9800c04 	addi	r6,sp,48
 100154c:	100074c0 	call	100074c <__sprint_r>
 1001550:	103e4c1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001554:	dc800e17 	ldw	r18,56(sp)
 1001558:	dc400d17 	ldw	r17,52(sp)
 100155c:	dcc01904 	addi	r19,sp,100
 1001560:	003fee06 	br	100151c <___vfprintf_internal_r+0xd78>
 1001564:	07004074 	movhi	fp,257
 1001568:	e70c9484 	addi	fp,fp,12882
 100156c:	9425883a 	add	r18,r18,r16
 1001570:	8c400044 	addi	r17,r17,1
 1001574:	008001c4 	movi	r2,7
 1001578:	9f000015 	stw	fp,0(r19)
 100157c:	9c000115 	stw	r16,4(r19)
 1001580:	dc800e15 	stw	r18,56(sp)
 1001584:	dc400d15 	stw	r17,52(sp)
 1001588:	147e720e 	bge	r2,r17,1000f54 <___vfprintf_internal_r+0x7b0>
 100158c:	d9014f17 	ldw	r4,1340(sp)
 1001590:	b00b883a 	mov	r5,r22
 1001594:	d9800c04 	addi	r6,sp,48
 1001598:	100074c0 	call	100074c <__sprint_r>
 100159c:	103e391e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 10015a0:	dc800e17 	ldw	r18,56(sp)
 10015a4:	dc400d17 	ldw	r17,52(sp)
 10015a8:	dcc01904 	addi	r19,sp,100
 10015ac:	003e6a06 	br	1000f58 <___vfprintf_internal_r+0x7b4>
 10015b0:	d9014f17 	ldw	r4,1340(sp)
 10015b4:	b00b883a 	mov	r5,r22
 10015b8:	d9800c04 	addi	r6,sp,48
 10015bc:	d9c15115 	stw	r7,1348(sp)
 10015c0:	100074c0 	call	100074c <__sprint_r>
 10015c4:	d9c15117 	ldw	r7,1348(sp)
 10015c8:	103e2e1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 10015cc:	dc800e17 	ldw	r18,56(sp)
 10015d0:	dc400d17 	ldw	r17,52(sp)
 10015d4:	dd401904 	addi	r21,sp,100
 10015d8:	003dba06 	br	1000cc4 <___vfprintf_internal_r+0x520>
 10015dc:	d9014f17 	ldw	r4,1340(sp)
 10015e0:	b00b883a 	mov	r5,r22
 10015e4:	d9800c04 	addi	r6,sp,48
 10015e8:	100074c0 	call	100074c <__sprint_r>
 10015ec:	103e251e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 10015f0:	dc800e17 	ldw	r18,56(sp)
 10015f4:	dc400d17 	ldw	r17,52(sp)
 10015f8:	dcc01904 	addi	r19,sp,100
 10015fc:	003e4206 	br	1000f08 <___vfprintf_internal_r+0x764>
 1001600:	d9014f17 	ldw	r4,1340(sp)
 1001604:	b00b883a 	mov	r5,r22
 1001608:	d9800c04 	addi	r6,sp,48
 100160c:	100074c0 	call	100074c <__sprint_r>
 1001610:	103e1c1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001614:	dc800e17 	ldw	r18,56(sp)
 1001618:	dc400d17 	ldw	r17,52(sp)
 100161c:	d8c01904 	addi	r3,sp,100
 1001620:	003e2e06 	br	1000edc <___vfprintf_internal_r+0x738>
 1001624:	d9414c17 	ldw	r5,1328(sp)
 1001628:	2880004c 	andi	r2,r5,1
 100162c:	1005003a 	cmpeq	r2,r2,zero
 1001630:	103dda1e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x5f8>
 1001634:	003e9f06 	br	10010b4 <___vfprintf_internal_r+0x910>
 1001638:	d8c14117 	ldw	r3,1284(sp)
 100163c:	9125883a 	add	r18,r18,r4
 1001640:	8c400044 	addi	r17,r17,1
 1001644:	008001c4 	movi	r2,7
 1001648:	a8c00015 	stw	r3,0(r21)
 100164c:	a9000115 	stw	r4,4(r21)
 1001650:	dc800e15 	stw	r18,56(sp)
 1001654:	dc400d15 	stw	r17,52(sp)
 1001658:	14426616 	blt	r2,r17,1001ff4 <___vfprintf_internal_r+0x1850>
 100165c:	a8c00204 	addi	r3,r21,8
 1001660:	d9414917 	ldw	r5,1316(sp)
 1001664:	00800044 	movi	r2,1
 1001668:	94800044 	addi	r18,r18,1
 100166c:	8c400044 	addi	r17,r17,1
 1001670:	18800115 	stw	r2,4(r3)
 1001674:	008001c4 	movi	r2,7
 1001678:	19400015 	stw	r5,0(r3)
 100167c:	dc800e15 	stw	r18,56(sp)
 1001680:	dc400d15 	stw	r17,52(sp)
 1001684:	2021883a 	mov	r16,r4
 1001688:	14425016 	blt	r2,r17,1001fcc <___vfprintf_internal_r+0x1828>
 100168c:	19400204 	addi	r5,r3,8
 1001690:	d9814717 	ldw	r6,1308(sp)
 1001694:	8c400044 	addi	r17,r17,1
 1001698:	dc400d15 	stw	r17,52(sp)
 100169c:	3107c83a 	sub	r3,r6,r4
 10016a0:	d9014117 	ldw	r4,1284(sp)
 10016a4:	90e5883a 	add	r18,r18,r3
 10016a8:	28c00115 	stw	r3,4(r5)
 10016ac:	8105883a 	add	r2,r16,r4
 10016b0:	28800015 	stw	r2,0(r5)
 10016b4:	008001c4 	movi	r2,7
 10016b8:	dc800e15 	stw	r18,56(sp)
 10016bc:	147f1d16 	blt	r2,r17,1001334 <___vfprintf_internal_r+0xb90>
 10016c0:	28c00204 	addi	r3,r5,8
 10016c4:	003db506 	br	1000d9c <___vfprintf_internal_r+0x5f8>
 10016c8:	3c000017 	ldw	r16,0(r7)
 10016cc:	3c400117 	ldw	r17,4(r7)
 10016d0:	39800204 	addi	r6,r7,8
 10016d4:	01000044 	movi	r4,1
 10016d8:	d9814015 	stw	r6,1280(sp)
 10016dc:	d8000405 	stb	zero,16(sp)
 10016e0:	003ebe06 	br	10011dc <___vfprintf_internal_r+0xa38>
 10016e4:	3c000017 	ldw	r16,0(r7)
 10016e8:	3c400117 	ldw	r17,4(r7)
 10016ec:	38800204 	addi	r2,r7,8
 10016f0:	d8814015 	stw	r2,1280(sp)
 10016f4:	003eb706 	br	10011d4 <___vfprintf_internal_r+0xa30>
 10016f8:	3c000017 	ldw	r16,0(r7)
 10016fc:	3c400117 	ldw	r17,4(r7)
 1001700:	39000204 	addi	r4,r7,8
 1001704:	d9014015 	stw	r4,1280(sp)
 1001708:	0009883a 	mov	r4,zero
 100170c:	d8000405 	stb	zero,16(sp)
 1001710:	003eb206 	br	10011dc <___vfprintf_internal_r+0xa38>
 1001714:	38c00017 	ldw	r3,0(r7)
 1001718:	39c00104 	addi	r7,r7,4
 100171c:	d8c14a15 	stw	r3,1320(sp)
 1001720:	1800d10e 	bge	r3,zero,1001a68 <___vfprintf_internal_r+0x12c4>
 1001724:	00c7c83a 	sub	r3,zero,r3
 1001728:	d8c14a15 	stw	r3,1320(sp)
 100172c:	d9014c17 	ldw	r4,1328(sp)
 1001730:	b8c00007 	ldb	r3,0(r23)
 1001734:	21000114 	ori	r4,r4,4
 1001738:	d9014c15 	stw	r4,1328(sp)
 100173c:	003c9806 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 1001740:	d9814c17 	ldw	r6,1328(sp)
 1001744:	3080080c 	andi	r2,r6,32
 1001748:	1001f026 	beq	r2,zero,1001f0c <___vfprintf_internal_r+0x1768>
 100174c:	d9014b17 	ldw	r4,1324(sp)
 1001750:	38800017 	ldw	r2,0(r7)
 1001754:	39c00104 	addi	r7,r7,4
 1001758:	d9c14015 	stw	r7,1280(sp)
 100175c:	2007d7fa 	srai	r3,r4,31
 1001760:	d9c14017 	ldw	r7,1280(sp)
 1001764:	11000015 	stw	r4,0(r2)
 1001768:	10c00115 	stw	r3,4(r2)
 100176c:	003c6906 	br	1000914 <___vfprintf_internal_r+0x170>
 1001770:	b8c00007 	ldb	r3,0(r23)
 1001774:	00801b04 	movi	r2,108
 1001778:	18824f26 	beq	r3,r2,10020b8 <___vfprintf_internal_r+0x1914>
 100177c:	d9414c17 	ldw	r5,1328(sp)
 1001780:	29400414 	ori	r5,r5,16
 1001784:	d9414c15 	stw	r5,1328(sp)
 1001788:	003c8506 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 100178c:	d9814c17 	ldw	r6,1328(sp)
 1001790:	b8c00007 	ldb	r3,0(r23)
 1001794:	31800814 	ori	r6,r6,32
 1001798:	d9814c15 	stw	r6,1328(sp)
 100179c:	003c8006 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 10017a0:	d8814c17 	ldw	r2,1328(sp)
 10017a4:	3c000017 	ldw	r16,0(r7)
 10017a8:	00c01e04 	movi	r3,120
 10017ac:	10800094 	ori	r2,r2,2
 10017b0:	d8814c15 	stw	r2,1328(sp)
 10017b4:	39c00104 	addi	r7,r7,4
 10017b8:	01404074 	movhi	r5,257
 10017bc:	294c7d04 	addi	r5,r5,12788
 10017c0:	00800c04 	movi	r2,48
 10017c4:	0023883a 	mov	r17,zero
 10017c8:	01000084 	movi	r4,2
 10017cc:	d9c14015 	stw	r7,1280(sp)
 10017d0:	d8c14d15 	stw	r3,1332(sp)
 10017d4:	d9414415 	stw	r5,1296(sp)
 10017d8:	d8800445 	stb	r2,17(sp)
 10017dc:	d8c00485 	stb	r3,18(sp)
 10017e0:	d8000405 	stb	zero,16(sp)
 10017e4:	003e7d06 	br	10011dc <___vfprintf_internal_r+0xa38>
 10017e8:	d8814c17 	ldw	r2,1328(sp)
 10017ec:	b8c00007 	ldb	r3,0(r23)
 10017f0:	10801014 	ori	r2,r2,64
 10017f4:	d8814c15 	stw	r2,1328(sp)
 10017f8:	003c6906 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 10017fc:	d9414c17 	ldw	r5,1328(sp)
 1001800:	2880020c 	andi	r2,r5,8
 1001804:	1001df26 	beq	r2,zero,1001f84 <___vfprintf_internal_r+0x17e0>
 1001808:	39800017 	ldw	r6,0(r7)
 100180c:	38800204 	addi	r2,r7,8
 1001810:	d8814015 	stw	r2,1280(sp)
 1001814:	d9814215 	stw	r6,1288(sp)
 1001818:	39c00117 	ldw	r7,4(r7)
 100181c:	d9c14315 	stw	r7,1292(sp)
 1001820:	d9014217 	ldw	r4,1288(sp)
 1001824:	d9414317 	ldw	r5,1292(sp)
 1001828:	10073300 	call	1007330 <__isinfd>
 100182c:	10021726 	beq	r2,zero,100208c <___vfprintf_internal_r+0x18e8>
 1001830:	d9014217 	ldw	r4,1288(sp)
 1001834:	d9414317 	ldw	r5,1292(sp)
 1001838:	000d883a 	mov	r6,zero
 100183c:	000f883a 	mov	r7,zero
 1001840:	10094c40 	call	10094c4 <__ltdf2>
 1001844:	1002ca16 	blt	r2,zero,1002370 <___vfprintf_internal_r+0x1bcc>
 1001848:	d9414d17 	ldw	r5,1332(sp)
 100184c:	008011c4 	movi	r2,71
 1001850:	11420a16 	blt	r2,r5,100207c <___vfprintf_internal_r+0x18d8>
 1001854:	01804074 	movhi	r6,257
 1001858:	318c8204 	addi	r6,r6,12808
 100185c:	d9814115 	stw	r6,1284(sp)
 1001860:	d9014c17 	ldw	r4,1328(sp)
 1001864:	00c000c4 	movi	r3,3
 1001868:	00bfdfc4 	movi	r2,-129
 100186c:	2088703a 	and	r4,r4,r2
 1001870:	180f883a 	mov	r7,r3
 1001874:	d8c14515 	stw	r3,1300(sp)
 1001878:	d9014c15 	stw	r4,1328(sp)
 100187c:	d8014615 	stw	zero,1304(sp)
 1001880:	003e6a06 	br	100122c <___vfprintf_internal_r+0xa88>
 1001884:	38800017 	ldw	r2,0(r7)
 1001888:	00c00044 	movi	r3,1
 100188c:	39c00104 	addi	r7,r7,4
 1001890:	d9c14015 	stw	r7,1280(sp)
 1001894:	d9000f04 	addi	r4,sp,60
 1001898:	180f883a 	mov	r7,r3
 100189c:	d8c14515 	stw	r3,1300(sp)
 10018a0:	d9014115 	stw	r4,1284(sp)
 10018a4:	d8800f05 	stb	r2,60(sp)
 10018a8:	d8000405 	stb	zero,16(sp)
 10018ac:	003cac06 	br	1000b60 <___vfprintf_internal_r+0x3bc>
 10018b0:	01404074 	movhi	r5,257
 10018b4:	294c8804 	addi	r5,r5,12832
 10018b8:	d9414415 	stw	r5,1296(sp)
 10018bc:	d9814c17 	ldw	r6,1328(sp)
 10018c0:	3080080c 	andi	r2,r6,32
 10018c4:	1000f926 	beq	r2,zero,1001cac <___vfprintf_internal_r+0x1508>
 10018c8:	3c000017 	ldw	r16,0(r7)
 10018cc:	3c400117 	ldw	r17,4(r7)
 10018d0:	38800204 	addi	r2,r7,8
 10018d4:	d8814015 	stw	r2,1280(sp)
 10018d8:	d9414c17 	ldw	r5,1328(sp)
 10018dc:	2880004c 	andi	r2,r5,1
 10018e0:	1005003a 	cmpeq	r2,r2,zero
 10018e4:	1000b31e 	bne	r2,zero,1001bb4 <___vfprintf_internal_r+0x1410>
 10018e8:	8444b03a 	or	r2,r16,r17
 10018ec:	1000b126 	beq	r2,zero,1001bb4 <___vfprintf_internal_r+0x1410>
 10018f0:	d9814d17 	ldw	r6,1332(sp)
 10018f4:	29400094 	ori	r5,r5,2
 10018f8:	00800c04 	movi	r2,48
 10018fc:	01000084 	movi	r4,2
 1001900:	d9414c15 	stw	r5,1328(sp)
 1001904:	d8800445 	stb	r2,17(sp)
 1001908:	d9800485 	stb	r6,18(sp)
 100190c:	d8000405 	stb	zero,16(sp)
 1001910:	003e3206 	br	10011dc <___vfprintf_internal_r+0xa38>
 1001914:	01804074 	movhi	r6,257
 1001918:	318c7d04 	addi	r6,r6,12788
 100191c:	d9814415 	stw	r6,1296(sp)
 1001920:	003fe606 	br	10018bc <___vfprintf_internal_r+0x1118>
 1001924:	00800ac4 	movi	r2,43
 1001928:	d8800405 	stb	r2,16(sp)
 100192c:	b8c00007 	ldb	r3,0(r23)
 1001930:	003c1b06 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 1001934:	d8814c17 	ldw	r2,1328(sp)
 1001938:	b8c00007 	ldb	r3,0(r23)
 100193c:	10800054 	ori	r2,r2,1
 1001940:	d8814c15 	stw	r2,1328(sp)
 1001944:	003c1606 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 1001948:	d8800407 	ldb	r2,16(sp)
 100194c:	1000461e 	bne	r2,zero,1001a68 <___vfprintf_internal_r+0x12c4>
 1001950:	00800804 	movi	r2,32
 1001954:	d8800405 	stb	r2,16(sp)
 1001958:	b8c00007 	ldb	r3,0(r23)
 100195c:	003c1006 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 1001960:	d9814c17 	ldw	r6,1328(sp)
 1001964:	b8c00007 	ldb	r3,0(r23)
 1001968:	31800214 	ori	r6,r6,8
 100196c:	d9814c15 	stw	r6,1328(sp)
 1001970:	003c0b06 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 1001974:	0007883a 	mov	r3,zero
 1001978:	01000244 	movi	r4,9
 100197c:	188002a4 	muli	r2,r3,10
 1001980:	b8c00007 	ldb	r3,0(r23)
 1001984:	d9814d17 	ldw	r6,1332(sp)
 1001988:	bdc00044 	addi	r23,r23,1
 100198c:	d8c14d15 	stw	r3,1332(sp)
 1001990:	d9414d17 	ldw	r5,1332(sp)
 1001994:	3085883a 	add	r2,r6,r2
 1001998:	10fff404 	addi	r3,r2,-48
 100199c:	28bff404 	addi	r2,r5,-48
 10019a0:	20bff62e 	bgeu	r4,r2,100197c <___vfprintf_internal_r+0x11d8>
 10019a4:	d8c14a15 	stw	r3,1320(sp)
 10019a8:	003bff06 	br	10009a8 <___vfprintf_internal_r+0x204>
 10019ac:	d9414c17 	ldw	r5,1328(sp)
 10019b0:	b8c00007 	ldb	r3,0(r23)
 10019b4:	29402014 	ori	r5,r5,128
 10019b8:	d9414c15 	stw	r5,1328(sp)
 10019bc:	003bf806 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 10019c0:	b8c00007 	ldb	r3,0(r23)
 10019c4:	00800a84 	movi	r2,42
 10019c8:	bdc00044 	addi	r23,r23,1
 10019cc:	18831526 	beq	r3,r2,1002624 <___vfprintf_internal_r+0x1e80>
 10019d0:	d8c14d15 	stw	r3,1332(sp)
 10019d4:	18bff404 	addi	r2,r3,-48
 10019d8:	00c00244 	movi	r3,9
 10019dc:	18827836 	bltu	r3,r2,10023c0 <___vfprintf_internal_r+0x1c1c>
 10019e0:	000d883a 	mov	r6,zero
 10019e4:	308002a4 	muli	r2,r6,10
 10019e8:	b9800007 	ldb	r6,0(r23)
 10019ec:	d9414d17 	ldw	r5,1332(sp)
 10019f0:	bdc00044 	addi	r23,r23,1
 10019f4:	d9814d15 	stw	r6,1332(sp)
 10019f8:	d9014d17 	ldw	r4,1332(sp)
 10019fc:	1145883a 	add	r2,r2,r5
 1001a00:	11bff404 	addi	r6,r2,-48
 1001a04:	20bff404 	addi	r2,r4,-48
 1001a08:	18bff62e 	bgeu	r3,r2,10019e4 <___vfprintf_internal_r+0x1240>
 1001a0c:	3027883a 	mov	r19,r6
 1001a10:	303be50e 	bge	r6,zero,10009a8 <___vfprintf_internal_r+0x204>
 1001a14:	04ffffc4 	movi	r19,-1
 1001a18:	003be306 	br	10009a8 <___vfprintf_internal_r+0x204>
 1001a1c:	d8000405 	stb	zero,16(sp)
 1001a20:	39800017 	ldw	r6,0(r7)
 1001a24:	39c00104 	addi	r7,r7,4
 1001a28:	d9c14015 	stw	r7,1280(sp)
 1001a2c:	d9814115 	stw	r6,1284(sp)
 1001a30:	3001c926 	beq	r6,zero,1002158 <___vfprintf_internal_r+0x19b4>
 1001a34:	98000e16 	blt	r19,zero,1001a70 <___vfprintf_internal_r+0x12cc>
 1001a38:	d9014117 	ldw	r4,1284(sp)
 1001a3c:	000b883a 	mov	r5,zero
 1001a40:	980d883a 	mov	r6,r19
 1001a44:	10058600 	call	1005860 <memchr>
 1001a48:	10025926 	beq	r2,zero,10023b0 <___vfprintf_internal_r+0x1c0c>
 1001a4c:	d8c14117 	ldw	r3,1284(sp)
 1001a50:	10cfc83a 	sub	r7,r2,r3
 1001a54:	99c19e16 	blt	r19,r7,10020d0 <___vfprintf_internal_r+0x192c>
 1001a58:	d9c14515 	stw	r7,1300(sp)
 1001a5c:	38000916 	blt	r7,zero,1001a84 <___vfprintf_internal_r+0x12e0>
 1001a60:	d8014615 	stw	zero,1304(sp)
 1001a64:	003df106 	br	100122c <___vfprintf_internal_r+0xa88>
 1001a68:	b8c00007 	ldb	r3,0(r23)
 1001a6c:	003bcc06 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 1001a70:	d9014117 	ldw	r4,1284(sp)
 1001a74:	10006d80 	call	10006d8 <strlen>
 1001a78:	d8814515 	stw	r2,1300(sp)
 1001a7c:	100f883a 	mov	r7,r2
 1001a80:	103ff70e 	bge	r2,zero,1001a60 <___vfprintf_internal_r+0x12bc>
 1001a84:	d8014515 	stw	zero,1300(sp)
 1001a88:	d8014615 	stw	zero,1304(sp)
 1001a8c:	003de706 	br	100122c <___vfprintf_internal_r+0xa88>
 1001a90:	20c03fcc 	andi	r3,r4,255
 1001a94:	00800044 	movi	r2,1
 1001a98:	18802d26 	beq	r3,r2,1001b50 <___vfprintf_internal_r+0x13ac>
 1001a9c:	18800e36 	bltu	r3,r2,1001ad8 <___vfprintf_internal_r+0x1334>
 1001aa0:	00800084 	movi	r2,2
 1001aa4:	1880fa26 	beq	r3,r2,1001e90 <___vfprintf_internal_r+0x16ec>
 1001aa8:	01004074 	movhi	r4,257
 1001aac:	210c8d04 	addi	r4,r4,12852
 1001ab0:	10006d80 	call	10006d8 <strlen>
 1001ab4:	100f883a 	mov	r7,r2
 1001ab8:	dcc14515 	stw	r19,1300(sp)
 1001abc:	9880010e 	bge	r19,r2,1001ac4 <___vfprintf_internal_r+0x1320>
 1001ac0:	d8814515 	stw	r2,1300(sp)
 1001ac4:	00804074 	movhi	r2,257
 1001ac8:	108c8d04 	addi	r2,r2,12852
 1001acc:	dcc14615 	stw	r19,1304(sp)
 1001ad0:	d8814115 	stw	r2,1284(sp)
 1001ad4:	003dd506 	br	100122c <___vfprintf_internal_r+0xa88>
 1001ad8:	d9401904 	addi	r5,sp,100
 1001adc:	dd000f04 	addi	r20,sp,60
 1001ae0:	d9414115 	stw	r5,1284(sp)
 1001ae4:	880a977a 	slli	r5,r17,29
 1001ae8:	d9814117 	ldw	r6,1284(sp)
 1001aec:	8004d0fa 	srli	r2,r16,3
 1001af0:	8806d0fa 	srli	r3,r17,3
 1001af4:	810001cc 	andi	r4,r16,7
 1001af8:	2884b03a 	or	r2,r5,r2
 1001afc:	31bfffc4 	addi	r6,r6,-1
 1001b00:	21000c04 	addi	r4,r4,48
 1001b04:	d9814115 	stw	r6,1284(sp)
 1001b08:	10cab03a 	or	r5,r2,r3
 1001b0c:	31000005 	stb	r4,0(r6)
 1001b10:	1021883a 	mov	r16,r2
 1001b14:	1823883a 	mov	r17,r3
 1001b18:	283ff21e 	bne	r5,zero,1001ae4 <___vfprintf_internal_r+0x1340>
 1001b1c:	d8c14c17 	ldw	r3,1328(sp)
 1001b20:	1880004c 	andi	r2,r3,1
 1001b24:	1005003a 	cmpeq	r2,r2,zero
 1001b28:	103db91e 	bne	r2,zero,1001210 <___vfprintf_internal_r+0xa6c>
 1001b2c:	20803fcc 	andi	r2,r4,255
 1001b30:	1080201c 	xori	r2,r2,128
 1001b34:	10bfe004 	addi	r2,r2,-128
 1001b38:	00c00c04 	movi	r3,48
 1001b3c:	10fdb426 	beq	r2,r3,1001210 <___vfprintf_internal_r+0xa6c>
 1001b40:	31bfffc4 	addi	r6,r6,-1
 1001b44:	d9814115 	stw	r6,1284(sp)
 1001b48:	30c00005 	stb	r3,0(r6)
 1001b4c:	003db006 	br	1001210 <___vfprintf_internal_r+0xa6c>
 1001b50:	88800068 	cmpgeui	r2,r17,1
 1001b54:	10002c1e 	bne	r2,zero,1001c08 <___vfprintf_internal_r+0x1464>
 1001b58:	8800021e 	bne	r17,zero,1001b64 <___vfprintf_internal_r+0x13c0>
 1001b5c:	00800244 	movi	r2,9
 1001b60:	14002936 	bltu	r2,r16,1001c08 <___vfprintf_internal_r+0x1464>
 1001b64:	d90018c4 	addi	r4,sp,99
 1001b68:	dd000f04 	addi	r20,sp,60
 1001b6c:	d9014115 	stw	r4,1284(sp)
 1001b70:	d9014117 	ldw	r4,1284(sp)
 1001b74:	80800c04 	addi	r2,r16,48
 1001b78:	20800005 	stb	r2,0(r4)
 1001b7c:	003da406 	br	1001210 <___vfprintf_internal_r+0xa6c>
 1001b80:	dc400d17 	ldw	r17,52(sp)
 1001b84:	07004074 	movhi	fp,257
 1001b88:	e70c9484 	addi	fp,fp,12882
 1001b8c:	9425883a 	add	r18,r18,r16
 1001b90:	8c400044 	addi	r17,r17,1
 1001b94:	008001c4 	movi	r2,7
 1001b98:	1f000015 	stw	fp,0(r3)
 1001b9c:	1c000115 	stw	r16,4(r3)
 1001ba0:	dc800e15 	stw	r18,56(sp)
 1001ba4:	dc400d15 	stw	r17,52(sp)
 1001ba8:	147de216 	blt	r2,r17,1001334 <___vfprintf_internal_r+0xb90>
 1001bac:	18c00204 	addi	r3,r3,8
 1001bb0:	003c7a06 	br	1000d9c <___vfprintf_internal_r+0x5f8>
 1001bb4:	01000084 	movi	r4,2
 1001bb8:	d8000405 	stb	zero,16(sp)
 1001bbc:	003d8706 	br	10011dc <___vfprintf_internal_r+0xa38>
 1001bc0:	d9814c17 	ldw	r6,1328(sp)
 1001bc4:	30c4703a 	and	r2,r6,r3
 1001bc8:	1005003a 	cmpeq	r2,r2,zero
 1001bcc:	103cb926 	beq	r2,zero,1000eb4 <___vfprintf_internal_r+0x710>
 1001bd0:	d9014117 	ldw	r4,1284(sp)
 1001bd4:	94800044 	addi	r18,r18,1
 1001bd8:	8c400044 	addi	r17,r17,1
 1001bdc:	008001c4 	movi	r2,7
 1001be0:	a9000015 	stw	r4,0(r21)
 1001be4:	a8c00115 	stw	r3,4(r21)
 1001be8:	dc800e15 	stw	r18,56(sp)
 1001bec:	dc400d15 	stw	r17,52(sp)
 1001bf0:	147e6616 	blt	r2,r17,100158c <___vfprintf_internal_r+0xde8>
 1001bf4:	acc00204 	addi	r19,r21,8
 1001bf8:	003cd706 	br	1000f58 <___vfprintf_internal_r+0x7b4>
 1001bfc:	07004074 	movhi	fp,257
 1001c00:	e70c9484 	addi	fp,fp,12882
 1001c04:	003c4f06 	br	1000d44 <___vfprintf_internal_r+0x5a0>
 1001c08:	dd000f04 	addi	r20,sp,60
 1001c0c:	dc801904 	addi	r18,sp,100
 1001c10:	8009883a 	mov	r4,r16
 1001c14:	880b883a 	mov	r5,r17
 1001c18:	01800284 	movi	r6,10
 1001c1c:	000f883a 	mov	r7,zero
 1001c20:	10081d40 	call	10081d4 <__umoddi3>
 1001c24:	12000c04 	addi	r8,r2,48
 1001c28:	94bfffc4 	addi	r18,r18,-1
 1001c2c:	8009883a 	mov	r4,r16
 1001c30:	880b883a 	mov	r5,r17
 1001c34:	01800284 	movi	r6,10
 1001c38:	000f883a 	mov	r7,zero
 1001c3c:	92000005 	stb	r8,0(r18)
 1001c40:	1007bf80 	call	1007bf8 <__udivdi3>
 1001c44:	1009883a 	mov	r4,r2
 1001c48:	1021883a 	mov	r16,r2
 1001c4c:	18800068 	cmpgeui	r2,r3,1
 1001c50:	1823883a 	mov	r17,r3
 1001c54:	103fee1e 	bne	r2,zero,1001c10 <___vfprintf_internal_r+0x146c>
 1001c58:	1800021e 	bne	r3,zero,1001c64 <___vfprintf_internal_r+0x14c0>
 1001c5c:	00800244 	movi	r2,9
 1001c60:	113feb36 	bltu	r2,r4,1001c10 <___vfprintf_internal_r+0x146c>
 1001c64:	94bfffc4 	addi	r18,r18,-1
 1001c68:	dc814115 	stw	r18,1284(sp)
 1001c6c:	003fc006 	br	1001b70 <___vfprintf_internal_r+0x13cc>
 1001c70:	d9014c17 	ldw	r4,1328(sp)
 1001c74:	2080004c 	andi	r2,r4,1
 1001c78:	10009a1e 	bne	r2,zero,1001ee4 <___vfprintf_internal_r+0x1740>
 1001c7c:	d9401904 	addi	r5,sp,100
 1001c80:	dd000f04 	addi	r20,sp,60
 1001c84:	d9414115 	stw	r5,1284(sp)
 1001c88:	003d6106 	br	1001210 <___vfprintf_internal_r+0xa6c>
 1001c8c:	d9014f17 	ldw	r4,1340(sp)
 1001c90:	b00b883a 	mov	r5,r22
 1001c94:	d9800c04 	addi	r6,sp,48
 1001c98:	100074c0 	call	100074c <__sprint_r>
 1001c9c:	103c791e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001ca0:	dc800e17 	ldw	r18,56(sp)
 1001ca4:	d8c01904 	addi	r3,sp,100
 1001ca8:	003cff06 	br	10010a8 <___vfprintf_internal_r+0x904>
 1001cac:	d8c14c17 	ldw	r3,1328(sp)
 1001cb0:	1880040c 	andi	r2,r3,16
 1001cb4:	1000711e 	bne	r2,zero,1001e7c <___vfprintf_internal_r+0x16d8>
 1001cb8:	d9014c17 	ldw	r4,1328(sp)
 1001cbc:	2080100c 	andi	r2,r4,64
 1001cc0:	10006e26 	beq	r2,zero,1001e7c <___vfprintf_internal_r+0x16d8>
 1001cc4:	3c00000b 	ldhu	r16,0(r7)
 1001cc8:	0023883a 	mov	r17,zero
 1001ccc:	39c00104 	addi	r7,r7,4
 1001cd0:	d9c14015 	stw	r7,1280(sp)
 1001cd4:	003f0006 	br	10018d8 <___vfprintf_internal_r+0x1134>
 1001cd8:	dc400d17 	ldw	r17,52(sp)
 1001cdc:	07004074 	movhi	fp,257
 1001ce0:	e70c9484 	addi	fp,fp,12882
 1001ce4:	9425883a 	add	r18,r18,r16
 1001ce8:	8c400044 	addi	r17,r17,1
 1001cec:	008001c4 	movi	r2,7
 1001cf0:	1f000015 	stw	fp,0(r3)
 1001cf4:	1c000115 	stw	r16,4(r3)
 1001cf8:	dc800e15 	stw	r18,56(sp)
 1001cfc:	dc400d15 	stw	r17,52(sp)
 1001d00:	147d7616 	blt	r2,r17,10012dc <___vfprintf_internal_r+0xb38>
 1001d04:	18c00204 	addi	r3,r3,8
 1001d08:	003d7b06 	br	10012f8 <___vfprintf_internal_r+0xb54>
 1001d0c:	dc800e17 	ldw	r18,56(sp)
 1001d10:	dc400d17 	ldw	r17,52(sp)
 1001d14:	07004074 	movhi	fp,257
 1001d18:	e70c9884 	addi	fp,fp,12898
 1001d1c:	003bc006 	br	1000c20 <___vfprintf_internal_r+0x47c>
 1001d20:	d9014f17 	ldw	r4,1340(sp)
 1001d24:	b00b883a 	mov	r5,r22
 1001d28:	d9800c04 	addi	r6,sp,48
 1001d2c:	100074c0 	call	100074c <__sprint_r>
 1001d30:	103c541e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001d34:	dc800e17 	ldw	r18,56(sp)
 1001d38:	d8c01904 	addi	r3,sp,100
 1001d3c:	003ce906 	br	10010e4 <___vfprintf_internal_r+0x940>
 1001d40:	3c000017 	ldw	r16,0(r7)
 1001d44:	0009883a 	mov	r4,zero
 1001d48:	39c00104 	addi	r7,r7,4
 1001d4c:	0023883a 	mov	r17,zero
 1001d50:	d9c14015 	stw	r7,1280(sp)
 1001d54:	d8000405 	stb	zero,16(sp)
 1001d58:	003d2006 	br	10011dc <___vfprintf_internal_r+0xa38>
 1001d5c:	38800017 	ldw	r2,0(r7)
 1001d60:	39c00104 	addi	r7,r7,4
 1001d64:	d9c14015 	stw	r7,1280(sp)
 1001d68:	1023d7fa 	srai	r17,r2,31
 1001d6c:	1021883a 	mov	r16,r2
 1001d70:	003d1806 	br	10011d4 <___vfprintf_internal_r+0xa30>
 1001d74:	3c000017 	ldw	r16,0(r7)
 1001d78:	01000044 	movi	r4,1
 1001d7c:	39c00104 	addi	r7,r7,4
 1001d80:	0023883a 	mov	r17,zero
 1001d84:	d9c14015 	stw	r7,1280(sp)
 1001d88:	d8000405 	stb	zero,16(sp)
 1001d8c:	003d1306 	br	10011dc <___vfprintf_internal_r+0xa38>
 1001d90:	00804074 	movhi	r2,257
 1001d94:	108c9404 	addi	r2,r2,12880
 1001d98:	94800044 	addi	r18,r18,1
 1001d9c:	8c400044 	addi	r17,r17,1
 1001da0:	a8800015 	stw	r2,0(r21)
 1001da4:	00c00044 	movi	r3,1
 1001da8:	008001c4 	movi	r2,7
 1001dac:	a8c00115 	stw	r3,4(r21)
 1001db0:	dc800e15 	stw	r18,56(sp)
 1001db4:	dc400d15 	stw	r17,52(sp)
 1001db8:	1440ca16 	blt	r2,r17,10020e4 <___vfprintf_internal_r+0x1940>
 1001dbc:	a8c00204 	addi	r3,r21,8
 1001dc0:	2000061e 	bne	r4,zero,1001ddc <___vfprintf_internal_r+0x1638>
 1001dc4:	d9414717 	ldw	r5,1308(sp)
 1001dc8:	2800041e 	bne	r5,zero,1001ddc <___vfprintf_internal_r+0x1638>
 1001dcc:	d9814c17 	ldw	r6,1328(sp)
 1001dd0:	3080004c 	andi	r2,r6,1
 1001dd4:	1005003a 	cmpeq	r2,r2,zero
 1001dd8:	103bf01e 	bne	r2,zero,1000d9c <___vfprintf_internal_r+0x5f8>
 1001ddc:	00800044 	movi	r2,1
 1001de0:	dc400d17 	ldw	r17,52(sp)
 1001de4:	18800115 	stw	r2,4(r3)
 1001de8:	d8814917 	ldw	r2,1316(sp)
 1001dec:	94800044 	addi	r18,r18,1
 1001df0:	8c400044 	addi	r17,r17,1
 1001df4:	18800015 	stw	r2,0(r3)
 1001df8:	008001c4 	movi	r2,7
 1001dfc:	dc800e15 	stw	r18,56(sp)
 1001e00:	dc400d15 	stw	r17,52(sp)
 1001e04:	1440ca16 	blt	r2,r17,1002130 <___vfprintf_internal_r+0x198c>
 1001e08:	18c00204 	addi	r3,r3,8
 1001e0c:	0121c83a 	sub	r16,zero,r4
 1001e10:	0400500e 	bge	zero,r16,1001f54 <___vfprintf_internal_r+0x17b0>
 1001e14:	00800404 	movi	r2,16
 1001e18:	1400800e 	bge	r2,r16,100201c <___vfprintf_internal_r+0x1878>
 1001e1c:	1027883a 	mov	r19,r2
 1001e20:	07004074 	movhi	fp,257
 1001e24:	e70c9484 	addi	fp,fp,12882
 1001e28:	050001c4 	movi	r20,7
 1001e2c:	00000306 	br	1001e3c <___vfprintf_internal_r+0x1698>
 1001e30:	18c00204 	addi	r3,r3,8
 1001e34:	843ffc04 	addi	r16,r16,-16
 1001e38:	9c007a0e 	bge	r19,r16,1002024 <___vfprintf_internal_r+0x1880>
 1001e3c:	94800404 	addi	r18,r18,16
 1001e40:	8c400044 	addi	r17,r17,1
 1001e44:	1f000015 	stw	fp,0(r3)
 1001e48:	1cc00115 	stw	r19,4(r3)
 1001e4c:	dc800e15 	stw	r18,56(sp)
 1001e50:	dc400d15 	stw	r17,52(sp)
 1001e54:	a47ff60e 	bge	r20,r17,1001e30 <___vfprintf_internal_r+0x168c>
 1001e58:	d9014f17 	ldw	r4,1340(sp)
 1001e5c:	b00b883a 	mov	r5,r22
 1001e60:	d9800c04 	addi	r6,sp,48
 1001e64:	100074c0 	call	100074c <__sprint_r>
 1001e68:	103c061e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001e6c:	dc800e17 	ldw	r18,56(sp)
 1001e70:	dc400d17 	ldw	r17,52(sp)
 1001e74:	d8c01904 	addi	r3,sp,100
 1001e78:	003fee06 	br	1001e34 <___vfprintf_internal_r+0x1690>
 1001e7c:	3c000017 	ldw	r16,0(r7)
 1001e80:	0023883a 	mov	r17,zero
 1001e84:	39c00104 	addi	r7,r7,4
 1001e88:	d9c14015 	stw	r7,1280(sp)
 1001e8c:	003e9206 	br	10018d8 <___vfprintf_internal_r+0x1134>
 1001e90:	d9401904 	addi	r5,sp,100
 1001e94:	dd000f04 	addi	r20,sp,60
 1001e98:	d9414115 	stw	r5,1284(sp)
 1001e9c:	d9814417 	ldw	r6,1296(sp)
 1001ea0:	880a973a 	slli	r5,r17,28
 1001ea4:	8004d13a 	srli	r2,r16,4
 1001ea8:	810003cc 	andi	r4,r16,15
 1001eac:	3109883a 	add	r4,r6,r4
 1001eb0:	2884b03a 	or	r2,r5,r2
 1001eb4:	21400003 	ldbu	r5,0(r4)
 1001eb8:	d9014117 	ldw	r4,1284(sp)
 1001ebc:	8806d13a 	srli	r3,r17,4
 1001ec0:	1021883a 	mov	r16,r2
 1001ec4:	213fffc4 	addi	r4,r4,-1
 1001ec8:	d9014115 	stw	r4,1284(sp)
 1001ecc:	d9814117 	ldw	r6,1284(sp)
 1001ed0:	10c8b03a 	or	r4,r2,r3
 1001ed4:	1823883a 	mov	r17,r3
 1001ed8:	31400005 	stb	r5,0(r6)
 1001edc:	203fef1e 	bne	r4,zero,1001e9c <___vfprintf_internal_r+0x16f8>
 1001ee0:	003ccb06 	br	1001210 <___vfprintf_internal_r+0xa6c>
 1001ee4:	00800c04 	movi	r2,48
 1001ee8:	d98018c4 	addi	r6,sp,99
 1001eec:	dd000f04 	addi	r20,sp,60
 1001ef0:	d88018c5 	stb	r2,99(sp)
 1001ef4:	d9814115 	stw	r6,1284(sp)
 1001ef8:	003cc506 	br	1001210 <___vfprintf_internal_r+0xa6c>
 1001efc:	dc400d17 	ldw	r17,52(sp)
 1001f00:	07004074 	movhi	fp,257
 1001f04:	e70c9884 	addi	fp,fp,12898
 1001f08:	003bc706 	br	1000e28 <___vfprintf_internal_r+0x684>
 1001f0c:	d9414c17 	ldw	r5,1328(sp)
 1001f10:	2880040c 	andi	r2,r5,16
 1001f14:	10007c26 	beq	r2,zero,1002108 <___vfprintf_internal_r+0x1964>
 1001f18:	38800017 	ldw	r2,0(r7)
 1001f1c:	39c00104 	addi	r7,r7,4
 1001f20:	d9c14015 	stw	r7,1280(sp)
 1001f24:	d9814b17 	ldw	r6,1324(sp)
 1001f28:	d9c14017 	ldw	r7,1280(sp)
 1001f2c:	11800015 	stw	r6,0(r2)
 1001f30:	003a7806 	br	1000914 <___vfprintf_internal_r+0x170>
 1001f34:	d9014f17 	ldw	r4,1340(sp)
 1001f38:	b00b883a 	mov	r5,r22
 1001f3c:	d9800c04 	addi	r6,sp,48
 1001f40:	100074c0 	call	100074c <__sprint_r>
 1001f44:	103bcf1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001f48:	dc800e17 	ldw	r18,56(sp)
 1001f4c:	dc400d17 	ldw	r17,52(sp)
 1001f50:	d8c01904 	addi	r3,sp,100
 1001f54:	d9014717 	ldw	r4,1308(sp)
 1001f58:	d9414117 	ldw	r5,1284(sp)
 1001f5c:	8c400044 	addi	r17,r17,1
 1001f60:	9125883a 	add	r18,r18,r4
 1001f64:	008001c4 	movi	r2,7
 1001f68:	19400015 	stw	r5,0(r3)
 1001f6c:	19000115 	stw	r4,4(r3)
 1001f70:	dc800e15 	stw	r18,56(sp)
 1001f74:	dc400d15 	stw	r17,52(sp)
 1001f78:	147cee16 	blt	r2,r17,1001334 <___vfprintf_internal_r+0xb90>
 1001f7c:	18c00204 	addi	r3,r3,8
 1001f80:	003b8606 	br	1000d9c <___vfprintf_internal_r+0x5f8>
 1001f84:	38c00017 	ldw	r3,0(r7)
 1001f88:	39000204 	addi	r4,r7,8
 1001f8c:	d9014015 	stw	r4,1280(sp)
 1001f90:	d8c14215 	stw	r3,1288(sp)
 1001f94:	39c00117 	ldw	r7,4(r7)
 1001f98:	d9c14315 	stw	r7,1292(sp)
 1001f9c:	003e2006 	br	1001820 <___vfprintf_internal_r+0x107c>
 1001fa0:	0005883a 	mov	r2,zero
 1001fa4:	1409c83a 	sub	r4,r2,r16
 1001fa8:	1105803a 	cmpltu	r2,r2,r4
 1001fac:	044bc83a 	sub	r5,zero,r17
 1001fb0:	2885c83a 	sub	r2,r5,r2
 1001fb4:	2021883a 	mov	r16,r4
 1001fb8:	1023883a 	mov	r17,r2
 1001fbc:	01000044 	movi	r4,1
 1001fc0:	00800b44 	movi	r2,45
 1001fc4:	d8800405 	stb	r2,16(sp)
 1001fc8:	003c8406 	br	10011dc <___vfprintf_internal_r+0xa38>
 1001fcc:	d9014f17 	ldw	r4,1340(sp)
 1001fd0:	b00b883a 	mov	r5,r22
 1001fd4:	d9800c04 	addi	r6,sp,48
 1001fd8:	100074c0 	call	100074c <__sprint_r>
 1001fdc:	103ba91e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1001fe0:	dc800e17 	ldw	r18,56(sp)
 1001fe4:	dc400d17 	ldw	r17,52(sp)
 1001fe8:	d9000517 	ldw	r4,20(sp)
 1001fec:	d9401904 	addi	r5,sp,100
 1001ff0:	003da706 	br	1001690 <___vfprintf_internal_r+0xeec>
 1001ff4:	d9014f17 	ldw	r4,1340(sp)
 1001ff8:	b00b883a 	mov	r5,r22
 1001ffc:	d9800c04 	addi	r6,sp,48
 1002000:	100074c0 	call	100074c <__sprint_r>
 1002004:	103b9f1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1002008:	dc800e17 	ldw	r18,56(sp)
 100200c:	dc400d17 	ldw	r17,52(sp)
 1002010:	d9000517 	ldw	r4,20(sp)
 1002014:	d8c01904 	addi	r3,sp,100
 1002018:	003d9106 	br	1001660 <___vfprintf_internal_r+0xebc>
 100201c:	07004074 	movhi	fp,257
 1002020:	e70c9484 	addi	fp,fp,12882
 1002024:	9425883a 	add	r18,r18,r16
 1002028:	8c400044 	addi	r17,r17,1
 100202c:	008001c4 	movi	r2,7
 1002030:	1f000015 	stw	fp,0(r3)
 1002034:	1c000115 	stw	r16,4(r3)
 1002038:	dc800e15 	stw	r18,56(sp)
 100203c:	dc400d15 	stw	r17,52(sp)
 1002040:	147fbc16 	blt	r2,r17,1001f34 <___vfprintf_internal_r+0x1790>
 1002044:	18c00204 	addi	r3,r3,8
 1002048:	003fc206 	br	1001f54 <___vfprintf_internal_r+0x17b0>
 100204c:	d9014f17 	ldw	r4,1340(sp)
 1002050:	b00b883a 	mov	r5,r22
 1002054:	d9800c04 	addi	r6,sp,48
 1002058:	100074c0 	call	100074c <__sprint_r>
 100205c:	103b891e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1002060:	dc800e17 	ldw	r18,56(sp)
 1002064:	d9000517 	ldw	r4,20(sp)
 1002068:	d8c01904 	addi	r3,sp,100
 100206c:	003d0206 	br	1001478 <___vfprintf_internal_r+0xcd4>
 1002070:	07004074 	movhi	fp,257
 1002074:	e70c9484 	addi	fp,fp,12882
 1002078:	003be406 	br	100100c <___vfprintf_internal_r+0x868>
 100207c:	00804074 	movhi	r2,257
 1002080:	108c8304 	addi	r2,r2,12812
 1002084:	d8814115 	stw	r2,1284(sp)
 1002088:	003df506 	br	1001860 <___vfprintf_internal_r+0x10bc>
 100208c:	d9014217 	ldw	r4,1288(sp)
 1002090:	d9414317 	ldw	r5,1292(sp)
 1002094:	10073700 	call	1007370 <__isnand>
 1002098:	10003926 	beq	r2,zero,1002180 <___vfprintf_internal_r+0x19dc>
 100209c:	d9414d17 	ldw	r5,1332(sp)
 10020a0:	008011c4 	movi	r2,71
 10020a4:	1140ce16 	blt	r2,r5,10023e0 <___vfprintf_internal_r+0x1c3c>
 10020a8:	01804074 	movhi	r6,257
 10020ac:	318c8404 	addi	r6,r6,12816
 10020b0:	d9814115 	stw	r6,1284(sp)
 10020b4:	003dea06 	br	1001860 <___vfprintf_internal_r+0x10bc>
 10020b8:	d9014c17 	ldw	r4,1328(sp)
 10020bc:	bdc00044 	addi	r23,r23,1
 10020c0:	b8c00007 	ldb	r3,0(r23)
 10020c4:	21000814 	ori	r4,r4,32
 10020c8:	d9014c15 	stw	r4,1328(sp)
 10020cc:	003a3406 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 10020d0:	dcc14515 	stw	r19,1300(sp)
 10020d4:	98011016 	blt	r19,zero,1002518 <___vfprintf_internal_r+0x1d74>
 10020d8:	980f883a 	mov	r7,r19
 10020dc:	d8014615 	stw	zero,1304(sp)
 10020e0:	003c5206 	br	100122c <___vfprintf_internal_r+0xa88>
 10020e4:	d9014f17 	ldw	r4,1340(sp)
 10020e8:	b00b883a 	mov	r5,r22
 10020ec:	d9800c04 	addi	r6,sp,48
 10020f0:	100074c0 	call	100074c <__sprint_r>
 10020f4:	103b631e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 10020f8:	dc800e17 	ldw	r18,56(sp)
 10020fc:	d9000517 	ldw	r4,20(sp)
 1002100:	d8c01904 	addi	r3,sp,100
 1002104:	003f2e06 	br	1001dc0 <___vfprintf_internal_r+0x161c>
 1002108:	d8c14c17 	ldw	r3,1328(sp)
 100210c:	1880100c 	andi	r2,r3,64
 1002110:	1000a026 	beq	r2,zero,1002394 <___vfprintf_internal_r+0x1bf0>
 1002114:	38800017 	ldw	r2,0(r7)
 1002118:	39c00104 	addi	r7,r7,4
 100211c:	d9c14015 	stw	r7,1280(sp)
 1002120:	d9014b17 	ldw	r4,1324(sp)
 1002124:	d9c14017 	ldw	r7,1280(sp)
 1002128:	1100000d 	sth	r4,0(r2)
 100212c:	0039f906 	br	1000914 <___vfprintf_internal_r+0x170>
 1002130:	d9014f17 	ldw	r4,1340(sp)
 1002134:	b00b883a 	mov	r5,r22
 1002138:	d9800c04 	addi	r6,sp,48
 100213c:	100074c0 	call	100074c <__sprint_r>
 1002140:	103b501e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1002144:	dc800e17 	ldw	r18,56(sp)
 1002148:	dc400d17 	ldw	r17,52(sp)
 100214c:	d9000517 	ldw	r4,20(sp)
 1002150:	d8c01904 	addi	r3,sp,100
 1002154:	003f2d06 	br	1001e0c <___vfprintf_internal_r+0x1668>
 1002158:	00800184 	movi	r2,6
 100215c:	14c09a36 	bltu	r2,r19,10023c8 <___vfprintf_internal_r+0x1c24>
 1002160:	dcc14515 	stw	r19,1300(sp)
 1002164:	9800010e 	bge	r19,zero,100216c <___vfprintf_internal_r+0x19c8>
 1002168:	d8014515 	stw	zero,1300(sp)
 100216c:	00804074 	movhi	r2,257
 1002170:	108c8604 	addi	r2,r2,12824
 1002174:	980f883a 	mov	r7,r19
 1002178:	d8814115 	stw	r2,1284(sp)
 100217c:	003a7806 	br	1000b60 <___vfprintf_internal_r+0x3bc>
 1002180:	00bfffc4 	movi	r2,-1
 1002184:	9880e226 	beq	r19,r2,1002510 <___vfprintf_internal_r+0x1d6c>
 1002188:	d9414d17 	ldw	r5,1332(sp)
 100218c:	008019c4 	movi	r2,103
 1002190:	2880dc26 	beq	r5,r2,1002504 <___vfprintf_internal_r+0x1d60>
 1002194:	008011c4 	movi	r2,71
 1002198:	2880da26 	beq	r5,r2,1002504 <___vfprintf_internal_r+0x1d60>
 100219c:	d9414c17 	ldw	r5,1328(sp)
 10021a0:	d9014317 	ldw	r4,1292(sp)
 10021a4:	d9814217 	ldw	r6,1288(sp)
 10021a8:	29404014 	ori	r5,r5,256
 10021ac:	d9414c15 	stw	r5,1328(sp)
 10021b0:	2000cc16 	blt	r4,zero,10024e4 <___vfprintf_internal_r+0x1d40>
 10021b4:	3021883a 	mov	r16,r6
 10021b8:	2023883a 	mov	r17,r4
 10021bc:	0039883a 	mov	fp,zero
 10021c0:	d9414d17 	ldw	r5,1332(sp)
 10021c4:	00801984 	movi	r2,102
 10021c8:	2880b726 	beq	r5,r2,10024a8 <___vfprintf_internal_r+0x1d04>
 10021cc:	00801184 	movi	r2,70
 10021d0:	2880b526 	beq	r5,r2,10024a8 <___vfprintf_internal_r+0x1d04>
 10021d4:	00801944 	movi	r2,101
 10021d8:	2880c826 	beq	r5,r2,10024fc <___vfprintf_internal_r+0x1d58>
 10021dc:	00801144 	movi	r2,69
 10021e0:	2880c626 	beq	r5,r2,10024fc <___vfprintf_internal_r+0x1d58>
 10021e4:	9829883a 	mov	r20,r19
 10021e8:	d9014f17 	ldw	r4,1340(sp)
 10021ec:	d8800504 	addi	r2,sp,20
 10021f0:	880d883a 	mov	r6,r17
 10021f4:	d8800115 	stw	r2,4(sp)
 10021f8:	d8c00604 	addi	r3,sp,24
 10021fc:	d8800704 	addi	r2,sp,28
 1002200:	800b883a 	mov	r5,r16
 1002204:	01c00084 	movi	r7,2
 1002208:	d8c00215 	stw	r3,8(sp)
 100220c:	d8800315 	stw	r2,12(sp)
 1002210:	dd000015 	stw	r20,0(sp)
 1002214:	10029c80 	call	10029c8 <_dtoa_r>
 1002218:	d9814d17 	ldw	r6,1332(sp)
 100221c:	d8814115 	stw	r2,1284(sp)
 1002220:	008019c4 	movi	r2,103
 1002224:	30809526 	beq	r6,r2,100247c <___vfprintf_internal_r+0x1cd8>
 1002228:	d8c14d17 	ldw	r3,1332(sp)
 100222c:	008011c4 	movi	r2,71
 1002230:	18809226 	beq	r3,r2,100247c <___vfprintf_internal_r+0x1cd8>
 1002234:	d9414117 	ldw	r5,1284(sp)
 1002238:	d9814d17 	ldw	r6,1332(sp)
 100223c:	00801984 	movi	r2,102
 1002240:	2d25883a 	add	r18,r5,r20
 1002244:	30808626 	beq	r6,r2,1002460 <___vfprintf_internal_r+0x1cbc>
 1002248:	00801184 	movi	r2,70
 100224c:	30808426 	beq	r6,r2,1002460 <___vfprintf_internal_r+0x1cbc>
 1002250:	000d883a 	mov	r6,zero
 1002254:	000f883a 	mov	r7,zero
 1002258:	880b883a 	mov	r5,r17
 100225c:	8009883a 	mov	r4,r16
 1002260:	10092a40 	call	10092a4 <__eqdf2>
 1002264:	1000751e 	bne	r2,zero,100243c <___vfprintf_internal_r+0x1c98>
 1002268:	9005883a 	mov	r2,r18
 100226c:	dc800715 	stw	r18,28(sp)
 1002270:	d9014117 	ldw	r4,1284(sp)
 1002274:	d9414d17 	ldw	r5,1332(sp)
 1002278:	00c019c4 	movi	r3,103
 100227c:	1125c83a 	sub	r18,r2,r4
 1002280:	28c06826 	beq	r5,r3,1002424 <___vfprintf_internal_r+0x1c80>
 1002284:	008011c4 	movi	r2,71
 1002288:	28806626 	beq	r5,r2,1002424 <___vfprintf_internal_r+0x1c80>
 100228c:	d9000517 	ldw	r4,20(sp)
 1002290:	d8c14d17 	ldw	r3,1332(sp)
 1002294:	00801944 	movi	r2,101
 1002298:	10c05516 	blt	r2,r3,10023f0 <___vfprintf_internal_r+0x1c4c>
 100229c:	213fffc4 	addi	r4,r4,-1
 10022a0:	d9000515 	stw	r4,20(sp)
 10022a4:	d8c00805 	stb	r3,32(sp)
 10022a8:	2021883a 	mov	r16,r4
 10022ac:	2000c116 	blt	r4,zero,10025b4 <___vfprintf_internal_r+0x1e10>
 10022b0:	00800ac4 	movi	r2,43
 10022b4:	d8800845 	stb	r2,33(sp)
 10022b8:	00800244 	movi	r2,9
 10022bc:	1400af0e 	bge	r2,r16,100257c <___vfprintf_internal_r+0x1dd8>
 10022c0:	1027883a 	mov	r19,r2
 10022c4:	dc400b84 	addi	r17,sp,46
 10022c8:	8009883a 	mov	r4,r16
 10022cc:	01400284 	movi	r5,10
 10022d0:	100998c0 	call	100998c <__modsi3>
 10022d4:	10800c04 	addi	r2,r2,48
 10022d8:	8c7fffc4 	addi	r17,r17,-1
 10022dc:	8009883a 	mov	r4,r16
 10022e0:	01400284 	movi	r5,10
 10022e4:	88800005 	stb	r2,0(r17)
 10022e8:	100992c0 	call	100992c <__divsi3>
 10022ec:	1021883a 	mov	r16,r2
 10022f0:	98bff516 	blt	r19,r2,10022c8 <___vfprintf_internal_r+0x1b24>
 10022f4:	10c00c04 	addi	r3,r2,48
 10022f8:	d88009c4 	addi	r2,sp,39
 10022fc:	108001c4 	addi	r2,r2,7
 1002300:	897fffc4 	addi	r5,r17,-1
 1002304:	88ffffc5 	stb	r3,-1(r17)
 1002308:	2880a72e 	bgeu	r5,r2,10025a8 <___vfprintf_internal_r+0x1e04>
 100230c:	1009883a 	mov	r4,r2
 1002310:	d9800804 	addi	r6,sp,32
 1002314:	d8c00884 	addi	r3,sp,34
 1002318:	28800003 	ldbu	r2,0(r5)
 100231c:	29400044 	addi	r5,r5,1
 1002320:	18800005 	stb	r2,0(r3)
 1002324:	18c00044 	addi	r3,r3,1
 1002328:	293ffb36 	bltu	r5,r4,1002318 <___vfprintf_internal_r+0x1b74>
 100232c:	1987c83a 	sub	r3,r3,r6
 1002330:	00800044 	movi	r2,1
 1002334:	d8c14815 	stw	r3,1312(sp)
 1002338:	90cf883a 	add	r7,r18,r3
 100233c:	1480960e 	bge	r2,r18,1002598 <___vfprintf_internal_r+0x1df4>
 1002340:	39c00044 	addi	r7,r7,1
 1002344:	d9c14515 	stw	r7,1300(sp)
 1002348:	38003416 	blt	r7,zero,100241c <___vfprintf_internal_r+0x1c78>
 100234c:	e0803fcc 	andi	r2,fp,255
 1002350:	1080201c 	xori	r2,r2,128
 1002354:	10bfe004 	addi	r2,r2,-128
 1002358:	10004e26 	beq	r2,zero,1002494 <___vfprintf_internal_r+0x1cf0>
 100235c:	00800b44 	movi	r2,45
 1002360:	dc814715 	stw	r18,1308(sp)
 1002364:	d8014615 	stw	zero,1304(sp)
 1002368:	d8800405 	stb	r2,16(sp)
 100236c:	003bb106 	br	1001234 <___vfprintf_internal_r+0xa90>
 1002370:	00800b44 	movi	r2,45
 1002374:	d8800405 	stb	r2,16(sp)
 1002378:	003d3306 	br	1001848 <___vfprintf_internal_r+0x10a4>
 100237c:	d9014f17 	ldw	r4,1340(sp)
 1002380:	b00b883a 	mov	r5,r22
 1002384:	d9800c04 	addi	r6,sp,48
 1002388:	100074c0 	call	100074c <__sprint_r>
 100238c:	103abd1e 	bne	r2,zero,1000e84 <___vfprintf_internal_r+0x6e0>
 1002390:	003abb06 	br	1000e80 <___vfprintf_internal_r+0x6dc>
 1002394:	38800017 	ldw	r2,0(r7)
 1002398:	39c00104 	addi	r7,r7,4
 100239c:	d9c14015 	stw	r7,1280(sp)
 10023a0:	d9414b17 	ldw	r5,1324(sp)
 10023a4:	d9c14017 	ldw	r7,1280(sp)
 10023a8:	11400015 	stw	r5,0(r2)
 10023ac:	00395906 	br	1000914 <___vfprintf_internal_r+0x170>
 10023b0:	980f883a 	mov	r7,r19
 10023b4:	dcc14515 	stw	r19,1300(sp)
 10023b8:	d8014615 	stw	zero,1304(sp)
 10023bc:	003b9b06 	br	100122c <___vfprintf_internal_r+0xa88>
 10023c0:	0027883a 	mov	r19,zero
 10023c4:	00397806 	br	10009a8 <___vfprintf_internal_r+0x204>
 10023c8:	00c04074 	movhi	r3,257
 10023cc:	18cc8604 	addi	r3,r3,12824
 10023d0:	100f883a 	mov	r7,r2
 10023d4:	d8814515 	stw	r2,1300(sp)
 10023d8:	d8c14115 	stw	r3,1284(sp)
 10023dc:	0039e006 	br	1000b60 <___vfprintf_internal_r+0x3bc>
 10023e0:	00804074 	movhi	r2,257
 10023e4:	108c8504 	addi	r2,r2,12820
 10023e8:	d8814115 	stw	r2,1284(sp)
 10023ec:	003d1c06 	br	1001860 <___vfprintf_internal_r+0x10bc>
 10023f0:	d9414d17 	ldw	r5,1332(sp)
 10023f4:	00801984 	movi	r2,102
 10023f8:	28804926 	beq	r5,r2,1002520 <___vfprintf_internal_r+0x1d7c>
 10023fc:	200f883a 	mov	r7,r4
 1002400:	24805716 	blt	r4,r18,1002560 <___vfprintf_internal_r+0x1dbc>
 1002404:	d9414c17 	ldw	r5,1328(sp)
 1002408:	2880004c 	andi	r2,r5,1
 100240c:	10000126 	beq	r2,zero,1002414 <___vfprintf_internal_r+0x1c70>
 1002410:	21c00044 	addi	r7,r4,1
 1002414:	d9c14515 	stw	r7,1300(sp)
 1002418:	383fcc0e 	bge	r7,zero,100234c <___vfprintf_internal_r+0x1ba8>
 100241c:	d8014515 	stw	zero,1300(sp)
 1002420:	003fca06 	br	100234c <___vfprintf_internal_r+0x1ba8>
 1002424:	d9000517 	ldw	r4,20(sp)
 1002428:	00bfff04 	movi	r2,-4
 100242c:	1100480e 	bge	r2,r4,1002550 <___vfprintf_internal_r+0x1dac>
 1002430:	99004716 	blt	r19,r4,1002550 <___vfprintf_internal_r+0x1dac>
 1002434:	d8c14d15 	stw	r3,1332(sp)
 1002438:	003ff006 	br	10023fc <___vfprintf_internal_r+0x1c58>
 100243c:	d8800717 	ldw	r2,28(sp)
 1002440:	14bf8b2e 	bgeu	r2,r18,1002270 <___vfprintf_internal_r+0x1acc>
 1002444:	9007883a 	mov	r3,r18
 1002448:	01000c04 	movi	r4,48
 100244c:	11000005 	stb	r4,0(r2)
 1002450:	10800044 	addi	r2,r2,1
 1002454:	d8800715 	stw	r2,28(sp)
 1002458:	18bffc1e 	bne	r3,r2,100244c <___vfprintf_internal_r+0x1ca8>
 100245c:	003f8406 	br	1002270 <___vfprintf_internal_r+0x1acc>
 1002460:	d8814117 	ldw	r2,1284(sp)
 1002464:	10c00007 	ldb	r3,0(r2)
 1002468:	00800c04 	movi	r2,48
 100246c:	18805b26 	beq	r3,r2,10025dc <___vfprintf_internal_r+0x1e38>
 1002470:	d9000517 	ldw	r4,20(sp)
 1002474:	9125883a 	add	r18,r18,r4
 1002478:	003f7506 	br	1002250 <___vfprintf_internal_r+0x1aac>
 100247c:	d9014c17 	ldw	r4,1328(sp)
 1002480:	2080004c 	andi	r2,r4,1
 1002484:	1005003a 	cmpeq	r2,r2,zero
 1002488:	103f6a26 	beq	r2,zero,1002234 <___vfprintf_internal_r+0x1a90>
 100248c:	d8800717 	ldw	r2,28(sp)
 1002490:	003f7706 	br	1002270 <___vfprintf_internal_r+0x1acc>
 1002494:	d9c14515 	stw	r7,1300(sp)
 1002498:	38004d16 	blt	r7,zero,10025d0 <___vfprintf_internal_r+0x1e2c>
 100249c:	dc814715 	stw	r18,1308(sp)
 10024a0:	d8014615 	stw	zero,1304(sp)
 10024a4:	003b6106 	br	100122c <___vfprintf_internal_r+0xa88>
 10024a8:	d9014f17 	ldw	r4,1340(sp)
 10024ac:	d8800504 	addi	r2,sp,20
 10024b0:	d8800115 	stw	r2,4(sp)
 10024b4:	d8c00604 	addi	r3,sp,24
 10024b8:	d8800704 	addi	r2,sp,28
 10024bc:	800b883a 	mov	r5,r16
 10024c0:	880d883a 	mov	r6,r17
 10024c4:	01c000c4 	movi	r7,3
 10024c8:	d8c00215 	stw	r3,8(sp)
 10024cc:	d8800315 	stw	r2,12(sp)
 10024d0:	dcc00015 	stw	r19,0(sp)
 10024d4:	9829883a 	mov	r20,r19
 10024d8:	10029c80 	call	10029c8 <_dtoa_r>
 10024dc:	d8814115 	stw	r2,1284(sp)
 10024e0:	003f5106 	br	1002228 <___vfprintf_internal_r+0x1a84>
 10024e4:	d8c14217 	ldw	r3,1288(sp)
 10024e8:	d9014317 	ldw	r4,1292(sp)
 10024ec:	07000b44 	movi	fp,45
 10024f0:	1821883a 	mov	r16,r3
 10024f4:	2460003c 	xorhi	r17,r4,32768
 10024f8:	003f3106 	br	10021c0 <___vfprintf_internal_r+0x1a1c>
 10024fc:	9d000044 	addi	r20,r19,1
 1002500:	003f3906 	br	10021e8 <___vfprintf_internal_r+0x1a44>
 1002504:	983f251e 	bne	r19,zero,100219c <___vfprintf_internal_r+0x19f8>
 1002508:	04c00044 	movi	r19,1
 100250c:	003f2306 	br	100219c <___vfprintf_internal_r+0x19f8>
 1002510:	04c00184 	movi	r19,6
 1002514:	003f2106 	br	100219c <___vfprintf_internal_r+0x19f8>
 1002518:	d8014515 	stw	zero,1300(sp)
 100251c:	003eee06 	br	10020d8 <___vfprintf_internal_r+0x1934>
 1002520:	200f883a 	mov	r7,r4
 1002524:	0100370e 	bge	zero,r4,1002604 <___vfprintf_internal_r+0x1e60>
 1002528:	9800031e 	bne	r19,zero,1002538 <___vfprintf_internal_r+0x1d94>
 100252c:	d9814c17 	ldw	r6,1328(sp)
 1002530:	3080004c 	andi	r2,r6,1
 1002534:	103fb726 	beq	r2,zero,1002414 <___vfprintf_internal_r+0x1c70>
 1002538:	20800044 	addi	r2,r4,1
 100253c:	98a7883a 	add	r19,r19,r2
 1002540:	dcc14515 	stw	r19,1300(sp)
 1002544:	980f883a 	mov	r7,r19
 1002548:	983f800e 	bge	r19,zero,100234c <___vfprintf_internal_r+0x1ba8>
 100254c:	003fb306 	br	100241c <___vfprintf_internal_r+0x1c78>
 1002550:	d9814d17 	ldw	r6,1332(sp)
 1002554:	31bfff84 	addi	r6,r6,-2
 1002558:	d9814d15 	stw	r6,1332(sp)
 100255c:	003f4c06 	br	1002290 <___vfprintf_internal_r+0x1aec>
 1002560:	0100180e 	bge	zero,r4,10025c4 <___vfprintf_internal_r+0x1e20>
 1002564:	00800044 	movi	r2,1
 1002568:	1485883a 	add	r2,r2,r18
 100256c:	d8814515 	stw	r2,1300(sp)
 1002570:	100f883a 	mov	r7,r2
 1002574:	103f750e 	bge	r2,zero,100234c <___vfprintf_internal_r+0x1ba8>
 1002578:	003fa806 	br	100241c <___vfprintf_internal_r+0x1c78>
 100257c:	80c00c04 	addi	r3,r16,48
 1002580:	00800c04 	movi	r2,48
 1002584:	d8c008c5 	stb	r3,35(sp)
 1002588:	d9800804 	addi	r6,sp,32
 100258c:	d8c00904 	addi	r3,sp,36
 1002590:	d8800885 	stb	r2,34(sp)
 1002594:	003f6506 	br	100232c <___vfprintf_internal_r+0x1b88>
 1002598:	d9014c17 	ldw	r4,1328(sp)
 100259c:	2084703a 	and	r2,r4,r2
 10025a0:	103f9c26 	beq	r2,zero,1002414 <___vfprintf_internal_r+0x1c70>
 10025a4:	003f6606 	br	1002340 <___vfprintf_internal_r+0x1b9c>
 10025a8:	d9800804 	addi	r6,sp,32
 10025ac:	d8c00884 	addi	r3,sp,34
 10025b0:	003f5e06 	br	100232c <___vfprintf_internal_r+0x1b88>
 10025b4:	00800b44 	movi	r2,45
 10025b8:	0121c83a 	sub	r16,zero,r4
 10025bc:	d8800845 	stb	r2,33(sp)
 10025c0:	003f3d06 	br	10022b8 <___vfprintf_internal_r+0x1b14>
 10025c4:	00800084 	movi	r2,2
 10025c8:	1105c83a 	sub	r2,r2,r4
 10025cc:	003fe606 	br	1002568 <___vfprintf_internal_r+0x1dc4>
 10025d0:	d8014515 	stw	zero,1300(sp)
 10025d4:	dc814715 	stw	r18,1308(sp)
 10025d8:	003fb106 	br	10024a0 <___vfprintf_internal_r+0x1cfc>
 10025dc:	000d883a 	mov	r6,zero
 10025e0:	000f883a 	mov	r7,zero
 10025e4:	8009883a 	mov	r4,r16
 10025e8:	880b883a 	mov	r5,r17
 10025ec:	100932c0 	call	100932c <__nedf2>
 10025f0:	103f9f26 	beq	r2,zero,1002470 <___vfprintf_internal_r+0x1ccc>
 10025f4:	00800044 	movi	r2,1
 10025f8:	1509c83a 	sub	r4,r2,r20
 10025fc:	d9000515 	stw	r4,20(sp)
 1002600:	003f9b06 	br	1002470 <___vfprintf_internal_r+0x1ccc>
 1002604:	98000d1e 	bne	r19,zero,100263c <___vfprintf_internal_r+0x1e98>
 1002608:	d8c14c17 	ldw	r3,1328(sp)
 100260c:	1880004c 	andi	r2,r3,1
 1002610:	10000a1e 	bne	r2,zero,100263c <___vfprintf_internal_r+0x1e98>
 1002614:	01000044 	movi	r4,1
 1002618:	200f883a 	mov	r7,r4
 100261c:	d9014515 	stw	r4,1300(sp)
 1002620:	003f4a06 	br	100234c <___vfprintf_internal_r+0x1ba8>
 1002624:	3cc00017 	ldw	r19,0(r7)
 1002628:	39c00104 	addi	r7,r7,4
 100262c:	983d0e0e 	bge	r19,zero,1001a68 <___vfprintf_internal_r+0x12c4>
 1002630:	b8c00007 	ldb	r3,0(r23)
 1002634:	04ffffc4 	movi	r19,-1
 1002638:	0038d906 	br	10009a0 <___vfprintf_internal_r+0x1fc>
 100263c:	9cc00084 	addi	r19,r19,2
 1002640:	dcc14515 	stw	r19,1300(sp)
 1002644:	980f883a 	mov	r7,r19
 1002648:	983f400e 	bge	r19,zero,100234c <___vfprintf_internal_r+0x1ba8>
 100264c:	003f7306 	br	100241c <___vfprintf_internal_r+0x1c78>

01002650 <__vfprintf_internal>:
 1002650:	00804074 	movhi	r2,257
 1002654:	1094ba04 	addi	r2,r2,21224
 1002658:	2013883a 	mov	r9,r4
 100265c:	11000017 	ldw	r4,0(r2)
 1002660:	2805883a 	mov	r2,r5
 1002664:	300f883a 	mov	r7,r6
 1002668:	480b883a 	mov	r5,r9
 100266c:	100d883a 	mov	r6,r2
 1002670:	10007a41 	jmpi	10007a4 <___vfprintf_internal_r>

01002674 <__swsetup_r>:
 1002674:	00804074 	movhi	r2,257
 1002678:	1094ba04 	addi	r2,r2,21224
 100267c:	10c00017 	ldw	r3,0(r2)
 1002680:	defffd04 	addi	sp,sp,-12
 1002684:	dc400115 	stw	r17,4(sp)
 1002688:	dc000015 	stw	r16,0(sp)
 100268c:	dfc00215 	stw	ra,8(sp)
 1002690:	2023883a 	mov	r17,r4
 1002694:	2821883a 	mov	r16,r5
 1002698:	18000226 	beq	r3,zero,10026a4 <__swsetup_r+0x30>
 100269c:	18800e17 	ldw	r2,56(r3)
 10026a0:	10001f26 	beq	r2,zero,1002720 <__swsetup_r+0xac>
 10026a4:	8100030b 	ldhu	r4,12(r16)
 10026a8:	2080020c 	andi	r2,r4,8
 10026ac:	10002826 	beq	r2,zero,1002750 <__swsetup_r+0xdc>
 10026b0:	81400417 	ldw	r5,16(r16)
 10026b4:	28001d26 	beq	r5,zero,100272c <__swsetup_r+0xb8>
 10026b8:	2080004c 	andi	r2,r4,1
 10026bc:	1005003a 	cmpeq	r2,r2,zero
 10026c0:	10000b26 	beq	r2,zero,10026f0 <__swsetup_r+0x7c>
 10026c4:	2080008c 	andi	r2,r4,2
 10026c8:	10001226 	beq	r2,zero,1002714 <__swsetup_r+0xa0>
 10026cc:	0005883a 	mov	r2,zero
 10026d0:	80800215 	stw	r2,8(r16)
 10026d4:	28000b26 	beq	r5,zero,1002704 <__swsetup_r+0x90>
 10026d8:	0005883a 	mov	r2,zero
 10026dc:	dfc00217 	ldw	ra,8(sp)
 10026e0:	dc400117 	ldw	r17,4(sp)
 10026e4:	dc000017 	ldw	r16,0(sp)
 10026e8:	dec00304 	addi	sp,sp,12
 10026ec:	f800283a 	ret
 10026f0:	80800517 	ldw	r2,20(r16)
 10026f4:	80000215 	stw	zero,8(r16)
 10026f8:	0085c83a 	sub	r2,zero,r2
 10026fc:	80800615 	stw	r2,24(r16)
 1002700:	283ff51e 	bne	r5,zero,10026d8 <__swsetup_r+0x64>
 1002704:	2080200c 	andi	r2,r4,128
 1002708:	103ff326 	beq	r2,zero,10026d8 <__swsetup_r+0x64>
 100270c:	00bfffc4 	movi	r2,-1
 1002710:	003ff206 	br	10026dc <__swsetup_r+0x68>
 1002714:	80800517 	ldw	r2,20(r16)
 1002718:	80800215 	stw	r2,8(r16)
 100271c:	003fed06 	br	10026d4 <__swsetup_r+0x60>
 1002720:	1809883a 	mov	r4,r3
 1002724:	10042140 	call	1004214 <__sinit>
 1002728:	003fde06 	br	10026a4 <__swsetup_r+0x30>
 100272c:	20c0a00c 	andi	r3,r4,640
 1002730:	00808004 	movi	r2,512
 1002734:	18bfe026 	beq	r3,r2,10026b8 <__swsetup_r+0x44>
 1002738:	8809883a 	mov	r4,r17
 100273c:	800b883a 	mov	r5,r16
 1002740:	1004f8c0 	call	1004f8c <__smakebuf_r>
 1002744:	8100030b 	ldhu	r4,12(r16)
 1002748:	81400417 	ldw	r5,16(r16)
 100274c:	003fda06 	br	10026b8 <__swsetup_r+0x44>
 1002750:	2080040c 	andi	r2,r4,16
 1002754:	103fed26 	beq	r2,zero,100270c <__swsetup_r+0x98>
 1002758:	2080010c 	andi	r2,r4,4
 100275c:	10001226 	beq	r2,zero,10027a8 <__swsetup_r+0x134>
 1002760:	81400c17 	ldw	r5,48(r16)
 1002764:	28000526 	beq	r5,zero,100277c <__swsetup_r+0x108>
 1002768:	80801004 	addi	r2,r16,64
 100276c:	28800226 	beq	r5,r2,1002778 <__swsetup_r+0x104>
 1002770:	8809883a 	mov	r4,r17
 1002774:	10045980 	call	1004598 <_free_r>
 1002778:	80000c15 	stw	zero,48(r16)
 100277c:	8080030b 	ldhu	r2,12(r16)
 1002780:	81400417 	ldw	r5,16(r16)
 1002784:	80000115 	stw	zero,4(r16)
 1002788:	10bff6cc 	andi	r2,r2,65499
 100278c:	8080030d 	sth	r2,12(r16)
 1002790:	81400015 	stw	r5,0(r16)
 1002794:	8080030b 	ldhu	r2,12(r16)
 1002798:	10800214 	ori	r2,r2,8
 100279c:	113fffcc 	andi	r4,r2,65535
 10027a0:	8080030d 	sth	r2,12(r16)
 10027a4:	003fc306 	br	10026b4 <__swsetup_r+0x40>
 10027a8:	81400417 	ldw	r5,16(r16)
 10027ac:	003ff906 	br	1002794 <__swsetup_r+0x120>

010027b0 <quorem>:
 10027b0:	28c00417 	ldw	r3,16(r5)
 10027b4:	20800417 	ldw	r2,16(r4)
 10027b8:	defff604 	addi	sp,sp,-40
 10027bc:	ddc00715 	stw	r23,28(sp)
 10027c0:	dd400515 	stw	r21,20(sp)
 10027c4:	dfc00915 	stw	ra,36(sp)
 10027c8:	df000815 	stw	fp,32(sp)
 10027cc:	dd800615 	stw	r22,24(sp)
 10027d0:	dd000415 	stw	r20,16(sp)
 10027d4:	dcc00315 	stw	r19,12(sp)
 10027d8:	dc800215 	stw	r18,8(sp)
 10027dc:	dc400115 	stw	r17,4(sp)
 10027e0:	dc000015 	stw	r16,0(sp)
 10027e4:	202f883a 	mov	r23,r4
 10027e8:	282b883a 	mov	r21,r5
 10027ec:	10c07416 	blt	r2,r3,10029c0 <quorem+0x210>
 10027f0:	1c7fffc4 	addi	r17,r3,-1
 10027f4:	8c45883a 	add	r2,r17,r17
 10027f8:	1085883a 	add	r2,r2,r2
 10027fc:	2c000504 	addi	r16,r5,20
 1002800:	24c00504 	addi	r19,r4,20
 1002804:	14ed883a 	add	r22,r2,r19
 1002808:	80a5883a 	add	r18,r16,r2
 100280c:	b7000017 	ldw	fp,0(r22)
 1002810:	91400017 	ldw	r5,0(r18)
 1002814:	e009883a 	mov	r4,fp
 1002818:	29400044 	addi	r5,r5,1
 100281c:	10099ec0 	call	10099ec <__udivsi3>
 1002820:	1029883a 	mov	r20,r2
 1002824:	10003c1e 	bne	r2,zero,1002918 <quorem+0x168>
 1002828:	a80b883a 	mov	r5,r21
 100282c:	b809883a 	mov	r4,r23
 1002830:	1005cb80 	call	1005cb8 <__mcmp>
 1002834:	10002b16 	blt	r2,zero,10028e4 <quorem+0x134>
 1002838:	a5000044 	addi	r20,r20,1
 100283c:	980f883a 	mov	r7,r19
 1002840:	0011883a 	mov	r8,zero
 1002844:	0009883a 	mov	r4,zero
 1002848:	81400017 	ldw	r5,0(r16)
 100284c:	38c00017 	ldw	r3,0(r7)
 1002850:	84000104 	addi	r16,r16,4
 1002854:	28bfffcc 	andi	r2,r5,65535
 1002858:	2085883a 	add	r2,r4,r2
 100285c:	11bfffcc 	andi	r6,r2,65535
 1002860:	193fffcc 	andi	r4,r3,65535
 1002864:	1004d43a 	srli	r2,r2,16
 1002868:	280ad43a 	srli	r5,r5,16
 100286c:	2189c83a 	sub	r4,r4,r6
 1002870:	2209883a 	add	r4,r4,r8
 1002874:	1806d43a 	srli	r3,r3,16
 1002878:	288b883a 	add	r5,r5,r2
 100287c:	200dd43a 	srai	r6,r4,16
 1002880:	28bfffcc 	andi	r2,r5,65535
 1002884:	1887c83a 	sub	r3,r3,r2
 1002888:	1987883a 	add	r3,r3,r6
 100288c:	3900000d 	sth	r4,0(r7)
 1002890:	38c0008d 	sth	r3,2(r7)
 1002894:	2808d43a 	srli	r4,r5,16
 1002898:	39c00104 	addi	r7,r7,4
 100289c:	1811d43a 	srai	r8,r3,16
 10028a0:	943fe92e 	bgeu	r18,r16,1002848 <quorem+0x98>
 10028a4:	8c45883a 	add	r2,r17,r17
 10028a8:	1085883a 	add	r2,r2,r2
 10028ac:	9885883a 	add	r2,r19,r2
 10028b0:	10c00017 	ldw	r3,0(r2)
 10028b4:	18000b1e 	bne	r3,zero,10028e4 <quorem+0x134>
 10028b8:	113fff04 	addi	r4,r2,-4
 10028bc:	9900082e 	bgeu	r19,r4,10028e0 <quorem+0x130>
 10028c0:	10bfff17 	ldw	r2,-4(r2)
 10028c4:	10000326 	beq	r2,zero,10028d4 <quorem+0x124>
 10028c8:	00000506 	br	10028e0 <quorem+0x130>
 10028cc:	20800017 	ldw	r2,0(r4)
 10028d0:	1000031e 	bne	r2,zero,10028e0 <quorem+0x130>
 10028d4:	213fff04 	addi	r4,r4,-4
 10028d8:	8c7fffc4 	addi	r17,r17,-1
 10028dc:	993ffb36 	bltu	r19,r4,10028cc <quorem+0x11c>
 10028e0:	bc400415 	stw	r17,16(r23)
 10028e4:	a005883a 	mov	r2,r20
 10028e8:	dfc00917 	ldw	ra,36(sp)
 10028ec:	df000817 	ldw	fp,32(sp)
 10028f0:	ddc00717 	ldw	r23,28(sp)
 10028f4:	dd800617 	ldw	r22,24(sp)
 10028f8:	dd400517 	ldw	r21,20(sp)
 10028fc:	dd000417 	ldw	r20,16(sp)
 1002900:	dcc00317 	ldw	r19,12(sp)
 1002904:	dc800217 	ldw	r18,8(sp)
 1002908:	dc400117 	ldw	r17,4(sp)
 100290c:	dc000017 	ldw	r16,0(sp)
 1002910:	dec00a04 	addi	sp,sp,40
 1002914:	f800283a 	ret
 1002918:	980f883a 	mov	r7,r19
 100291c:	8011883a 	mov	r8,r16
 1002920:	0013883a 	mov	r9,zero
 1002924:	000d883a 	mov	r6,zero
 1002928:	40c00017 	ldw	r3,0(r8)
 100292c:	39000017 	ldw	r4,0(r7)
 1002930:	42000104 	addi	r8,r8,4
 1002934:	18bfffcc 	andi	r2,r3,65535
 1002938:	a085383a 	mul	r2,r20,r2
 100293c:	1806d43a 	srli	r3,r3,16
 1002940:	217fffcc 	andi	r5,r4,65535
 1002944:	3085883a 	add	r2,r6,r2
 1002948:	11bfffcc 	andi	r6,r2,65535
 100294c:	a0c7383a 	mul	r3,r20,r3
 1002950:	1004d43a 	srli	r2,r2,16
 1002954:	298bc83a 	sub	r5,r5,r6
 1002958:	2a4b883a 	add	r5,r5,r9
 100295c:	2008d43a 	srli	r4,r4,16
 1002960:	1887883a 	add	r3,r3,r2
 1002964:	280dd43a 	srai	r6,r5,16
 1002968:	18bfffcc 	andi	r2,r3,65535
 100296c:	2089c83a 	sub	r4,r4,r2
 1002970:	2189883a 	add	r4,r4,r6
 1002974:	3900008d 	sth	r4,2(r7)
 1002978:	3940000d 	sth	r5,0(r7)
 100297c:	180cd43a 	srli	r6,r3,16
 1002980:	39c00104 	addi	r7,r7,4
 1002984:	2013d43a 	srai	r9,r4,16
 1002988:	923fe72e 	bgeu	r18,r8,1002928 <quorem+0x178>
 100298c:	e03fa61e 	bne	fp,zero,1002828 <quorem+0x78>
 1002990:	b0ffff04 	addi	r3,r22,-4
 1002994:	98c0082e 	bgeu	r19,r3,10029b8 <quorem+0x208>
 1002998:	b0bfff17 	ldw	r2,-4(r22)
 100299c:	10000326 	beq	r2,zero,10029ac <quorem+0x1fc>
 10029a0:	00000506 	br	10029b8 <quorem+0x208>
 10029a4:	18800017 	ldw	r2,0(r3)
 10029a8:	1000031e 	bne	r2,zero,10029b8 <quorem+0x208>
 10029ac:	18ffff04 	addi	r3,r3,-4
 10029b0:	8c7fffc4 	addi	r17,r17,-1
 10029b4:	98fffb36 	bltu	r19,r3,10029a4 <quorem+0x1f4>
 10029b8:	bc400415 	stw	r17,16(r23)
 10029bc:	003f9a06 	br	1002828 <quorem+0x78>
 10029c0:	0005883a 	mov	r2,zero
 10029c4:	003fc806 	br	10028e8 <quorem+0x138>

010029c8 <_dtoa_r>:
 10029c8:	22001017 	ldw	r8,64(r4)
 10029cc:	deffda04 	addi	sp,sp,-152
 10029d0:	dd402115 	stw	r21,132(sp)
 10029d4:	dd002015 	stw	r20,128(sp)
 10029d8:	dc801e15 	stw	r18,120(sp)
 10029dc:	dc401d15 	stw	r17,116(sp)
 10029e0:	dfc02515 	stw	ra,148(sp)
 10029e4:	df002415 	stw	fp,144(sp)
 10029e8:	ddc02315 	stw	r23,140(sp)
 10029ec:	dd802215 	stw	r22,136(sp)
 10029f0:	dcc01f15 	stw	r19,124(sp)
 10029f4:	dc001c15 	stw	r16,112(sp)
 10029f8:	d9001615 	stw	r4,88(sp)
 10029fc:	3023883a 	mov	r17,r6
 1002a00:	2829883a 	mov	r20,r5
 1002a04:	d9c01715 	stw	r7,92(sp)
 1002a08:	dc802817 	ldw	r18,160(sp)
 1002a0c:	302b883a 	mov	r21,r6
 1002a10:	40000a26 	beq	r8,zero,1002a3c <_dtoa_r+0x74>
 1002a14:	20801117 	ldw	r2,68(r4)
 1002a18:	400b883a 	mov	r5,r8
 1002a1c:	40800115 	stw	r2,4(r8)
 1002a20:	20c01117 	ldw	r3,68(r4)
 1002a24:	00800044 	movi	r2,1
 1002a28:	10c4983a 	sll	r2,r2,r3
 1002a2c:	40800215 	stw	r2,8(r8)
 1002a30:	1005b5c0 	call	1005b5c <_Bfree>
 1002a34:	d8c01617 	ldw	r3,88(sp)
 1002a38:	18001015 	stw	zero,64(r3)
 1002a3c:	8800a316 	blt	r17,zero,1002ccc <_dtoa_r+0x304>
 1002a40:	90000015 	stw	zero,0(r18)
 1002a44:	a8dffc2c 	andhi	r3,r21,32752
 1002a48:	009ffc34 	movhi	r2,32752
 1002a4c:	18809126 	beq	r3,r2,1002c94 <_dtoa_r+0x2cc>
 1002a50:	000d883a 	mov	r6,zero
 1002a54:	000f883a 	mov	r7,zero
 1002a58:	a009883a 	mov	r4,r20
 1002a5c:	a80b883a 	mov	r5,r21
 1002a60:	dd001215 	stw	r20,72(sp)
 1002a64:	dd401315 	stw	r21,76(sp)
 1002a68:	100932c0 	call	100932c <__nedf2>
 1002a6c:	1000171e 	bne	r2,zero,1002acc <_dtoa_r+0x104>
 1002a70:	d9802717 	ldw	r6,156(sp)
 1002a74:	00800044 	movi	r2,1
 1002a78:	30800015 	stw	r2,0(r6)
 1002a7c:	d8802917 	ldw	r2,164(sp)
 1002a80:	10029b26 	beq	r2,zero,10034f0 <_dtoa_r+0xb28>
 1002a84:	d9002917 	ldw	r4,164(sp)
 1002a88:	00804074 	movhi	r2,257
 1002a8c:	108c9444 	addi	r2,r2,12881
 1002a90:	10ffffc4 	addi	r3,r2,-1
 1002a94:	20800015 	stw	r2,0(r4)
 1002a98:	1805883a 	mov	r2,r3
 1002a9c:	dfc02517 	ldw	ra,148(sp)
 1002aa0:	df002417 	ldw	fp,144(sp)
 1002aa4:	ddc02317 	ldw	r23,140(sp)
 1002aa8:	dd802217 	ldw	r22,136(sp)
 1002aac:	dd402117 	ldw	r21,132(sp)
 1002ab0:	dd002017 	ldw	r20,128(sp)
 1002ab4:	dcc01f17 	ldw	r19,124(sp)
 1002ab8:	dc801e17 	ldw	r18,120(sp)
 1002abc:	dc401d17 	ldw	r17,116(sp)
 1002ac0:	dc001c17 	ldw	r16,112(sp)
 1002ac4:	dec02604 	addi	sp,sp,152
 1002ac8:	f800283a 	ret
 1002acc:	d9001617 	ldw	r4,88(sp)
 1002ad0:	d9401217 	ldw	r5,72(sp)
 1002ad4:	d8800104 	addi	r2,sp,4
 1002ad8:	a80d883a 	mov	r6,r21
 1002adc:	d9c00204 	addi	r7,sp,8
 1002ae0:	d8800015 	stw	r2,0(sp)
 1002ae4:	10061980 	call	1006198 <__d2b>
 1002ae8:	d8800715 	stw	r2,28(sp)
 1002aec:	a804d53a 	srli	r2,r21,20
 1002af0:	1101ffcc 	andi	r4,r2,2047
 1002af4:	20008626 	beq	r4,zero,1002d10 <_dtoa_r+0x348>
 1002af8:	d8c01217 	ldw	r3,72(sp)
 1002afc:	00800434 	movhi	r2,16
 1002b00:	10bfffc4 	addi	r2,r2,-1
 1002b04:	ddc00117 	ldw	r23,4(sp)
 1002b08:	a884703a 	and	r2,r21,r2
 1002b0c:	1811883a 	mov	r8,r3
 1002b10:	124ffc34 	orhi	r9,r2,16368
 1002b14:	25bf0044 	addi	r22,r4,-1023
 1002b18:	d8000815 	stw	zero,32(sp)
 1002b1c:	0005883a 	mov	r2,zero
 1002b20:	00cffe34 	movhi	r3,16376
 1002b24:	480b883a 	mov	r5,r9
 1002b28:	4009883a 	mov	r4,r8
 1002b2c:	180f883a 	mov	r7,r3
 1002b30:	100d883a 	mov	r6,r2
 1002b34:	1008b940 	call	1008b94 <__subdf3>
 1002b38:	0218dbf4 	movhi	r8,25455
 1002b3c:	4210d844 	addi	r8,r8,17249
 1002b40:	024ff4f4 	movhi	r9,16339
 1002b44:	4a61e9c4 	addi	r9,r9,-30809
 1002b48:	480f883a 	mov	r7,r9
 1002b4c:	400d883a 	mov	r6,r8
 1002b50:	180b883a 	mov	r5,r3
 1002b54:	1009883a 	mov	r4,r2
 1002b58:	1008c880 	call	1008c88 <__muldf3>
 1002b5c:	0222d874 	movhi	r8,35681
 1002b60:	42322cc4 	addi	r8,r8,-14157
 1002b64:	024ff1f4 	movhi	r9,16327
 1002b68:	4a628a04 	addi	r9,r9,-30168
 1002b6c:	480f883a 	mov	r7,r9
 1002b70:	400d883a 	mov	r6,r8
 1002b74:	180b883a 	mov	r5,r3
 1002b78:	1009883a 	mov	r4,r2
 1002b7c:	1008c140 	call	1008c14 <__adddf3>
 1002b80:	b009883a 	mov	r4,r22
 1002b84:	1021883a 	mov	r16,r2
 1002b88:	1823883a 	mov	r17,r3
 1002b8c:	100954c0 	call	100954c <__floatsidf>
 1002b90:	021427f4 	movhi	r8,20639
 1002b94:	421e7ec4 	addi	r8,r8,31227
 1002b98:	024ff4f4 	movhi	r9,16339
 1002b9c:	4a5104c4 	addi	r9,r9,17427
 1002ba0:	480f883a 	mov	r7,r9
 1002ba4:	400d883a 	mov	r6,r8
 1002ba8:	180b883a 	mov	r5,r3
 1002bac:	1009883a 	mov	r4,r2
 1002bb0:	1008c880 	call	1008c88 <__muldf3>
 1002bb4:	180f883a 	mov	r7,r3
 1002bb8:	880b883a 	mov	r5,r17
 1002bbc:	100d883a 	mov	r6,r2
 1002bc0:	8009883a 	mov	r4,r16
 1002bc4:	1008c140 	call	1008c14 <__adddf3>
 1002bc8:	1009883a 	mov	r4,r2
 1002bcc:	180b883a 	mov	r5,r3
 1002bd0:	1021883a 	mov	r16,r2
 1002bd4:	1823883a 	mov	r17,r3
 1002bd8:	10096440 	call	1009644 <__fixdfsi>
 1002bdc:	000d883a 	mov	r6,zero
 1002be0:	000f883a 	mov	r7,zero
 1002be4:	8009883a 	mov	r4,r16
 1002be8:	880b883a 	mov	r5,r17
 1002bec:	d8800d15 	stw	r2,52(sp)
 1002bf0:	10094c40 	call	10094c4 <__ltdf2>
 1002bf4:	10031716 	blt	r2,zero,1003854 <_dtoa_r+0xe8c>
 1002bf8:	d8c00d17 	ldw	r3,52(sp)
 1002bfc:	00800584 	movi	r2,22
 1002c00:	10c1482e 	bgeu	r2,r3,1003124 <_dtoa_r+0x75c>
 1002c04:	01000044 	movi	r4,1
 1002c08:	d9000c15 	stw	r4,48(sp)
 1002c0c:	bd85c83a 	sub	r2,r23,r22
 1002c10:	11bfffc4 	addi	r6,r2,-1
 1002c14:	30030b16 	blt	r6,zero,1003844 <_dtoa_r+0xe7c>
 1002c18:	d9800a15 	stw	r6,40(sp)
 1002c1c:	d8001115 	stw	zero,68(sp)
 1002c20:	d8c00d17 	ldw	r3,52(sp)
 1002c24:	1802ff16 	blt	r3,zero,1003824 <_dtoa_r+0xe5c>
 1002c28:	d9000a17 	ldw	r4,40(sp)
 1002c2c:	d8c00915 	stw	r3,36(sp)
 1002c30:	d8001015 	stw	zero,64(sp)
 1002c34:	20c9883a 	add	r4,r4,r3
 1002c38:	d9000a15 	stw	r4,40(sp)
 1002c3c:	d9001717 	ldw	r4,92(sp)
 1002c40:	00800244 	movi	r2,9
 1002c44:	11004636 	bltu	r2,r4,1002d60 <_dtoa_r+0x398>
 1002c48:	00800144 	movi	r2,5
 1002c4c:	11020416 	blt	r2,r4,1003460 <_dtoa_r+0xa98>
 1002c50:	04400044 	movi	r17,1
 1002c54:	d8c01717 	ldw	r3,92(sp)
 1002c58:	00800144 	movi	r2,5
 1002c5c:	10c1ed36 	bltu	r2,r3,1003414 <_dtoa_r+0xa4c>
 1002c60:	18c5883a 	add	r2,r3,r3
 1002c64:	1085883a 	add	r2,r2,r2
 1002c68:	00c04034 	movhi	r3,256
 1002c6c:	18cb1f04 	addi	r3,r3,11388
 1002c70:	10c5883a 	add	r2,r2,r3
 1002c74:	11000017 	ldw	r4,0(r2)
 1002c78:	2000683a 	jmp	r4
 1002c7c:	01002d68 	cmpgeui	r4,zero,181
 1002c80:	01002d68 	cmpgeui	r4,zero,181
 1002c84:	01003768 	cmpgeui	r4,zero,221
 1002c88:	01003740 	call	100374 <__alt_mem_onchip_memory2_0+0x100374>
 1002c8c:	01003784 	movi	r4,222
 1002c90:	01003790 	cmplti	r4,zero,222
 1002c94:	d9002717 	ldw	r4,156(sp)
 1002c98:	0089c3c4 	movi	r2,9999
 1002c9c:	20800015 	stw	r2,0(r4)
 1002ca0:	a0001026 	beq	r20,zero,1002ce4 <_dtoa_r+0x31c>
 1002ca4:	00c04074 	movhi	r3,257
 1002ca8:	18cca004 	addi	r3,r3,12928
 1002cac:	d9802917 	ldw	r6,164(sp)
 1002cb0:	303f7926 	beq	r6,zero,1002a98 <_dtoa_r+0xd0>
 1002cb4:	188000c7 	ldb	r2,3(r3)
 1002cb8:	190000c4 	addi	r4,r3,3
 1002cbc:	1000101e 	bne	r2,zero,1002d00 <_dtoa_r+0x338>
 1002cc0:	d8802917 	ldw	r2,164(sp)
 1002cc4:	11000015 	stw	r4,0(r2)
 1002cc8:	003f7306 	br	1002a98 <_dtoa_r+0xd0>
 1002ccc:	00a00034 	movhi	r2,32768
 1002cd0:	10bfffc4 	addi	r2,r2,-1
 1002cd4:	00c00044 	movi	r3,1
 1002cd8:	88aa703a 	and	r21,r17,r2
 1002cdc:	90c00015 	stw	r3,0(r18)
 1002ce0:	003f5806 	br	1002a44 <_dtoa_r+0x7c>
 1002ce4:	00800434 	movhi	r2,16
 1002ce8:	10bfffc4 	addi	r2,r2,-1
 1002cec:	a884703a 	and	r2,r21,r2
 1002cf0:	103fec1e 	bne	r2,zero,1002ca4 <_dtoa_r+0x2dc>
 1002cf4:	00c04074 	movhi	r3,257
 1002cf8:	18cc9d04 	addi	r3,r3,12916
 1002cfc:	003feb06 	br	1002cac <_dtoa_r+0x2e4>
 1002d00:	d8802917 	ldw	r2,164(sp)
 1002d04:	19000204 	addi	r4,r3,8
 1002d08:	11000015 	stw	r4,0(r2)
 1002d0c:	003f6206 	br	1002a98 <_dtoa_r+0xd0>
 1002d10:	ddc00117 	ldw	r23,4(sp)
 1002d14:	d8800217 	ldw	r2,8(sp)
 1002d18:	01000804 	movi	r4,32
 1002d1c:	b8c10c84 	addi	r3,r23,1074
 1002d20:	18a3883a 	add	r17,r3,r2
 1002d24:	2441b80e 	bge	r4,r17,1003408 <_dtoa_r+0xa40>
 1002d28:	00c01004 	movi	r3,64
 1002d2c:	1c47c83a 	sub	r3,r3,r17
 1002d30:	88bff804 	addi	r2,r17,-32
 1002d34:	a8c6983a 	sll	r3,r21,r3
 1002d38:	a084d83a 	srl	r2,r20,r2
 1002d3c:	1888b03a 	or	r4,r3,r2
 1002d40:	100971c0 	call	100971c <__floatunsidf>
 1002d44:	1011883a 	mov	r8,r2
 1002d48:	00bf8434 	movhi	r2,65040
 1002d4c:	01000044 	movi	r4,1
 1002d50:	10d3883a 	add	r9,r2,r3
 1002d54:	8dbef344 	addi	r22,r17,-1075
 1002d58:	d9000815 	stw	r4,32(sp)
 1002d5c:	003f6f06 	br	1002b1c <_dtoa_r+0x154>
 1002d60:	d8001715 	stw	zero,92(sp)
 1002d64:	04400044 	movi	r17,1
 1002d68:	00bfffc4 	movi	r2,-1
 1002d6c:	00c00044 	movi	r3,1
 1002d70:	d8800e15 	stw	r2,56(sp)
 1002d74:	d8002615 	stw	zero,152(sp)
 1002d78:	d8800f15 	stw	r2,60(sp)
 1002d7c:	d8c00b15 	stw	r3,44(sp)
 1002d80:	1021883a 	mov	r16,r2
 1002d84:	d8801617 	ldw	r2,88(sp)
 1002d88:	10001115 	stw	zero,68(r2)
 1002d8c:	d8801617 	ldw	r2,88(sp)
 1002d90:	11401117 	ldw	r5,68(r2)
 1002d94:	1009883a 	mov	r4,r2
 1002d98:	10060dc0 	call	10060dc <_Balloc>
 1002d9c:	d8c01617 	ldw	r3,88(sp)
 1002da0:	d8800515 	stw	r2,20(sp)
 1002da4:	18801015 	stw	r2,64(r3)
 1002da8:	00800384 	movi	r2,14
 1002dac:	14006836 	bltu	r2,r16,1002f50 <_dtoa_r+0x588>
 1002db0:	8805003a 	cmpeq	r2,r17,zero
 1002db4:	1000661e 	bne	r2,zero,1002f50 <_dtoa_r+0x588>
 1002db8:	d9000d17 	ldw	r4,52(sp)
 1002dbc:	0102300e 	bge	zero,r4,1003680 <_dtoa_r+0xcb8>
 1002dc0:	208003cc 	andi	r2,r4,15
 1002dc4:	100490fa 	slli	r2,r2,3
 1002dc8:	2025d13a 	srai	r18,r4,4
 1002dcc:	00c04074 	movhi	r3,257
 1002dd0:	18ccb204 	addi	r3,r3,13000
 1002dd4:	10c5883a 	add	r2,r2,r3
 1002dd8:	90c0040c 	andi	r3,r18,16
 1002ddc:	14000017 	ldw	r16,0(r2)
 1002de0:	14400117 	ldw	r17,4(r2)
 1002de4:	18036a1e 	bne	r3,zero,1003b90 <_dtoa_r+0x11c8>
 1002de8:	05800084 	movi	r22,2
 1002dec:	90001026 	beq	r18,zero,1002e30 <_dtoa_r+0x468>
 1002df0:	04c04074 	movhi	r19,257
 1002df4:	9ccce404 	addi	r19,r19,13200
 1002df8:	9080004c 	andi	r2,r18,1
 1002dfc:	1005003a 	cmpeq	r2,r2,zero
 1002e00:	1000081e 	bne	r2,zero,1002e24 <_dtoa_r+0x45c>
 1002e04:	99800017 	ldw	r6,0(r19)
 1002e08:	99c00117 	ldw	r7,4(r19)
 1002e0c:	880b883a 	mov	r5,r17
 1002e10:	8009883a 	mov	r4,r16
 1002e14:	1008c880 	call	1008c88 <__muldf3>
 1002e18:	1021883a 	mov	r16,r2
 1002e1c:	b5800044 	addi	r22,r22,1
 1002e20:	1823883a 	mov	r17,r3
 1002e24:	9025d07a 	srai	r18,r18,1
 1002e28:	9cc00204 	addi	r19,r19,8
 1002e2c:	903ff21e 	bne	r18,zero,1002df8 <_dtoa_r+0x430>
 1002e30:	a80b883a 	mov	r5,r21
 1002e34:	a009883a 	mov	r4,r20
 1002e38:	880f883a 	mov	r7,r17
 1002e3c:	800d883a 	mov	r6,r16
 1002e40:	100904c0 	call	100904c <__divdf3>
 1002e44:	1029883a 	mov	r20,r2
 1002e48:	182b883a 	mov	r21,r3
 1002e4c:	d8c00c17 	ldw	r3,48(sp)
 1002e50:	1805003a 	cmpeq	r2,r3,zero
 1002e54:	1000081e 	bne	r2,zero,1002e78 <_dtoa_r+0x4b0>
 1002e58:	0005883a 	mov	r2,zero
 1002e5c:	00cffc34 	movhi	r3,16368
 1002e60:	180f883a 	mov	r7,r3
 1002e64:	a009883a 	mov	r4,r20
 1002e68:	a80b883a 	mov	r5,r21
 1002e6c:	100d883a 	mov	r6,r2
 1002e70:	10094c40 	call	10094c4 <__ltdf2>
 1002e74:	1003fe16 	blt	r2,zero,1003e70 <_dtoa_r+0x14a8>
 1002e78:	b009883a 	mov	r4,r22
 1002e7c:	100954c0 	call	100954c <__floatsidf>
 1002e80:	180b883a 	mov	r5,r3
 1002e84:	1009883a 	mov	r4,r2
 1002e88:	a00d883a 	mov	r6,r20
 1002e8c:	a80f883a 	mov	r7,r21
 1002e90:	1008c880 	call	1008c88 <__muldf3>
 1002e94:	0011883a 	mov	r8,zero
 1002e98:	02500734 	movhi	r9,16412
 1002e9c:	1009883a 	mov	r4,r2
 1002ea0:	180b883a 	mov	r5,r3
 1002ea4:	480f883a 	mov	r7,r9
 1002ea8:	400d883a 	mov	r6,r8
 1002eac:	1008c140 	call	1008c14 <__adddf3>
 1002eb0:	d9000f17 	ldw	r4,60(sp)
 1002eb4:	102d883a 	mov	r22,r2
 1002eb8:	00bf3034 	movhi	r2,64704
 1002ebc:	18b9883a 	add	fp,r3,r2
 1002ec0:	e02f883a 	mov	r23,fp
 1002ec4:	20028f1e 	bne	r4,zero,1003904 <_dtoa_r+0xf3c>
 1002ec8:	0005883a 	mov	r2,zero
 1002ecc:	00d00534 	movhi	r3,16404
 1002ed0:	a009883a 	mov	r4,r20
 1002ed4:	a80b883a 	mov	r5,r21
 1002ed8:	180f883a 	mov	r7,r3
 1002edc:	100d883a 	mov	r6,r2
 1002ee0:	1008b940 	call	1008b94 <__subdf3>
 1002ee4:	1009883a 	mov	r4,r2
 1002ee8:	e00f883a 	mov	r7,fp
 1002eec:	180b883a 	mov	r5,r3
 1002ef0:	b00d883a 	mov	r6,r22
 1002ef4:	1025883a 	mov	r18,r2
 1002ef8:	1827883a 	mov	r19,r3
 1002efc:	10093b40 	call	10093b4 <__gtdf2>
 1002f00:	00834f16 	blt	zero,r2,1003c40 <_dtoa_r+0x1278>
 1002f04:	e0e0003c 	xorhi	r3,fp,32768
 1002f08:	9009883a 	mov	r4,r18
 1002f0c:	980b883a 	mov	r5,r19
 1002f10:	180f883a 	mov	r7,r3
 1002f14:	b00d883a 	mov	r6,r22
 1002f18:	10094c40 	call	10094c4 <__ltdf2>
 1002f1c:	1000080e 	bge	r2,zero,1002f40 <_dtoa_r+0x578>
 1002f20:	0027883a 	mov	r19,zero
 1002f24:	0025883a 	mov	r18,zero
 1002f28:	d8802617 	ldw	r2,152(sp)
 1002f2c:	df000517 	ldw	fp,20(sp)
 1002f30:	d8000615 	stw	zero,24(sp)
 1002f34:	0084303a 	nor	r2,zero,r2
 1002f38:	d8800d15 	stw	r2,52(sp)
 1002f3c:	00019b06 	br	10035ac <_dtoa_r+0xbe4>
 1002f40:	d9801217 	ldw	r6,72(sp)
 1002f44:	d8801317 	ldw	r2,76(sp)
 1002f48:	3029883a 	mov	r20,r6
 1002f4c:	102b883a 	mov	r21,r2
 1002f50:	d8c00217 	ldw	r3,8(sp)
 1002f54:	18008516 	blt	r3,zero,100316c <_dtoa_r+0x7a4>
 1002f58:	d9000d17 	ldw	r4,52(sp)
 1002f5c:	00800384 	movi	r2,14
 1002f60:	11008216 	blt	r2,r4,100316c <_dtoa_r+0x7a4>
 1002f64:	200490fa 	slli	r2,r4,3
 1002f68:	d9802617 	ldw	r6,152(sp)
 1002f6c:	00c04074 	movhi	r3,257
 1002f70:	18ccb204 	addi	r3,r3,13000
 1002f74:	10c5883a 	add	r2,r2,r3
 1002f78:	14800017 	ldw	r18,0(r2)
 1002f7c:	14c00117 	ldw	r19,4(r2)
 1002f80:	30031e16 	blt	r6,zero,1003bfc <_dtoa_r+0x1234>
 1002f84:	d9000517 	ldw	r4,20(sp)
 1002f88:	d8c00f17 	ldw	r3,60(sp)
 1002f8c:	a823883a 	mov	r17,r21
 1002f90:	a021883a 	mov	r16,r20
 1002f94:	192b883a 	add	r21,r3,r4
 1002f98:	2039883a 	mov	fp,r4
 1002f9c:	00000f06 	br	1002fdc <_dtoa_r+0x614>
 1002fa0:	0005883a 	mov	r2,zero
 1002fa4:	00d00934 	movhi	r3,16420
 1002fa8:	5009883a 	mov	r4,r10
 1002fac:	580b883a 	mov	r5,r11
 1002fb0:	180f883a 	mov	r7,r3
 1002fb4:	100d883a 	mov	r6,r2
 1002fb8:	1008c880 	call	1008c88 <__muldf3>
 1002fbc:	180b883a 	mov	r5,r3
 1002fc0:	000d883a 	mov	r6,zero
 1002fc4:	000f883a 	mov	r7,zero
 1002fc8:	1009883a 	mov	r4,r2
 1002fcc:	1021883a 	mov	r16,r2
 1002fd0:	1823883a 	mov	r17,r3
 1002fd4:	100932c0 	call	100932c <__nedf2>
 1002fd8:	10004526 	beq	r2,zero,10030f0 <_dtoa_r+0x728>
 1002fdc:	900d883a 	mov	r6,r18
 1002fe0:	980f883a 	mov	r7,r19
 1002fe4:	8009883a 	mov	r4,r16
 1002fe8:	880b883a 	mov	r5,r17
 1002fec:	100904c0 	call	100904c <__divdf3>
 1002ff0:	180b883a 	mov	r5,r3
 1002ff4:	1009883a 	mov	r4,r2
 1002ff8:	10096440 	call	1009644 <__fixdfsi>
 1002ffc:	1009883a 	mov	r4,r2
 1003000:	1029883a 	mov	r20,r2
 1003004:	100954c0 	call	100954c <__floatsidf>
 1003008:	180f883a 	mov	r7,r3
 100300c:	9009883a 	mov	r4,r18
 1003010:	980b883a 	mov	r5,r19
 1003014:	100d883a 	mov	r6,r2
 1003018:	1008c880 	call	1008c88 <__muldf3>
 100301c:	180f883a 	mov	r7,r3
 1003020:	880b883a 	mov	r5,r17
 1003024:	8009883a 	mov	r4,r16
 1003028:	100d883a 	mov	r6,r2
 100302c:	1008b940 	call	1008b94 <__subdf3>
 1003030:	1015883a 	mov	r10,r2
 1003034:	a0800c04 	addi	r2,r20,48
 1003038:	e0800005 	stb	r2,0(fp)
 100303c:	e7000044 	addi	fp,fp,1
 1003040:	1817883a 	mov	r11,r3
 1003044:	e57fd61e 	bne	fp,r21,1002fa0 <_dtoa_r+0x5d8>
 1003048:	500d883a 	mov	r6,r10
 100304c:	180f883a 	mov	r7,r3
 1003050:	5009883a 	mov	r4,r10
 1003054:	180b883a 	mov	r5,r3
 1003058:	1008c140 	call	1008c14 <__adddf3>
 100305c:	100d883a 	mov	r6,r2
 1003060:	9009883a 	mov	r4,r18
 1003064:	980b883a 	mov	r5,r19
 1003068:	180f883a 	mov	r7,r3
 100306c:	1021883a 	mov	r16,r2
 1003070:	1823883a 	mov	r17,r3
 1003074:	10094c40 	call	10094c4 <__ltdf2>
 1003078:	10000816 	blt	r2,zero,100309c <_dtoa_r+0x6d4>
 100307c:	980b883a 	mov	r5,r19
 1003080:	800d883a 	mov	r6,r16
 1003084:	880f883a 	mov	r7,r17
 1003088:	9009883a 	mov	r4,r18
 100308c:	10092a40 	call	10092a4 <__eqdf2>
 1003090:	1000171e 	bne	r2,zero,10030f0 <_dtoa_r+0x728>
 1003094:	a080004c 	andi	r2,r20,1
 1003098:	10001526 	beq	r2,zero,10030f0 <_dtoa_r+0x728>
 100309c:	d8800d17 	ldw	r2,52(sp)
 10030a0:	d8800415 	stw	r2,16(sp)
 10030a4:	e009883a 	mov	r4,fp
 10030a8:	213fffc4 	addi	r4,r4,-1
 10030ac:	20c00007 	ldb	r3,0(r4)
 10030b0:	00800e44 	movi	r2,57
 10030b4:	1880081e 	bne	r3,r2,10030d8 <_dtoa_r+0x710>
 10030b8:	d8800517 	ldw	r2,20(sp)
 10030bc:	113ffa1e 	bne	r2,r4,10030a8 <_dtoa_r+0x6e0>
 10030c0:	d8c00417 	ldw	r3,16(sp)
 10030c4:	d9800517 	ldw	r6,20(sp)
 10030c8:	00800c04 	movi	r2,48
 10030cc:	18c00044 	addi	r3,r3,1
 10030d0:	d8c00415 	stw	r3,16(sp)
 10030d4:	30800005 	stb	r2,0(r6)
 10030d8:	20800003 	ldbu	r2,0(r4)
 10030dc:	d8c00417 	ldw	r3,16(sp)
 10030e0:	27000044 	addi	fp,r4,1
 10030e4:	10800044 	addi	r2,r2,1
 10030e8:	d8c00d15 	stw	r3,52(sp)
 10030ec:	20800005 	stb	r2,0(r4)
 10030f0:	d9001617 	ldw	r4,88(sp)
 10030f4:	d9400717 	ldw	r5,28(sp)
 10030f8:	1005b5c0 	call	1005b5c <_Bfree>
 10030fc:	e0000005 	stb	zero,0(fp)
 1003100:	d9800d17 	ldw	r6,52(sp)
 1003104:	d8c02717 	ldw	r3,156(sp)
 1003108:	d9002917 	ldw	r4,164(sp)
 100310c:	30800044 	addi	r2,r6,1
 1003110:	18800015 	stw	r2,0(r3)
 1003114:	20029c26 	beq	r4,zero,1003b88 <_dtoa_r+0x11c0>
 1003118:	d8c00517 	ldw	r3,20(sp)
 100311c:	27000015 	stw	fp,0(r4)
 1003120:	003e5d06 	br	1002a98 <_dtoa_r+0xd0>
 1003124:	d9800d17 	ldw	r6,52(sp)
 1003128:	00c04074 	movhi	r3,257
 100312c:	18ccb204 	addi	r3,r3,13000
 1003130:	d9001217 	ldw	r4,72(sp)
 1003134:	300490fa 	slli	r2,r6,3
 1003138:	d9401317 	ldw	r5,76(sp)
 100313c:	10c5883a 	add	r2,r2,r3
 1003140:	12000017 	ldw	r8,0(r2)
 1003144:	12400117 	ldw	r9,4(r2)
 1003148:	400d883a 	mov	r6,r8
 100314c:	480f883a 	mov	r7,r9
 1003150:	10094c40 	call	10094c4 <__ltdf2>
 1003154:	1000030e 	bge	r2,zero,1003164 <_dtoa_r+0x79c>
 1003158:	d8800d17 	ldw	r2,52(sp)
 100315c:	10bfffc4 	addi	r2,r2,-1
 1003160:	d8800d15 	stw	r2,52(sp)
 1003164:	d8000c15 	stw	zero,48(sp)
 1003168:	003ea806 	br	1002c0c <_dtoa_r+0x244>
 100316c:	d9000b17 	ldw	r4,44(sp)
 1003170:	202cc03a 	cmpne	r22,r4,zero
 1003174:	b000c71e 	bne	r22,zero,1003494 <_dtoa_r+0xacc>
 1003178:	dc001117 	ldw	r16,68(sp)
 100317c:	dc801017 	ldw	r18,64(sp)
 1003180:	0027883a 	mov	r19,zero
 1003184:	04000b0e 	bge	zero,r16,10031b4 <_dtoa_r+0x7ec>
 1003188:	d8c00a17 	ldw	r3,40(sp)
 100318c:	00c0090e 	bge	zero,r3,10031b4 <_dtoa_r+0x7ec>
 1003190:	8005883a 	mov	r2,r16
 1003194:	1c011316 	blt	r3,r16,10035e4 <_dtoa_r+0xc1c>
 1003198:	d9000a17 	ldw	r4,40(sp)
 100319c:	d9801117 	ldw	r6,68(sp)
 10031a0:	80a1c83a 	sub	r16,r16,r2
 10031a4:	2089c83a 	sub	r4,r4,r2
 10031a8:	308dc83a 	sub	r6,r6,r2
 10031ac:	d9000a15 	stw	r4,40(sp)
 10031b0:	d9801115 	stw	r6,68(sp)
 10031b4:	d8801017 	ldw	r2,64(sp)
 10031b8:	0080150e 	bge	zero,r2,1003210 <_dtoa_r+0x848>
 10031bc:	d8c00b17 	ldw	r3,44(sp)
 10031c0:	1805003a 	cmpeq	r2,r3,zero
 10031c4:	1001c91e 	bne	r2,zero,10038ec <_dtoa_r+0xf24>
 10031c8:	04800e0e 	bge	zero,r18,1003204 <_dtoa_r+0x83c>
 10031cc:	d9001617 	ldw	r4,88(sp)
 10031d0:	980b883a 	mov	r5,r19
 10031d4:	900d883a 	mov	r6,r18
 10031d8:	10069100 	call	1006910 <__pow5mult>
 10031dc:	d9001617 	ldw	r4,88(sp)
 10031e0:	d9800717 	ldw	r6,28(sp)
 10031e4:	100b883a 	mov	r5,r2
 10031e8:	1027883a 	mov	r19,r2
 10031ec:	10065ec0 	call	10065ec <__multiply>
 10031f0:	d9001617 	ldw	r4,88(sp)
 10031f4:	d9400717 	ldw	r5,28(sp)
 10031f8:	1023883a 	mov	r17,r2
 10031fc:	1005b5c0 	call	1005b5c <_Bfree>
 1003200:	dc400715 	stw	r17,28(sp)
 1003204:	d9001017 	ldw	r4,64(sp)
 1003208:	248dc83a 	sub	r6,r4,r18
 100320c:	30010e1e 	bne	r6,zero,1003648 <_dtoa_r+0xc80>
 1003210:	d9001617 	ldw	r4,88(sp)
 1003214:	04400044 	movi	r17,1
 1003218:	880b883a 	mov	r5,r17
 100321c:	10067d40 	call	10067d4 <__i2b>
 1003220:	d9800917 	ldw	r6,36(sp)
 1003224:	1025883a 	mov	r18,r2
 1003228:	0180040e 	bge	zero,r6,100323c <_dtoa_r+0x874>
 100322c:	d9001617 	ldw	r4,88(sp)
 1003230:	100b883a 	mov	r5,r2
 1003234:	10069100 	call	1006910 <__pow5mult>
 1003238:	1025883a 	mov	r18,r2
 100323c:	d8801717 	ldw	r2,92(sp)
 1003240:	8880f30e 	bge	r17,r2,1003610 <_dtoa_r+0xc48>
 1003244:	0023883a 	mov	r17,zero
 1003248:	d9800917 	ldw	r6,36(sp)
 100324c:	30019e1e 	bne	r6,zero,10038c8 <_dtoa_r+0xf00>
 1003250:	00c00044 	movi	r3,1
 1003254:	d9000a17 	ldw	r4,40(sp)
 1003258:	20c5883a 	add	r2,r4,r3
 100325c:	10c007cc 	andi	r3,r2,31
 1003260:	1800841e 	bne	r3,zero,1003474 <_dtoa_r+0xaac>
 1003264:	00800704 	movi	r2,28
 1003268:	d9000a17 	ldw	r4,40(sp)
 100326c:	d9801117 	ldw	r6,68(sp)
 1003270:	80a1883a 	add	r16,r16,r2
 1003274:	2089883a 	add	r4,r4,r2
 1003278:	308d883a 	add	r6,r6,r2
 100327c:	d9000a15 	stw	r4,40(sp)
 1003280:	d9801115 	stw	r6,68(sp)
 1003284:	d8801117 	ldw	r2,68(sp)
 1003288:	0080050e 	bge	zero,r2,10032a0 <_dtoa_r+0x8d8>
 100328c:	d9400717 	ldw	r5,28(sp)
 1003290:	d9001617 	ldw	r4,88(sp)
 1003294:	100d883a 	mov	r6,r2
 1003298:	10064a00 	call	10064a0 <__lshift>
 100329c:	d8800715 	stw	r2,28(sp)
 10032a0:	d8c00a17 	ldw	r3,40(sp)
 10032a4:	00c0050e 	bge	zero,r3,10032bc <_dtoa_r+0x8f4>
 10032a8:	d9001617 	ldw	r4,88(sp)
 10032ac:	900b883a 	mov	r5,r18
 10032b0:	180d883a 	mov	r6,r3
 10032b4:	10064a00 	call	10064a0 <__lshift>
 10032b8:	1025883a 	mov	r18,r2
 10032bc:	d9000c17 	ldw	r4,48(sp)
 10032c0:	2005003a 	cmpeq	r2,r4,zero
 10032c4:	10016f26 	beq	r2,zero,1003884 <_dtoa_r+0xebc>
 10032c8:	d9000f17 	ldw	r4,60(sp)
 10032cc:	0102170e 	bge	zero,r4,1003b2c <_dtoa_r+0x1164>
 10032d0:	d9800b17 	ldw	r6,44(sp)
 10032d4:	3005003a 	cmpeq	r2,r6,zero
 10032d8:	1000881e 	bne	r2,zero,10034fc <_dtoa_r+0xb34>
 10032dc:	0400050e 	bge	zero,r16,10032f4 <_dtoa_r+0x92c>
 10032e0:	d9001617 	ldw	r4,88(sp)
 10032e4:	980b883a 	mov	r5,r19
 10032e8:	800d883a 	mov	r6,r16
 10032ec:	10064a00 	call	10064a0 <__lshift>
 10032f0:	1027883a 	mov	r19,r2
 10032f4:	8804c03a 	cmpne	r2,r17,zero
 10032f8:	1002541e 	bne	r2,zero,1003c4c <_dtoa_r+0x1284>
 10032fc:	980b883a 	mov	r5,r19
 1003300:	dd800517 	ldw	r22,20(sp)
 1003304:	dcc00615 	stw	r19,24(sp)
 1003308:	a700004c 	andi	fp,r20,1
 100330c:	2827883a 	mov	r19,r5
 1003310:	d9000717 	ldw	r4,28(sp)
 1003314:	900b883a 	mov	r5,r18
 1003318:	10027b00 	call	10027b0 <quorem>
 100331c:	d9000717 	ldw	r4,28(sp)
 1003320:	d9400617 	ldw	r5,24(sp)
 1003324:	1023883a 	mov	r17,r2
 1003328:	8dc00c04 	addi	r23,r17,48
 100332c:	1005cb80 	call	1005cb8 <__mcmp>
 1003330:	d9001617 	ldw	r4,88(sp)
 1003334:	900b883a 	mov	r5,r18
 1003338:	980d883a 	mov	r6,r19
 100333c:	1029883a 	mov	r20,r2
 1003340:	10063140 	call	1006314 <__mdiff>
 1003344:	102b883a 	mov	r21,r2
 1003348:	10800317 	ldw	r2,12(r2)
 100334c:	1001281e 	bne	r2,zero,10037f0 <_dtoa_r+0xe28>
 1003350:	d9000717 	ldw	r4,28(sp)
 1003354:	a80b883a 	mov	r5,r21
 1003358:	1005cb80 	call	1005cb8 <__mcmp>
 100335c:	d9001617 	ldw	r4,88(sp)
 1003360:	1021883a 	mov	r16,r2
 1003364:	a80b883a 	mov	r5,r21
 1003368:	1005b5c0 	call	1005b5c <_Bfree>
 100336c:	8000041e 	bne	r16,zero,1003380 <_dtoa_r+0x9b8>
 1003370:	d8801717 	ldw	r2,92(sp)
 1003374:	1000021e 	bne	r2,zero,1003380 <_dtoa_r+0x9b8>
 1003378:	e004c03a 	cmpne	r2,fp,zero
 100337c:	10011726 	beq	r2,zero,10037dc <_dtoa_r+0xe14>
 1003380:	a0010616 	blt	r20,zero,100379c <_dtoa_r+0xdd4>
 1003384:	a000041e 	bne	r20,zero,1003398 <_dtoa_r+0x9d0>
 1003388:	d8c01717 	ldw	r3,92(sp)
 100338c:	1800021e 	bne	r3,zero,1003398 <_dtoa_r+0x9d0>
 1003390:	e004c03a 	cmpne	r2,fp,zero
 1003394:	10010126 	beq	r2,zero,100379c <_dtoa_r+0xdd4>
 1003398:	04023d16 	blt	zero,r16,1003c90 <_dtoa_r+0x12c8>
 100339c:	b5c00005 	stb	r23,0(r22)
 10033a0:	d9800517 	ldw	r6,20(sp)
 10033a4:	d9000f17 	ldw	r4,60(sp)
 10033a8:	b5800044 	addi	r22,r22,1
 10033ac:	3105883a 	add	r2,r6,r4
 10033b0:	b0806526 	beq	r22,r2,1003548 <_dtoa_r+0xb80>
 10033b4:	d9400717 	ldw	r5,28(sp)
 10033b8:	d9001617 	ldw	r4,88(sp)
 10033bc:	01800284 	movi	r6,10
 10033c0:	000f883a 	mov	r7,zero
 10033c4:	10068100 	call	1006810 <__multadd>
 10033c8:	d8800715 	stw	r2,28(sp)
 10033cc:	d8800617 	ldw	r2,24(sp)
 10033d0:	14c10c26 	beq	r2,r19,1003804 <_dtoa_r+0xe3c>
 10033d4:	d9400617 	ldw	r5,24(sp)
 10033d8:	d9001617 	ldw	r4,88(sp)
 10033dc:	01800284 	movi	r6,10
 10033e0:	000f883a 	mov	r7,zero
 10033e4:	10068100 	call	1006810 <__multadd>
 10033e8:	d9001617 	ldw	r4,88(sp)
 10033ec:	980b883a 	mov	r5,r19
 10033f0:	01800284 	movi	r6,10
 10033f4:	000f883a 	mov	r7,zero
 10033f8:	d8800615 	stw	r2,24(sp)
 10033fc:	10068100 	call	1006810 <__multadd>
 1003400:	1027883a 	mov	r19,r2
 1003404:	003fc206 	br	1003310 <_dtoa_r+0x948>
 1003408:	2445c83a 	sub	r2,r4,r17
 100340c:	a088983a 	sll	r4,r20,r2
 1003410:	003e4b06 	br	1002d40 <_dtoa_r+0x378>
 1003414:	01bfffc4 	movi	r6,-1
 1003418:	00800044 	movi	r2,1
 100341c:	d9800e15 	stw	r6,56(sp)
 1003420:	d9800f15 	stw	r6,60(sp)
 1003424:	d8800b15 	stw	r2,44(sp)
 1003428:	d8c01617 	ldw	r3,88(sp)
 100342c:	008005c4 	movi	r2,23
 1003430:	18001115 	stw	zero,68(r3)
 1003434:	1580082e 	bgeu	r2,r22,1003458 <_dtoa_r+0xa90>
 1003438:	00c00104 	movi	r3,4
 100343c:	0009883a 	mov	r4,zero
 1003440:	18c7883a 	add	r3,r3,r3
 1003444:	18800504 	addi	r2,r3,20
 1003448:	21000044 	addi	r4,r4,1
 100344c:	b0bffc2e 	bgeu	r22,r2,1003440 <_dtoa_r+0xa78>
 1003450:	d9801617 	ldw	r6,88(sp)
 1003454:	31001115 	stw	r4,68(r6)
 1003458:	dc000f17 	ldw	r16,60(sp)
 100345c:	003e4b06 	br	1002d8c <_dtoa_r+0x3c4>
 1003460:	d9801717 	ldw	r6,92(sp)
 1003464:	0023883a 	mov	r17,zero
 1003468:	31bfff04 	addi	r6,r6,-4
 100346c:	d9801715 	stw	r6,92(sp)
 1003470:	003df806 	br	1002c54 <_dtoa_r+0x28c>
 1003474:	00800804 	movi	r2,32
 1003478:	10c9c83a 	sub	r4,r2,r3
 100347c:	00c00104 	movi	r3,4
 1003480:	19005a16 	blt	r3,r4,10035ec <_dtoa_r+0xc24>
 1003484:	008000c4 	movi	r2,3
 1003488:	113f7e16 	blt	r2,r4,1003284 <_dtoa_r+0x8bc>
 100348c:	20800704 	addi	r2,r4,28
 1003490:	003f7506 	br	1003268 <_dtoa_r+0x8a0>
 1003494:	d9801717 	ldw	r6,92(sp)
 1003498:	00800044 	movi	r2,1
 100349c:	1180a10e 	bge	r2,r6,1003724 <_dtoa_r+0xd5c>
 10034a0:	d9800f17 	ldw	r6,60(sp)
 10034a4:	d8c01017 	ldw	r3,64(sp)
 10034a8:	30bfffc4 	addi	r2,r6,-1
 10034ac:	1881c616 	blt	r3,r2,1003bc8 <_dtoa_r+0x1200>
 10034b0:	18a5c83a 	sub	r18,r3,r2
 10034b4:	d8800f17 	ldw	r2,60(sp)
 10034b8:	10026216 	blt	r2,zero,1003e44 <_dtoa_r+0x147c>
 10034bc:	dc001117 	ldw	r16,68(sp)
 10034c0:	1007883a 	mov	r3,r2
 10034c4:	d9800a17 	ldw	r6,40(sp)
 10034c8:	d8801117 	ldw	r2,68(sp)
 10034cc:	d9001617 	ldw	r4,88(sp)
 10034d0:	30cd883a 	add	r6,r6,r3
 10034d4:	10c5883a 	add	r2,r2,r3
 10034d8:	01400044 	movi	r5,1
 10034dc:	d9800a15 	stw	r6,40(sp)
 10034e0:	d8801115 	stw	r2,68(sp)
 10034e4:	10067d40 	call	10067d4 <__i2b>
 10034e8:	1027883a 	mov	r19,r2
 10034ec:	003f2506 	br	1003184 <_dtoa_r+0x7bc>
 10034f0:	00c04074 	movhi	r3,257
 10034f4:	18cc9404 	addi	r3,r3,12880
 10034f8:	003d6706 	br	1002a98 <_dtoa_r+0xd0>
 10034fc:	dd800517 	ldw	r22,20(sp)
 1003500:	04000044 	movi	r16,1
 1003504:	00000706 	br	1003524 <_dtoa_r+0xb5c>
 1003508:	d9400717 	ldw	r5,28(sp)
 100350c:	d9001617 	ldw	r4,88(sp)
 1003510:	01800284 	movi	r6,10
 1003514:	000f883a 	mov	r7,zero
 1003518:	10068100 	call	1006810 <__multadd>
 100351c:	d8800715 	stw	r2,28(sp)
 1003520:	84000044 	addi	r16,r16,1
 1003524:	d9000717 	ldw	r4,28(sp)
 1003528:	900b883a 	mov	r5,r18
 100352c:	10027b00 	call	10027b0 <quorem>
 1003530:	15c00c04 	addi	r23,r2,48
 1003534:	b5c00005 	stb	r23,0(r22)
 1003538:	d8c00f17 	ldw	r3,60(sp)
 100353c:	b5800044 	addi	r22,r22,1
 1003540:	80fff116 	blt	r16,r3,1003508 <_dtoa_r+0xb40>
 1003544:	d8000615 	stw	zero,24(sp)
 1003548:	d9400717 	ldw	r5,28(sp)
 100354c:	d9001617 	ldw	r4,88(sp)
 1003550:	01800044 	movi	r6,1
 1003554:	10064a00 	call	10064a0 <__lshift>
 1003558:	1009883a 	mov	r4,r2
 100355c:	900b883a 	mov	r5,r18
 1003560:	d8800715 	stw	r2,28(sp)
 1003564:	1005cb80 	call	1005cb8 <__mcmp>
 1003568:	00803c0e 	bge	zero,r2,100365c <_dtoa_r+0xc94>
 100356c:	b009883a 	mov	r4,r22
 1003570:	213fffc4 	addi	r4,r4,-1
 1003574:	21400003 	ldbu	r5,0(r4)
 1003578:	00800e44 	movi	r2,57
 100357c:	28c03fcc 	andi	r3,r5,255
 1003580:	18c0201c 	xori	r3,r3,128
 1003584:	18ffe004 	addi	r3,r3,-128
 1003588:	1881981e 	bne	r3,r2,1003bec <_dtoa_r+0x1224>
 100358c:	d9800517 	ldw	r6,20(sp)
 1003590:	21bff71e 	bne	r4,r6,1003570 <_dtoa_r+0xba8>
 1003594:	d8800d17 	ldw	r2,52(sp)
 1003598:	37000044 	addi	fp,r6,1
 100359c:	10800044 	addi	r2,r2,1
 10035a0:	d8800d15 	stw	r2,52(sp)
 10035a4:	00800c44 	movi	r2,49
 10035a8:	30800005 	stb	r2,0(r6)
 10035ac:	d9001617 	ldw	r4,88(sp)
 10035b0:	900b883a 	mov	r5,r18
 10035b4:	1005b5c0 	call	1005b5c <_Bfree>
 10035b8:	983ecd26 	beq	r19,zero,10030f0 <_dtoa_r+0x728>
 10035bc:	d8c00617 	ldw	r3,24(sp)
 10035c0:	18000426 	beq	r3,zero,10035d4 <_dtoa_r+0xc0c>
 10035c4:	1cc00326 	beq	r3,r19,10035d4 <_dtoa_r+0xc0c>
 10035c8:	d9001617 	ldw	r4,88(sp)
 10035cc:	180b883a 	mov	r5,r3
 10035d0:	1005b5c0 	call	1005b5c <_Bfree>
 10035d4:	d9001617 	ldw	r4,88(sp)
 10035d8:	980b883a 	mov	r5,r19
 10035dc:	1005b5c0 	call	1005b5c <_Bfree>
 10035e0:	003ec306 	br	10030f0 <_dtoa_r+0x728>
 10035e4:	1805883a 	mov	r2,r3
 10035e8:	003eeb06 	br	1003198 <_dtoa_r+0x7d0>
 10035ec:	d9800a17 	ldw	r6,40(sp)
 10035f0:	d8c01117 	ldw	r3,68(sp)
 10035f4:	20bfff04 	addi	r2,r4,-4
 10035f8:	308d883a 	add	r6,r6,r2
 10035fc:	1887883a 	add	r3,r3,r2
 1003600:	80a1883a 	add	r16,r16,r2
 1003604:	d9800a15 	stw	r6,40(sp)
 1003608:	d8c01115 	stw	r3,68(sp)
 100360c:	003f1d06 	br	1003284 <_dtoa_r+0x8bc>
 1003610:	a03f0c1e 	bne	r20,zero,1003244 <_dtoa_r+0x87c>
 1003614:	00800434 	movhi	r2,16
 1003618:	10bfffc4 	addi	r2,r2,-1
 100361c:	a884703a 	and	r2,r21,r2
 1003620:	103f081e 	bne	r2,zero,1003244 <_dtoa_r+0x87c>
 1003624:	a89ffc2c 	andhi	r2,r21,32752
 1003628:	103f0626 	beq	r2,zero,1003244 <_dtoa_r+0x87c>
 100362c:	d8c01117 	ldw	r3,68(sp)
 1003630:	d9000a17 	ldw	r4,40(sp)
 1003634:	18c00044 	addi	r3,r3,1
 1003638:	21000044 	addi	r4,r4,1
 100363c:	d8c01115 	stw	r3,68(sp)
 1003640:	d9000a15 	stw	r4,40(sp)
 1003644:	003f0006 	br	1003248 <_dtoa_r+0x880>
 1003648:	d9400717 	ldw	r5,28(sp)
 100364c:	d9001617 	ldw	r4,88(sp)
 1003650:	10069100 	call	1006910 <__pow5mult>
 1003654:	d8800715 	stw	r2,28(sp)
 1003658:	003eed06 	br	1003210 <_dtoa_r+0x848>
 100365c:	1000021e 	bne	r2,zero,1003668 <_dtoa_r+0xca0>
 1003660:	b880004c 	andi	r2,r23,1
 1003664:	103fc11e 	bne	r2,zero,100356c <_dtoa_r+0xba4>
 1003668:	b5bfffc4 	addi	r22,r22,-1
 100366c:	b0c00007 	ldb	r3,0(r22)
 1003670:	00800c04 	movi	r2,48
 1003674:	18bffc26 	beq	r3,r2,1003668 <_dtoa_r+0xca0>
 1003678:	b7000044 	addi	fp,r22,1
 100367c:	003fcb06 	br	10035ac <_dtoa_r+0xbe4>
 1003680:	d9800d17 	ldw	r6,52(sp)
 1003684:	018fc83a 	sub	r7,zero,r6
 1003688:	3801f726 	beq	r7,zero,1003e68 <_dtoa_r+0x14a0>
 100368c:	398003cc 	andi	r6,r7,15
 1003690:	300c90fa 	slli	r6,r6,3
 1003694:	01404074 	movhi	r5,257
 1003698:	294cb204 	addi	r5,r5,13000
 100369c:	d9001217 	ldw	r4,72(sp)
 10036a0:	314d883a 	add	r6,r6,r5
 10036a4:	30c00117 	ldw	r3,4(r6)
 10036a8:	30800017 	ldw	r2,0(r6)
 10036ac:	d9401317 	ldw	r5,76(sp)
 10036b0:	3821d13a 	srai	r16,r7,4
 10036b4:	100d883a 	mov	r6,r2
 10036b8:	180f883a 	mov	r7,r3
 10036bc:	1008c880 	call	1008c88 <__muldf3>
 10036c0:	1011883a 	mov	r8,r2
 10036c4:	1813883a 	mov	r9,r3
 10036c8:	1029883a 	mov	r20,r2
 10036cc:	182b883a 	mov	r21,r3
 10036d0:	8001e526 	beq	r16,zero,1003e68 <_dtoa_r+0x14a0>
 10036d4:	05800084 	movi	r22,2
 10036d8:	04404074 	movhi	r17,257
 10036dc:	8c4ce404 	addi	r17,r17,13200
 10036e0:	8080004c 	andi	r2,r16,1
 10036e4:	1005003a 	cmpeq	r2,r2,zero
 10036e8:	1000081e 	bne	r2,zero,100370c <_dtoa_r+0xd44>
 10036ec:	89800017 	ldw	r6,0(r17)
 10036f0:	89c00117 	ldw	r7,4(r17)
 10036f4:	480b883a 	mov	r5,r9
 10036f8:	4009883a 	mov	r4,r8
 10036fc:	1008c880 	call	1008c88 <__muldf3>
 1003700:	1011883a 	mov	r8,r2
 1003704:	b5800044 	addi	r22,r22,1
 1003708:	1813883a 	mov	r9,r3
 100370c:	8021d07a 	srai	r16,r16,1
 1003710:	8c400204 	addi	r17,r17,8
 1003714:	803ff21e 	bne	r16,zero,10036e0 <_dtoa_r+0xd18>
 1003718:	4029883a 	mov	r20,r8
 100371c:	482b883a 	mov	r21,r9
 1003720:	003dca06 	br	1002e4c <_dtoa_r+0x484>
 1003724:	d9000817 	ldw	r4,32(sp)
 1003728:	2005003a 	cmpeq	r2,r4,zero
 100372c:	1001f61e 	bne	r2,zero,1003f08 <_dtoa_r+0x1540>
 1003730:	dc001117 	ldw	r16,68(sp)
 1003734:	dc801017 	ldw	r18,64(sp)
 1003738:	18c10cc4 	addi	r3,r3,1075
 100373c:	003f6106 	br	10034c4 <_dtoa_r+0xafc>
 1003740:	d8000b15 	stw	zero,44(sp)
 1003744:	d9802617 	ldw	r6,152(sp)
 1003748:	d8c00d17 	ldw	r3,52(sp)
 100374c:	30800044 	addi	r2,r6,1
 1003750:	18ad883a 	add	r22,r3,r2
 1003754:	b13fffc4 	addi	r4,r22,-1
 1003758:	d9000e15 	stw	r4,56(sp)
 100375c:	0581f60e 	bge	zero,r22,1003f38 <_dtoa_r+0x1570>
 1003760:	dd800f15 	stw	r22,60(sp)
 1003764:	003f3006 	br	1003428 <_dtoa_r+0xa60>
 1003768:	d8000b15 	stw	zero,44(sp)
 100376c:	d9002617 	ldw	r4,152(sp)
 1003770:	0101eb0e 	bge	zero,r4,1003f20 <_dtoa_r+0x1558>
 1003774:	202d883a 	mov	r22,r4
 1003778:	d9000e15 	stw	r4,56(sp)
 100377c:	d9000f15 	stw	r4,60(sp)
 1003780:	003f2906 	br	1003428 <_dtoa_r+0xa60>
 1003784:	01800044 	movi	r6,1
 1003788:	d9800b15 	stw	r6,44(sp)
 100378c:	003ff706 	br	100376c <_dtoa_r+0xda4>
 1003790:	01000044 	movi	r4,1
 1003794:	d9000b15 	stw	r4,44(sp)
 1003798:	003fea06 	br	1003744 <_dtoa_r+0xd7c>
 100379c:	04000c0e 	bge	zero,r16,10037d0 <_dtoa_r+0xe08>
 10037a0:	d9400717 	ldw	r5,28(sp)
 10037a4:	d9001617 	ldw	r4,88(sp)
 10037a8:	01800044 	movi	r6,1
 10037ac:	10064a00 	call	10064a0 <__lshift>
 10037b0:	1009883a 	mov	r4,r2
 10037b4:	900b883a 	mov	r5,r18
 10037b8:	d8800715 	stw	r2,28(sp)
 10037bc:	1005cb80 	call	1005cb8 <__mcmp>
 10037c0:	0081e00e 	bge	zero,r2,1003f44 <_dtoa_r+0x157c>
 10037c4:	bdc00044 	addi	r23,r23,1
 10037c8:	00800e84 	movi	r2,58
 10037cc:	b881a226 	beq	r23,r2,1003e58 <_dtoa_r+0x1490>
 10037d0:	b7000044 	addi	fp,r22,1
 10037d4:	b5c00005 	stb	r23,0(r22)
 10037d8:	003f7406 	br	10035ac <_dtoa_r+0xbe4>
 10037dc:	00800e44 	movi	r2,57
 10037e0:	b8819d26 	beq	r23,r2,1003e58 <_dtoa_r+0x1490>
 10037e4:	053ffa0e 	bge	zero,r20,10037d0 <_dtoa_r+0xe08>
 10037e8:	8dc00c44 	addi	r23,r17,49
 10037ec:	003ff806 	br	10037d0 <_dtoa_r+0xe08>
 10037f0:	d9001617 	ldw	r4,88(sp)
 10037f4:	a80b883a 	mov	r5,r21
 10037f8:	04000044 	movi	r16,1
 10037fc:	1005b5c0 	call	1005b5c <_Bfree>
 1003800:	003edf06 	br	1003380 <_dtoa_r+0x9b8>
 1003804:	d9001617 	ldw	r4,88(sp)
 1003808:	980b883a 	mov	r5,r19
 100380c:	01800284 	movi	r6,10
 1003810:	000f883a 	mov	r7,zero
 1003814:	10068100 	call	1006810 <__multadd>
 1003818:	1027883a 	mov	r19,r2
 100381c:	d8800615 	stw	r2,24(sp)
 1003820:	003ebb06 	br	1003310 <_dtoa_r+0x948>
 1003824:	d9801117 	ldw	r6,68(sp)
 1003828:	d8800d17 	ldw	r2,52(sp)
 100382c:	d8000915 	stw	zero,36(sp)
 1003830:	308dc83a 	sub	r6,r6,r2
 1003834:	0087c83a 	sub	r3,zero,r2
 1003838:	d9801115 	stw	r6,68(sp)
 100383c:	d8c01015 	stw	r3,64(sp)
 1003840:	003cfe06 	br	1002c3c <_dtoa_r+0x274>
 1003844:	018dc83a 	sub	r6,zero,r6
 1003848:	d9801115 	stw	r6,68(sp)
 100384c:	d8000a15 	stw	zero,40(sp)
 1003850:	003cf306 	br	1002c20 <_dtoa_r+0x258>
 1003854:	d9000d17 	ldw	r4,52(sp)
 1003858:	100954c0 	call	100954c <__floatsidf>
 100385c:	880b883a 	mov	r5,r17
 1003860:	8009883a 	mov	r4,r16
 1003864:	180f883a 	mov	r7,r3
 1003868:	100d883a 	mov	r6,r2
 100386c:	100932c0 	call	100932c <__nedf2>
 1003870:	103ce126 	beq	r2,zero,1002bf8 <_dtoa_r+0x230>
 1003874:	d9800d17 	ldw	r6,52(sp)
 1003878:	31bfffc4 	addi	r6,r6,-1
 100387c:	d9800d15 	stw	r6,52(sp)
 1003880:	003cdd06 	br	1002bf8 <_dtoa_r+0x230>
 1003884:	d9000717 	ldw	r4,28(sp)
 1003888:	900b883a 	mov	r5,r18
 100388c:	1005cb80 	call	1005cb8 <__mcmp>
 1003890:	103e8d0e 	bge	r2,zero,10032c8 <_dtoa_r+0x900>
 1003894:	d9400717 	ldw	r5,28(sp)
 1003898:	d9001617 	ldw	r4,88(sp)
 100389c:	01800284 	movi	r6,10
 10038a0:	000f883a 	mov	r7,zero
 10038a4:	10068100 	call	1006810 <__multadd>
 10038a8:	d9800d17 	ldw	r6,52(sp)
 10038ac:	d8800715 	stw	r2,28(sp)
 10038b0:	31bfffc4 	addi	r6,r6,-1
 10038b4:	d9800d15 	stw	r6,52(sp)
 10038b8:	b001a71e 	bne	r22,zero,1003f58 <_dtoa_r+0x1590>
 10038bc:	d8800e17 	ldw	r2,56(sp)
 10038c0:	d8800f15 	stw	r2,60(sp)
 10038c4:	003e8006 	br	10032c8 <_dtoa_r+0x900>
 10038c8:	90800417 	ldw	r2,16(r18)
 10038cc:	1085883a 	add	r2,r2,r2
 10038d0:	1085883a 	add	r2,r2,r2
 10038d4:	1485883a 	add	r2,r2,r18
 10038d8:	11000417 	ldw	r4,16(r2)
 10038dc:	1005b840 	call	1005b84 <__hi0bits>
 10038e0:	00c00804 	movi	r3,32
 10038e4:	1887c83a 	sub	r3,r3,r2
 10038e8:	003e5a06 	br	1003254 <_dtoa_r+0x88c>
 10038ec:	d9400717 	ldw	r5,28(sp)
 10038f0:	d9801017 	ldw	r6,64(sp)
 10038f4:	d9001617 	ldw	r4,88(sp)
 10038f8:	10069100 	call	1006910 <__pow5mult>
 10038fc:	d8800715 	stw	r2,28(sp)
 1003900:	003e4306 	br	1003210 <_dtoa_r+0x848>
 1003904:	d9800f17 	ldw	r6,60(sp)
 1003908:	d8800d17 	ldw	r2,52(sp)
 100390c:	d9800315 	stw	r6,12(sp)
 1003910:	d8800415 	stw	r2,16(sp)
 1003914:	d8c00b17 	ldw	r3,44(sp)
 1003918:	1805003a 	cmpeq	r2,r3,zero
 100391c:	1000e21e 	bne	r2,zero,1003ca8 <_dtoa_r+0x12e0>
 1003920:	d9000317 	ldw	r4,12(sp)
 1003924:	0005883a 	mov	r2,zero
 1003928:	00cff834 	movhi	r3,16352
 100392c:	200c90fa 	slli	r6,r4,3
 1003930:	01004074 	movhi	r4,257
 1003934:	210cb204 	addi	r4,r4,13000
 1003938:	180b883a 	mov	r5,r3
 100393c:	310d883a 	add	r6,r6,r4
 1003940:	327fff17 	ldw	r9,-4(r6)
 1003944:	323ffe17 	ldw	r8,-8(r6)
 1003948:	1009883a 	mov	r4,r2
 100394c:	480f883a 	mov	r7,r9
 1003950:	400d883a 	mov	r6,r8
 1003954:	100904c0 	call	100904c <__divdf3>
 1003958:	180b883a 	mov	r5,r3
 100395c:	b00d883a 	mov	r6,r22
 1003960:	b80f883a 	mov	r7,r23
 1003964:	1009883a 	mov	r4,r2
 1003968:	1008b940 	call	1008b94 <__subdf3>
 100396c:	a80b883a 	mov	r5,r21
 1003970:	a009883a 	mov	r4,r20
 1003974:	d8c01915 	stw	r3,100(sp)
 1003978:	d8801815 	stw	r2,96(sp)
 100397c:	10096440 	call	1009644 <__fixdfsi>
 1003980:	1009883a 	mov	r4,r2
 1003984:	1027883a 	mov	r19,r2
 1003988:	100954c0 	call	100954c <__floatsidf>
 100398c:	a80b883a 	mov	r5,r21
 1003990:	a009883a 	mov	r4,r20
 1003994:	180f883a 	mov	r7,r3
 1003998:	100d883a 	mov	r6,r2
 100399c:	1008b940 	call	1008b94 <__subdf3>
 10039a0:	d9801817 	ldw	r6,96(sp)
 10039a4:	1823883a 	mov	r17,r3
 10039a8:	d8801415 	stw	r2,80(sp)
 10039ac:	302d883a 	mov	r22,r6
 10039b0:	d9800517 	ldw	r6,20(sp)
 10039b4:	9cc00c04 	addi	r19,r19,48
 10039b8:	dc401515 	stw	r17,84(sp)
 10039bc:	d8c01917 	ldw	r3,100(sp)
 10039c0:	34c00005 	stb	r19,0(r6)
 10039c4:	d8800517 	ldw	r2,20(sp)
 10039c8:	d9401917 	ldw	r5,100(sp)
 10039cc:	d9801417 	ldw	r6,80(sp)
 10039d0:	b009883a 	mov	r4,r22
 10039d4:	880f883a 	mov	r7,r17
 10039d8:	182f883a 	mov	r23,r3
 10039dc:	17000044 	addi	fp,r2,1
 10039e0:	10093b40 	call	10093b4 <__gtdf2>
 10039e4:	00804e16 	blt	zero,r2,1003b20 <_dtoa_r+0x1158>
 10039e8:	d9801417 	ldw	r6,80(sp)
 10039ec:	0005883a 	mov	r2,zero
 10039f0:	00cffc34 	movhi	r3,16368
 10039f4:	180b883a 	mov	r5,r3
 10039f8:	880f883a 	mov	r7,r17
 10039fc:	1009883a 	mov	r4,r2
 1003a00:	1008b940 	call	1008b94 <__subdf3>
 1003a04:	d9401917 	ldw	r5,100(sp)
 1003a08:	180f883a 	mov	r7,r3
 1003a0c:	b009883a 	mov	r4,r22
 1003a10:	100d883a 	mov	r6,r2
 1003a14:	10093b40 	call	10093b4 <__gtdf2>
 1003a18:	00bda216 	blt	zero,r2,10030a4 <_dtoa_r+0x6dc>
 1003a1c:	d8c00317 	ldw	r3,12(sp)
 1003a20:	00800044 	movi	r2,1
 1003a24:	10c01216 	blt	r2,r3,1003a70 <_dtoa_r+0x10a8>
 1003a28:	003d4506 	br	1002f40 <_dtoa_r+0x578>
 1003a2c:	d9801417 	ldw	r6,80(sp)
 1003a30:	0005883a 	mov	r2,zero
 1003a34:	00cffc34 	movhi	r3,16368
 1003a38:	180b883a 	mov	r5,r3
 1003a3c:	880f883a 	mov	r7,r17
 1003a40:	1009883a 	mov	r4,r2
 1003a44:	1008b940 	call	1008b94 <__subdf3>
 1003a48:	d9c01b17 	ldw	r7,108(sp)
 1003a4c:	180b883a 	mov	r5,r3
 1003a50:	1009883a 	mov	r4,r2
 1003a54:	b00d883a 	mov	r6,r22
 1003a58:	10094c40 	call	10094c4 <__ltdf2>
 1003a5c:	103d9116 	blt	r2,zero,10030a4 <_dtoa_r+0x6dc>
 1003a60:	d9800517 	ldw	r6,20(sp)
 1003a64:	d9000317 	ldw	r4,12(sp)
 1003a68:	3105883a 	add	r2,r6,r4
 1003a6c:	e0bd3426 	beq	fp,r2,1002f40 <_dtoa_r+0x578>
 1003a70:	04500934 	movhi	r17,16420
 1003a74:	0021883a 	mov	r16,zero
 1003a78:	b80b883a 	mov	r5,r23
 1003a7c:	b009883a 	mov	r4,r22
 1003a80:	800d883a 	mov	r6,r16
 1003a84:	880f883a 	mov	r7,r17
 1003a88:	1008c880 	call	1008c88 <__muldf3>
 1003a8c:	d9401517 	ldw	r5,84(sp)
 1003a90:	d9001417 	ldw	r4,80(sp)
 1003a94:	880f883a 	mov	r7,r17
 1003a98:	000d883a 	mov	r6,zero
 1003a9c:	d8801a15 	stw	r2,104(sp)
 1003aa0:	d8c01b15 	stw	r3,108(sp)
 1003aa4:	1008c880 	call	1008c88 <__muldf3>
 1003aa8:	180b883a 	mov	r5,r3
 1003aac:	1009883a 	mov	r4,r2
 1003ab0:	1823883a 	mov	r17,r3
 1003ab4:	1021883a 	mov	r16,r2
 1003ab8:	10096440 	call	1009644 <__fixdfsi>
 1003abc:	1009883a 	mov	r4,r2
 1003ac0:	102b883a 	mov	r21,r2
 1003ac4:	100954c0 	call	100954c <__floatsidf>
 1003ac8:	880b883a 	mov	r5,r17
 1003acc:	8009883a 	mov	r4,r16
 1003ad0:	180f883a 	mov	r7,r3
 1003ad4:	100d883a 	mov	r6,r2
 1003ad8:	1008b940 	call	1008b94 <__subdf3>
 1003adc:	1021883a 	mov	r16,r2
 1003ae0:	d9001b17 	ldw	r4,108(sp)
 1003ae4:	1823883a 	mov	r17,r3
 1003ae8:	dc001415 	stw	r16,80(sp)
 1003aec:	ad400c04 	addi	r21,r21,48
 1003af0:	dc401515 	stw	r17,84(sp)
 1003af4:	d8801a17 	ldw	r2,104(sp)
 1003af8:	e5400005 	stb	r21,0(fp)
 1003afc:	202f883a 	mov	r23,r4
 1003b00:	d9c01b17 	ldw	r7,108(sp)
 1003b04:	d9001417 	ldw	r4,80(sp)
 1003b08:	880b883a 	mov	r5,r17
 1003b0c:	100d883a 	mov	r6,r2
 1003b10:	102d883a 	mov	r22,r2
 1003b14:	e7000044 	addi	fp,fp,1
 1003b18:	10094c40 	call	10094c4 <__ltdf2>
 1003b1c:	103fc30e 	bge	r2,zero,1003a2c <_dtoa_r+0x1064>
 1003b20:	d9000417 	ldw	r4,16(sp)
 1003b24:	d9000d15 	stw	r4,52(sp)
 1003b28:	003d7106 	br	10030f0 <_dtoa_r+0x728>
 1003b2c:	d9801717 	ldw	r6,92(sp)
 1003b30:	00800084 	movi	r2,2
 1003b34:	11bde60e 	bge	r2,r6,10032d0 <_dtoa_r+0x908>
 1003b38:	203cfb1e 	bne	r4,zero,1002f28 <_dtoa_r+0x560>
 1003b3c:	d9001617 	ldw	r4,88(sp)
 1003b40:	900b883a 	mov	r5,r18
 1003b44:	01800144 	movi	r6,5
 1003b48:	000f883a 	mov	r7,zero
 1003b4c:	10068100 	call	1006810 <__multadd>
 1003b50:	d9000717 	ldw	r4,28(sp)
 1003b54:	100b883a 	mov	r5,r2
 1003b58:	1025883a 	mov	r18,r2
 1003b5c:	1005cb80 	call	1005cb8 <__mcmp>
 1003b60:	00bcf10e 	bge	zero,r2,1002f28 <_dtoa_r+0x560>
 1003b64:	d8c00d17 	ldw	r3,52(sp)
 1003b68:	d9000517 	ldw	r4,20(sp)
 1003b6c:	d8000615 	stw	zero,24(sp)
 1003b70:	18c00044 	addi	r3,r3,1
 1003b74:	d8c00d15 	stw	r3,52(sp)
 1003b78:	00800c44 	movi	r2,49
 1003b7c:	27000044 	addi	fp,r4,1
 1003b80:	20800005 	stb	r2,0(r4)
 1003b84:	003e8906 	br	10035ac <_dtoa_r+0xbe4>
 1003b88:	d8c00517 	ldw	r3,20(sp)
 1003b8c:	003bc206 	br	1002a98 <_dtoa_r+0xd0>
 1003b90:	01804074 	movhi	r6,257
 1003b94:	318ce404 	addi	r6,r6,13200
 1003b98:	30c00917 	ldw	r3,36(r6)
 1003b9c:	30800817 	ldw	r2,32(r6)
 1003ba0:	d9001217 	ldw	r4,72(sp)
 1003ba4:	d9401317 	ldw	r5,76(sp)
 1003ba8:	180f883a 	mov	r7,r3
 1003bac:	100d883a 	mov	r6,r2
 1003bb0:	100904c0 	call	100904c <__divdf3>
 1003bb4:	948003cc 	andi	r18,r18,15
 1003bb8:	058000c4 	movi	r22,3
 1003bbc:	1029883a 	mov	r20,r2
 1003bc0:	182b883a 	mov	r21,r3
 1003bc4:	003c8906 	br	1002dec <_dtoa_r+0x424>
 1003bc8:	d9001017 	ldw	r4,64(sp)
 1003bcc:	d9800917 	ldw	r6,36(sp)
 1003bd0:	0025883a 	mov	r18,zero
 1003bd4:	1105c83a 	sub	r2,r2,r4
 1003bd8:	2089883a 	add	r4,r4,r2
 1003bdc:	308d883a 	add	r6,r6,r2
 1003be0:	d9001015 	stw	r4,64(sp)
 1003be4:	d9800915 	stw	r6,36(sp)
 1003be8:	003e3206 	br	10034b4 <_dtoa_r+0xaec>
 1003bec:	28800044 	addi	r2,r5,1
 1003bf0:	27000044 	addi	fp,r4,1
 1003bf4:	20800005 	stb	r2,0(r4)
 1003bf8:	003e6c06 	br	10035ac <_dtoa_r+0xbe4>
 1003bfc:	d8800f17 	ldw	r2,60(sp)
 1003c00:	00bce016 	blt	zero,r2,1002f84 <_dtoa_r+0x5bc>
 1003c04:	d9800f17 	ldw	r6,60(sp)
 1003c08:	303cc51e 	bne	r6,zero,1002f20 <_dtoa_r+0x558>
 1003c0c:	0005883a 	mov	r2,zero
 1003c10:	00d00534 	movhi	r3,16404
 1003c14:	980b883a 	mov	r5,r19
 1003c18:	180f883a 	mov	r7,r3
 1003c1c:	9009883a 	mov	r4,r18
 1003c20:	100d883a 	mov	r6,r2
 1003c24:	1008c880 	call	1008c88 <__muldf3>
 1003c28:	180b883a 	mov	r5,r3
 1003c2c:	a80f883a 	mov	r7,r21
 1003c30:	1009883a 	mov	r4,r2
 1003c34:	a00d883a 	mov	r6,r20
 1003c38:	100943c0 	call	100943c <__gedf2>
 1003c3c:	103cb80e 	bge	r2,zero,1002f20 <_dtoa_r+0x558>
 1003c40:	0027883a 	mov	r19,zero
 1003c44:	0025883a 	mov	r18,zero
 1003c48:	003fc606 	br	1003b64 <_dtoa_r+0x119c>
 1003c4c:	99400117 	ldw	r5,4(r19)
 1003c50:	d9001617 	ldw	r4,88(sp)
 1003c54:	10060dc0 	call	10060dc <_Balloc>
 1003c58:	99800417 	ldw	r6,16(r19)
 1003c5c:	11000304 	addi	r4,r2,12
 1003c60:	99400304 	addi	r5,r19,12
 1003c64:	318d883a 	add	r6,r6,r6
 1003c68:	318d883a 	add	r6,r6,r6
 1003c6c:	31800204 	addi	r6,r6,8
 1003c70:	1023883a 	mov	r17,r2
 1003c74:	10059440 	call	1005944 <memcpy>
 1003c78:	d9001617 	ldw	r4,88(sp)
 1003c7c:	880b883a 	mov	r5,r17
 1003c80:	01800044 	movi	r6,1
 1003c84:	10064a00 	call	10064a0 <__lshift>
 1003c88:	100b883a 	mov	r5,r2
 1003c8c:	003d9c06 	br	1003300 <_dtoa_r+0x938>
 1003c90:	00800e44 	movi	r2,57
 1003c94:	b8807026 	beq	r23,r2,1003e58 <_dtoa_r+0x1490>
 1003c98:	b8800044 	addi	r2,r23,1
 1003c9c:	b7000044 	addi	fp,r22,1
 1003ca0:	b0800005 	stb	r2,0(r22)
 1003ca4:	003e4106 	br	10035ac <_dtoa_r+0xbe4>
 1003ca8:	d8800317 	ldw	r2,12(sp)
 1003cac:	01804074 	movhi	r6,257
 1003cb0:	318cb204 	addi	r6,r6,13000
 1003cb4:	b009883a 	mov	r4,r22
 1003cb8:	100e90fa 	slli	r7,r2,3
 1003cbc:	b80b883a 	mov	r5,r23
 1003cc0:	398f883a 	add	r7,r7,r6
 1003cc4:	38bffe17 	ldw	r2,-8(r7)
 1003cc8:	d9800517 	ldw	r6,20(sp)
 1003ccc:	38ffff17 	ldw	r3,-4(r7)
 1003cd0:	37000044 	addi	fp,r6,1
 1003cd4:	180f883a 	mov	r7,r3
 1003cd8:	100d883a 	mov	r6,r2
 1003cdc:	1008c880 	call	1008c88 <__muldf3>
 1003ce0:	a80b883a 	mov	r5,r21
 1003ce4:	a009883a 	mov	r4,r20
 1003ce8:	182f883a 	mov	r23,r3
 1003cec:	102d883a 	mov	r22,r2
 1003cf0:	10096440 	call	1009644 <__fixdfsi>
 1003cf4:	1009883a 	mov	r4,r2
 1003cf8:	1027883a 	mov	r19,r2
 1003cfc:	100954c0 	call	100954c <__floatsidf>
 1003d00:	a80b883a 	mov	r5,r21
 1003d04:	a009883a 	mov	r4,r20
 1003d08:	180f883a 	mov	r7,r3
 1003d0c:	100d883a 	mov	r6,r2
 1003d10:	1008b940 	call	1008b94 <__subdf3>
 1003d14:	180b883a 	mov	r5,r3
 1003d18:	d8c00517 	ldw	r3,20(sp)
 1003d1c:	9cc00c04 	addi	r19,r19,48
 1003d20:	1009883a 	mov	r4,r2
 1003d24:	1cc00005 	stb	r19,0(r3)
 1003d28:	2021883a 	mov	r16,r4
 1003d2c:	d9000317 	ldw	r4,12(sp)
 1003d30:	00800044 	movi	r2,1
 1003d34:	2823883a 	mov	r17,r5
 1003d38:	20802226 	beq	r4,r2,1003dc4 <_dtoa_r+0x13fc>
 1003d3c:	1029883a 	mov	r20,r2
 1003d40:	0005883a 	mov	r2,zero
 1003d44:	00d00934 	movhi	r3,16420
 1003d48:	180f883a 	mov	r7,r3
 1003d4c:	100d883a 	mov	r6,r2
 1003d50:	880b883a 	mov	r5,r17
 1003d54:	8009883a 	mov	r4,r16
 1003d58:	1008c880 	call	1008c88 <__muldf3>
 1003d5c:	180b883a 	mov	r5,r3
 1003d60:	1009883a 	mov	r4,r2
 1003d64:	1823883a 	mov	r17,r3
 1003d68:	1021883a 	mov	r16,r2
 1003d6c:	10096440 	call	1009644 <__fixdfsi>
 1003d70:	1009883a 	mov	r4,r2
 1003d74:	102b883a 	mov	r21,r2
 1003d78:	100954c0 	call	100954c <__floatsidf>
 1003d7c:	880b883a 	mov	r5,r17
 1003d80:	8009883a 	mov	r4,r16
 1003d84:	180f883a 	mov	r7,r3
 1003d88:	100d883a 	mov	r6,r2
 1003d8c:	1008b940 	call	1008b94 <__subdf3>
 1003d90:	180b883a 	mov	r5,r3
 1003d94:	d8c00517 	ldw	r3,20(sp)
 1003d98:	1009883a 	mov	r4,r2
 1003d9c:	ad400c04 	addi	r21,r21,48
 1003da0:	1d05883a 	add	r2,r3,r20
 1003da4:	15400005 	stb	r21,0(r2)
 1003da8:	2021883a 	mov	r16,r4
 1003dac:	d9000317 	ldw	r4,12(sp)
 1003db0:	a5000044 	addi	r20,r20,1
 1003db4:	2823883a 	mov	r17,r5
 1003db8:	a13fe11e 	bne	r20,r4,1003d40 <_dtoa_r+0x1378>
 1003dbc:	e505883a 	add	r2,fp,r20
 1003dc0:	173fffc4 	addi	fp,r2,-1
 1003dc4:	0025883a 	mov	r18,zero
 1003dc8:	04cff834 	movhi	r19,16352
 1003dcc:	b009883a 	mov	r4,r22
 1003dd0:	b80b883a 	mov	r5,r23
 1003dd4:	900d883a 	mov	r6,r18
 1003dd8:	980f883a 	mov	r7,r19
 1003ddc:	1008c140 	call	1008c14 <__adddf3>
 1003de0:	180b883a 	mov	r5,r3
 1003de4:	1009883a 	mov	r4,r2
 1003de8:	800d883a 	mov	r6,r16
 1003dec:	880f883a 	mov	r7,r17
 1003df0:	10094c40 	call	10094c4 <__ltdf2>
 1003df4:	103cab16 	blt	r2,zero,10030a4 <_dtoa_r+0x6dc>
 1003df8:	0009883a 	mov	r4,zero
 1003dfc:	980b883a 	mov	r5,r19
 1003e00:	b80f883a 	mov	r7,r23
 1003e04:	b00d883a 	mov	r6,r22
 1003e08:	1008b940 	call	1008b94 <__subdf3>
 1003e0c:	180b883a 	mov	r5,r3
 1003e10:	880f883a 	mov	r7,r17
 1003e14:	1009883a 	mov	r4,r2
 1003e18:	800d883a 	mov	r6,r16
 1003e1c:	10093b40 	call	10093b4 <__gtdf2>
 1003e20:	00bc470e 	bge	zero,r2,1002f40 <_dtoa_r+0x578>
 1003e24:	00c00c04 	movi	r3,48
 1003e28:	e73fffc4 	addi	fp,fp,-1
 1003e2c:	e0800007 	ldb	r2,0(fp)
 1003e30:	10fffd26 	beq	r2,r3,1003e28 <_dtoa_r+0x1460>
 1003e34:	d9800417 	ldw	r6,16(sp)
 1003e38:	e7000044 	addi	fp,fp,1
 1003e3c:	d9800d15 	stw	r6,52(sp)
 1003e40:	003cab06 	br	10030f0 <_dtoa_r+0x728>
 1003e44:	d8c00f17 	ldw	r3,60(sp)
 1003e48:	d9001117 	ldw	r4,68(sp)
 1003e4c:	20e1c83a 	sub	r16,r4,r3
 1003e50:	0007883a 	mov	r3,zero
 1003e54:	003d9b06 	br	10034c4 <_dtoa_r+0xafc>
 1003e58:	00800e44 	movi	r2,57
 1003e5c:	b0800005 	stb	r2,0(r22)
 1003e60:	b5800044 	addi	r22,r22,1
 1003e64:	003dc106 	br	100356c <_dtoa_r+0xba4>
 1003e68:	05800084 	movi	r22,2
 1003e6c:	003bf706 	br	1002e4c <_dtoa_r+0x484>
 1003e70:	d9000f17 	ldw	r4,60(sp)
 1003e74:	013c000e 	bge	zero,r4,1002e78 <_dtoa_r+0x4b0>
 1003e78:	d9800e17 	ldw	r6,56(sp)
 1003e7c:	01bc300e 	bge	zero,r6,1002f40 <_dtoa_r+0x578>
 1003e80:	0005883a 	mov	r2,zero
 1003e84:	00d00934 	movhi	r3,16420
 1003e88:	a80b883a 	mov	r5,r21
 1003e8c:	180f883a 	mov	r7,r3
 1003e90:	a009883a 	mov	r4,r20
 1003e94:	100d883a 	mov	r6,r2
 1003e98:	1008c880 	call	1008c88 <__muldf3>
 1003e9c:	b1000044 	addi	r4,r22,1
 1003ea0:	1021883a 	mov	r16,r2
 1003ea4:	1823883a 	mov	r17,r3
 1003ea8:	100954c0 	call	100954c <__floatsidf>
 1003eac:	880b883a 	mov	r5,r17
 1003eb0:	8009883a 	mov	r4,r16
 1003eb4:	180f883a 	mov	r7,r3
 1003eb8:	100d883a 	mov	r6,r2
 1003ebc:	1008c880 	call	1008c88 <__muldf3>
 1003ec0:	0011883a 	mov	r8,zero
 1003ec4:	02500734 	movhi	r9,16412
 1003ec8:	180b883a 	mov	r5,r3
 1003ecc:	480f883a 	mov	r7,r9
 1003ed0:	1009883a 	mov	r4,r2
 1003ed4:	400d883a 	mov	r6,r8
 1003ed8:	1008c140 	call	1008c14 <__adddf3>
 1003edc:	102d883a 	mov	r22,r2
 1003ee0:	00bf3034 	movhi	r2,64704
 1003ee4:	10ef883a 	add	r23,r2,r3
 1003ee8:	d8800d17 	ldw	r2,52(sp)
 1003eec:	d8c00e17 	ldw	r3,56(sp)
 1003ef0:	8029883a 	mov	r20,r16
 1003ef4:	10bfffc4 	addi	r2,r2,-1
 1003ef8:	882b883a 	mov	r21,r17
 1003efc:	d8800415 	stw	r2,16(sp)
 1003f00:	d8c00315 	stw	r3,12(sp)
 1003f04:	003e8306 	br	1003914 <_dtoa_r+0xf4c>
 1003f08:	d8800117 	ldw	r2,4(sp)
 1003f0c:	dc001117 	ldw	r16,68(sp)
 1003f10:	dc801017 	ldw	r18,64(sp)
 1003f14:	00c00d84 	movi	r3,54
 1003f18:	1887c83a 	sub	r3,r3,r2
 1003f1c:	003d6906 	br	10034c4 <_dtoa_r+0xafc>
 1003f20:	01800044 	movi	r6,1
 1003f24:	3021883a 	mov	r16,r6
 1003f28:	d9800f15 	stw	r6,60(sp)
 1003f2c:	d9802615 	stw	r6,152(sp)
 1003f30:	d9800e15 	stw	r6,56(sp)
 1003f34:	003b9306 	br	1002d84 <_dtoa_r+0x3bc>
 1003f38:	b021883a 	mov	r16,r22
 1003f3c:	dd800f15 	stw	r22,60(sp)
 1003f40:	003b9006 	br	1002d84 <_dtoa_r+0x3bc>
 1003f44:	103e221e 	bne	r2,zero,10037d0 <_dtoa_r+0xe08>
 1003f48:	b880004c 	andi	r2,r23,1
 1003f4c:	1005003a 	cmpeq	r2,r2,zero
 1003f50:	103e1f1e 	bne	r2,zero,10037d0 <_dtoa_r+0xe08>
 1003f54:	003e1b06 	br	10037c4 <_dtoa_r+0xdfc>
 1003f58:	d9001617 	ldw	r4,88(sp)
 1003f5c:	980b883a 	mov	r5,r19
 1003f60:	01800284 	movi	r6,10
 1003f64:	000f883a 	mov	r7,zero
 1003f68:	10068100 	call	1006810 <__multadd>
 1003f6c:	d8c00e17 	ldw	r3,56(sp)
 1003f70:	1027883a 	mov	r19,r2
 1003f74:	d8c00f15 	stw	r3,60(sp)
 1003f78:	003cd306 	br	10032c8 <_dtoa_r+0x900>

01003f7c <_fflush_r>:
 1003f7c:	defffb04 	addi	sp,sp,-20
 1003f80:	dcc00315 	stw	r19,12(sp)
 1003f84:	dc800215 	stw	r18,8(sp)
 1003f88:	dfc00415 	stw	ra,16(sp)
 1003f8c:	dc400115 	stw	r17,4(sp)
 1003f90:	dc000015 	stw	r16,0(sp)
 1003f94:	2027883a 	mov	r19,r4
 1003f98:	2825883a 	mov	r18,r5
 1003f9c:	20000226 	beq	r4,zero,1003fa8 <_fflush_r+0x2c>
 1003fa0:	20800e17 	ldw	r2,56(r4)
 1003fa4:	10005626 	beq	r2,zero,1004100 <_fflush_r+0x184>
 1003fa8:	9100030b 	ldhu	r4,12(r18)
 1003fac:	20ffffcc 	andi	r3,r4,65535
 1003fb0:	18e0001c 	xori	r3,r3,32768
 1003fb4:	18e00004 	addi	r3,r3,-32768
 1003fb8:	1880020c 	andi	r2,r3,8
 1003fbc:	1000261e 	bne	r2,zero,1004058 <_fflush_r+0xdc>
 1003fc0:	90c00117 	ldw	r3,4(r18)
 1003fc4:	20820014 	ori	r2,r4,2048
 1003fc8:	9080030d 	sth	r2,12(r18)
 1003fcc:	1009883a 	mov	r4,r2
 1003fd0:	00c0400e 	bge	zero,r3,10040d4 <_fflush_r+0x158>
 1003fd4:	92000a17 	ldw	r8,40(r18)
 1003fd8:	40004026 	beq	r8,zero,10040dc <_fflush_r+0x160>
 1003fdc:	2084000c 	andi	r2,r4,4096
 1003fe0:	10005326 	beq	r2,zero,1004130 <_fflush_r+0x1b4>
 1003fe4:	94001417 	ldw	r16,80(r18)
 1003fe8:	9080030b 	ldhu	r2,12(r18)
 1003fec:	1080010c 	andi	r2,r2,4
 1003ff0:	1000481e 	bne	r2,zero,1004114 <_fflush_r+0x198>
 1003ff4:	91400717 	ldw	r5,28(r18)
 1003ff8:	9809883a 	mov	r4,r19
 1003ffc:	800d883a 	mov	r6,r16
 1004000:	000f883a 	mov	r7,zero
 1004004:	403ee83a 	callr	r8
 1004008:	8080261e 	bne	r16,r2,10040a4 <_fflush_r+0x128>
 100400c:	9080030b 	ldhu	r2,12(r18)
 1004010:	91000417 	ldw	r4,16(r18)
 1004014:	90000115 	stw	zero,4(r18)
 1004018:	10bdffcc 	andi	r2,r2,63487
 100401c:	10ffffcc 	andi	r3,r2,65535
 1004020:	18c4000c 	andi	r3,r3,4096
 1004024:	9080030d 	sth	r2,12(r18)
 1004028:	91000015 	stw	r4,0(r18)
 100402c:	18002b26 	beq	r3,zero,10040dc <_fflush_r+0x160>
 1004030:	0007883a 	mov	r3,zero
 1004034:	1805883a 	mov	r2,r3
 1004038:	94001415 	stw	r16,80(r18)
 100403c:	dfc00417 	ldw	ra,16(sp)
 1004040:	dcc00317 	ldw	r19,12(sp)
 1004044:	dc800217 	ldw	r18,8(sp)
 1004048:	dc400117 	ldw	r17,4(sp)
 100404c:	dc000017 	ldw	r16,0(sp)
 1004050:	dec00504 	addi	sp,sp,20
 1004054:	f800283a 	ret
 1004058:	94400417 	ldw	r17,16(r18)
 100405c:	88001f26 	beq	r17,zero,10040dc <_fflush_r+0x160>
 1004060:	90800017 	ldw	r2,0(r18)
 1004064:	18c000cc 	andi	r3,r3,3
 1004068:	94400015 	stw	r17,0(r18)
 100406c:	1461c83a 	sub	r16,r2,r17
 1004070:	18002526 	beq	r3,zero,1004108 <_fflush_r+0x18c>
 1004074:	0005883a 	mov	r2,zero
 1004078:	90800215 	stw	r2,8(r18)
 100407c:	0400170e 	bge	zero,r16,10040dc <_fflush_r+0x160>
 1004080:	90c00917 	ldw	r3,36(r18)
 1004084:	91400717 	ldw	r5,28(r18)
 1004088:	880d883a 	mov	r6,r17
 100408c:	800f883a 	mov	r7,r16
 1004090:	9809883a 	mov	r4,r19
 1004094:	183ee83a 	callr	r3
 1004098:	88a3883a 	add	r17,r17,r2
 100409c:	80a1c83a 	sub	r16,r16,r2
 10040a0:	00bff616 	blt	zero,r2,100407c <_fflush_r+0x100>
 10040a4:	9080030b 	ldhu	r2,12(r18)
 10040a8:	00ffffc4 	movi	r3,-1
 10040ac:	10801014 	ori	r2,r2,64
 10040b0:	9080030d 	sth	r2,12(r18)
 10040b4:	1805883a 	mov	r2,r3
 10040b8:	dfc00417 	ldw	ra,16(sp)
 10040bc:	dcc00317 	ldw	r19,12(sp)
 10040c0:	dc800217 	ldw	r18,8(sp)
 10040c4:	dc400117 	ldw	r17,4(sp)
 10040c8:	dc000017 	ldw	r16,0(sp)
 10040cc:	dec00504 	addi	sp,sp,20
 10040d0:	f800283a 	ret
 10040d4:	90800f17 	ldw	r2,60(r18)
 10040d8:	00bfbe16 	blt	zero,r2,1003fd4 <_fflush_r+0x58>
 10040dc:	0007883a 	mov	r3,zero
 10040e0:	1805883a 	mov	r2,r3
 10040e4:	dfc00417 	ldw	ra,16(sp)
 10040e8:	dcc00317 	ldw	r19,12(sp)
 10040ec:	dc800217 	ldw	r18,8(sp)
 10040f0:	dc400117 	ldw	r17,4(sp)
 10040f4:	dc000017 	ldw	r16,0(sp)
 10040f8:	dec00504 	addi	sp,sp,20
 10040fc:	f800283a 	ret
 1004100:	10042140 	call	1004214 <__sinit>
 1004104:	003fa806 	br	1003fa8 <_fflush_r+0x2c>
 1004108:	90800517 	ldw	r2,20(r18)
 100410c:	90800215 	stw	r2,8(r18)
 1004110:	003fda06 	br	100407c <_fflush_r+0x100>
 1004114:	90800117 	ldw	r2,4(r18)
 1004118:	90c00c17 	ldw	r3,48(r18)
 100411c:	80a1c83a 	sub	r16,r16,r2
 1004120:	183fb426 	beq	r3,zero,1003ff4 <_fflush_r+0x78>
 1004124:	90800f17 	ldw	r2,60(r18)
 1004128:	80a1c83a 	sub	r16,r16,r2
 100412c:	003fb106 	br	1003ff4 <_fflush_r+0x78>
 1004130:	91400717 	ldw	r5,28(r18)
 1004134:	9809883a 	mov	r4,r19
 1004138:	000d883a 	mov	r6,zero
 100413c:	01c00044 	movi	r7,1
 1004140:	403ee83a 	callr	r8
 1004144:	1021883a 	mov	r16,r2
 1004148:	00bfffc4 	movi	r2,-1
 100414c:	80800226 	beq	r16,r2,1004158 <_fflush_r+0x1dc>
 1004150:	92000a17 	ldw	r8,40(r18)
 1004154:	003fa406 	br	1003fe8 <_fflush_r+0x6c>
 1004158:	98c00017 	ldw	r3,0(r19)
 100415c:	00800744 	movi	r2,29
 1004160:	18bfde26 	beq	r3,r2,10040dc <_fflush_r+0x160>
 1004164:	9080030b 	ldhu	r2,12(r18)
 1004168:	8007883a 	mov	r3,r16
 100416c:	10801014 	ori	r2,r2,64
 1004170:	9080030d 	sth	r2,12(r18)
 1004174:	003fcf06 	br	10040b4 <_fflush_r+0x138>

01004178 <fflush>:
 1004178:	01404034 	movhi	r5,256
 100417c:	294fdf04 	addi	r5,r5,16252
 1004180:	2007883a 	mov	r3,r4
 1004184:	20000526 	beq	r4,zero,100419c <fflush+0x24>
 1004188:	00804074 	movhi	r2,257
 100418c:	1094ba04 	addi	r2,r2,21224
 1004190:	11000017 	ldw	r4,0(r2)
 1004194:	180b883a 	mov	r5,r3
 1004198:	1003f7c1 	jmpi	1003f7c <_fflush_r>
 100419c:	00804074 	movhi	r2,257
 10041a0:	1094bb04 	addi	r2,r2,21228
 10041a4:	11000017 	ldw	r4,0(r2)
 10041a8:	1004d481 	jmpi	1004d48 <_fwalk_reent>

010041ac <std>:
 10041ac:	00804034 	movhi	r2,256
 10041b0:	109d0404 	addi	r2,r2,29712
 10041b4:	20800b15 	stw	r2,44(r4)
 10041b8:	00804034 	movhi	r2,256
 10041bc:	109d3f04 	addi	r2,r2,29948
 10041c0:	20800815 	stw	r2,32(r4)
 10041c4:	00c04034 	movhi	r3,256
 10041c8:	18dd2004 	addi	r3,r3,29824
 10041cc:	00804034 	movhi	r2,256
 10041d0:	109d0604 	addi	r2,r2,29720
 10041d4:	2140030d 	sth	r5,12(r4)
 10041d8:	2180038d 	sth	r6,14(r4)
 10041dc:	20c00915 	stw	r3,36(r4)
 10041e0:	20800a15 	stw	r2,40(r4)
 10041e4:	20000015 	stw	zero,0(r4)
 10041e8:	20000115 	stw	zero,4(r4)
 10041ec:	20000215 	stw	zero,8(r4)
 10041f0:	20000415 	stw	zero,16(r4)
 10041f4:	20000515 	stw	zero,20(r4)
 10041f8:	20000615 	stw	zero,24(r4)
 10041fc:	21000715 	stw	r4,28(r4)
 1004200:	f800283a 	ret

01004204 <__sfp_lock_acquire>:
 1004204:	f800283a 	ret

01004208 <__sfp_lock_release>:
 1004208:	f800283a 	ret

0100420c <__sinit_lock_acquire>:
 100420c:	f800283a 	ret

01004210 <__sinit_lock_release>:
 1004210:	f800283a 	ret

01004214 <__sinit>:
 1004214:	20800e17 	ldw	r2,56(r4)
 1004218:	defffd04 	addi	sp,sp,-12
 100421c:	dc400115 	stw	r17,4(sp)
 1004220:	dc000015 	stw	r16,0(sp)
 1004224:	dfc00215 	stw	ra,8(sp)
 1004228:	04400044 	movi	r17,1
 100422c:	01400104 	movi	r5,4
 1004230:	000d883a 	mov	r6,zero
 1004234:	2021883a 	mov	r16,r4
 1004238:	2200bb04 	addi	r8,r4,748
 100423c:	200f883a 	mov	r7,r4
 1004240:	10000526 	beq	r2,zero,1004258 <__sinit+0x44>
 1004244:	dfc00217 	ldw	ra,8(sp)
 1004248:	dc400117 	ldw	r17,4(sp)
 100424c:	dc000017 	ldw	r16,0(sp)
 1004250:	dec00304 	addi	sp,sp,12
 1004254:	f800283a 	ret
 1004258:	21000117 	ldw	r4,4(r4)
 100425c:	00804034 	movhi	r2,256
 1004260:	1090be04 	addi	r2,r2,17144
 1004264:	00c000c4 	movi	r3,3
 1004268:	80800f15 	stw	r2,60(r16)
 100426c:	80c0b915 	stw	r3,740(r16)
 1004270:	8200ba15 	stw	r8,744(r16)
 1004274:	84400e15 	stw	r17,56(r16)
 1004278:	8000b815 	stw	zero,736(r16)
 100427c:	10041ac0 	call	10041ac <std>
 1004280:	81000217 	ldw	r4,8(r16)
 1004284:	880d883a 	mov	r6,r17
 1004288:	800f883a 	mov	r7,r16
 100428c:	01400284 	movi	r5,10
 1004290:	10041ac0 	call	10041ac <std>
 1004294:	81000317 	ldw	r4,12(r16)
 1004298:	800f883a 	mov	r7,r16
 100429c:	01400484 	movi	r5,18
 10042a0:	01800084 	movi	r6,2
 10042a4:	dfc00217 	ldw	ra,8(sp)
 10042a8:	dc400117 	ldw	r17,4(sp)
 10042ac:	dc000017 	ldw	r16,0(sp)
 10042b0:	dec00304 	addi	sp,sp,12
 10042b4:	10041ac1 	jmpi	10041ac <std>

010042b8 <__fp_lock>:
 10042b8:	0005883a 	mov	r2,zero
 10042bc:	f800283a 	ret

010042c0 <__fp_unlock>:
 10042c0:	0005883a 	mov	r2,zero
 10042c4:	f800283a 	ret

010042c8 <__fp_unlock_all>:
 10042c8:	00804074 	movhi	r2,257
 10042cc:	1094ba04 	addi	r2,r2,21224
 10042d0:	11000017 	ldw	r4,0(r2)
 10042d4:	01404034 	movhi	r5,256
 10042d8:	2950b004 	addi	r5,r5,17088
 10042dc:	1004e101 	jmpi	1004e10 <_fwalk>

010042e0 <__fp_lock_all>:
 10042e0:	00804074 	movhi	r2,257
 10042e4:	1094ba04 	addi	r2,r2,21224
 10042e8:	11000017 	ldw	r4,0(r2)
 10042ec:	01404034 	movhi	r5,256
 10042f0:	2950ae04 	addi	r5,r5,17080
 10042f4:	1004e101 	jmpi	1004e10 <_fwalk>

010042f8 <_cleanup_r>:
 10042f8:	01404034 	movhi	r5,256
 10042fc:	295e8404 	addi	r5,r5,31248
 1004300:	1004e101 	jmpi	1004e10 <_fwalk>

01004304 <_cleanup>:
 1004304:	00804074 	movhi	r2,257
 1004308:	1094bb04 	addi	r2,r2,21228
 100430c:	11000017 	ldw	r4,0(r2)
 1004310:	10042f81 	jmpi	10042f8 <_cleanup_r>

01004314 <__sfmoreglue>:
 1004314:	defffc04 	addi	sp,sp,-16
 1004318:	dc400115 	stw	r17,4(sp)
 100431c:	2c401724 	muli	r17,r5,92
 1004320:	dc800215 	stw	r18,8(sp)
 1004324:	2825883a 	mov	r18,r5
 1004328:	89400304 	addi	r5,r17,12
 100432c:	dc000015 	stw	r16,0(sp)
 1004330:	dfc00315 	stw	ra,12(sp)
 1004334:	10051200 	call	1005120 <_malloc_r>
 1004338:	0021883a 	mov	r16,zero
 100433c:	880d883a 	mov	r6,r17
 1004340:	000b883a 	mov	r5,zero
 1004344:	10000626 	beq	r2,zero,1004360 <__sfmoreglue+0x4c>
 1004348:	11000304 	addi	r4,r2,12
 100434c:	14800115 	stw	r18,4(r2)
 1004350:	10000015 	stw	zero,0(r2)
 1004354:	11000215 	stw	r4,8(r2)
 1004358:	1021883a 	mov	r16,r2
 100435c:	1005ac40 	call	1005ac4 <memset>
 1004360:	8005883a 	mov	r2,r16
 1004364:	dfc00317 	ldw	ra,12(sp)
 1004368:	dc800217 	ldw	r18,8(sp)
 100436c:	dc400117 	ldw	r17,4(sp)
 1004370:	dc000017 	ldw	r16,0(sp)
 1004374:	dec00404 	addi	sp,sp,16
 1004378:	f800283a 	ret

0100437c <__sfp>:
 100437c:	defffd04 	addi	sp,sp,-12
 1004380:	00804074 	movhi	r2,257
 1004384:	1094bb04 	addi	r2,r2,21228
 1004388:	dc000015 	stw	r16,0(sp)
 100438c:	14000017 	ldw	r16,0(r2)
 1004390:	dc400115 	stw	r17,4(sp)
 1004394:	dfc00215 	stw	ra,8(sp)
 1004398:	80800e17 	ldw	r2,56(r16)
 100439c:	2023883a 	mov	r17,r4
 10043a0:	10002626 	beq	r2,zero,100443c <__sfp+0xc0>
 10043a4:	8400b804 	addi	r16,r16,736
 10043a8:	80800117 	ldw	r2,4(r16)
 10043ac:	81000217 	ldw	r4,8(r16)
 10043b0:	10ffffc4 	addi	r3,r2,-1
 10043b4:	18000916 	blt	r3,zero,10043dc <__sfp+0x60>
 10043b8:	2080030f 	ldh	r2,12(r4)
 10043bc:	10000b26 	beq	r2,zero,10043ec <__sfp+0x70>
 10043c0:	017fffc4 	movi	r5,-1
 10043c4:	00000206 	br	10043d0 <__sfp+0x54>
 10043c8:	2080030f 	ldh	r2,12(r4)
 10043cc:	10000726 	beq	r2,zero,10043ec <__sfp+0x70>
 10043d0:	18ffffc4 	addi	r3,r3,-1
 10043d4:	21001704 	addi	r4,r4,92
 10043d8:	197ffb1e 	bne	r3,r5,10043c8 <__sfp+0x4c>
 10043dc:	80800017 	ldw	r2,0(r16)
 10043e0:	10001926 	beq	r2,zero,1004448 <__sfp+0xcc>
 10043e4:	1021883a 	mov	r16,r2
 10043e8:	003fef06 	br	10043a8 <__sfp+0x2c>
 10043ec:	00bfffc4 	movi	r2,-1
 10043f0:	00c00044 	movi	r3,1
 10043f4:	2080038d 	sth	r2,14(r4)
 10043f8:	20c0030d 	sth	r3,12(r4)
 10043fc:	20000015 	stw	zero,0(r4)
 1004400:	20000215 	stw	zero,8(r4)
 1004404:	20000115 	stw	zero,4(r4)
 1004408:	20000415 	stw	zero,16(r4)
 100440c:	20000515 	stw	zero,20(r4)
 1004410:	20000615 	stw	zero,24(r4)
 1004414:	20000c15 	stw	zero,48(r4)
 1004418:	20000d15 	stw	zero,52(r4)
 100441c:	20001115 	stw	zero,68(r4)
 1004420:	20001215 	stw	zero,72(r4)
 1004424:	2005883a 	mov	r2,r4
 1004428:	dfc00217 	ldw	ra,8(sp)
 100442c:	dc400117 	ldw	r17,4(sp)
 1004430:	dc000017 	ldw	r16,0(sp)
 1004434:	dec00304 	addi	sp,sp,12
 1004438:	f800283a 	ret
 100443c:	8009883a 	mov	r4,r16
 1004440:	10042140 	call	1004214 <__sinit>
 1004444:	003fd706 	br	10043a4 <__sfp+0x28>
 1004448:	8809883a 	mov	r4,r17
 100444c:	01400104 	movi	r5,4
 1004450:	10043140 	call	1004314 <__sfmoreglue>
 1004454:	80800015 	stw	r2,0(r16)
 1004458:	103fe21e 	bne	r2,zero,10043e4 <__sfp+0x68>
 100445c:	00800304 	movi	r2,12
 1004460:	0009883a 	mov	r4,zero
 1004464:	88800015 	stw	r2,0(r17)
 1004468:	003fee06 	br	1004424 <__sfp+0xa8>

0100446c <_malloc_trim_r>:
 100446c:	defffb04 	addi	sp,sp,-20
 1004470:	dcc00315 	stw	r19,12(sp)
 1004474:	04c04074 	movhi	r19,257
 1004478:	9ccf1504 	addi	r19,r19,15444
 100447c:	dc800215 	stw	r18,8(sp)
 1004480:	dc400115 	stw	r17,4(sp)
 1004484:	dc000015 	stw	r16,0(sp)
 1004488:	2823883a 	mov	r17,r5
 100448c:	2025883a 	mov	r18,r4
 1004490:	dfc00415 	stw	ra,16(sp)
 1004494:	100a6ac0 	call	100a6ac <__malloc_lock>
 1004498:	98800217 	ldw	r2,8(r19)
 100449c:	9009883a 	mov	r4,r18
 10044a0:	000b883a 	mov	r5,zero
 10044a4:	10c00117 	ldw	r3,4(r2)
 10044a8:	00bfff04 	movi	r2,-4
 10044ac:	18a0703a 	and	r16,r3,r2
 10044b0:	8463c83a 	sub	r17,r16,r17
 10044b4:	8c43fbc4 	addi	r17,r17,4079
 10044b8:	8822d33a 	srli	r17,r17,12
 10044bc:	0083ffc4 	movi	r2,4095
 10044c0:	8c7fffc4 	addi	r17,r17,-1
 10044c4:	8822933a 	slli	r17,r17,12
 10044c8:	1440060e 	bge	r2,r17,10044e4 <_malloc_trim_r+0x78>
 10044cc:	10073a00 	call	10073a0 <_sbrk_r>
 10044d0:	98c00217 	ldw	r3,8(r19)
 10044d4:	9009883a 	mov	r4,r18
 10044d8:	044bc83a 	sub	r5,zero,r17
 10044dc:	80c7883a 	add	r3,r16,r3
 10044e0:	10c00926 	beq	r2,r3,1004508 <_malloc_trim_r+0x9c>
 10044e4:	100a6cc0 	call	100a6cc <__malloc_unlock>
 10044e8:	0005883a 	mov	r2,zero
 10044ec:	dfc00417 	ldw	ra,16(sp)
 10044f0:	dcc00317 	ldw	r19,12(sp)
 10044f4:	dc800217 	ldw	r18,8(sp)
 10044f8:	dc400117 	ldw	r17,4(sp)
 10044fc:	dc000017 	ldw	r16,0(sp)
 1004500:	dec00504 	addi	sp,sp,20
 1004504:	f800283a 	ret
 1004508:	9009883a 	mov	r4,r18
 100450c:	10073a00 	call	10073a0 <_sbrk_r>
 1004510:	844dc83a 	sub	r6,r16,r17
 1004514:	00ffffc4 	movi	r3,-1
 1004518:	9009883a 	mov	r4,r18
 100451c:	000b883a 	mov	r5,zero
 1004520:	01c04074 	movhi	r7,257
 1004524:	39dc1d04 	addi	r7,r7,28788
 1004528:	31800054 	ori	r6,r6,1
 100452c:	10c00926 	beq	r2,r3,1004554 <_malloc_trim_r+0xe8>
 1004530:	38800017 	ldw	r2,0(r7)
 1004534:	98c00217 	ldw	r3,8(r19)
 1004538:	9009883a 	mov	r4,r18
 100453c:	1445c83a 	sub	r2,r2,r17
 1004540:	38800015 	stw	r2,0(r7)
 1004544:	19800115 	stw	r6,4(r3)
 1004548:	100a6cc0 	call	100a6cc <__malloc_unlock>
 100454c:	00800044 	movi	r2,1
 1004550:	003fe606 	br	10044ec <_malloc_trim_r+0x80>
 1004554:	10073a00 	call	10073a0 <_sbrk_r>
 1004558:	99800217 	ldw	r6,8(r19)
 100455c:	100f883a 	mov	r7,r2
 1004560:	9009883a 	mov	r4,r18
 1004564:	1187c83a 	sub	r3,r2,r6
 1004568:	008003c4 	movi	r2,15
 100456c:	19400054 	ori	r5,r3,1
 1004570:	10ffdc0e 	bge	r2,r3,10044e4 <_malloc_trim_r+0x78>
 1004574:	00804074 	movhi	r2,257
 1004578:	1094bf04 	addi	r2,r2,21244
 100457c:	10c00017 	ldw	r3,0(r2)
 1004580:	00804074 	movhi	r2,257
 1004584:	109c1d04 	addi	r2,r2,28788
 1004588:	31400115 	stw	r5,4(r6)
 100458c:	38c7c83a 	sub	r3,r7,r3
 1004590:	10c00015 	stw	r3,0(r2)
 1004594:	003fd306 	br	10044e4 <_malloc_trim_r+0x78>

01004598 <_free_r>:
 1004598:	defffd04 	addi	sp,sp,-12
 100459c:	dc400115 	stw	r17,4(sp)
 10045a0:	dc000015 	stw	r16,0(sp)
 10045a4:	dfc00215 	stw	ra,8(sp)
 10045a8:	2821883a 	mov	r16,r5
 10045ac:	2023883a 	mov	r17,r4
 10045b0:	28005a26 	beq	r5,zero,100471c <_free_r+0x184>
 10045b4:	100a6ac0 	call	100a6ac <__malloc_lock>
 10045b8:	823ffe04 	addi	r8,r16,-8
 10045bc:	41400117 	ldw	r5,4(r8)
 10045c0:	00bfff84 	movi	r2,-2
 10045c4:	02804074 	movhi	r10,257
 10045c8:	528f1504 	addi	r10,r10,15444
 10045cc:	288e703a 	and	r7,r5,r2
 10045d0:	41cd883a 	add	r6,r8,r7
 10045d4:	30c00117 	ldw	r3,4(r6)
 10045d8:	51000217 	ldw	r4,8(r10)
 10045dc:	00bfff04 	movi	r2,-4
 10045e0:	1892703a 	and	r9,r3,r2
 10045e4:	5017883a 	mov	r11,r10
 10045e8:	31006726 	beq	r6,r4,1004788 <_free_r+0x1f0>
 10045ec:	2880004c 	andi	r2,r5,1
 10045f0:	1005003a 	cmpeq	r2,r2,zero
 10045f4:	32400115 	stw	r9,4(r6)
 10045f8:	10001a1e 	bne	r2,zero,1004664 <_free_r+0xcc>
 10045fc:	000b883a 	mov	r5,zero
 1004600:	3247883a 	add	r3,r6,r9
 1004604:	18800117 	ldw	r2,4(r3)
 1004608:	1080004c 	andi	r2,r2,1
 100460c:	1000231e 	bne	r2,zero,100469c <_free_r+0x104>
 1004610:	280ac03a 	cmpne	r5,r5,zero
 1004614:	3a4f883a 	add	r7,r7,r9
 1004618:	2800451e 	bne	r5,zero,1004730 <_free_r+0x198>
 100461c:	31000217 	ldw	r4,8(r6)
 1004620:	00804074 	movhi	r2,257
 1004624:	108f1704 	addi	r2,r2,15452
 1004628:	20807b26 	beq	r4,r2,1004818 <_free_r+0x280>
 100462c:	30800317 	ldw	r2,12(r6)
 1004630:	3a07883a 	add	r3,r7,r8
 1004634:	19c00015 	stw	r7,0(r3)
 1004638:	11000215 	stw	r4,8(r2)
 100463c:	20800315 	stw	r2,12(r4)
 1004640:	38800054 	ori	r2,r7,1
 1004644:	40800115 	stw	r2,4(r8)
 1004648:	28001a26 	beq	r5,zero,10046b4 <_free_r+0x11c>
 100464c:	8809883a 	mov	r4,r17
 1004650:	dfc00217 	ldw	ra,8(sp)
 1004654:	dc400117 	ldw	r17,4(sp)
 1004658:	dc000017 	ldw	r16,0(sp)
 100465c:	dec00304 	addi	sp,sp,12
 1004660:	100a6cc1 	jmpi	100a6cc <__malloc_unlock>
 1004664:	80bffe17 	ldw	r2,-8(r16)
 1004668:	50c00204 	addi	r3,r10,8
 100466c:	4091c83a 	sub	r8,r8,r2
 1004670:	41000217 	ldw	r4,8(r8)
 1004674:	388f883a 	add	r7,r7,r2
 1004678:	20c06126 	beq	r4,r3,1004800 <_free_r+0x268>
 100467c:	40800317 	ldw	r2,12(r8)
 1004680:	3247883a 	add	r3,r6,r9
 1004684:	000b883a 	mov	r5,zero
 1004688:	11000215 	stw	r4,8(r2)
 100468c:	20800315 	stw	r2,12(r4)
 1004690:	18800117 	ldw	r2,4(r3)
 1004694:	1080004c 	andi	r2,r2,1
 1004698:	103fdd26 	beq	r2,zero,1004610 <_free_r+0x78>
 100469c:	38800054 	ori	r2,r7,1
 10046a0:	3a07883a 	add	r3,r7,r8
 10046a4:	280ac03a 	cmpne	r5,r5,zero
 10046a8:	40800115 	stw	r2,4(r8)
 10046ac:	19c00015 	stw	r7,0(r3)
 10046b0:	283fe61e 	bne	r5,zero,100464c <_free_r+0xb4>
 10046b4:	00807fc4 	movi	r2,511
 10046b8:	11c01f2e 	bgeu	r2,r7,1004738 <_free_r+0x1a0>
 10046bc:	3806d27a 	srli	r3,r7,9
 10046c0:	1800481e 	bne	r3,zero,10047e4 <_free_r+0x24c>
 10046c4:	3804d0fa 	srli	r2,r7,3
 10046c8:	100690fa 	slli	r3,r2,3
 10046cc:	1acd883a 	add	r6,r3,r11
 10046d0:	31400217 	ldw	r5,8(r6)
 10046d4:	31405926 	beq	r6,r5,100483c <_free_r+0x2a4>
 10046d8:	28800117 	ldw	r2,4(r5)
 10046dc:	00ffff04 	movi	r3,-4
 10046e0:	10c4703a 	and	r2,r2,r3
 10046e4:	3880022e 	bgeu	r7,r2,10046f0 <_free_r+0x158>
 10046e8:	29400217 	ldw	r5,8(r5)
 10046ec:	317ffa1e 	bne	r6,r5,10046d8 <_free_r+0x140>
 10046f0:	29800317 	ldw	r6,12(r5)
 10046f4:	41800315 	stw	r6,12(r8)
 10046f8:	41400215 	stw	r5,8(r8)
 10046fc:	8809883a 	mov	r4,r17
 1004700:	2a000315 	stw	r8,12(r5)
 1004704:	32000215 	stw	r8,8(r6)
 1004708:	dfc00217 	ldw	ra,8(sp)
 100470c:	dc400117 	ldw	r17,4(sp)
 1004710:	dc000017 	ldw	r16,0(sp)
 1004714:	dec00304 	addi	sp,sp,12
 1004718:	100a6cc1 	jmpi	100a6cc <__malloc_unlock>
 100471c:	dfc00217 	ldw	ra,8(sp)
 1004720:	dc400117 	ldw	r17,4(sp)
 1004724:	dc000017 	ldw	r16,0(sp)
 1004728:	dec00304 	addi	sp,sp,12
 100472c:	f800283a 	ret
 1004730:	31000217 	ldw	r4,8(r6)
 1004734:	003fbd06 	br	100462c <_free_r+0x94>
 1004738:	3806d0fa 	srli	r3,r7,3
 100473c:	00800044 	movi	r2,1
 1004740:	51400117 	ldw	r5,4(r10)
 1004744:	180890fa 	slli	r4,r3,3
 1004748:	1807d0ba 	srai	r3,r3,2
 100474c:	22c9883a 	add	r4,r4,r11
 1004750:	21800217 	ldw	r6,8(r4)
 1004754:	10c4983a 	sll	r2,r2,r3
 1004758:	41000315 	stw	r4,12(r8)
 100475c:	41800215 	stw	r6,8(r8)
 1004760:	288ab03a 	or	r5,r5,r2
 1004764:	22000215 	stw	r8,8(r4)
 1004768:	8809883a 	mov	r4,r17
 100476c:	51400115 	stw	r5,4(r10)
 1004770:	32000315 	stw	r8,12(r6)
 1004774:	dfc00217 	ldw	ra,8(sp)
 1004778:	dc400117 	ldw	r17,4(sp)
 100477c:	dc000017 	ldw	r16,0(sp)
 1004780:	dec00304 	addi	sp,sp,12
 1004784:	100a6cc1 	jmpi	100a6cc <__malloc_unlock>
 1004788:	2880004c 	andi	r2,r5,1
 100478c:	3a4d883a 	add	r6,r7,r9
 1004790:	1000071e 	bne	r2,zero,10047b0 <_free_r+0x218>
 1004794:	80bffe17 	ldw	r2,-8(r16)
 1004798:	4091c83a 	sub	r8,r8,r2
 100479c:	41000317 	ldw	r4,12(r8)
 10047a0:	40c00217 	ldw	r3,8(r8)
 10047a4:	308d883a 	add	r6,r6,r2
 10047a8:	20c00215 	stw	r3,8(r4)
 10047ac:	19000315 	stw	r4,12(r3)
 10047b0:	00804074 	movhi	r2,257
 10047b4:	1094be04 	addi	r2,r2,21240
 10047b8:	11000017 	ldw	r4,0(r2)
 10047bc:	30c00054 	ori	r3,r6,1
 10047c0:	52000215 	stw	r8,8(r10)
 10047c4:	40c00115 	stw	r3,4(r8)
 10047c8:	313fa036 	bltu	r6,r4,100464c <_free_r+0xb4>
 10047cc:	00804074 	movhi	r2,257
 10047d0:	109c0604 	addi	r2,r2,28696
 10047d4:	11400017 	ldw	r5,0(r2)
 10047d8:	8809883a 	mov	r4,r17
 10047dc:	100446c0 	call	100446c <_malloc_trim_r>
 10047e0:	003f9a06 	br	100464c <_free_r+0xb4>
 10047e4:	00800104 	movi	r2,4
 10047e8:	10c0072e 	bgeu	r2,r3,1004808 <_free_r+0x270>
 10047ec:	00800504 	movi	r2,20
 10047f0:	10c01936 	bltu	r2,r3,1004858 <_free_r+0x2c0>
 10047f4:	188016c4 	addi	r2,r3,91
 10047f8:	100690fa 	slli	r3,r2,3
 10047fc:	003fb306 	br	10046cc <_free_r+0x134>
 1004800:	01400044 	movi	r5,1
 1004804:	003f7e06 	br	1004600 <_free_r+0x68>
 1004808:	3804d1ba 	srli	r2,r7,6
 100480c:	10800e04 	addi	r2,r2,56
 1004810:	100690fa 	slli	r3,r2,3
 1004814:	003fad06 	br	10046cc <_free_r+0x134>
 1004818:	22000315 	stw	r8,12(r4)
 100481c:	22000215 	stw	r8,8(r4)
 1004820:	3a05883a 	add	r2,r7,r8
 1004824:	38c00054 	ori	r3,r7,1
 1004828:	11c00015 	stw	r7,0(r2)
 100482c:	41000215 	stw	r4,8(r8)
 1004830:	40c00115 	stw	r3,4(r8)
 1004834:	41000315 	stw	r4,12(r8)
 1004838:	003f8406 	br	100464c <_free_r+0xb4>
 100483c:	1005d0ba 	srai	r2,r2,2
 1004840:	00c00044 	movi	r3,1
 1004844:	51000117 	ldw	r4,4(r10)
 1004848:	1886983a 	sll	r3,r3,r2
 100484c:	20c8b03a 	or	r4,r4,r3
 1004850:	51000115 	stw	r4,4(r10)
 1004854:	003fa706 	br	10046f4 <_free_r+0x15c>
 1004858:	00801504 	movi	r2,84
 100485c:	10c00436 	bltu	r2,r3,1004870 <_free_r+0x2d8>
 1004860:	3804d33a 	srli	r2,r7,12
 1004864:	10801b84 	addi	r2,r2,110
 1004868:	100690fa 	slli	r3,r2,3
 100486c:	003f9706 	br	10046cc <_free_r+0x134>
 1004870:	00805504 	movi	r2,340
 1004874:	10c00436 	bltu	r2,r3,1004888 <_free_r+0x2f0>
 1004878:	3804d3fa 	srli	r2,r7,15
 100487c:	10801dc4 	addi	r2,r2,119
 1004880:	100690fa 	slli	r3,r2,3
 1004884:	003f9106 	br	10046cc <_free_r+0x134>
 1004888:	00815504 	movi	r2,1364
 100488c:	10c0032e 	bgeu	r2,r3,100489c <_free_r+0x304>
 1004890:	00801f84 	movi	r2,126
 1004894:	00c0fc04 	movi	r3,1008
 1004898:	003f8c06 	br	10046cc <_free_r+0x134>
 100489c:	3804d4ba 	srli	r2,r7,18
 10048a0:	10801f04 	addi	r2,r2,124
 10048a4:	100690fa 	slli	r3,r2,3
 10048a8:	003f8806 	br	10046cc <_free_r+0x134>

010048ac <__sfvwrite_r>:
 10048ac:	30800217 	ldw	r2,8(r6)
 10048b0:	defff504 	addi	sp,sp,-44
 10048b4:	df000915 	stw	fp,36(sp)
 10048b8:	dd800715 	stw	r22,28(sp)
 10048bc:	dc800315 	stw	r18,12(sp)
 10048c0:	dfc00a15 	stw	ra,40(sp)
 10048c4:	ddc00815 	stw	r23,32(sp)
 10048c8:	dd400615 	stw	r21,24(sp)
 10048cc:	dd000515 	stw	r20,20(sp)
 10048d0:	dcc00415 	stw	r19,16(sp)
 10048d4:	dc400215 	stw	r17,8(sp)
 10048d8:	dc000115 	stw	r16,4(sp)
 10048dc:	302d883a 	mov	r22,r6
 10048e0:	2039883a 	mov	fp,r4
 10048e4:	2825883a 	mov	r18,r5
 10048e8:	10001c26 	beq	r2,zero,100495c <__sfvwrite_r+0xb0>
 10048ec:	29c0030b 	ldhu	r7,12(r5)
 10048f0:	3880020c 	andi	r2,r7,8
 10048f4:	10002726 	beq	r2,zero,1004994 <__sfvwrite_r+0xe8>
 10048f8:	28800417 	ldw	r2,16(r5)
 10048fc:	10002526 	beq	r2,zero,1004994 <__sfvwrite_r+0xe8>
 1004900:	3880008c 	andi	r2,r7,2
 1004904:	b5400017 	ldw	r21,0(r22)
 1004908:	10002826 	beq	r2,zero,10049ac <__sfvwrite_r+0x100>
 100490c:	0021883a 	mov	r16,zero
 1004910:	0023883a 	mov	r17,zero
 1004914:	880d883a 	mov	r6,r17
 1004918:	e009883a 	mov	r4,fp
 100491c:	00810004 	movi	r2,1024
 1004920:	80006e26 	beq	r16,zero,1004adc <__sfvwrite_r+0x230>
 1004924:	800f883a 	mov	r7,r16
 1004928:	91400717 	ldw	r5,28(r18)
 100492c:	1400012e 	bgeu	r2,r16,1004934 <__sfvwrite_r+0x88>
 1004930:	100f883a 	mov	r7,r2
 1004934:	90c00917 	ldw	r3,36(r18)
 1004938:	183ee83a 	callr	r3
 100493c:	1007883a 	mov	r3,r2
 1004940:	80a1c83a 	sub	r16,r16,r2
 1004944:	88a3883a 	add	r17,r17,r2
 1004948:	00806d0e 	bge	zero,r2,1004b00 <__sfvwrite_r+0x254>
 100494c:	b0800217 	ldw	r2,8(r22)
 1004950:	10c5c83a 	sub	r2,r2,r3
 1004954:	b0800215 	stw	r2,8(r22)
 1004958:	103fee1e 	bne	r2,zero,1004914 <__sfvwrite_r+0x68>
 100495c:	0009883a 	mov	r4,zero
 1004960:	2005883a 	mov	r2,r4
 1004964:	dfc00a17 	ldw	ra,40(sp)
 1004968:	df000917 	ldw	fp,36(sp)
 100496c:	ddc00817 	ldw	r23,32(sp)
 1004970:	dd800717 	ldw	r22,28(sp)
 1004974:	dd400617 	ldw	r21,24(sp)
 1004978:	dd000517 	ldw	r20,20(sp)
 100497c:	dcc00417 	ldw	r19,16(sp)
 1004980:	dc800317 	ldw	r18,12(sp)
 1004984:	dc400217 	ldw	r17,8(sp)
 1004988:	dc000117 	ldw	r16,4(sp)
 100498c:	dec00b04 	addi	sp,sp,44
 1004990:	f800283a 	ret
 1004994:	10026740 	call	1002674 <__swsetup_r>
 1004998:	1000e41e 	bne	r2,zero,1004d2c <__sfvwrite_r+0x480>
 100499c:	91c0030b 	ldhu	r7,12(r18)
 10049a0:	b5400017 	ldw	r21,0(r22)
 10049a4:	3880008c 	andi	r2,r7,2
 10049a8:	103fd81e 	bne	r2,zero,100490c <__sfvwrite_r+0x60>
 10049ac:	3880004c 	andi	r2,r7,1
 10049b0:	1005003a 	cmpeq	r2,r2,zero
 10049b4:	10005726 	beq	r2,zero,1004b14 <__sfvwrite_r+0x268>
 10049b8:	0029883a 	mov	r20,zero
 10049bc:	002f883a 	mov	r23,zero
 10049c0:	a0004226 	beq	r20,zero,1004acc <__sfvwrite_r+0x220>
 10049c4:	3880800c 	andi	r2,r7,512
 10049c8:	94000217 	ldw	r16,8(r18)
 10049cc:	10008b26 	beq	r2,zero,1004bfc <__sfvwrite_r+0x350>
 10049d0:	800d883a 	mov	r6,r16
 10049d4:	a400a536 	bltu	r20,r16,1004c6c <__sfvwrite_r+0x3c0>
 10049d8:	3881200c 	andi	r2,r7,1152
 10049dc:	10002726 	beq	r2,zero,1004a7c <__sfvwrite_r+0x1d0>
 10049e0:	90800517 	ldw	r2,20(r18)
 10049e4:	92000417 	ldw	r8,16(r18)
 10049e8:	91400017 	ldw	r5,0(r18)
 10049ec:	1087883a 	add	r3,r2,r2
 10049f0:	1887883a 	add	r3,r3,r2
 10049f4:	1808d7fa 	srli	r4,r3,31
 10049f8:	2a21c83a 	sub	r16,r5,r8
 10049fc:	80800044 	addi	r2,r16,1
 1004a00:	20c9883a 	add	r4,r4,r3
 1004a04:	2027d07a 	srai	r19,r4,1
 1004a08:	a085883a 	add	r2,r20,r2
 1004a0c:	980d883a 	mov	r6,r19
 1004a10:	9880022e 	bgeu	r19,r2,1004a1c <__sfvwrite_r+0x170>
 1004a14:	1027883a 	mov	r19,r2
 1004a18:	100d883a 	mov	r6,r2
 1004a1c:	3881000c 	andi	r2,r7,1024
 1004a20:	1000b826 	beq	r2,zero,1004d04 <__sfvwrite_r+0x458>
 1004a24:	300b883a 	mov	r5,r6
 1004a28:	e009883a 	mov	r4,fp
 1004a2c:	10051200 	call	1005120 <_malloc_r>
 1004a30:	10003126 	beq	r2,zero,1004af8 <__sfvwrite_r+0x24c>
 1004a34:	91400417 	ldw	r5,16(r18)
 1004a38:	1009883a 	mov	r4,r2
 1004a3c:	800d883a 	mov	r6,r16
 1004a40:	1023883a 	mov	r17,r2
 1004a44:	10059440 	call	1005944 <memcpy>
 1004a48:	90c0030b 	ldhu	r3,12(r18)
 1004a4c:	00beffc4 	movi	r2,-1025
 1004a50:	1886703a 	and	r3,r3,r2
 1004a54:	18c02014 	ori	r3,r3,128
 1004a58:	90c0030d 	sth	r3,12(r18)
 1004a5c:	9c07c83a 	sub	r3,r19,r16
 1004a60:	8c05883a 	add	r2,r17,r16
 1004a64:	a00d883a 	mov	r6,r20
 1004a68:	a021883a 	mov	r16,r20
 1004a6c:	90800015 	stw	r2,0(r18)
 1004a70:	90c00215 	stw	r3,8(r18)
 1004a74:	94400415 	stw	r17,16(r18)
 1004a78:	94c00515 	stw	r19,20(r18)
 1004a7c:	91000017 	ldw	r4,0(r18)
 1004a80:	b80b883a 	mov	r5,r23
 1004a84:	a023883a 	mov	r17,r20
 1004a88:	10059e40 	call	10059e4 <memmove>
 1004a8c:	90c00217 	ldw	r3,8(r18)
 1004a90:	90800017 	ldw	r2,0(r18)
 1004a94:	a027883a 	mov	r19,r20
 1004a98:	1c07c83a 	sub	r3,r3,r16
 1004a9c:	1405883a 	add	r2,r2,r16
 1004aa0:	90c00215 	stw	r3,8(r18)
 1004aa4:	a021883a 	mov	r16,r20
 1004aa8:	90800015 	stw	r2,0(r18)
 1004aac:	b0800217 	ldw	r2,8(r22)
 1004ab0:	1405c83a 	sub	r2,r2,r16
 1004ab4:	b0800215 	stw	r2,8(r22)
 1004ab8:	103fa826 	beq	r2,zero,100495c <__sfvwrite_r+0xb0>
 1004abc:	a469c83a 	sub	r20,r20,r17
 1004ac0:	91c0030b 	ldhu	r7,12(r18)
 1004ac4:	bcef883a 	add	r23,r23,r19
 1004ac8:	a03fbe1e 	bne	r20,zero,10049c4 <__sfvwrite_r+0x118>
 1004acc:	adc00017 	ldw	r23,0(r21)
 1004ad0:	ad000117 	ldw	r20,4(r21)
 1004ad4:	ad400204 	addi	r21,r21,8
 1004ad8:	003fb906 	br	10049c0 <__sfvwrite_r+0x114>
 1004adc:	ac400017 	ldw	r17,0(r21)
 1004ae0:	ac000117 	ldw	r16,4(r21)
 1004ae4:	ad400204 	addi	r21,r21,8
 1004ae8:	003f8a06 	br	1004914 <__sfvwrite_r+0x68>
 1004aec:	91400417 	ldw	r5,16(r18)
 1004af0:	e009883a 	mov	r4,fp
 1004af4:	10045980 	call	1004598 <_free_r>
 1004af8:	00800304 	movi	r2,12
 1004afc:	e0800015 	stw	r2,0(fp)
 1004b00:	9080030b 	ldhu	r2,12(r18)
 1004b04:	013fffc4 	movi	r4,-1
 1004b08:	10801014 	ori	r2,r2,64
 1004b0c:	9080030d 	sth	r2,12(r18)
 1004b10:	003f9306 	br	1004960 <__sfvwrite_r+0xb4>
 1004b14:	0027883a 	mov	r19,zero
 1004b18:	002f883a 	mov	r23,zero
 1004b1c:	d8000015 	stw	zero,0(sp)
 1004b20:	0029883a 	mov	r20,zero
 1004b24:	98001e26 	beq	r19,zero,1004ba0 <__sfvwrite_r+0x2f4>
 1004b28:	d8c00017 	ldw	r3,0(sp)
 1004b2c:	1804c03a 	cmpne	r2,r3,zero
 1004b30:	10005e26 	beq	r2,zero,1004cac <__sfvwrite_r+0x400>
 1004b34:	9821883a 	mov	r16,r19
 1004b38:	a4c0012e 	bgeu	r20,r19,1004b40 <__sfvwrite_r+0x294>
 1004b3c:	a021883a 	mov	r16,r20
 1004b40:	91000017 	ldw	r4,0(r18)
 1004b44:	90800417 	ldw	r2,16(r18)
 1004b48:	91800217 	ldw	r6,8(r18)
 1004b4c:	91c00517 	ldw	r7,20(r18)
 1004b50:	1100022e 	bgeu	r2,r4,1004b5c <__sfvwrite_r+0x2b0>
 1004b54:	31e3883a 	add	r17,r6,r7
 1004b58:	8c001616 	blt	r17,r16,1004bb4 <__sfvwrite_r+0x308>
 1004b5c:	81c03816 	blt	r16,r7,1004c40 <__sfvwrite_r+0x394>
 1004b60:	90c00917 	ldw	r3,36(r18)
 1004b64:	91400717 	ldw	r5,28(r18)
 1004b68:	e009883a 	mov	r4,fp
 1004b6c:	b80d883a 	mov	r6,r23
 1004b70:	183ee83a 	callr	r3
 1004b74:	1023883a 	mov	r17,r2
 1004b78:	00bfe10e 	bge	zero,r2,1004b00 <__sfvwrite_r+0x254>
 1004b7c:	a469c83a 	sub	r20,r20,r17
 1004b80:	a0001826 	beq	r20,zero,1004be4 <__sfvwrite_r+0x338>
 1004b84:	b0800217 	ldw	r2,8(r22)
 1004b88:	1445c83a 	sub	r2,r2,r17
 1004b8c:	b0800215 	stw	r2,8(r22)
 1004b90:	103f7226 	beq	r2,zero,100495c <__sfvwrite_r+0xb0>
 1004b94:	9c67c83a 	sub	r19,r19,r17
 1004b98:	bc6f883a 	add	r23,r23,r17
 1004b9c:	983fe21e 	bne	r19,zero,1004b28 <__sfvwrite_r+0x27c>
 1004ba0:	adc00017 	ldw	r23,0(r21)
 1004ba4:	acc00117 	ldw	r19,4(r21)
 1004ba8:	ad400204 	addi	r21,r21,8
 1004bac:	d8000015 	stw	zero,0(sp)
 1004bb0:	003fdc06 	br	1004b24 <__sfvwrite_r+0x278>
 1004bb4:	b80b883a 	mov	r5,r23
 1004bb8:	880d883a 	mov	r6,r17
 1004bbc:	10059e40 	call	10059e4 <memmove>
 1004bc0:	90c00017 	ldw	r3,0(r18)
 1004bc4:	e009883a 	mov	r4,fp
 1004bc8:	900b883a 	mov	r5,r18
 1004bcc:	1c47883a 	add	r3,r3,r17
 1004bd0:	90c00015 	stw	r3,0(r18)
 1004bd4:	1003f7c0 	call	1003f7c <_fflush_r>
 1004bd8:	103fc91e 	bne	r2,zero,1004b00 <__sfvwrite_r+0x254>
 1004bdc:	a469c83a 	sub	r20,r20,r17
 1004be0:	a03fe81e 	bne	r20,zero,1004b84 <__sfvwrite_r+0x2d8>
 1004be4:	e009883a 	mov	r4,fp
 1004be8:	900b883a 	mov	r5,r18
 1004bec:	1003f7c0 	call	1003f7c <_fflush_r>
 1004bf0:	103fc31e 	bne	r2,zero,1004b00 <__sfvwrite_r+0x254>
 1004bf4:	d8000015 	stw	zero,0(sp)
 1004bf8:	003fe206 	br	1004b84 <__sfvwrite_r+0x2d8>
 1004bfc:	91000017 	ldw	r4,0(r18)
 1004c00:	90800417 	ldw	r2,16(r18)
 1004c04:	1100022e 	bgeu	r2,r4,1004c10 <__sfvwrite_r+0x364>
 1004c08:	8023883a 	mov	r17,r16
 1004c0c:	85003136 	bltu	r16,r20,1004cd4 <__sfvwrite_r+0x428>
 1004c10:	91c00517 	ldw	r7,20(r18)
 1004c14:	a1c01836 	bltu	r20,r7,1004c78 <__sfvwrite_r+0x3cc>
 1004c18:	90c00917 	ldw	r3,36(r18)
 1004c1c:	91400717 	ldw	r5,28(r18)
 1004c20:	e009883a 	mov	r4,fp
 1004c24:	b80d883a 	mov	r6,r23
 1004c28:	183ee83a 	callr	r3
 1004c2c:	1021883a 	mov	r16,r2
 1004c30:	00bfb30e 	bge	zero,r2,1004b00 <__sfvwrite_r+0x254>
 1004c34:	1023883a 	mov	r17,r2
 1004c38:	1027883a 	mov	r19,r2
 1004c3c:	003f9b06 	br	1004aac <__sfvwrite_r+0x200>
 1004c40:	b80b883a 	mov	r5,r23
 1004c44:	800d883a 	mov	r6,r16
 1004c48:	10059e40 	call	10059e4 <memmove>
 1004c4c:	90c00217 	ldw	r3,8(r18)
 1004c50:	90800017 	ldw	r2,0(r18)
 1004c54:	8023883a 	mov	r17,r16
 1004c58:	1c07c83a 	sub	r3,r3,r16
 1004c5c:	1405883a 	add	r2,r2,r16
 1004c60:	90c00215 	stw	r3,8(r18)
 1004c64:	90800015 	stw	r2,0(r18)
 1004c68:	003fc406 	br	1004b7c <__sfvwrite_r+0x2d0>
 1004c6c:	a00d883a 	mov	r6,r20
 1004c70:	a021883a 	mov	r16,r20
 1004c74:	003f8106 	br	1004a7c <__sfvwrite_r+0x1d0>
 1004c78:	b80b883a 	mov	r5,r23
 1004c7c:	a00d883a 	mov	r6,r20
 1004c80:	10059e40 	call	10059e4 <memmove>
 1004c84:	90c00217 	ldw	r3,8(r18)
 1004c88:	90800017 	ldw	r2,0(r18)
 1004c8c:	a021883a 	mov	r16,r20
 1004c90:	1d07c83a 	sub	r3,r3,r20
 1004c94:	1505883a 	add	r2,r2,r20
 1004c98:	a023883a 	mov	r17,r20
 1004c9c:	a027883a 	mov	r19,r20
 1004ca0:	90c00215 	stw	r3,8(r18)
 1004ca4:	90800015 	stw	r2,0(r18)
 1004ca8:	003f8006 	br	1004aac <__sfvwrite_r+0x200>
 1004cac:	b809883a 	mov	r4,r23
 1004cb0:	01400284 	movi	r5,10
 1004cb4:	980d883a 	mov	r6,r19
 1004cb8:	10058600 	call	1005860 <memchr>
 1004cbc:	10001726 	beq	r2,zero,1004d1c <__sfvwrite_r+0x470>
 1004cc0:	15c5c83a 	sub	r2,r2,r23
 1004cc4:	15000044 	addi	r20,r2,1
 1004cc8:	00800044 	movi	r2,1
 1004ccc:	d8800015 	stw	r2,0(sp)
 1004cd0:	003f9806 	br	1004b34 <__sfvwrite_r+0x288>
 1004cd4:	b80b883a 	mov	r5,r23
 1004cd8:	800d883a 	mov	r6,r16
 1004cdc:	10059e40 	call	10059e4 <memmove>
 1004ce0:	90c00017 	ldw	r3,0(r18)
 1004ce4:	e009883a 	mov	r4,fp
 1004ce8:	900b883a 	mov	r5,r18
 1004cec:	1c07883a 	add	r3,r3,r16
 1004cf0:	90c00015 	stw	r3,0(r18)
 1004cf4:	8027883a 	mov	r19,r16
 1004cf8:	1003f7c0 	call	1003f7c <_fflush_r>
 1004cfc:	103f6b26 	beq	r2,zero,1004aac <__sfvwrite_r+0x200>
 1004d00:	003f7f06 	br	1004b00 <__sfvwrite_r+0x254>
 1004d04:	400b883a 	mov	r5,r8
 1004d08:	e009883a 	mov	r4,fp
 1004d0c:	1006d3c0 	call	1006d3c <_realloc_r>
 1004d10:	103f7626 	beq	r2,zero,1004aec <__sfvwrite_r+0x240>
 1004d14:	1023883a 	mov	r17,r2
 1004d18:	003f5006 	br	1004a5c <__sfvwrite_r+0x1b0>
 1004d1c:	00c00044 	movi	r3,1
 1004d20:	9d000044 	addi	r20,r19,1
 1004d24:	d8c00015 	stw	r3,0(sp)
 1004d28:	003f8206 	br	1004b34 <__sfvwrite_r+0x288>
 1004d2c:	9080030b 	ldhu	r2,12(r18)
 1004d30:	00c00244 	movi	r3,9
 1004d34:	013fffc4 	movi	r4,-1
 1004d38:	10801014 	ori	r2,r2,64
 1004d3c:	9080030d 	sth	r2,12(r18)
 1004d40:	e0c00015 	stw	r3,0(fp)
 1004d44:	003f0606 	br	1004960 <__sfvwrite_r+0xb4>

01004d48 <_fwalk_reent>:
 1004d48:	defff704 	addi	sp,sp,-36
 1004d4c:	dcc00315 	stw	r19,12(sp)
 1004d50:	24c0b804 	addi	r19,r4,736
 1004d54:	dd800615 	stw	r22,24(sp)
 1004d58:	dd400515 	stw	r21,20(sp)
 1004d5c:	dfc00815 	stw	ra,32(sp)
 1004d60:	ddc00715 	stw	r23,28(sp)
 1004d64:	dd000415 	stw	r20,16(sp)
 1004d68:	dc800215 	stw	r18,8(sp)
 1004d6c:	dc400115 	stw	r17,4(sp)
 1004d70:	dc000015 	stw	r16,0(sp)
 1004d74:	202b883a 	mov	r21,r4
 1004d78:	282d883a 	mov	r22,r5
 1004d7c:	10042040 	call	1004204 <__sfp_lock_acquire>
 1004d80:	98002126 	beq	r19,zero,1004e08 <_fwalk_reent+0xc0>
 1004d84:	002f883a 	mov	r23,zero
 1004d88:	9c800117 	ldw	r18,4(r19)
 1004d8c:	9c000217 	ldw	r16,8(r19)
 1004d90:	90bfffc4 	addi	r2,r18,-1
 1004d94:	10000d16 	blt	r2,zero,1004dcc <_fwalk_reent+0x84>
 1004d98:	0023883a 	mov	r17,zero
 1004d9c:	053fffc4 	movi	r20,-1
 1004da0:	8080030f 	ldh	r2,12(r16)
 1004da4:	8c400044 	addi	r17,r17,1
 1004da8:	10000626 	beq	r2,zero,1004dc4 <_fwalk_reent+0x7c>
 1004dac:	8080038f 	ldh	r2,14(r16)
 1004db0:	800b883a 	mov	r5,r16
 1004db4:	a809883a 	mov	r4,r21
 1004db8:	15000226 	beq	r2,r20,1004dc4 <_fwalk_reent+0x7c>
 1004dbc:	b03ee83a 	callr	r22
 1004dc0:	b8aeb03a 	or	r23,r23,r2
 1004dc4:	84001704 	addi	r16,r16,92
 1004dc8:	947ff51e 	bne	r18,r17,1004da0 <_fwalk_reent+0x58>
 1004dcc:	9cc00017 	ldw	r19,0(r19)
 1004dd0:	983fed1e 	bne	r19,zero,1004d88 <_fwalk_reent+0x40>
 1004dd4:	10042080 	call	1004208 <__sfp_lock_release>
 1004dd8:	b805883a 	mov	r2,r23
 1004ddc:	dfc00817 	ldw	ra,32(sp)
 1004de0:	ddc00717 	ldw	r23,28(sp)
 1004de4:	dd800617 	ldw	r22,24(sp)
 1004de8:	dd400517 	ldw	r21,20(sp)
 1004dec:	dd000417 	ldw	r20,16(sp)
 1004df0:	dcc00317 	ldw	r19,12(sp)
 1004df4:	dc800217 	ldw	r18,8(sp)
 1004df8:	dc400117 	ldw	r17,4(sp)
 1004dfc:	dc000017 	ldw	r16,0(sp)
 1004e00:	dec00904 	addi	sp,sp,36
 1004e04:	f800283a 	ret
 1004e08:	002f883a 	mov	r23,zero
 1004e0c:	003ff106 	br	1004dd4 <_fwalk_reent+0x8c>

01004e10 <_fwalk>:
 1004e10:	defff804 	addi	sp,sp,-32
 1004e14:	dcc00315 	stw	r19,12(sp)
 1004e18:	24c0b804 	addi	r19,r4,736
 1004e1c:	dd400515 	stw	r21,20(sp)
 1004e20:	dfc00715 	stw	ra,28(sp)
 1004e24:	dd800615 	stw	r22,24(sp)
 1004e28:	dd000415 	stw	r20,16(sp)
 1004e2c:	dc800215 	stw	r18,8(sp)
 1004e30:	dc400115 	stw	r17,4(sp)
 1004e34:	dc000015 	stw	r16,0(sp)
 1004e38:	282b883a 	mov	r21,r5
 1004e3c:	10042040 	call	1004204 <__sfp_lock_acquire>
 1004e40:	98001f26 	beq	r19,zero,1004ec0 <_fwalk+0xb0>
 1004e44:	002d883a 	mov	r22,zero
 1004e48:	9c800117 	ldw	r18,4(r19)
 1004e4c:	9c000217 	ldw	r16,8(r19)
 1004e50:	90bfffc4 	addi	r2,r18,-1
 1004e54:	10000c16 	blt	r2,zero,1004e88 <_fwalk+0x78>
 1004e58:	0023883a 	mov	r17,zero
 1004e5c:	053fffc4 	movi	r20,-1
 1004e60:	8080030f 	ldh	r2,12(r16)
 1004e64:	8c400044 	addi	r17,r17,1
 1004e68:	10000526 	beq	r2,zero,1004e80 <_fwalk+0x70>
 1004e6c:	8080038f 	ldh	r2,14(r16)
 1004e70:	8009883a 	mov	r4,r16
 1004e74:	15000226 	beq	r2,r20,1004e80 <_fwalk+0x70>
 1004e78:	a83ee83a 	callr	r21
 1004e7c:	b0acb03a 	or	r22,r22,r2
 1004e80:	84001704 	addi	r16,r16,92
 1004e84:	947ff61e 	bne	r18,r17,1004e60 <_fwalk+0x50>
 1004e88:	9cc00017 	ldw	r19,0(r19)
 1004e8c:	983fee1e 	bne	r19,zero,1004e48 <_fwalk+0x38>
 1004e90:	10042080 	call	1004208 <__sfp_lock_release>
 1004e94:	b005883a 	mov	r2,r22
 1004e98:	dfc00717 	ldw	ra,28(sp)
 1004e9c:	dd800617 	ldw	r22,24(sp)
 1004ea0:	dd400517 	ldw	r21,20(sp)
 1004ea4:	dd000417 	ldw	r20,16(sp)
 1004ea8:	dcc00317 	ldw	r19,12(sp)
 1004eac:	dc800217 	ldw	r18,8(sp)
 1004eb0:	dc400117 	ldw	r17,4(sp)
 1004eb4:	dc000017 	ldw	r16,0(sp)
 1004eb8:	dec00804 	addi	sp,sp,32
 1004ebc:	f800283a 	ret
 1004ec0:	002d883a 	mov	r22,zero
 1004ec4:	003ff206 	br	1004e90 <_fwalk+0x80>

01004ec8 <__locale_charset>:
 1004ec8:	d0a00317 	ldw	r2,-32756(gp)
 1004ecc:	f800283a 	ret

01004ed0 <_localeconv_r>:
 1004ed0:	00804074 	movhi	r2,257
 1004ed4:	108ca604 	addi	r2,r2,12952
 1004ed8:	f800283a 	ret

01004edc <localeconv>:
 1004edc:	00804074 	movhi	r2,257
 1004ee0:	1094ba04 	addi	r2,r2,21224
 1004ee4:	11000017 	ldw	r4,0(r2)
 1004ee8:	1004ed01 	jmpi	1004ed0 <_localeconv_r>

01004eec <_setlocale_r>:
 1004eec:	defffc04 	addi	sp,sp,-16
 1004ef0:	00c04074 	movhi	r3,257
 1004ef4:	18cca104 	addi	r3,r3,12932
 1004ef8:	dc800215 	stw	r18,8(sp)
 1004efc:	dc400115 	stw	r17,4(sp)
 1004f00:	dc000015 	stw	r16,0(sp)
 1004f04:	2023883a 	mov	r17,r4
 1004f08:	2825883a 	mov	r18,r5
 1004f0c:	dfc00315 	stw	ra,12(sp)
 1004f10:	3021883a 	mov	r16,r6
 1004f14:	3009883a 	mov	r4,r6
 1004f18:	180b883a 	mov	r5,r3
 1004f1c:	30000926 	beq	r6,zero,1004f44 <_setlocale_r+0x58>
 1004f20:	100755c0 	call	100755c <strcmp>
 1004f24:	8009883a 	mov	r4,r16
 1004f28:	01404074 	movhi	r5,257
 1004f2c:	294d8904 	addi	r5,r5,13860
 1004f30:	10000b1e 	bne	r2,zero,1004f60 <_setlocale_r+0x74>
 1004f34:	8c000d15 	stw	r16,52(r17)
 1004f38:	8c800c15 	stw	r18,48(r17)
 1004f3c:	00c04074 	movhi	r3,257
 1004f40:	18cca104 	addi	r3,r3,12932
 1004f44:	1805883a 	mov	r2,r3
 1004f48:	dfc00317 	ldw	ra,12(sp)
 1004f4c:	dc800217 	ldw	r18,8(sp)
 1004f50:	dc400117 	ldw	r17,4(sp)
 1004f54:	dc000017 	ldw	r16,0(sp)
 1004f58:	dec00404 	addi	sp,sp,16
 1004f5c:	f800283a 	ret
 1004f60:	100755c0 	call	100755c <strcmp>
 1004f64:	0007883a 	mov	r3,zero
 1004f68:	103ff226 	beq	r2,zero,1004f34 <_setlocale_r+0x48>
 1004f6c:	003ff506 	br	1004f44 <_setlocale_r+0x58>

01004f70 <setlocale>:
 1004f70:	01804074 	movhi	r6,257
 1004f74:	3194ba04 	addi	r6,r6,21224
 1004f78:	2007883a 	mov	r3,r4
 1004f7c:	31000017 	ldw	r4,0(r6)
 1004f80:	280d883a 	mov	r6,r5
 1004f84:	180b883a 	mov	r5,r3
 1004f88:	1004eec1 	jmpi	1004eec <_setlocale_r>

01004f8c <__smakebuf_r>:
 1004f8c:	2880030b 	ldhu	r2,12(r5)
 1004f90:	deffed04 	addi	sp,sp,-76
 1004f94:	dc401015 	stw	r17,64(sp)
 1004f98:	1080008c 	andi	r2,r2,2
 1004f9c:	dc000f15 	stw	r16,60(sp)
 1004fa0:	dfc01215 	stw	ra,72(sp)
 1004fa4:	dc801115 	stw	r18,68(sp)
 1004fa8:	2821883a 	mov	r16,r5
 1004fac:	2023883a 	mov	r17,r4
 1004fb0:	10000b26 	beq	r2,zero,1004fe0 <__smakebuf_r+0x54>
 1004fb4:	28c010c4 	addi	r3,r5,67
 1004fb8:	00800044 	movi	r2,1
 1004fbc:	28800515 	stw	r2,20(r5)
 1004fc0:	28c00415 	stw	r3,16(r5)
 1004fc4:	28c00015 	stw	r3,0(r5)
 1004fc8:	dfc01217 	ldw	ra,72(sp)
 1004fcc:	dc801117 	ldw	r18,68(sp)
 1004fd0:	dc401017 	ldw	r17,64(sp)
 1004fd4:	dc000f17 	ldw	r16,60(sp)
 1004fd8:	dec01304 	addi	sp,sp,76
 1004fdc:	f800283a 	ret
 1004fe0:	2940038f 	ldh	r5,14(r5)
 1004fe4:	28002116 	blt	r5,zero,100506c <__smakebuf_r+0xe0>
 1004fe8:	d80d883a 	mov	r6,sp
 1004fec:	1007a240 	call	1007a24 <_fstat_r>
 1004ff0:	10001e16 	blt	r2,zero,100506c <__smakebuf_r+0xe0>
 1004ff4:	d8800117 	ldw	r2,4(sp)
 1004ff8:	00e00014 	movui	r3,32768
 1004ffc:	113c000c 	andi	r4,r2,61440
 1005000:	20c03126 	beq	r4,r3,10050c8 <__smakebuf_r+0x13c>
 1005004:	8080030b 	ldhu	r2,12(r16)
 1005008:	00c80004 	movi	r3,8192
 100500c:	10820014 	ori	r2,r2,2048
 1005010:	8080030d 	sth	r2,12(r16)
 1005014:	20c01e26 	beq	r4,r3,1005090 <__smakebuf_r+0x104>
 1005018:	04810004 	movi	r18,1024
 100501c:	8809883a 	mov	r4,r17
 1005020:	900b883a 	mov	r5,r18
 1005024:	10051200 	call	1005120 <_malloc_r>
 1005028:	1009883a 	mov	r4,r2
 100502c:	10003126 	beq	r2,zero,10050f4 <__smakebuf_r+0x168>
 1005030:	80c0030b 	ldhu	r3,12(r16)
 1005034:	00804034 	movhi	r2,256
 1005038:	1090be04 	addi	r2,r2,17144
 100503c:	88800f15 	stw	r2,60(r17)
 1005040:	18c02014 	ori	r3,r3,128
 1005044:	84800515 	stw	r18,20(r16)
 1005048:	80c0030d 	sth	r3,12(r16)
 100504c:	81000415 	stw	r4,16(r16)
 1005050:	81000015 	stw	r4,0(r16)
 1005054:	dfc01217 	ldw	ra,72(sp)
 1005058:	dc801117 	ldw	r18,68(sp)
 100505c:	dc401017 	ldw	r17,64(sp)
 1005060:	dc000f17 	ldw	r16,60(sp)
 1005064:	dec01304 	addi	sp,sp,76
 1005068:	f800283a 	ret
 100506c:	80c0030b 	ldhu	r3,12(r16)
 1005070:	1880200c 	andi	r2,r3,128
 1005074:	10000426 	beq	r2,zero,1005088 <__smakebuf_r+0xfc>
 1005078:	04801004 	movi	r18,64
 100507c:	18820014 	ori	r2,r3,2048
 1005080:	8080030d 	sth	r2,12(r16)
 1005084:	003fe506 	br	100501c <__smakebuf_r+0x90>
 1005088:	04810004 	movi	r18,1024
 100508c:	003ffb06 	br	100507c <__smakebuf_r+0xf0>
 1005090:	8140038f 	ldh	r5,14(r16)
 1005094:	8809883a 	mov	r4,r17
 1005098:	1007a980 	call	1007a98 <_isatty_r>
 100509c:	103fde26 	beq	r2,zero,1005018 <__smakebuf_r+0x8c>
 10050a0:	8080030b 	ldhu	r2,12(r16)
 10050a4:	80c010c4 	addi	r3,r16,67
 10050a8:	04810004 	movi	r18,1024
 10050ac:	10800054 	ori	r2,r2,1
 10050b0:	8080030d 	sth	r2,12(r16)
 10050b4:	00800044 	movi	r2,1
 10050b8:	80c00415 	stw	r3,16(r16)
 10050bc:	80800515 	stw	r2,20(r16)
 10050c0:	80c00015 	stw	r3,0(r16)
 10050c4:	003fd506 	br	100501c <__smakebuf_r+0x90>
 10050c8:	80c00a17 	ldw	r3,40(r16)
 10050cc:	00804034 	movhi	r2,256
 10050d0:	109d0604 	addi	r2,r2,29720
 10050d4:	18bfcb1e 	bne	r3,r2,1005004 <__smakebuf_r+0x78>
 10050d8:	8080030b 	ldhu	r2,12(r16)
 10050dc:	00c10004 	movi	r3,1024
 10050e0:	1825883a 	mov	r18,r3
 10050e4:	10c4b03a 	or	r2,r2,r3
 10050e8:	8080030d 	sth	r2,12(r16)
 10050ec:	80c01315 	stw	r3,76(r16)
 10050f0:	003fca06 	br	100501c <__smakebuf_r+0x90>
 10050f4:	8100030b 	ldhu	r4,12(r16)
 10050f8:	2080800c 	andi	r2,r4,512
 10050fc:	103fb21e 	bne	r2,zero,1004fc8 <__smakebuf_r+0x3c>
 1005100:	80c010c4 	addi	r3,r16,67
 1005104:	21000094 	ori	r4,r4,2
 1005108:	00800044 	movi	r2,1
 100510c:	80800515 	stw	r2,20(r16)
 1005110:	8100030d 	sth	r4,12(r16)
 1005114:	80c00415 	stw	r3,16(r16)
 1005118:	80c00015 	stw	r3,0(r16)
 100511c:	003faa06 	br	1004fc8 <__smakebuf_r+0x3c>

01005120 <_malloc_r>:
 1005120:	defff604 	addi	sp,sp,-40
 1005124:	28c002c4 	addi	r3,r5,11
 1005128:	00800584 	movi	r2,22
 100512c:	dc800215 	stw	r18,8(sp)
 1005130:	dfc00915 	stw	ra,36(sp)
 1005134:	df000815 	stw	fp,32(sp)
 1005138:	ddc00715 	stw	r23,28(sp)
 100513c:	dd800615 	stw	r22,24(sp)
 1005140:	dd400515 	stw	r21,20(sp)
 1005144:	dd000415 	stw	r20,16(sp)
 1005148:	dcc00315 	stw	r19,12(sp)
 100514c:	dc400115 	stw	r17,4(sp)
 1005150:	dc000015 	stw	r16,0(sp)
 1005154:	2025883a 	mov	r18,r4
 1005158:	10c01236 	bltu	r2,r3,10051a4 <_malloc_r+0x84>
 100515c:	04400404 	movi	r17,16
 1005160:	8940142e 	bgeu	r17,r5,10051b4 <_malloc_r+0x94>
 1005164:	00800304 	movi	r2,12
 1005168:	0007883a 	mov	r3,zero
 100516c:	90800015 	stw	r2,0(r18)
 1005170:	1805883a 	mov	r2,r3
 1005174:	dfc00917 	ldw	ra,36(sp)
 1005178:	df000817 	ldw	fp,32(sp)
 100517c:	ddc00717 	ldw	r23,28(sp)
 1005180:	dd800617 	ldw	r22,24(sp)
 1005184:	dd400517 	ldw	r21,20(sp)
 1005188:	dd000417 	ldw	r20,16(sp)
 100518c:	dcc00317 	ldw	r19,12(sp)
 1005190:	dc800217 	ldw	r18,8(sp)
 1005194:	dc400117 	ldw	r17,4(sp)
 1005198:	dc000017 	ldw	r16,0(sp)
 100519c:	dec00a04 	addi	sp,sp,40
 10051a0:	f800283a 	ret
 10051a4:	00bffe04 	movi	r2,-8
 10051a8:	18a2703a 	and	r17,r3,r2
 10051ac:	883fed16 	blt	r17,zero,1005164 <_malloc_r+0x44>
 10051b0:	897fec36 	bltu	r17,r5,1005164 <_malloc_r+0x44>
 10051b4:	9009883a 	mov	r4,r18
 10051b8:	100a6ac0 	call	100a6ac <__malloc_lock>
 10051bc:	00807dc4 	movi	r2,503
 10051c0:	14402b2e 	bgeu	r2,r17,1005270 <_malloc_r+0x150>
 10051c4:	8806d27a 	srli	r3,r17,9
 10051c8:	18003f1e 	bne	r3,zero,10052c8 <_malloc_r+0x1a8>
 10051cc:	880cd0fa 	srli	r6,r17,3
 10051d0:	300490fa 	slli	r2,r6,3
 10051d4:	02c04074 	movhi	r11,257
 10051d8:	5acf1504 	addi	r11,r11,15444
 10051dc:	12cb883a 	add	r5,r2,r11
 10051e0:	2c000317 	ldw	r16,12(r5)
 10051e4:	580f883a 	mov	r7,r11
 10051e8:	2c00041e 	bne	r5,r16,10051fc <_malloc_r+0xdc>
 10051ec:	00000a06 	br	1005218 <_malloc_r+0xf8>
 10051f0:	1800860e 	bge	r3,zero,100540c <_malloc_r+0x2ec>
 10051f4:	84000317 	ldw	r16,12(r16)
 10051f8:	2c000726 	beq	r5,r16,1005218 <_malloc_r+0xf8>
 10051fc:	80800117 	ldw	r2,4(r16)
 1005200:	00ffff04 	movi	r3,-4
 1005204:	10c8703a 	and	r4,r2,r3
 1005208:	2447c83a 	sub	r3,r4,r17
 100520c:	008003c4 	movi	r2,15
 1005210:	10fff70e 	bge	r2,r3,10051f0 <_malloc_r+0xd0>
 1005214:	31bfffc4 	addi	r6,r6,-1
 1005218:	32400044 	addi	r9,r6,1
 100521c:	02804074 	movhi	r10,257
 1005220:	528f1704 	addi	r10,r10,15452
 1005224:	54000217 	ldw	r16,8(r10)
 1005228:	8280a026 	beq	r16,r10,10054ac <_malloc_r+0x38c>
 100522c:	80800117 	ldw	r2,4(r16)
 1005230:	00ffff04 	movi	r3,-4
 1005234:	10ca703a 	and	r5,r2,r3
 1005238:	2c4dc83a 	sub	r6,r5,r17
 100523c:	008003c4 	movi	r2,15
 1005240:	11808316 	blt	r2,r6,1005450 <_malloc_r+0x330>
 1005244:	52800315 	stw	r10,12(r10)
 1005248:	52800215 	stw	r10,8(r10)
 100524c:	30002916 	blt	r6,zero,10052f4 <_malloc_r+0x1d4>
 1005250:	8147883a 	add	r3,r16,r5
 1005254:	18800117 	ldw	r2,4(r3)
 1005258:	9009883a 	mov	r4,r18
 100525c:	10800054 	ori	r2,r2,1
 1005260:	18800115 	stw	r2,4(r3)
 1005264:	100a6cc0 	call	100a6cc <__malloc_unlock>
 1005268:	80c00204 	addi	r3,r16,8
 100526c:	003fc006 	br	1005170 <_malloc_r+0x50>
 1005270:	02c04074 	movhi	r11,257
 1005274:	5acf1504 	addi	r11,r11,15444
 1005278:	8ac5883a 	add	r2,r17,r11
 100527c:	14000317 	ldw	r16,12(r2)
 1005280:	580f883a 	mov	r7,r11
 1005284:	8806d0fa 	srli	r3,r17,3
 1005288:	14006c26 	beq	r2,r16,100543c <_malloc_r+0x31c>
 100528c:	80c00117 	ldw	r3,4(r16)
 1005290:	00bfff04 	movi	r2,-4
 1005294:	81800317 	ldw	r6,12(r16)
 1005298:	1886703a 	and	r3,r3,r2
 100529c:	80c7883a 	add	r3,r16,r3
 10052a0:	18800117 	ldw	r2,4(r3)
 10052a4:	81400217 	ldw	r5,8(r16)
 10052a8:	9009883a 	mov	r4,r18
 10052ac:	10800054 	ori	r2,r2,1
 10052b0:	18800115 	stw	r2,4(r3)
 10052b4:	31400215 	stw	r5,8(r6)
 10052b8:	29800315 	stw	r6,12(r5)
 10052bc:	100a6cc0 	call	100a6cc <__malloc_unlock>
 10052c0:	80c00204 	addi	r3,r16,8
 10052c4:	003faa06 	br	1005170 <_malloc_r+0x50>
 10052c8:	00800104 	movi	r2,4
 10052cc:	10c0052e 	bgeu	r2,r3,10052e4 <_malloc_r+0x1c4>
 10052d0:	00800504 	movi	r2,20
 10052d4:	10c07836 	bltu	r2,r3,10054b8 <_malloc_r+0x398>
 10052d8:	198016c4 	addi	r6,r3,91
 10052dc:	300490fa 	slli	r2,r6,3
 10052e0:	003fbc06 	br	10051d4 <_malloc_r+0xb4>
 10052e4:	8804d1ba 	srli	r2,r17,6
 10052e8:	11800e04 	addi	r6,r2,56
 10052ec:	300490fa 	slli	r2,r6,3
 10052f0:	003fb806 	br	10051d4 <_malloc_r+0xb4>
 10052f4:	00807fc4 	movi	r2,511
 10052f8:	1140bb36 	bltu	r2,r5,10055e8 <_malloc_r+0x4c8>
 10052fc:	2806d0fa 	srli	r3,r5,3
 1005300:	573ffe04 	addi	fp,r10,-8
 1005304:	00800044 	movi	r2,1
 1005308:	180890fa 	slli	r4,r3,3
 100530c:	1807d0ba 	srai	r3,r3,2
 1005310:	e1c00117 	ldw	r7,4(fp)
 1005314:	5909883a 	add	r4,r11,r4
 1005318:	21400217 	ldw	r5,8(r4)
 100531c:	10c4983a 	sll	r2,r2,r3
 1005320:	81000315 	stw	r4,12(r16)
 1005324:	81400215 	stw	r5,8(r16)
 1005328:	388eb03a 	or	r7,r7,r2
 100532c:	2c000315 	stw	r16,12(r5)
 1005330:	24000215 	stw	r16,8(r4)
 1005334:	e1c00115 	stw	r7,4(fp)
 1005338:	4807883a 	mov	r3,r9
 100533c:	4800cd16 	blt	r9,zero,1005674 <_malloc_r+0x554>
 1005340:	1807d0ba 	srai	r3,r3,2
 1005344:	00800044 	movi	r2,1
 1005348:	10c8983a 	sll	r4,r2,r3
 100534c:	39004436 	bltu	r7,r4,1005460 <_malloc_r+0x340>
 1005350:	21c4703a 	and	r2,r4,r7
 1005354:	10000a1e 	bne	r2,zero,1005380 <_malloc_r+0x260>
 1005358:	2109883a 	add	r4,r4,r4
 100535c:	00bfff04 	movi	r2,-4
 1005360:	4884703a 	and	r2,r9,r2
 1005364:	3906703a 	and	r3,r7,r4
 1005368:	12400104 	addi	r9,r2,4
 100536c:	1800041e 	bne	r3,zero,1005380 <_malloc_r+0x260>
 1005370:	2109883a 	add	r4,r4,r4
 1005374:	3904703a 	and	r2,r7,r4
 1005378:	4a400104 	addi	r9,r9,4
 100537c:	103ffc26 	beq	r2,zero,1005370 <_malloc_r+0x250>
 1005380:	480490fa 	slli	r2,r9,3
 1005384:	4819883a 	mov	r12,r9
 1005388:	023fff04 	movi	r8,-4
 100538c:	589b883a 	add	r13,r11,r2
 1005390:	6807883a 	mov	r3,r13
 1005394:	014003c4 	movi	r5,15
 1005398:	1c000317 	ldw	r16,12(r3)
 100539c:	1c00041e 	bne	r3,r16,10053b0 <_malloc_r+0x290>
 10053a0:	0000a706 	br	1005640 <_malloc_r+0x520>
 10053a4:	3000ab0e 	bge	r6,zero,1005654 <_malloc_r+0x534>
 10053a8:	84000317 	ldw	r16,12(r16)
 10053ac:	1c00a426 	beq	r3,r16,1005640 <_malloc_r+0x520>
 10053b0:	80800117 	ldw	r2,4(r16)
 10053b4:	1204703a 	and	r2,r2,r8
 10053b8:	144dc83a 	sub	r6,r2,r17
 10053bc:	29bff90e 	bge	r5,r6,10053a4 <_malloc_r+0x284>
 10053c0:	81000317 	ldw	r4,12(r16)
 10053c4:	80c00217 	ldw	r3,8(r16)
 10053c8:	89400054 	ori	r5,r17,1
 10053cc:	8445883a 	add	r2,r16,r17
 10053d0:	20c00215 	stw	r3,8(r4)
 10053d4:	19000315 	stw	r4,12(r3)
 10053d8:	81400115 	stw	r5,4(r16)
 10053dc:	1187883a 	add	r3,r2,r6
 10053e0:	31000054 	ori	r4,r6,1
 10053e4:	50800315 	stw	r2,12(r10)
 10053e8:	50800215 	stw	r2,8(r10)
 10053ec:	19800015 	stw	r6,0(r3)
 10053f0:	11000115 	stw	r4,4(r2)
 10053f4:	12800215 	stw	r10,8(r2)
 10053f8:	12800315 	stw	r10,12(r2)
 10053fc:	9009883a 	mov	r4,r18
 1005400:	100a6cc0 	call	100a6cc <__malloc_unlock>
 1005404:	80c00204 	addi	r3,r16,8
 1005408:	003f5906 	br	1005170 <_malloc_r+0x50>
 100540c:	8109883a 	add	r4,r16,r4
 1005410:	20800117 	ldw	r2,4(r4)
 1005414:	80c00217 	ldw	r3,8(r16)
 1005418:	81400317 	ldw	r5,12(r16)
 100541c:	10800054 	ori	r2,r2,1
 1005420:	20800115 	stw	r2,4(r4)
 1005424:	28c00215 	stw	r3,8(r5)
 1005428:	19400315 	stw	r5,12(r3)
 100542c:	9009883a 	mov	r4,r18
 1005430:	100a6cc0 	call	100a6cc <__malloc_unlock>
 1005434:	80c00204 	addi	r3,r16,8
 1005438:	003f4d06 	br	1005170 <_malloc_r+0x50>
 100543c:	80800204 	addi	r2,r16,8
 1005440:	14000317 	ldw	r16,12(r2)
 1005444:	143f911e 	bne	r2,r16,100528c <_malloc_r+0x16c>
 1005448:	1a400084 	addi	r9,r3,2
 100544c:	003f7306 	br	100521c <_malloc_r+0xfc>
 1005450:	88c00054 	ori	r3,r17,1
 1005454:	8445883a 	add	r2,r16,r17
 1005458:	80c00115 	stw	r3,4(r16)
 100545c:	003fdf06 	br	10053dc <_malloc_r+0x2bc>
 1005460:	e4000217 	ldw	r16,8(fp)
 1005464:	00bfff04 	movi	r2,-4
 1005468:	80c00117 	ldw	r3,4(r16)
 100546c:	802d883a 	mov	r22,r16
 1005470:	18aa703a 	and	r21,r3,r2
 1005474:	ac401636 	bltu	r21,r17,10054d0 <_malloc_r+0x3b0>
 1005478:	ac49c83a 	sub	r4,r21,r17
 100547c:	008003c4 	movi	r2,15
 1005480:	1100130e 	bge	r2,r4,10054d0 <_malloc_r+0x3b0>
 1005484:	88800054 	ori	r2,r17,1
 1005488:	8447883a 	add	r3,r16,r17
 100548c:	80800115 	stw	r2,4(r16)
 1005490:	20800054 	ori	r2,r4,1
 1005494:	18800115 	stw	r2,4(r3)
 1005498:	e0c00215 	stw	r3,8(fp)
 100549c:	9009883a 	mov	r4,r18
 10054a0:	100a6cc0 	call	100a6cc <__malloc_unlock>
 10054a4:	80c00204 	addi	r3,r16,8
 10054a8:	003f3106 	br	1005170 <_malloc_r+0x50>
 10054ac:	39c00117 	ldw	r7,4(r7)
 10054b0:	573ffe04 	addi	fp,r10,-8
 10054b4:	003fa006 	br	1005338 <_malloc_r+0x218>
 10054b8:	00801504 	movi	r2,84
 10054bc:	10c06736 	bltu	r2,r3,100565c <_malloc_r+0x53c>
 10054c0:	8804d33a 	srli	r2,r17,12
 10054c4:	11801b84 	addi	r6,r2,110
 10054c8:	300490fa 	slli	r2,r6,3
 10054cc:	003f4106 	br	10051d4 <_malloc_r+0xb4>
 10054d0:	d0a74c17 	ldw	r2,-25296(gp)
 10054d4:	d0e00517 	ldw	r3,-32748(gp)
 10054d8:	053fffc4 	movi	r20,-1
 10054dc:	10800404 	addi	r2,r2,16
 10054e0:	88a7883a 	add	r19,r17,r2
 10054e4:	1d000326 	beq	r3,r20,10054f4 <_malloc_r+0x3d4>
 10054e8:	98c3ffc4 	addi	r3,r19,4095
 10054ec:	00bc0004 	movi	r2,-4096
 10054f0:	18a6703a 	and	r19,r3,r2
 10054f4:	9009883a 	mov	r4,r18
 10054f8:	980b883a 	mov	r5,r19
 10054fc:	10073a00 	call	10073a0 <_sbrk_r>
 1005500:	1009883a 	mov	r4,r2
 1005504:	15000426 	beq	r2,r20,1005518 <_malloc_r+0x3f8>
 1005508:	854b883a 	add	r5,r16,r21
 100550c:	1029883a 	mov	r20,r2
 1005510:	11405a2e 	bgeu	r2,r5,100567c <_malloc_r+0x55c>
 1005514:	87000c26 	beq	r16,fp,1005548 <_malloc_r+0x428>
 1005518:	e4000217 	ldw	r16,8(fp)
 100551c:	80c00117 	ldw	r3,4(r16)
 1005520:	00bfff04 	movi	r2,-4
 1005524:	1884703a 	and	r2,r3,r2
 1005528:	14400336 	bltu	r2,r17,1005538 <_malloc_r+0x418>
 100552c:	1449c83a 	sub	r4,r2,r17
 1005530:	008003c4 	movi	r2,15
 1005534:	113fd316 	blt	r2,r4,1005484 <_malloc_r+0x364>
 1005538:	9009883a 	mov	r4,r18
 100553c:	100a6cc0 	call	100a6cc <__malloc_unlock>
 1005540:	0007883a 	mov	r3,zero
 1005544:	003f0a06 	br	1005170 <_malloc_r+0x50>
 1005548:	05c04074 	movhi	r23,257
 100554c:	bddc1d04 	addi	r23,r23,28788
 1005550:	b8800017 	ldw	r2,0(r23)
 1005554:	988d883a 	add	r6,r19,r2
 1005558:	b9800015 	stw	r6,0(r23)
 100555c:	d0e00517 	ldw	r3,-32748(gp)
 1005560:	00bfffc4 	movi	r2,-1
 1005564:	18808e26 	beq	r3,r2,10057a0 <_malloc_r+0x680>
 1005568:	2145c83a 	sub	r2,r4,r5
 100556c:	3085883a 	add	r2,r6,r2
 1005570:	b8800015 	stw	r2,0(r23)
 1005574:	20c001cc 	andi	r3,r4,7
 1005578:	18005f1e 	bne	r3,zero,10056f8 <_malloc_r+0x5d8>
 100557c:	000b883a 	mov	r5,zero
 1005580:	a4c5883a 	add	r2,r20,r19
 1005584:	1083ffcc 	andi	r2,r2,4095
 1005588:	00c40004 	movi	r3,4096
 100558c:	1887c83a 	sub	r3,r3,r2
 1005590:	28e7883a 	add	r19,r5,r3
 1005594:	9009883a 	mov	r4,r18
 1005598:	980b883a 	mov	r5,r19
 100559c:	10073a00 	call	10073a0 <_sbrk_r>
 10055a0:	1007883a 	mov	r3,r2
 10055a4:	00bfffc4 	movi	r2,-1
 10055a8:	18807a26 	beq	r3,r2,1005794 <_malloc_r+0x674>
 10055ac:	1d05c83a 	sub	r2,r3,r20
 10055b0:	9885883a 	add	r2,r19,r2
 10055b4:	10c00054 	ori	r3,r2,1
 10055b8:	b8800017 	ldw	r2,0(r23)
 10055bc:	a021883a 	mov	r16,r20
 10055c0:	a0c00115 	stw	r3,4(r20)
 10055c4:	9885883a 	add	r2,r19,r2
 10055c8:	b8800015 	stw	r2,0(r23)
 10055cc:	e5000215 	stw	r20,8(fp)
 10055d0:	b7003626 	beq	r22,fp,10056ac <_malloc_r+0x58c>
 10055d4:	018003c4 	movi	r6,15
 10055d8:	35404b36 	bltu	r6,r21,1005708 <_malloc_r+0x5e8>
 10055dc:	00800044 	movi	r2,1
 10055e0:	a0800115 	stw	r2,4(r20)
 10055e4:	003fcd06 	br	100551c <_malloc_r+0x3fc>
 10055e8:	2808d27a 	srli	r4,r5,9
 10055ec:	2000371e 	bne	r4,zero,10056cc <_malloc_r+0x5ac>
 10055f0:	2808d0fa 	srli	r4,r5,3
 10055f4:	200690fa 	slli	r3,r4,3
 10055f8:	1ad1883a 	add	r8,r3,r11
 10055fc:	41800217 	ldw	r6,8(r8)
 1005600:	41805b26 	beq	r8,r6,1005770 <_malloc_r+0x650>
 1005604:	30800117 	ldw	r2,4(r6)
 1005608:	00ffff04 	movi	r3,-4
 100560c:	10c4703a 	and	r2,r2,r3
 1005610:	2880022e 	bgeu	r5,r2,100561c <_malloc_r+0x4fc>
 1005614:	31800217 	ldw	r6,8(r6)
 1005618:	41bffa1e 	bne	r8,r6,1005604 <_malloc_r+0x4e4>
 100561c:	32000317 	ldw	r8,12(r6)
 1005620:	39c00117 	ldw	r7,4(r7)
 1005624:	82000315 	stw	r8,12(r16)
 1005628:	81800215 	stw	r6,8(r16)
 100562c:	07004074 	movhi	fp,257
 1005630:	e70f1504 	addi	fp,fp,15444
 1005634:	34000315 	stw	r16,12(r6)
 1005638:	44000215 	stw	r16,8(r8)
 100563c:	003f3e06 	br	1005338 <_malloc_r+0x218>
 1005640:	63000044 	addi	r12,r12,1
 1005644:	608000cc 	andi	r2,r12,3
 1005648:	10005d26 	beq	r2,zero,10057c0 <_malloc_r+0x6a0>
 100564c:	18c00204 	addi	r3,r3,8
 1005650:	003f5106 	br	1005398 <_malloc_r+0x278>
 1005654:	8089883a 	add	r4,r16,r2
 1005658:	003f6d06 	br	1005410 <_malloc_r+0x2f0>
 100565c:	00805504 	movi	r2,340
 1005660:	10c02036 	bltu	r2,r3,10056e4 <_malloc_r+0x5c4>
 1005664:	8804d3fa 	srli	r2,r17,15
 1005668:	11801dc4 	addi	r6,r2,119
 100566c:	300490fa 	slli	r2,r6,3
 1005670:	003ed806 	br	10051d4 <_malloc_r+0xb4>
 1005674:	48c000c4 	addi	r3,r9,3
 1005678:	003f3106 	br	1005340 <_malloc_r+0x220>
 100567c:	05c04074 	movhi	r23,257
 1005680:	bddc1d04 	addi	r23,r23,28788
 1005684:	b8800017 	ldw	r2,0(r23)
 1005688:	988d883a 	add	r6,r19,r2
 100568c:	b9800015 	stw	r6,0(r23)
 1005690:	293fb21e 	bne	r5,r4,100555c <_malloc_r+0x43c>
 1005694:	2083ffcc 	andi	r2,r4,4095
 1005698:	103fb01e 	bne	r2,zero,100555c <_malloc_r+0x43c>
 100569c:	e4000217 	ldw	r16,8(fp)
 10056a0:	9d45883a 	add	r2,r19,r21
 10056a4:	10800054 	ori	r2,r2,1
 10056a8:	80800115 	stw	r2,4(r16)
 10056ac:	b8c00017 	ldw	r3,0(r23)
 10056b0:	d0a74d17 	ldw	r2,-25292(gp)
 10056b4:	10c0012e 	bgeu	r2,r3,10056bc <_malloc_r+0x59c>
 10056b8:	d0e74d15 	stw	r3,-25292(gp)
 10056bc:	d0a74e17 	ldw	r2,-25288(gp)
 10056c0:	10ff962e 	bgeu	r2,r3,100551c <_malloc_r+0x3fc>
 10056c4:	d0e74e15 	stw	r3,-25288(gp)
 10056c8:	003f9406 	br	100551c <_malloc_r+0x3fc>
 10056cc:	00800104 	movi	r2,4
 10056d0:	11001e36 	bltu	r2,r4,100574c <_malloc_r+0x62c>
 10056d4:	2804d1ba 	srli	r2,r5,6
 10056d8:	11000e04 	addi	r4,r2,56
 10056dc:	200690fa 	slli	r3,r4,3
 10056e0:	003fc506 	br	10055f8 <_malloc_r+0x4d8>
 10056e4:	00815504 	movi	r2,1364
 10056e8:	10c01d2e 	bgeu	r2,r3,1005760 <_malloc_r+0x640>
 10056ec:	01801f84 	movi	r6,126
 10056f0:	0080fc04 	movi	r2,1008
 10056f4:	003eb706 	br	10051d4 <_malloc_r+0xb4>
 10056f8:	00800204 	movi	r2,8
 10056fc:	10cbc83a 	sub	r5,r2,r3
 1005700:	2169883a 	add	r20,r4,r5
 1005704:	003f9e06 	br	1005580 <_malloc_r+0x460>
 1005708:	00bffe04 	movi	r2,-8
 100570c:	a93ffd04 	addi	r4,r21,-12
 1005710:	2088703a 	and	r4,r4,r2
 1005714:	b10b883a 	add	r5,r22,r4
 1005718:	00c00144 	movi	r3,5
 100571c:	28c00215 	stw	r3,8(r5)
 1005720:	28c00115 	stw	r3,4(r5)
 1005724:	b0800117 	ldw	r2,4(r22)
 1005728:	1080004c 	andi	r2,r2,1
 100572c:	2084b03a 	or	r2,r4,r2
 1005730:	b0800115 	stw	r2,4(r22)
 1005734:	313fdd2e 	bgeu	r6,r4,10056ac <_malloc_r+0x58c>
 1005738:	b1400204 	addi	r5,r22,8
 100573c:	9009883a 	mov	r4,r18
 1005740:	10045980 	call	1004598 <_free_r>
 1005744:	e4000217 	ldw	r16,8(fp)
 1005748:	003fd806 	br	10056ac <_malloc_r+0x58c>
 100574c:	00800504 	movi	r2,20
 1005750:	11001536 	bltu	r2,r4,10057a8 <_malloc_r+0x688>
 1005754:	210016c4 	addi	r4,r4,91
 1005758:	200690fa 	slli	r3,r4,3
 100575c:	003fa606 	br	10055f8 <_malloc_r+0x4d8>
 1005760:	8804d4ba 	srli	r2,r17,18
 1005764:	11801f04 	addi	r6,r2,124
 1005768:	300490fa 	slli	r2,r6,3
 100576c:	003e9906 	br	10051d4 <_malloc_r+0xb4>
 1005770:	2009d0ba 	srai	r4,r4,2
 1005774:	01404074 	movhi	r5,257
 1005778:	294f1504 	addi	r5,r5,15444
 100577c:	00c00044 	movi	r3,1
 1005780:	28800117 	ldw	r2,4(r5)
 1005784:	1906983a 	sll	r3,r3,r4
 1005788:	10c4b03a 	or	r2,r2,r3
 100578c:	28800115 	stw	r2,4(r5)
 1005790:	003fa306 	br	1005620 <_malloc_r+0x500>
 1005794:	0027883a 	mov	r19,zero
 1005798:	00c00044 	movi	r3,1
 100579c:	003f8606 	br	10055b8 <_malloc_r+0x498>
 10057a0:	d1200515 	stw	r4,-32748(gp)
 10057a4:	003f7306 	br	1005574 <_malloc_r+0x454>
 10057a8:	00801504 	movi	r2,84
 10057ac:	11001936 	bltu	r2,r4,1005814 <_malloc_r+0x6f4>
 10057b0:	2804d33a 	srli	r2,r5,12
 10057b4:	11001b84 	addi	r4,r2,110
 10057b8:	200690fa 	slli	r3,r4,3
 10057bc:	003f8e06 	br	10055f8 <_malloc_r+0x4d8>
 10057c0:	480b883a 	mov	r5,r9
 10057c4:	6807883a 	mov	r3,r13
 10057c8:	288000cc 	andi	r2,r5,3
 10057cc:	18fffe04 	addi	r3,r3,-8
 10057d0:	297fffc4 	addi	r5,r5,-1
 10057d4:	10001526 	beq	r2,zero,100582c <_malloc_r+0x70c>
 10057d8:	18800217 	ldw	r2,8(r3)
 10057dc:	10fffa26 	beq	r2,r3,10057c8 <_malloc_r+0x6a8>
 10057e0:	2109883a 	add	r4,r4,r4
 10057e4:	393f1e36 	bltu	r7,r4,1005460 <_malloc_r+0x340>
 10057e8:	203f1d26 	beq	r4,zero,1005460 <_malloc_r+0x340>
 10057ec:	21c4703a 	and	r2,r4,r7
 10057f0:	10000226 	beq	r2,zero,10057fc <_malloc_r+0x6dc>
 10057f4:	6013883a 	mov	r9,r12
 10057f8:	003ee106 	br	1005380 <_malloc_r+0x260>
 10057fc:	2109883a 	add	r4,r4,r4
 1005800:	3904703a 	and	r2,r7,r4
 1005804:	63000104 	addi	r12,r12,4
 1005808:	103ffc26 	beq	r2,zero,10057fc <_malloc_r+0x6dc>
 100580c:	6013883a 	mov	r9,r12
 1005810:	003edb06 	br	1005380 <_malloc_r+0x260>
 1005814:	00805504 	movi	r2,340
 1005818:	11000836 	bltu	r2,r4,100583c <_malloc_r+0x71c>
 100581c:	2804d3fa 	srli	r2,r5,15
 1005820:	11001dc4 	addi	r4,r2,119
 1005824:	200690fa 	slli	r3,r4,3
 1005828:	003f7306 	br	10055f8 <_malloc_r+0x4d8>
 100582c:	0104303a 	nor	r2,zero,r4
 1005830:	388e703a 	and	r7,r7,r2
 1005834:	e1c00115 	stw	r7,4(fp)
 1005838:	003fe906 	br	10057e0 <_malloc_r+0x6c0>
 100583c:	00815504 	movi	r2,1364
 1005840:	1100032e 	bgeu	r2,r4,1005850 <_malloc_r+0x730>
 1005844:	01001f84 	movi	r4,126
 1005848:	00c0fc04 	movi	r3,1008
 100584c:	003f6a06 	br	10055f8 <_malloc_r+0x4d8>
 1005850:	2804d4ba 	srli	r2,r5,18
 1005854:	11001f04 	addi	r4,r2,124
 1005858:	200690fa 	slli	r3,r4,3
 100585c:	003f6606 	br	10055f8 <_malloc_r+0x4d8>

01005860 <memchr>:
 1005860:	008000c4 	movi	r2,3
 1005864:	29403fcc 	andi	r5,r5,255
 1005868:	2007883a 	mov	r3,r4
 100586c:	1180022e 	bgeu	r2,r6,1005878 <memchr+0x18>
 1005870:	2084703a 	and	r2,r4,r2
 1005874:	10000b26 	beq	r2,zero,10058a4 <memchr+0x44>
 1005878:	313fffc4 	addi	r4,r6,-1
 100587c:	3000051e 	bne	r6,zero,1005894 <memchr+0x34>
 1005880:	00002c06 	br	1005934 <memchr+0xd4>
 1005884:	213fffc4 	addi	r4,r4,-1
 1005888:	00bfffc4 	movi	r2,-1
 100588c:	18c00044 	addi	r3,r3,1
 1005890:	20802826 	beq	r4,r2,1005934 <memchr+0xd4>
 1005894:	18800003 	ldbu	r2,0(r3)
 1005898:	28bffa1e 	bne	r5,r2,1005884 <memchr+0x24>
 100589c:	1805883a 	mov	r2,r3
 10058a0:	f800283a 	ret
 10058a4:	0011883a 	mov	r8,zero
 10058a8:	0007883a 	mov	r3,zero
 10058ac:	01c00104 	movi	r7,4
 10058b0:	4004923a 	slli	r2,r8,8
 10058b4:	18c00044 	addi	r3,r3,1
 10058b8:	1151883a 	add	r8,r2,r5
 10058bc:	19fffc1e 	bne	r3,r7,10058b0 <memchr+0x50>
 10058c0:	02bfbff4 	movhi	r10,65279
 10058c4:	52bfbfc4 	addi	r10,r10,-257
 10058c8:	02602074 	movhi	r9,32897
 10058cc:	4a602004 	addi	r9,r9,-32640
 10058d0:	02c000c4 	movi	r11,3
 10058d4:	20800017 	ldw	r2,0(r4)
 10058d8:	31bfff04 	addi	r6,r6,-4
 10058dc:	200f883a 	mov	r7,r4
 10058e0:	1204f03a 	xor	r2,r2,r8
 10058e4:	1287883a 	add	r3,r2,r10
 10058e8:	1a46703a 	and	r3,r3,r9
 10058ec:	0084303a 	nor	r2,zero,r2
 10058f0:	10c4703a 	and	r2,r2,r3
 10058f4:	10000b26 	beq	r2,zero,1005924 <memchr+0xc4>
 10058f8:	20800003 	ldbu	r2,0(r4)
 10058fc:	28800f26 	beq	r5,r2,100593c <memchr+0xdc>
 1005900:	20800043 	ldbu	r2,1(r4)
 1005904:	21c00044 	addi	r7,r4,1
 1005908:	28800c26 	beq	r5,r2,100593c <memchr+0xdc>
 100590c:	20800083 	ldbu	r2,2(r4)
 1005910:	21c00084 	addi	r7,r4,2
 1005914:	28800926 	beq	r5,r2,100593c <memchr+0xdc>
 1005918:	208000c3 	ldbu	r2,3(r4)
 100591c:	21c000c4 	addi	r7,r4,3
 1005920:	28800626 	beq	r5,r2,100593c <memchr+0xdc>
 1005924:	21000104 	addi	r4,r4,4
 1005928:	59bfea36 	bltu	r11,r6,10058d4 <memchr+0x74>
 100592c:	2007883a 	mov	r3,r4
 1005930:	003fd106 	br	1005878 <memchr+0x18>
 1005934:	0005883a 	mov	r2,zero
 1005938:	f800283a 	ret
 100593c:	3805883a 	mov	r2,r7
 1005940:	f800283a 	ret

01005944 <memcpy>:
 1005944:	01c003c4 	movi	r7,15
 1005948:	2007883a 	mov	r3,r4
 100594c:	3980032e 	bgeu	r7,r6,100595c <memcpy+0x18>
 1005950:	2904b03a 	or	r2,r5,r4
 1005954:	108000cc 	andi	r2,r2,3
 1005958:	10000926 	beq	r2,zero,1005980 <memcpy+0x3c>
 100595c:	30000626 	beq	r6,zero,1005978 <memcpy+0x34>
 1005960:	30cd883a 	add	r6,r6,r3
 1005964:	28800003 	ldbu	r2,0(r5)
 1005968:	29400044 	addi	r5,r5,1
 100596c:	18800005 	stb	r2,0(r3)
 1005970:	18c00044 	addi	r3,r3,1
 1005974:	30fffb1e 	bne	r6,r3,1005964 <memcpy+0x20>
 1005978:	2005883a 	mov	r2,r4
 100597c:	f800283a 	ret
 1005980:	3811883a 	mov	r8,r7
 1005984:	200f883a 	mov	r7,r4
 1005988:	28c00017 	ldw	r3,0(r5)
 100598c:	31bffc04 	addi	r6,r6,-16
 1005990:	38c00015 	stw	r3,0(r7)
 1005994:	28800117 	ldw	r2,4(r5)
 1005998:	38800115 	stw	r2,4(r7)
 100599c:	28c00217 	ldw	r3,8(r5)
 10059a0:	38c00215 	stw	r3,8(r7)
 10059a4:	28800317 	ldw	r2,12(r5)
 10059a8:	29400404 	addi	r5,r5,16
 10059ac:	38800315 	stw	r2,12(r7)
 10059b0:	39c00404 	addi	r7,r7,16
 10059b4:	41bff436 	bltu	r8,r6,1005988 <memcpy+0x44>
 10059b8:	008000c4 	movi	r2,3
 10059bc:	1180072e 	bgeu	r2,r6,10059dc <memcpy+0x98>
 10059c0:	1007883a 	mov	r3,r2
 10059c4:	28800017 	ldw	r2,0(r5)
 10059c8:	31bfff04 	addi	r6,r6,-4
 10059cc:	29400104 	addi	r5,r5,4
 10059d0:	38800015 	stw	r2,0(r7)
 10059d4:	39c00104 	addi	r7,r7,4
 10059d8:	19bffa36 	bltu	r3,r6,10059c4 <memcpy+0x80>
 10059dc:	3807883a 	mov	r3,r7
 10059e0:	003fde06 	br	100595c <memcpy+0x18>

010059e4 <memmove>:
 10059e4:	2807883a 	mov	r3,r5
 10059e8:	2011883a 	mov	r8,r4
 10059ec:	29000c2e 	bgeu	r5,r4,1005a20 <memmove+0x3c>
 10059f0:	298f883a 	add	r7,r5,r6
 10059f4:	21c00a2e 	bgeu	r4,r7,1005a20 <memmove+0x3c>
 10059f8:	30000726 	beq	r6,zero,1005a18 <memmove+0x34>
 10059fc:	2187883a 	add	r3,r4,r6
 1005a00:	198dc83a 	sub	r6,r3,r6
 1005a04:	39ffffc4 	addi	r7,r7,-1
 1005a08:	38800003 	ldbu	r2,0(r7)
 1005a0c:	18ffffc4 	addi	r3,r3,-1
 1005a10:	18800005 	stb	r2,0(r3)
 1005a14:	19bffb1e 	bne	r3,r6,1005a04 <memmove+0x20>
 1005a18:	2005883a 	mov	r2,r4
 1005a1c:	f800283a 	ret
 1005a20:	01c003c4 	movi	r7,15
 1005a24:	39800a36 	bltu	r7,r6,1005a50 <memmove+0x6c>
 1005a28:	303ffb26 	beq	r6,zero,1005a18 <memmove+0x34>
 1005a2c:	400f883a 	mov	r7,r8
 1005a30:	320d883a 	add	r6,r6,r8
 1005a34:	28800003 	ldbu	r2,0(r5)
 1005a38:	29400044 	addi	r5,r5,1
 1005a3c:	38800005 	stb	r2,0(r7)
 1005a40:	39c00044 	addi	r7,r7,1
 1005a44:	39bffb1e 	bne	r7,r6,1005a34 <memmove+0x50>
 1005a48:	2005883a 	mov	r2,r4
 1005a4c:	f800283a 	ret
 1005a50:	1904b03a 	or	r2,r3,r4
 1005a54:	108000cc 	andi	r2,r2,3
 1005a58:	103ff31e 	bne	r2,zero,1005a28 <memmove+0x44>
 1005a5c:	3811883a 	mov	r8,r7
 1005a60:	180b883a 	mov	r5,r3
 1005a64:	200f883a 	mov	r7,r4
 1005a68:	28c00017 	ldw	r3,0(r5)
 1005a6c:	31bffc04 	addi	r6,r6,-16
 1005a70:	38c00015 	stw	r3,0(r7)
 1005a74:	28800117 	ldw	r2,4(r5)
 1005a78:	38800115 	stw	r2,4(r7)
 1005a7c:	28c00217 	ldw	r3,8(r5)
 1005a80:	38c00215 	stw	r3,8(r7)
 1005a84:	28800317 	ldw	r2,12(r5)
 1005a88:	29400404 	addi	r5,r5,16
 1005a8c:	38800315 	stw	r2,12(r7)
 1005a90:	39c00404 	addi	r7,r7,16
 1005a94:	41bff436 	bltu	r8,r6,1005a68 <memmove+0x84>
 1005a98:	008000c4 	movi	r2,3
 1005a9c:	1180072e 	bgeu	r2,r6,1005abc <memmove+0xd8>
 1005aa0:	1007883a 	mov	r3,r2
 1005aa4:	28800017 	ldw	r2,0(r5)
 1005aa8:	31bfff04 	addi	r6,r6,-4
 1005aac:	29400104 	addi	r5,r5,4
 1005ab0:	38800015 	stw	r2,0(r7)
 1005ab4:	39c00104 	addi	r7,r7,4
 1005ab8:	19bffa36 	bltu	r3,r6,1005aa4 <memmove+0xc0>
 1005abc:	3811883a 	mov	r8,r7
 1005ac0:	003fd906 	br	1005a28 <memmove+0x44>

01005ac4 <memset>:
 1005ac4:	008000c4 	movi	r2,3
 1005ac8:	29403fcc 	andi	r5,r5,255
 1005acc:	2007883a 	mov	r3,r4
 1005ad0:	1180022e 	bgeu	r2,r6,1005adc <memset+0x18>
 1005ad4:	2084703a 	and	r2,r4,r2
 1005ad8:	10000826 	beq	r2,zero,1005afc <memset+0x38>
 1005adc:	30000526 	beq	r6,zero,1005af4 <memset+0x30>
 1005ae0:	2805883a 	mov	r2,r5
 1005ae4:	30cd883a 	add	r6,r6,r3
 1005ae8:	18800005 	stb	r2,0(r3)
 1005aec:	18c00044 	addi	r3,r3,1
 1005af0:	19bffd1e 	bne	r3,r6,1005ae8 <memset+0x24>
 1005af4:	2005883a 	mov	r2,r4
 1005af8:	f800283a 	ret
 1005afc:	2804923a 	slli	r2,r5,8
 1005b00:	020003c4 	movi	r8,15
 1005b04:	200f883a 	mov	r7,r4
 1005b08:	2884b03a 	or	r2,r5,r2
 1005b0c:	1006943a 	slli	r3,r2,16
 1005b10:	10c6b03a 	or	r3,r2,r3
 1005b14:	41800a2e 	bgeu	r8,r6,1005b40 <memset+0x7c>
 1005b18:	4005883a 	mov	r2,r8
 1005b1c:	31bffc04 	addi	r6,r6,-16
 1005b20:	38c00015 	stw	r3,0(r7)
 1005b24:	38c00115 	stw	r3,4(r7)
 1005b28:	38c00215 	stw	r3,8(r7)
 1005b2c:	38c00315 	stw	r3,12(r7)
 1005b30:	39c00404 	addi	r7,r7,16
 1005b34:	11bff936 	bltu	r2,r6,1005b1c <memset+0x58>
 1005b38:	008000c4 	movi	r2,3
 1005b3c:	1180052e 	bgeu	r2,r6,1005b54 <memset+0x90>
 1005b40:	31bfff04 	addi	r6,r6,-4
 1005b44:	008000c4 	movi	r2,3
 1005b48:	38c00015 	stw	r3,0(r7)
 1005b4c:	39c00104 	addi	r7,r7,4
 1005b50:	11bffb36 	bltu	r2,r6,1005b40 <memset+0x7c>
 1005b54:	3807883a 	mov	r3,r7
 1005b58:	003fe006 	br	1005adc <memset+0x18>

01005b5c <_Bfree>:
 1005b5c:	28000826 	beq	r5,zero,1005b80 <_Bfree+0x24>
 1005b60:	28800117 	ldw	r2,4(r5)
 1005b64:	21001317 	ldw	r4,76(r4)
 1005b68:	1085883a 	add	r2,r2,r2
 1005b6c:	1085883a 	add	r2,r2,r2
 1005b70:	1105883a 	add	r2,r2,r4
 1005b74:	10c00017 	ldw	r3,0(r2)
 1005b78:	28c00015 	stw	r3,0(r5)
 1005b7c:	11400015 	stw	r5,0(r2)
 1005b80:	f800283a 	ret

01005b84 <__hi0bits>:
 1005b84:	20bfffec 	andhi	r2,r4,65535
 1005b88:	10001426 	beq	r2,zero,1005bdc <__hi0bits+0x58>
 1005b8c:	0007883a 	mov	r3,zero
 1005b90:	20bfc02c 	andhi	r2,r4,65280
 1005b94:	1000021e 	bne	r2,zero,1005ba0 <__hi0bits+0x1c>
 1005b98:	2008923a 	slli	r4,r4,8
 1005b9c:	18c00204 	addi	r3,r3,8
 1005ba0:	20bc002c 	andhi	r2,r4,61440
 1005ba4:	1000021e 	bne	r2,zero,1005bb0 <__hi0bits+0x2c>
 1005ba8:	2008913a 	slli	r4,r4,4
 1005bac:	18c00104 	addi	r3,r3,4
 1005bb0:	20b0002c 	andhi	r2,r4,49152
 1005bb4:	1000031e 	bne	r2,zero,1005bc4 <__hi0bits+0x40>
 1005bb8:	2105883a 	add	r2,r4,r4
 1005bbc:	18c00084 	addi	r3,r3,2
 1005bc0:	1089883a 	add	r4,r2,r2
 1005bc4:	20000316 	blt	r4,zero,1005bd4 <__hi0bits+0x50>
 1005bc8:	2090002c 	andhi	r2,r4,16384
 1005bcc:	10000626 	beq	r2,zero,1005be8 <__hi0bits+0x64>
 1005bd0:	18c00044 	addi	r3,r3,1
 1005bd4:	1805883a 	mov	r2,r3
 1005bd8:	f800283a 	ret
 1005bdc:	2008943a 	slli	r4,r4,16
 1005be0:	00c00404 	movi	r3,16
 1005be4:	003fea06 	br	1005b90 <__hi0bits+0xc>
 1005be8:	00c00804 	movi	r3,32
 1005bec:	1805883a 	mov	r2,r3
 1005bf0:	f800283a 	ret

01005bf4 <__lo0bits>:
 1005bf4:	20c00017 	ldw	r3,0(r4)
 1005bf8:	188001cc 	andi	r2,r3,7
 1005bfc:	10000a26 	beq	r2,zero,1005c28 <__lo0bits+0x34>
 1005c00:	1880004c 	andi	r2,r3,1
 1005c04:	1005003a 	cmpeq	r2,r2,zero
 1005c08:	10002126 	beq	r2,zero,1005c90 <__lo0bits+0x9c>
 1005c0c:	1880008c 	andi	r2,r3,2
 1005c10:	1000251e 	bne	r2,zero,1005ca8 <__lo0bits+0xb4>
 1005c14:	1804d0ba 	srli	r2,r3,2
 1005c18:	01400084 	movi	r5,2
 1005c1c:	20800015 	stw	r2,0(r4)
 1005c20:	2805883a 	mov	r2,r5
 1005c24:	f800283a 	ret
 1005c28:	18bfffcc 	andi	r2,r3,65535
 1005c2c:	10001526 	beq	r2,zero,1005c84 <__lo0bits+0x90>
 1005c30:	000b883a 	mov	r5,zero
 1005c34:	18803fcc 	andi	r2,r3,255
 1005c38:	1000021e 	bne	r2,zero,1005c44 <__lo0bits+0x50>
 1005c3c:	1806d23a 	srli	r3,r3,8
 1005c40:	29400204 	addi	r5,r5,8
 1005c44:	188003cc 	andi	r2,r3,15
 1005c48:	1000021e 	bne	r2,zero,1005c54 <__lo0bits+0x60>
 1005c4c:	1806d13a 	srli	r3,r3,4
 1005c50:	29400104 	addi	r5,r5,4
 1005c54:	188000cc 	andi	r2,r3,3
 1005c58:	1000021e 	bne	r2,zero,1005c64 <__lo0bits+0x70>
 1005c5c:	1806d0ba 	srli	r3,r3,2
 1005c60:	29400084 	addi	r5,r5,2
 1005c64:	1880004c 	andi	r2,r3,1
 1005c68:	1000031e 	bne	r2,zero,1005c78 <__lo0bits+0x84>
 1005c6c:	1806d07a 	srli	r3,r3,1
 1005c70:	18000a26 	beq	r3,zero,1005c9c <__lo0bits+0xa8>
 1005c74:	29400044 	addi	r5,r5,1
 1005c78:	2805883a 	mov	r2,r5
 1005c7c:	20c00015 	stw	r3,0(r4)
 1005c80:	f800283a 	ret
 1005c84:	1806d43a 	srli	r3,r3,16
 1005c88:	01400404 	movi	r5,16
 1005c8c:	003fe906 	br	1005c34 <__lo0bits+0x40>
 1005c90:	000b883a 	mov	r5,zero
 1005c94:	2805883a 	mov	r2,r5
 1005c98:	f800283a 	ret
 1005c9c:	01400804 	movi	r5,32
 1005ca0:	2805883a 	mov	r2,r5
 1005ca4:	f800283a 	ret
 1005ca8:	1804d07a 	srli	r2,r3,1
 1005cac:	01400044 	movi	r5,1
 1005cb0:	20800015 	stw	r2,0(r4)
 1005cb4:	003fda06 	br	1005c20 <__lo0bits+0x2c>

01005cb8 <__mcmp>:
 1005cb8:	20800417 	ldw	r2,16(r4)
 1005cbc:	28c00417 	ldw	r3,16(r5)
 1005cc0:	10cfc83a 	sub	r7,r2,r3
 1005cc4:	38000c1e 	bne	r7,zero,1005cf8 <__mcmp+0x40>
 1005cc8:	18c5883a 	add	r2,r3,r3
 1005ccc:	1085883a 	add	r2,r2,r2
 1005cd0:	10c00504 	addi	r3,r2,20
 1005cd4:	21000504 	addi	r4,r4,20
 1005cd8:	28cb883a 	add	r5,r5,r3
 1005cdc:	2085883a 	add	r2,r4,r2
 1005ce0:	10bfff04 	addi	r2,r2,-4
 1005ce4:	297fff04 	addi	r5,r5,-4
 1005ce8:	11800017 	ldw	r6,0(r2)
 1005cec:	28c00017 	ldw	r3,0(r5)
 1005cf0:	30c0031e 	bne	r6,r3,1005d00 <__mcmp+0x48>
 1005cf4:	20bffa36 	bltu	r4,r2,1005ce0 <__mcmp+0x28>
 1005cf8:	3805883a 	mov	r2,r7
 1005cfc:	f800283a 	ret
 1005d00:	30c00336 	bltu	r6,r3,1005d10 <__mcmp+0x58>
 1005d04:	01c00044 	movi	r7,1
 1005d08:	3805883a 	mov	r2,r7
 1005d0c:	f800283a 	ret
 1005d10:	01ffffc4 	movi	r7,-1
 1005d14:	003ff806 	br	1005cf8 <__mcmp+0x40>

01005d18 <__ulp>:
 1005d18:	295ffc2c 	andhi	r5,r5,32752
 1005d1c:	013f3034 	movhi	r4,64704
 1005d20:	290b883a 	add	r5,r5,r4
 1005d24:	0145c83a 	sub	r2,zero,r5
 1005d28:	1007d53a 	srai	r3,r2,20
 1005d2c:	000d883a 	mov	r6,zero
 1005d30:	0140040e 	bge	zero,r5,1005d44 <__ulp+0x2c>
 1005d34:	280f883a 	mov	r7,r5
 1005d38:	3807883a 	mov	r3,r7
 1005d3c:	3005883a 	mov	r2,r6
 1005d40:	f800283a 	ret
 1005d44:	008004c4 	movi	r2,19
 1005d48:	193ffb04 	addi	r4,r3,-20
 1005d4c:	10c00c0e 	bge	r2,r3,1005d80 <__ulp+0x68>
 1005d50:	008007c4 	movi	r2,31
 1005d54:	1107c83a 	sub	r3,r2,r4
 1005d58:	00800784 	movi	r2,30
 1005d5c:	01400044 	movi	r5,1
 1005d60:	11000216 	blt	r2,r4,1005d6c <__ulp+0x54>
 1005d64:	00800044 	movi	r2,1
 1005d68:	10ca983a 	sll	r5,r2,r3
 1005d6c:	000f883a 	mov	r7,zero
 1005d70:	280d883a 	mov	r6,r5
 1005d74:	3807883a 	mov	r3,r7
 1005d78:	3005883a 	mov	r2,r6
 1005d7c:	f800283a 	ret
 1005d80:	00800234 	movhi	r2,8
 1005d84:	10cfd83a 	sra	r7,r2,r3
 1005d88:	000d883a 	mov	r6,zero
 1005d8c:	3005883a 	mov	r2,r6
 1005d90:	3807883a 	mov	r3,r7
 1005d94:	f800283a 	ret

01005d98 <__b2d>:
 1005d98:	20800417 	ldw	r2,16(r4)
 1005d9c:	defff904 	addi	sp,sp,-28
 1005da0:	dd000415 	stw	r20,16(sp)
 1005da4:	1085883a 	add	r2,r2,r2
 1005da8:	25000504 	addi	r20,r4,20
 1005dac:	1085883a 	add	r2,r2,r2
 1005db0:	dc000015 	stw	r16,0(sp)
 1005db4:	a0a1883a 	add	r16,r20,r2
 1005db8:	dd400515 	stw	r21,20(sp)
 1005dbc:	857fff17 	ldw	r21,-4(r16)
 1005dc0:	dc400115 	stw	r17,4(sp)
 1005dc4:	dfc00615 	stw	ra,24(sp)
 1005dc8:	a809883a 	mov	r4,r21
 1005dcc:	2823883a 	mov	r17,r5
 1005dd0:	dcc00315 	stw	r19,12(sp)
 1005dd4:	dc800215 	stw	r18,8(sp)
 1005dd8:	1005b840 	call	1005b84 <__hi0bits>
 1005ddc:	100b883a 	mov	r5,r2
 1005de0:	00800804 	movi	r2,32
 1005de4:	1145c83a 	sub	r2,r2,r5
 1005de8:	88800015 	stw	r2,0(r17)
 1005dec:	00800284 	movi	r2,10
 1005df0:	80ffff04 	addi	r3,r16,-4
 1005df4:	11401416 	blt	r2,r5,1005e48 <__b2d+0xb0>
 1005df8:	008002c4 	movi	r2,11
 1005dfc:	1149c83a 	sub	r4,r2,r5
 1005e00:	a0c02736 	bltu	r20,r3,1005ea0 <__b2d+0x108>
 1005e04:	000d883a 	mov	r6,zero
 1005e08:	28800544 	addi	r2,r5,21
 1005e0c:	a906d83a 	srl	r3,r21,r4
 1005e10:	a884983a 	sll	r2,r21,r2
 1005e14:	1ccffc34 	orhi	r19,r3,16368
 1005e18:	11a4b03a 	or	r18,r2,r6
 1005e1c:	9005883a 	mov	r2,r18
 1005e20:	9807883a 	mov	r3,r19
 1005e24:	dfc00617 	ldw	ra,24(sp)
 1005e28:	dd400517 	ldw	r21,20(sp)
 1005e2c:	dd000417 	ldw	r20,16(sp)
 1005e30:	dcc00317 	ldw	r19,12(sp)
 1005e34:	dc800217 	ldw	r18,8(sp)
 1005e38:	dc400117 	ldw	r17,4(sp)
 1005e3c:	dc000017 	ldw	r16,0(sp)
 1005e40:	dec00704 	addi	sp,sp,28
 1005e44:	f800283a 	ret
 1005e48:	a0c00e36 	bltu	r20,r3,1005e84 <__b2d+0xec>
 1005e4c:	293ffd44 	addi	r4,r5,-11
 1005e50:	000d883a 	mov	r6,zero
 1005e54:	20000f26 	beq	r4,zero,1005e94 <__b2d+0xfc>
 1005e58:	00800804 	movi	r2,32
 1005e5c:	110bc83a 	sub	r5,r2,r4
 1005e60:	a0c01236 	bltu	r20,r3,1005eac <__b2d+0x114>
 1005e64:	000f883a 	mov	r7,zero
 1005e68:	a904983a 	sll	r2,r21,r4
 1005e6c:	3146d83a 	srl	r3,r6,r5
 1005e70:	3108983a 	sll	r4,r6,r4
 1005e74:	108ffc34 	orhi	r2,r2,16368
 1005e78:	18a6b03a 	or	r19,r3,r2
 1005e7c:	3924b03a 	or	r18,r7,r4
 1005e80:	003fe606 	br	1005e1c <__b2d+0x84>
 1005e84:	293ffd44 	addi	r4,r5,-11
 1005e88:	81bffe17 	ldw	r6,-8(r16)
 1005e8c:	80fffe04 	addi	r3,r16,-8
 1005e90:	203ff11e 	bne	r4,zero,1005e58 <__b2d+0xc0>
 1005e94:	accffc34 	orhi	r19,r21,16368
 1005e98:	3025883a 	mov	r18,r6
 1005e9c:	003fdf06 	br	1005e1c <__b2d+0x84>
 1005ea0:	18bfff17 	ldw	r2,-4(r3)
 1005ea4:	110cd83a 	srl	r6,r2,r4
 1005ea8:	003fd706 	br	1005e08 <__b2d+0x70>
 1005eac:	18bfff17 	ldw	r2,-4(r3)
 1005eb0:	114ed83a 	srl	r7,r2,r5
 1005eb4:	003fec06 	br	1005e68 <__b2d+0xd0>

01005eb8 <__ratio>:
 1005eb8:	defff904 	addi	sp,sp,-28
 1005ebc:	dc400215 	stw	r17,8(sp)
 1005ec0:	2823883a 	mov	r17,r5
 1005ec4:	d80b883a 	mov	r5,sp
 1005ec8:	dfc00615 	stw	ra,24(sp)
 1005ecc:	dd000515 	stw	r20,20(sp)
 1005ed0:	dcc00415 	stw	r19,16(sp)
 1005ed4:	dc800315 	stw	r18,12(sp)
 1005ed8:	2025883a 	mov	r18,r4
 1005edc:	1005d980 	call	1005d98 <__b2d>
 1005ee0:	8809883a 	mov	r4,r17
 1005ee4:	d9400104 	addi	r5,sp,4
 1005ee8:	1027883a 	mov	r19,r2
 1005eec:	1829883a 	mov	r20,r3
 1005ef0:	1005d980 	call	1005d98 <__b2d>
 1005ef4:	89000417 	ldw	r4,16(r17)
 1005ef8:	91c00417 	ldw	r7,16(r18)
 1005efc:	d9800117 	ldw	r6,4(sp)
 1005f00:	180b883a 	mov	r5,r3
 1005f04:	390fc83a 	sub	r7,r7,r4
 1005f08:	1009883a 	mov	r4,r2
 1005f0c:	d8800017 	ldw	r2,0(sp)
 1005f10:	380e917a 	slli	r7,r7,5
 1005f14:	2011883a 	mov	r8,r4
 1005f18:	1185c83a 	sub	r2,r2,r6
 1005f1c:	11c5883a 	add	r2,r2,r7
 1005f20:	1006953a 	slli	r3,r2,20
 1005f24:	2813883a 	mov	r9,r5
 1005f28:	00800d0e 	bge	zero,r2,1005f60 <__ratio+0xa8>
 1005f2c:	1d29883a 	add	r20,r3,r20
 1005f30:	a00b883a 	mov	r5,r20
 1005f34:	480f883a 	mov	r7,r9
 1005f38:	9809883a 	mov	r4,r19
 1005f3c:	400d883a 	mov	r6,r8
 1005f40:	100904c0 	call	100904c <__divdf3>
 1005f44:	dfc00617 	ldw	ra,24(sp)
 1005f48:	dd000517 	ldw	r20,20(sp)
 1005f4c:	dcc00417 	ldw	r19,16(sp)
 1005f50:	dc800317 	ldw	r18,12(sp)
 1005f54:	dc400217 	ldw	r17,8(sp)
 1005f58:	dec00704 	addi	sp,sp,28
 1005f5c:	f800283a 	ret
 1005f60:	28d3c83a 	sub	r9,r5,r3
 1005f64:	003ff206 	br	1005f30 <__ratio+0x78>

01005f68 <_mprec_log10>:
 1005f68:	defffe04 	addi	sp,sp,-8
 1005f6c:	008005c4 	movi	r2,23
 1005f70:	dc000015 	stw	r16,0(sp)
 1005f74:	dfc00115 	stw	ra,4(sp)
 1005f78:	2021883a 	mov	r16,r4
 1005f7c:	11000c16 	blt	r2,r4,1005fb0 <_mprec_log10+0x48>
 1005f80:	200490fa 	slli	r2,r4,3
 1005f84:	00c04074 	movhi	r3,257
 1005f88:	18ccb204 	addi	r3,r3,13000
 1005f8c:	10c5883a 	add	r2,r2,r3
 1005f90:	12400117 	ldw	r9,4(r2)
 1005f94:	12000017 	ldw	r8,0(r2)
 1005f98:	4807883a 	mov	r3,r9
 1005f9c:	4005883a 	mov	r2,r8
 1005fa0:	dfc00117 	ldw	ra,4(sp)
 1005fa4:	dc000017 	ldw	r16,0(sp)
 1005fa8:	dec00204 	addi	sp,sp,8
 1005fac:	f800283a 	ret
 1005fb0:	0011883a 	mov	r8,zero
 1005fb4:	024ffc34 	movhi	r9,16368
 1005fb8:	0005883a 	mov	r2,zero
 1005fbc:	00d00934 	movhi	r3,16420
 1005fc0:	480b883a 	mov	r5,r9
 1005fc4:	4009883a 	mov	r4,r8
 1005fc8:	180f883a 	mov	r7,r3
 1005fcc:	100d883a 	mov	r6,r2
 1005fd0:	1008c880 	call	1008c88 <__muldf3>
 1005fd4:	843fffc4 	addi	r16,r16,-1
 1005fd8:	1011883a 	mov	r8,r2
 1005fdc:	1813883a 	mov	r9,r3
 1005fe0:	803ff51e 	bne	r16,zero,1005fb8 <_mprec_log10+0x50>
 1005fe4:	4005883a 	mov	r2,r8
 1005fe8:	4807883a 	mov	r3,r9
 1005fec:	dfc00117 	ldw	ra,4(sp)
 1005ff0:	dc000017 	ldw	r16,0(sp)
 1005ff4:	dec00204 	addi	sp,sp,8
 1005ff8:	f800283a 	ret

01005ffc <__copybits>:
 1005ffc:	297fffc4 	addi	r5,r5,-1
 1006000:	30800417 	ldw	r2,16(r6)
 1006004:	280bd17a 	srai	r5,r5,5
 1006008:	31800504 	addi	r6,r6,20
 100600c:	1085883a 	add	r2,r2,r2
 1006010:	294b883a 	add	r5,r5,r5
 1006014:	294b883a 	add	r5,r5,r5
 1006018:	1085883a 	add	r2,r2,r2
 100601c:	290b883a 	add	r5,r5,r4
 1006020:	3087883a 	add	r3,r6,r2
 1006024:	29400104 	addi	r5,r5,4
 1006028:	30c0052e 	bgeu	r6,r3,1006040 <__copybits+0x44>
 100602c:	30800017 	ldw	r2,0(r6)
 1006030:	31800104 	addi	r6,r6,4
 1006034:	20800015 	stw	r2,0(r4)
 1006038:	21000104 	addi	r4,r4,4
 100603c:	30fffb36 	bltu	r6,r3,100602c <__copybits+0x30>
 1006040:	2140032e 	bgeu	r4,r5,1006050 <__copybits+0x54>
 1006044:	20000015 	stw	zero,0(r4)
 1006048:	21000104 	addi	r4,r4,4
 100604c:	217ffd36 	bltu	r4,r5,1006044 <__copybits+0x48>
 1006050:	f800283a 	ret

01006054 <__any_on>:
 1006054:	20800417 	ldw	r2,16(r4)
 1006058:	2807d17a 	srai	r3,r5,5
 100605c:	21000504 	addi	r4,r4,20
 1006060:	10c00d0e 	bge	r2,r3,1006098 <__any_on+0x44>
 1006064:	1085883a 	add	r2,r2,r2
 1006068:	1085883a 	add	r2,r2,r2
 100606c:	208d883a 	add	r6,r4,r2
 1006070:	2180182e 	bgeu	r4,r6,10060d4 <__any_on+0x80>
 1006074:	30bfff17 	ldw	r2,-4(r6)
 1006078:	30ffff04 	addi	r3,r6,-4
 100607c:	1000041e 	bne	r2,zero,1006090 <__any_on+0x3c>
 1006080:	20c0142e 	bgeu	r4,r3,10060d4 <__any_on+0x80>
 1006084:	18ffff04 	addi	r3,r3,-4
 1006088:	18800017 	ldw	r2,0(r3)
 100608c:	103ffc26 	beq	r2,zero,1006080 <__any_on+0x2c>
 1006090:	00800044 	movi	r2,1
 1006094:	f800283a 	ret
 1006098:	18800a0e 	bge	r3,r2,10060c4 <__any_on+0x70>
 100609c:	294007cc 	andi	r5,r5,31
 10060a0:	28000826 	beq	r5,zero,10060c4 <__any_on+0x70>
 10060a4:	18c5883a 	add	r2,r3,r3
 10060a8:	1085883a 	add	r2,r2,r2
 10060ac:	208d883a 	add	r6,r4,r2
 10060b0:	30c00017 	ldw	r3,0(r6)
 10060b4:	1944d83a 	srl	r2,r3,r5
 10060b8:	1144983a 	sll	r2,r2,r5
 10060bc:	18bff41e 	bne	r3,r2,1006090 <__any_on+0x3c>
 10060c0:	003feb06 	br	1006070 <__any_on+0x1c>
 10060c4:	18c5883a 	add	r2,r3,r3
 10060c8:	1085883a 	add	r2,r2,r2
 10060cc:	208d883a 	add	r6,r4,r2
 10060d0:	003fe706 	br	1006070 <__any_on+0x1c>
 10060d4:	0005883a 	mov	r2,zero
 10060d8:	f800283a 	ret

010060dc <_Balloc>:
 10060dc:	20c01317 	ldw	r3,76(r4)
 10060e0:	defffb04 	addi	sp,sp,-20
 10060e4:	dcc00315 	stw	r19,12(sp)
 10060e8:	dc800215 	stw	r18,8(sp)
 10060ec:	dfc00415 	stw	ra,16(sp)
 10060f0:	2825883a 	mov	r18,r5
 10060f4:	dc400115 	stw	r17,4(sp)
 10060f8:	dc000015 	stw	r16,0(sp)
 10060fc:	2027883a 	mov	r19,r4
 1006100:	01800404 	movi	r6,16
 1006104:	01400104 	movi	r5,4
 1006108:	18001726 	beq	r3,zero,1006168 <_Balloc+0x8c>
 100610c:	01400044 	movi	r5,1
 1006110:	9485883a 	add	r2,r18,r18
 1006114:	2ca2983a 	sll	r17,r5,r18
 1006118:	1085883a 	add	r2,r2,r2
 100611c:	10c7883a 	add	r3,r2,r3
 1006120:	1c000017 	ldw	r16,0(r3)
 1006124:	8c4d883a 	add	r6,r17,r17
 1006128:	318d883a 	add	r6,r6,r6
 100612c:	9809883a 	mov	r4,r19
 1006130:	31800504 	addi	r6,r6,20
 1006134:	80001226 	beq	r16,zero,1006180 <_Balloc+0xa4>
 1006138:	80800017 	ldw	r2,0(r16)
 100613c:	18800015 	stw	r2,0(r3)
 1006140:	80000415 	stw	zero,16(r16)
 1006144:	80000315 	stw	zero,12(r16)
 1006148:	8005883a 	mov	r2,r16
 100614c:	dfc00417 	ldw	ra,16(sp)
 1006150:	dcc00317 	ldw	r19,12(sp)
 1006154:	dc800217 	ldw	r18,8(sp)
 1006158:	dc400117 	ldw	r17,4(sp)
 100615c:	dc000017 	ldw	r16,0(sp)
 1006160:	dec00504 	addi	sp,sp,20
 1006164:	f800283a 	ret
 1006168:	10077dc0 	call	10077dc <_calloc_r>
 100616c:	1007883a 	mov	r3,r2
 1006170:	0021883a 	mov	r16,zero
 1006174:	98801315 	stw	r2,76(r19)
 1006178:	103fe41e 	bne	r2,zero,100610c <_Balloc+0x30>
 100617c:	003ff206 	br	1006148 <_Balloc+0x6c>
 1006180:	10077dc0 	call	10077dc <_calloc_r>
 1006184:	103ff026 	beq	r2,zero,1006148 <_Balloc+0x6c>
 1006188:	1021883a 	mov	r16,r2
 100618c:	14800115 	stw	r18,4(r2)
 1006190:	14400215 	stw	r17,8(r2)
 1006194:	003fea06 	br	1006140 <_Balloc+0x64>

01006198 <__d2b>:
 1006198:	defff504 	addi	sp,sp,-44
 100619c:	dcc00515 	stw	r19,20(sp)
 10061a0:	04c00044 	movi	r19,1
 10061a4:	dc000215 	stw	r16,8(sp)
 10061a8:	2821883a 	mov	r16,r5
 10061ac:	980b883a 	mov	r5,r19
 10061b0:	ddc00915 	stw	r23,36(sp)
 10061b4:	dd800815 	stw	r22,32(sp)
 10061b8:	dd400715 	stw	r21,28(sp)
 10061bc:	dd000615 	stw	r20,24(sp)
 10061c0:	dc800415 	stw	r18,16(sp)
 10061c4:	dc400315 	stw	r17,12(sp)
 10061c8:	dfc00a15 	stw	ra,40(sp)
 10061cc:	3023883a 	mov	r17,r6
 10061d0:	382d883a 	mov	r22,r7
 10061d4:	ddc00b17 	ldw	r23,44(sp)
 10061d8:	10060dc0 	call	10060dc <_Balloc>
 10061dc:	1025883a 	mov	r18,r2
 10061e0:	00a00034 	movhi	r2,32768
 10061e4:	10bfffc4 	addi	r2,r2,-1
 10061e8:	8888703a 	and	r4,r17,r2
 10061ec:	202ad53a 	srli	r21,r4,20
 10061f0:	00800434 	movhi	r2,16
 10061f4:	10bfffc4 	addi	r2,r2,-1
 10061f8:	8886703a 	and	r3,r17,r2
 10061fc:	a829003a 	cmpeq	r20,r21,zero
 1006200:	800b883a 	mov	r5,r16
 1006204:	d8c00115 	stw	r3,4(sp)
 1006208:	94000504 	addi	r16,r18,20
 100620c:	a000021e 	bne	r20,zero,1006218 <__d2b+0x80>
 1006210:	18c00434 	orhi	r3,r3,16
 1006214:	d8c00115 	stw	r3,4(sp)
 1006218:	28002726 	beq	r5,zero,10062b8 <__d2b+0x120>
 100621c:	d809883a 	mov	r4,sp
 1006220:	d9400015 	stw	r5,0(sp)
 1006224:	1005bf40 	call	1005bf4 <__lo0bits>
 1006228:	100d883a 	mov	r6,r2
 100622c:	10003526 	beq	r2,zero,1006304 <__d2b+0x16c>
 1006230:	d8c00117 	ldw	r3,4(sp)
 1006234:	00800804 	movi	r2,32
 1006238:	1185c83a 	sub	r2,r2,r6
 100623c:	d9000017 	ldw	r4,0(sp)
 1006240:	1886983a 	sll	r3,r3,r2
 1006244:	1906b03a 	or	r3,r3,r4
 1006248:	90c00515 	stw	r3,20(r18)
 100624c:	d8c00117 	ldw	r3,4(sp)
 1006250:	1986d83a 	srl	r3,r3,r6
 1006254:	d8c00115 	stw	r3,4(sp)
 1006258:	180b003a 	cmpeq	r5,r3,zero
 100625c:	00800084 	movi	r2,2
 1006260:	114bc83a 	sub	r5,r2,r5
 1006264:	80c00115 	stw	r3,4(r16)
 1006268:	91400415 	stw	r5,16(r18)
 100626c:	a0001a1e 	bne	r20,zero,10062d8 <__d2b+0x140>
 1006270:	3545883a 	add	r2,r6,r21
 1006274:	10bef344 	addi	r2,r2,-1075
 1006278:	00c00d44 	movi	r3,53
 100627c:	b0800015 	stw	r2,0(r22)
 1006280:	1987c83a 	sub	r3,r3,r6
 1006284:	b8c00015 	stw	r3,0(r23)
 1006288:	9005883a 	mov	r2,r18
 100628c:	dfc00a17 	ldw	ra,40(sp)
 1006290:	ddc00917 	ldw	r23,36(sp)
 1006294:	dd800817 	ldw	r22,32(sp)
 1006298:	dd400717 	ldw	r21,28(sp)
 100629c:	dd000617 	ldw	r20,24(sp)
 10062a0:	dcc00517 	ldw	r19,20(sp)
 10062a4:	dc800417 	ldw	r18,16(sp)
 10062a8:	dc400317 	ldw	r17,12(sp)
 10062ac:	dc000217 	ldw	r16,8(sp)
 10062b0:	dec00b04 	addi	sp,sp,44
 10062b4:	f800283a 	ret
 10062b8:	d9000104 	addi	r4,sp,4
 10062bc:	1005bf40 	call	1005bf4 <__lo0bits>
 10062c0:	11800804 	addi	r6,r2,32
 10062c4:	d8800117 	ldw	r2,4(sp)
 10062c8:	94c00415 	stw	r19,16(r18)
 10062cc:	980b883a 	mov	r5,r19
 10062d0:	90800515 	stw	r2,20(r18)
 10062d4:	a03fe626 	beq	r20,zero,1006270 <__d2b+0xd8>
 10062d8:	2945883a 	add	r2,r5,r5
 10062dc:	1085883a 	add	r2,r2,r2
 10062e0:	1405883a 	add	r2,r2,r16
 10062e4:	113fff17 	ldw	r4,-4(r2)
 10062e8:	30fef384 	addi	r3,r6,-1074
 10062ec:	2820917a 	slli	r16,r5,5
 10062f0:	b0c00015 	stw	r3,0(r22)
 10062f4:	1005b840 	call	1005b84 <__hi0bits>
 10062f8:	80a1c83a 	sub	r16,r16,r2
 10062fc:	bc000015 	stw	r16,0(r23)
 1006300:	003fe106 	br	1006288 <__d2b+0xf0>
 1006304:	d8800017 	ldw	r2,0(sp)
 1006308:	90800515 	stw	r2,20(r18)
 100630c:	d8c00117 	ldw	r3,4(sp)
 1006310:	003fd106 	br	1006258 <__d2b+0xc0>

01006314 <__mdiff>:
 1006314:	defffb04 	addi	sp,sp,-20
 1006318:	dc000015 	stw	r16,0(sp)
 100631c:	2821883a 	mov	r16,r5
 1006320:	dc800215 	stw	r18,8(sp)
 1006324:	300b883a 	mov	r5,r6
 1006328:	2025883a 	mov	r18,r4
 100632c:	8009883a 	mov	r4,r16
 1006330:	dc400115 	stw	r17,4(sp)
 1006334:	dfc00415 	stw	ra,16(sp)
 1006338:	dcc00315 	stw	r19,12(sp)
 100633c:	3023883a 	mov	r17,r6
 1006340:	1005cb80 	call	1005cb8 <__mcmp>
 1006344:	10004226 	beq	r2,zero,1006450 <__mdiff+0x13c>
 1006348:	10005016 	blt	r2,zero,100648c <__mdiff+0x178>
 100634c:	0027883a 	mov	r19,zero
 1006350:	81400117 	ldw	r5,4(r16)
 1006354:	9009883a 	mov	r4,r18
 1006358:	10060dc0 	call	10060dc <_Balloc>
 100635c:	1019883a 	mov	r12,r2
 1006360:	82800417 	ldw	r10,16(r16)
 1006364:	88800417 	ldw	r2,16(r17)
 1006368:	81800504 	addi	r6,r16,20
 100636c:	5287883a 	add	r3,r10,r10
 1006370:	1085883a 	add	r2,r2,r2
 1006374:	18c7883a 	add	r3,r3,r3
 1006378:	1085883a 	add	r2,r2,r2
 100637c:	8a000504 	addi	r8,r17,20
 1006380:	64c00315 	stw	r19,12(r12)
 1006384:	30db883a 	add	r13,r6,r3
 1006388:	4097883a 	add	r11,r8,r2
 100638c:	61c00504 	addi	r7,r12,20
 1006390:	0013883a 	mov	r9,zero
 1006394:	31000017 	ldw	r4,0(r6)
 1006398:	41400017 	ldw	r5,0(r8)
 100639c:	42000104 	addi	r8,r8,4
 10063a0:	20bfffcc 	andi	r2,r4,65535
 10063a4:	28ffffcc 	andi	r3,r5,65535
 10063a8:	10c5c83a 	sub	r2,r2,r3
 10063ac:	1245883a 	add	r2,r2,r9
 10063b0:	2008d43a 	srli	r4,r4,16
 10063b4:	280ad43a 	srli	r5,r5,16
 10063b8:	1007d43a 	srai	r3,r2,16
 10063bc:	3880000d 	sth	r2,0(r7)
 10063c0:	2149c83a 	sub	r4,r4,r5
 10063c4:	20c9883a 	add	r4,r4,r3
 10063c8:	3900008d 	sth	r4,2(r7)
 10063cc:	31800104 	addi	r6,r6,4
 10063d0:	39c00104 	addi	r7,r7,4
 10063d4:	2013d43a 	srai	r9,r4,16
 10063d8:	42ffee36 	bltu	r8,r11,1006394 <__mdiff+0x80>
 10063dc:	33400c2e 	bgeu	r6,r13,1006410 <__mdiff+0xfc>
 10063e0:	30800017 	ldw	r2,0(r6)
 10063e4:	31800104 	addi	r6,r6,4
 10063e8:	10ffffcc 	andi	r3,r2,65535
 10063ec:	1a47883a 	add	r3,r3,r9
 10063f0:	1004d43a 	srli	r2,r2,16
 10063f4:	1809d43a 	srai	r4,r3,16
 10063f8:	38c0000d 	sth	r3,0(r7)
 10063fc:	1105883a 	add	r2,r2,r4
 1006400:	3880008d 	sth	r2,2(r7)
 1006404:	1013d43a 	srai	r9,r2,16
 1006408:	39c00104 	addi	r7,r7,4
 100640c:	337ff436 	bltu	r6,r13,10063e0 <__mdiff+0xcc>
 1006410:	38bfff17 	ldw	r2,-4(r7)
 1006414:	38ffff04 	addi	r3,r7,-4
 1006418:	1000041e 	bne	r2,zero,100642c <__mdiff+0x118>
 100641c:	18ffff04 	addi	r3,r3,-4
 1006420:	18800017 	ldw	r2,0(r3)
 1006424:	52bfffc4 	addi	r10,r10,-1
 1006428:	103ffc26 	beq	r2,zero,100641c <__mdiff+0x108>
 100642c:	6005883a 	mov	r2,r12
 1006430:	62800415 	stw	r10,16(r12)
 1006434:	dfc00417 	ldw	ra,16(sp)
 1006438:	dcc00317 	ldw	r19,12(sp)
 100643c:	dc800217 	ldw	r18,8(sp)
 1006440:	dc400117 	ldw	r17,4(sp)
 1006444:	dc000017 	ldw	r16,0(sp)
 1006448:	dec00504 	addi	sp,sp,20
 100644c:	f800283a 	ret
 1006450:	9009883a 	mov	r4,r18
 1006454:	000b883a 	mov	r5,zero
 1006458:	10060dc0 	call	10060dc <_Balloc>
 100645c:	1019883a 	mov	r12,r2
 1006460:	00800044 	movi	r2,1
 1006464:	60800415 	stw	r2,16(r12)
 1006468:	6005883a 	mov	r2,r12
 100646c:	60000515 	stw	zero,20(r12)
 1006470:	dfc00417 	ldw	ra,16(sp)
 1006474:	dcc00317 	ldw	r19,12(sp)
 1006478:	dc800217 	ldw	r18,8(sp)
 100647c:	dc400117 	ldw	r17,4(sp)
 1006480:	dc000017 	ldw	r16,0(sp)
 1006484:	dec00504 	addi	sp,sp,20
 1006488:	f800283a 	ret
 100648c:	880d883a 	mov	r6,r17
 1006490:	04c00044 	movi	r19,1
 1006494:	8023883a 	mov	r17,r16
 1006498:	3021883a 	mov	r16,r6
 100649c:	003fac06 	br	1006350 <__mdiff+0x3c>

010064a0 <__lshift>:
 10064a0:	defff904 	addi	sp,sp,-28
 10064a4:	28800417 	ldw	r2,16(r5)
 10064a8:	dc000015 	stw	r16,0(sp)
 10064ac:	3021d17a 	srai	r16,r6,5
 10064b0:	28c00217 	ldw	r3,8(r5)
 10064b4:	10800044 	addi	r2,r2,1
 10064b8:	dc400115 	stw	r17,4(sp)
 10064bc:	80a3883a 	add	r17,r16,r2
 10064c0:	dd400515 	stw	r21,20(sp)
 10064c4:	dd000415 	stw	r20,16(sp)
 10064c8:	dc800215 	stw	r18,8(sp)
 10064cc:	dfc00615 	stw	ra,24(sp)
 10064d0:	2825883a 	mov	r18,r5
 10064d4:	dcc00315 	stw	r19,12(sp)
 10064d8:	3029883a 	mov	r20,r6
 10064dc:	202b883a 	mov	r21,r4
 10064e0:	29400117 	ldw	r5,4(r5)
 10064e4:	1c40030e 	bge	r3,r17,10064f4 <__lshift+0x54>
 10064e8:	18c7883a 	add	r3,r3,r3
 10064ec:	29400044 	addi	r5,r5,1
 10064f0:	1c7ffd16 	blt	r3,r17,10064e8 <__lshift+0x48>
 10064f4:	a809883a 	mov	r4,r21
 10064f8:	10060dc0 	call	10060dc <_Balloc>
 10064fc:	1027883a 	mov	r19,r2
 1006500:	11400504 	addi	r5,r2,20
 1006504:	0400090e 	bge	zero,r16,100652c <__lshift+0x8c>
 1006508:	2805883a 	mov	r2,r5
 100650c:	0007883a 	mov	r3,zero
 1006510:	18c00044 	addi	r3,r3,1
 1006514:	10000015 	stw	zero,0(r2)
 1006518:	10800104 	addi	r2,r2,4
 100651c:	80fffc1e 	bne	r16,r3,1006510 <__lshift+0x70>
 1006520:	8405883a 	add	r2,r16,r16
 1006524:	1085883a 	add	r2,r2,r2
 1006528:	288b883a 	add	r5,r5,r2
 100652c:	90800417 	ldw	r2,16(r18)
 1006530:	91000504 	addi	r4,r18,20
 1006534:	a18007cc 	andi	r6,r20,31
 1006538:	1085883a 	add	r2,r2,r2
 100653c:	1085883a 	add	r2,r2,r2
 1006540:	208f883a 	add	r7,r4,r2
 1006544:	30001e26 	beq	r6,zero,10065c0 <__lshift+0x120>
 1006548:	00800804 	movi	r2,32
 100654c:	1191c83a 	sub	r8,r2,r6
 1006550:	0007883a 	mov	r3,zero
 1006554:	20800017 	ldw	r2,0(r4)
 1006558:	1184983a 	sll	r2,r2,r6
 100655c:	1884b03a 	or	r2,r3,r2
 1006560:	28800015 	stw	r2,0(r5)
 1006564:	20c00017 	ldw	r3,0(r4)
 1006568:	21000104 	addi	r4,r4,4
 100656c:	29400104 	addi	r5,r5,4
 1006570:	1a06d83a 	srl	r3,r3,r8
 1006574:	21fff736 	bltu	r4,r7,1006554 <__lshift+0xb4>
 1006578:	28c00015 	stw	r3,0(r5)
 100657c:	18000126 	beq	r3,zero,1006584 <__lshift+0xe4>
 1006580:	8c400044 	addi	r17,r17,1
 1006584:	88bfffc4 	addi	r2,r17,-1
 1006588:	98800415 	stw	r2,16(r19)
 100658c:	a809883a 	mov	r4,r21
 1006590:	900b883a 	mov	r5,r18
 1006594:	1005b5c0 	call	1005b5c <_Bfree>
 1006598:	9805883a 	mov	r2,r19
 100659c:	dfc00617 	ldw	ra,24(sp)
 10065a0:	dd400517 	ldw	r21,20(sp)
 10065a4:	dd000417 	ldw	r20,16(sp)
 10065a8:	dcc00317 	ldw	r19,12(sp)
 10065ac:	dc800217 	ldw	r18,8(sp)
 10065b0:	dc400117 	ldw	r17,4(sp)
 10065b4:	dc000017 	ldw	r16,0(sp)
 10065b8:	dec00704 	addi	sp,sp,28
 10065bc:	f800283a 	ret
 10065c0:	20800017 	ldw	r2,0(r4)
 10065c4:	21000104 	addi	r4,r4,4
 10065c8:	28800015 	stw	r2,0(r5)
 10065cc:	29400104 	addi	r5,r5,4
 10065d0:	21ffec2e 	bgeu	r4,r7,1006584 <__lshift+0xe4>
 10065d4:	20800017 	ldw	r2,0(r4)
 10065d8:	21000104 	addi	r4,r4,4
 10065dc:	28800015 	stw	r2,0(r5)
 10065e0:	29400104 	addi	r5,r5,4
 10065e4:	21fff636 	bltu	r4,r7,10065c0 <__lshift+0x120>
 10065e8:	003fe606 	br	1006584 <__lshift+0xe4>

010065ec <__multiply>:
 10065ec:	defff904 	addi	sp,sp,-28
 10065f0:	dcc00315 	stw	r19,12(sp)
 10065f4:	dc800215 	stw	r18,8(sp)
 10065f8:	2cc00417 	ldw	r19,16(r5)
 10065fc:	34800417 	ldw	r18,16(r6)
 1006600:	dd000415 	stw	r20,16(sp)
 1006604:	dc400115 	stw	r17,4(sp)
 1006608:	dfc00615 	stw	ra,24(sp)
 100660c:	dd400515 	stw	r21,20(sp)
 1006610:	dc000015 	stw	r16,0(sp)
 1006614:	2823883a 	mov	r17,r5
 1006618:	3029883a 	mov	r20,r6
 100661c:	9c80040e 	bge	r19,r18,1006630 <__multiply+0x44>
 1006620:	9027883a 	mov	r19,r18
 1006624:	2c800417 	ldw	r18,16(r5)
 1006628:	2829883a 	mov	r20,r5
 100662c:	3023883a 	mov	r17,r6
 1006630:	88800217 	ldw	r2,8(r17)
 1006634:	9ca1883a 	add	r16,r19,r18
 1006638:	89400117 	ldw	r5,4(r17)
 100663c:	1400010e 	bge	r2,r16,1006644 <__multiply+0x58>
 1006640:	29400044 	addi	r5,r5,1
 1006644:	10060dc0 	call	10060dc <_Balloc>
 1006648:	102b883a 	mov	r21,r2
 100664c:	8405883a 	add	r2,r16,r16
 1006650:	1085883a 	add	r2,r2,r2
 1006654:	a9000504 	addi	r4,r21,20
 1006658:	209d883a 	add	r14,r4,r2
 100665c:	2380042e 	bgeu	r4,r14,1006670 <__multiply+0x84>
 1006660:	2005883a 	mov	r2,r4
 1006664:	10000015 	stw	zero,0(r2)
 1006668:	10800104 	addi	r2,r2,4
 100666c:	13bffd36 	bltu	r2,r14,1006664 <__multiply+0x78>
 1006670:	9485883a 	add	r2,r18,r18
 1006674:	9cc7883a 	add	r3,r19,r19
 1006678:	a1800504 	addi	r6,r20,20
 100667c:	1085883a 	add	r2,r2,r2
 1006680:	8b400504 	addi	r13,r17,20
 1006684:	18c7883a 	add	r3,r3,r3
 1006688:	309f883a 	add	r15,r6,r2
 100668c:	68d7883a 	add	r11,r13,r3
 1006690:	33c03b2e 	bgeu	r6,r15,1006780 <__multiply+0x194>
 1006694:	2019883a 	mov	r12,r4
 1006698:	30800017 	ldw	r2,0(r6)
 100669c:	127fffcc 	andi	r9,r2,65535
 10066a0:	48001826 	beq	r9,zero,1006704 <__multiply+0x118>
 10066a4:	6811883a 	mov	r8,r13
 10066a8:	600f883a 	mov	r7,r12
 10066ac:	0015883a 	mov	r10,zero
 10066b0:	40c00017 	ldw	r3,0(r8)
 10066b4:	39400017 	ldw	r5,0(r7)
 10066b8:	42000104 	addi	r8,r8,4
 10066bc:	193fffcc 	andi	r4,r3,65535
 10066c0:	4909383a 	mul	r4,r9,r4
 10066c4:	1806d43a 	srli	r3,r3,16
 10066c8:	28bfffcc 	andi	r2,r5,65535
 10066cc:	5085883a 	add	r2,r10,r2
 10066d0:	2089883a 	add	r4,r4,r2
 10066d4:	48c7383a 	mul	r3,r9,r3
 10066d8:	280ad43a 	srli	r5,r5,16
 10066dc:	2004d43a 	srli	r2,r4,16
 10066e0:	3900000d 	sth	r4,0(r7)
 10066e4:	1947883a 	add	r3,r3,r5
 10066e8:	10c5883a 	add	r2,r2,r3
 10066ec:	3880008d 	sth	r2,2(r7)
 10066f0:	1014d43a 	srli	r10,r2,16
 10066f4:	39c00104 	addi	r7,r7,4
 10066f8:	42ffed36 	bltu	r8,r11,10066b0 <__multiply+0xc4>
 10066fc:	3a800015 	stw	r10,0(r7)
 1006700:	30800017 	ldw	r2,0(r6)
 1006704:	1012d43a 	srli	r9,r2,16
 1006708:	48001926 	beq	r9,zero,1006770 <__multiply+0x184>
 100670c:	60800017 	ldw	r2,0(r12)
 1006710:	6811883a 	mov	r8,r13
 1006714:	600f883a 	mov	r7,r12
 1006718:	0015883a 	mov	r10,zero
 100671c:	100b883a 	mov	r5,r2
 1006720:	41000017 	ldw	r4,0(r8)
 1006724:	2806d43a 	srli	r3,r5,16
 1006728:	3880000d 	sth	r2,0(r7)
 100672c:	20bfffcc 	andi	r2,r4,65535
 1006730:	4885383a 	mul	r2,r9,r2
 1006734:	50c7883a 	add	r3,r10,r3
 1006738:	2008d43a 	srli	r4,r4,16
 100673c:	10c5883a 	add	r2,r2,r3
 1006740:	3880008d 	sth	r2,2(r7)
 1006744:	39c00104 	addi	r7,r7,4
 1006748:	39400017 	ldw	r5,0(r7)
 100674c:	4909383a 	mul	r4,r9,r4
 1006750:	1004d43a 	srli	r2,r2,16
 1006754:	28ffffcc 	andi	r3,r5,65535
 1006758:	20c9883a 	add	r4,r4,r3
 100675c:	1105883a 	add	r2,r2,r4
 1006760:	42000104 	addi	r8,r8,4
 1006764:	1014d43a 	srli	r10,r2,16
 1006768:	42ffed36 	bltu	r8,r11,1006720 <__multiply+0x134>
 100676c:	38800015 	stw	r2,0(r7)
 1006770:	31800104 	addi	r6,r6,4
 1006774:	33c0022e 	bgeu	r6,r15,1006780 <__multiply+0x194>
 1006778:	63000104 	addi	r12,r12,4
 100677c:	003fc606 	br	1006698 <__multiply+0xac>
 1006780:	0400090e 	bge	zero,r16,10067a8 <__multiply+0x1bc>
 1006784:	70bfff17 	ldw	r2,-4(r14)
 1006788:	70ffff04 	addi	r3,r14,-4
 100678c:	10000326 	beq	r2,zero,100679c <__multiply+0x1b0>
 1006790:	00000506 	br	10067a8 <__multiply+0x1bc>
 1006794:	18800017 	ldw	r2,0(r3)
 1006798:	1000031e 	bne	r2,zero,10067a8 <__multiply+0x1bc>
 100679c:	843fffc4 	addi	r16,r16,-1
 10067a0:	18ffff04 	addi	r3,r3,-4
 10067a4:	803ffb1e 	bne	r16,zero,1006794 <__multiply+0x1a8>
 10067a8:	a805883a 	mov	r2,r21
 10067ac:	ac000415 	stw	r16,16(r21)
 10067b0:	dfc00617 	ldw	ra,24(sp)
 10067b4:	dd400517 	ldw	r21,20(sp)
 10067b8:	dd000417 	ldw	r20,16(sp)
 10067bc:	dcc00317 	ldw	r19,12(sp)
 10067c0:	dc800217 	ldw	r18,8(sp)
 10067c4:	dc400117 	ldw	r17,4(sp)
 10067c8:	dc000017 	ldw	r16,0(sp)
 10067cc:	dec00704 	addi	sp,sp,28
 10067d0:	f800283a 	ret

010067d4 <__i2b>:
 10067d4:	defffd04 	addi	sp,sp,-12
 10067d8:	dc000015 	stw	r16,0(sp)
 10067dc:	04000044 	movi	r16,1
 10067e0:	dc800115 	stw	r18,4(sp)
 10067e4:	2825883a 	mov	r18,r5
 10067e8:	800b883a 	mov	r5,r16
 10067ec:	dfc00215 	stw	ra,8(sp)
 10067f0:	10060dc0 	call	10060dc <_Balloc>
 10067f4:	14000415 	stw	r16,16(r2)
 10067f8:	14800515 	stw	r18,20(r2)
 10067fc:	dfc00217 	ldw	ra,8(sp)
 1006800:	dc800117 	ldw	r18,4(sp)
 1006804:	dc000017 	ldw	r16,0(sp)
 1006808:	dec00304 	addi	sp,sp,12
 100680c:	f800283a 	ret

01006810 <__multadd>:
 1006810:	defffa04 	addi	sp,sp,-24
 1006814:	dc800215 	stw	r18,8(sp)
 1006818:	2c800417 	ldw	r18,16(r5)
 100681c:	dd000415 	stw	r20,16(sp)
 1006820:	dcc00315 	stw	r19,12(sp)
 1006824:	dc000015 	stw	r16,0(sp)
 1006828:	dfc00515 	stw	ra,20(sp)
 100682c:	3821883a 	mov	r16,r7
 1006830:	dc400115 	stw	r17,4(sp)
 1006834:	2827883a 	mov	r19,r5
 1006838:	2029883a 	mov	r20,r4
 100683c:	2a000504 	addi	r8,r5,20
 1006840:	000f883a 	mov	r7,zero
 1006844:	40800017 	ldw	r2,0(r8)
 1006848:	39c00044 	addi	r7,r7,1
 100684c:	10ffffcc 	andi	r3,r2,65535
 1006850:	1987383a 	mul	r3,r3,r6
 1006854:	1004d43a 	srli	r2,r2,16
 1006858:	1c07883a 	add	r3,r3,r16
 100685c:	180ad43a 	srli	r5,r3,16
 1006860:	1185383a 	mul	r2,r2,r6
 1006864:	18ffffcc 	andi	r3,r3,65535
 1006868:	1145883a 	add	r2,r2,r5
 100686c:	1008943a 	slli	r4,r2,16
 1006870:	1020d43a 	srli	r16,r2,16
 1006874:	20c9883a 	add	r4,r4,r3
 1006878:	41000015 	stw	r4,0(r8)
 100687c:	42000104 	addi	r8,r8,4
 1006880:	3cbff016 	blt	r7,r18,1006844 <__multadd+0x34>
 1006884:	80000826 	beq	r16,zero,10068a8 <__multadd+0x98>
 1006888:	98800217 	ldw	r2,8(r19)
 100688c:	90800f0e 	bge	r18,r2,10068cc <__multadd+0xbc>
 1006890:	9485883a 	add	r2,r18,r18
 1006894:	1085883a 	add	r2,r2,r2
 1006898:	14c5883a 	add	r2,r2,r19
 100689c:	90c00044 	addi	r3,r18,1
 10068a0:	14000515 	stw	r16,20(r2)
 10068a4:	98c00415 	stw	r3,16(r19)
 10068a8:	9805883a 	mov	r2,r19
 10068ac:	dfc00517 	ldw	ra,20(sp)
 10068b0:	dd000417 	ldw	r20,16(sp)
 10068b4:	dcc00317 	ldw	r19,12(sp)
 10068b8:	dc800217 	ldw	r18,8(sp)
 10068bc:	dc400117 	ldw	r17,4(sp)
 10068c0:	dc000017 	ldw	r16,0(sp)
 10068c4:	dec00604 	addi	sp,sp,24
 10068c8:	f800283a 	ret
 10068cc:	99400117 	ldw	r5,4(r19)
 10068d0:	a009883a 	mov	r4,r20
 10068d4:	29400044 	addi	r5,r5,1
 10068d8:	10060dc0 	call	10060dc <_Balloc>
 10068dc:	99800417 	ldw	r6,16(r19)
 10068e0:	99400304 	addi	r5,r19,12
 10068e4:	11000304 	addi	r4,r2,12
 10068e8:	318d883a 	add	r6,r6,r6
 10068ec:	318d883a 	add	r6,r6,r6
 10068f0:	31800204 	addi	r6,r6,8
 10068f4:	1023883a 	mov	r17,r2
 10068f8:	10059440 	call	1005944 <memcpy>
 10068fc:	980b883a 	mov	r5,r19
 1006900:	a009883a 	mov	r4,r20
 1006904:	1005b5c0 	call	1005b5c <_Bfree>
 1006908:	8827883a 	mov	r19,r17
 100690c:	003fe006 	br	1006890 <__multadd+0x80>

01006910 <__pow5mult>:
 1006910:	defffa04 	addi	sp,sp,-24
 1006914:	308000cc 	andi	r2,r6,3
 1006918:	dd000415 	stw	r20,16(sp)
 100691c:	dcc00315 	stw	r19,12(sp)
 1006920:	dc000015 	stw	r16,0(sp)
 1006924:	dfc00515 	stw	ra,20(sp)
 1006928:	dc800215 	stw	r18,8(sp)
 100692c:	dc400115 	stw	r17,4(sp)
 1006930:	3021883a 	mov	r16,r6
 1006934:	2027883a 	mov	r19,r4
 1006938:	2829883a 	mov	r20,r5
 100693c:	10002b1e 	bne	r2,zero,10069ec <__pow5mult+0xdc>
 1006940:	8025d0ba 	srai	r18,r16,2
 1006944:	90001b26 	beq	r18,zero,10069b4 <__pow5mult+0xa4>
 1006948:	9c001217 	ldw	r16,72(r19)
 100694c:	8000081e 	bne	r16,zero,1006970 <__pow5mult+0x60>
 1006950:	00003006 	br	1006a14 <__pow5mult+0x104>
 1006954:	800b883a 	mov	r5,r16
 1006958:	800d883a 	mov	r6,r16
 100695c:	9809883a 	mov	r4,r19
 1006960:	90001426 	beq	r18,zero,10069b4 <__pow5mult+0xa4>
 1006964:	80800017 	ldw	r2,0(r16)
 1006968:	10001b26 	beq	r2,zero,10069d8 <__pow5mult+0xc8>
 100696c:	1021883a 	mov	r16,r2
 1006970:	9080004c 	andi	r2,r18,1
 1006974:	1005003a 	cmpeq	r2,r2,zero
 1006978:	9025d07a 	srai	r18,r18,1
 100697c:	800d883a 	mov	r6,r16
 1006980:	9809883a 	mov	r4,r19
 1006984:	a00b883a 	mov	r5,r20
 1006988:	103ff21e 	bne	r2,zero,1006954 <__pow5mult+0x44>
 100698c:	10065ec0 	call	10065ec <__multiply>
 1006990:	a00b883a 	mov	r5,r20
 1006994:	9809883a 	mov	r4,r19
 1006998:	1023883a 	mov	r17,r2
 100699c:	1005b5c0 	call	1005b5c <_Bfree>
 10069a0:	8829883a 	mov	r20,r17
 10069a4:	800b883a 	mov	r5,r16
 10069a8:	800d883a 	mov	r6,r16
 10069ac:	9809883a 	mov	r4,r19
 10069b0:	903fec1e 	bne	r18,zero,1006964 <__pow5mult+0x54>
 10069b4:	a005883a 	mov	r2,r20
 10069b8:	dfc00517 	ldw	ra,20(sp)
 10069bc:	dd000417 	ldw	r20,16(sp)
 10069c0:	dcc00317 	ldw	r19,12(sp)
 10069c4:	dc800217 	ldw	r18,8(sp)
 10069c8:	dc400117 	ldw	r17,4(sp)
 10069cc:	dc000017 	ldw	r16,0(sp)
 10069d0:	dec00604 	addi	sp,sp,24
 10069d4:	f800283a 	ret
 10069d8:	10065ec0 	call	10065ec <__multiply>
 10069dc:	80800015 	stw	r2,0(r16)
 10069e0:	1021883a 	mov	r16,r2
 10069e4:	10000015 	stw	zero,0(r2)
 10069e8:	003fe106 	br	1006970 <__pow5mult+0x60>
 10069ec:	1085883a 	add	r2,r2,r2
 10069f0:	00c04074 	movhi	r3,257
 10069f4:	18ccf804 	addi	r3,r3,13280
 10069f8:	1085883a 	add	r2,r2,r2
 10069fc:	10c5883a 	add	r2,r2,r3
 1006a00:	11bfff17 	ldw	r6,-4(r2)
 1006a04:	000f883a 	mov	r7,zero
 1006a08:	10068100 	call	1006810 <__multadd>
 1006a0c:	1029883a 	mov	r20,r2
 1006a10:	003fcb06 	br	1006940 <__pow5mult+0x30>
 1006a14:	9809883a 	mov	r4,r19
 1006a18:	01409c44 	movi	r5,625
 1006a1c:	10067d40 	call	10067d4 <__i2b>
 1006a20:	98801215 	stw	r2,72(r19)
 1006a24:	1021883a 	mov	r16,r2
 1006a28:	10000015 	stw	zero,0(r2)
 1006a2c:	003fd006 	br	1006970 <__pow5mult+0x60>

01006a30 <__s2b>:
 1006a30:	defff904 	addi	sp,sp,-28
 1006a34:	dcc00315 	stw	r19,12(sp)
 1006a38:	dc800215 	stw	r18,8(sp)
 1006a3c:	2827883a 	mov	r19,r5
 1006a40:	2025883a 	mov	r18,r4
 1006a44:	01400244 	movi	r5,9
 1006a48:	39000204 	addi	r4,r7,8
 1006a4c:	dd000415 	stw	r20,16(sp)
 1006a50:	dc400115 	stw	r17,4(sp)
 1006a54:	dfc00615 	stw	ra,24(sp)
 1006a58:	dd400515 	stw	r21,20(sp)
 1006a5c:	dc000015 	stw	r16,0(sp)
 1006a60:	3829883a 	mov	r20,r7
 1006a64:	3023883a 	mov	r17,r6
 1006a68:	100992c0 	call	100992c <__divsi3>
 1006a6c:	00c00044 	movi	r3,1
 1006a70:	1880350e 	bge	r3,r2,1006b48 <__s2b+0x118>
 1006a74:	000b883a 	mov	r5,zero
 1006a78:	18c7883a 	add	r3,r3,r3
 1006a7c:	29400044 	addi	r5,r5,1
 1006a80:	18bffd16 	blt	r3,r2,1006a78 <__s2b+0x48>
 1006a84:	9009883a 	mov	r4,r18
 1006a88:	10060dc0 	call	10060dc <_Balloc>
 1006a8c:	1011883a 	mov	r8,r2
 1006a90:	d8800717 	ldw	r2,28(sp)
 1006a94:	00c00044 	movi	r3,1
 1006a98:	01800244 	movi	r6,9
 1006a9c:	40800515 	stw	r2,20(r8)
 1006aa0:	40c00415 	stw	r3,16(r8)
 1006aa4:	3440260e 	bge	r6,r17,1006b40 <__s2b+0x110>
 1006aa8:	3021883a 	mov	r16,r6
 1006aac:	99ab883a 	add	r21,r19,r6
 1006ab0:	9c05883a 	add	r2,r19,r16
 1006ab4:	11c00007 	ldb	r7,0(r2)
 1006ab8:	400b883a 	mov	r5,r8
 1006abc:	9009883a 	mov	r4,r18
 1006ac0:	39fff404 	addi	r7,r7,-48
 1006ac4:	01800284 	movi	r6,10
 1006ac8:	10068100 	call	1006810 <__multadd>
 1006acc:	84000044 	addi	r16,r16,1
 1006ad0:	1011883a 	mov	r8,r2
 1006ad4:	8c3ff61e 	bne	r17,r16,1006ab0 <__s2b+0x80>
 1006ad8:	ac45883a 	add	r2,r21,r17
 1006adc:	117ffe04 	addi	r5,r2,-8
 1006ae0:	880d883a 	mov	r6,r17
 1006ae4:	35000c0e 	bge	r6,r20,1006b18 <__s2b+0xe8>
 1006ae8:	a185c83a 	sub	r2,r20,r6
 1006aec:	2821883a 	mov	r16,r5
 1006af0:	28a3883a 	add	r17,r5,r2
 1006af4:	81c00007 	ldb	r7,0(r16)
 1006af8:	400b883a 	mov	r5,r8
 1006afc:	9009883a 	mov	r4,r18
 1006b00:	39fff404 	addi	r7,r7,-48
 1006b04:	01800284 	movi	r6,10
 1006b08:	10068100 	call	1006810 <__multadd>
 1006b0c:	84000044 	addi	r16,r16,1
 1006b10:	1011883a 	mov	r8,r2
 1006b14:	847ff71e 	bne	r16,r17,1006af4 <__s2b+0xc4>
 1006b18:	4005883a 	mov	r2,r8
 1006b1c:	dfc00617 	ldw	ra,24(sp)
 1006b20:	dd400517 	ldw	r21,20(sp)
 1006b24:	dd000417 	ldw	r20,16(sp)
 1006b28:	dcc00317 	ldw	r19,12(sp)
 1006b2c:	dc800217 	ldw	r18,8(sp)
 1006b30:	dc400117 	ldw	r17,4(sp)
 1006b34:	dc000017 	ldw	r16,0(sp)
 1006b38:	dec00704 	addi	sp,sp,28
 1006b3c:	f800283a 	ret
 1006b40:	99400284 	addi	r5,r19,10
 1006b44:	003fe706 	br	1006ae4 <__s2b+0xb4>
 1006b48:	000b883a 	mov	r5,zero
 1006b4c:	003fcd06 	br	1006a84 <__s2b+0x54>

01006b50 <putc>:
 1006b50:	defffc04 	addi	sp,sp,-16
 1006b54:	dc800215 	stw	r18,8(sp)
 1006b58:	04804074 	movhi	r18,257
 1006b5c:	9494ba04 	addi	r18,r18,21224
 1006b60:	90c00017 	ldw	r3,0(r18)
 1006b64:	dc400115 	stw	r17,4(sp)
 1006b68:	dc000015 	stw	r16,0(sp)
 1006b6c:	dfc00315 	stw	ra,12(sp)
 1006b70:	2023883a 	mov	r17,r4
 1006b74:	2821883a 	mov	r16,r5
 1006b78:	18000226 	beq	r3,zero,1006b84 <putc+0x34>
 1006b7c:	18800e17 	ldw	r2,56(r3)
 1006b80:	10001126 	beq	r2,zero,1006bc8 <putc+0x78>
 1006b84:	80800217 	ldw	r2,8(r16)
 1006b88:	10ffffc4 	addi	r3,r2,-1
 1006b8c:	80c00215 	stw	r3,8(r16)
 1006b90:	18001316 	blt	r3,zero,1006be0 <putc+0x90>
 1006b94:	80800017 	ldw	r2,0(r16)
 1006b98:	14400005 	stb	r17,0(r2)
 1006b9c:	80c00017 	ldw	r3,0(r16)
 1006ba0:	18800044 	addi	r2,r3,1
 1006ba4:	18c00003 	ldbu	r3,0(r3)
 1006ba8:	80800015 	stw	r2,0(r16)
 1006bac:	1805883a 	mov	r2,r3
 1006bb0:	dfc00317 	ldw	ra,12(sp)
 1006bb4:	dc800217 	ldw	r18,8(sp)
 1006bb8:	dc400117 	ldw	r17,4(sp)
 1006bbc:	dc000017 	ldw	r16,0(sp)
 1006bc0:	dec00404 	addi	sp,sp,16
 1006bc4:	f800283a 	ret
 1006bc8:	1809883a 	mov	r4,r3
 1006bcc:	10042140 	call	1004214 <__sinit>
 1006bd0:	80800217 	ldw	r2,8(r16)
 1006bd4:	10ffffc4 	addi	r3,r2,-1
 1006bd8:	80c00215 	stw	r3,8(r16)
 1006bdc:	183fed0e 	bge	r3,zero,1006b94 <putc+0x44>
 1006be0:	80800617 	ldw	r2,24(r16)
 1006be4:	18800f16 	blt	r3,r2,1006c24 <putc+0xd4>
 1006be8:	80800017 	ldw	r2,0(r16)
 1006bec:	14400005 	stb	r17,0(r2)
 1006bf0:	81000017 	ldw	r4,0(r16)
 1006bf4:	00800284 	movi	r2,10
 1006bf8:	20c00003 	ldbu	r3,0(r4)
 1006bfc:	18801226 	beq	r3,r2,1006c48 <putc+0xf8>
 1006c00:	20800044 	addi	r2,r4,1
 1006c04:	80800015 	stw	r2,0(r16)
 1006c08:	1805883a 	mov	r2,r3
 1006c0c:	dfc00317 	ldw	ra,12(sp)
 1006c10:	dc800217 	ldw	r18,8(sp)
 1006c14:	dc400117 	ldw	r17,4(sp)
 1006c18:	dc000017 	ldw	r16,0(sp)
 1006c1c:	dec00404 	addi	sp,sp,16
 1006c20:	f800283a 	ret
 1006c24:	91000017 	ldw	r4,0(r18)
 1006c28:	880b883a 	mov	r5,r17
 1006c2c:	800d883a 	mov	r6,r16
 1006c30:	dfc00317 	ldw	ra,12(sp)
 1006c34:	dc800217 	ldw	r18,8(sp)
 1006c38:	dc400117 	ldw	r17,4(sp)
 1006c3c:	dc000017 	ldw	r16,0(sp)
 1006c40:	dec00404 	addi	sp,sp,16
 1006c44:	10076181 	jmpi	1007618 <__swbuf_r>
 1006c48:	91000017 	ldw	r4,0(r18)
 1006c4c:	180b883a 	mov	r5,r3
 1006c50:	003ff606 	br	1006c2c <putc+0xdc>

01006c54 <_putc_r>:
 1006c54:	defffc04 	addi	sp,sp,-16
 1006c58:	dc400215 	stw	r17,8(sp)
 1006c5c:	dc000115 	stw	r16,4(sp)
 1006c60:	dfc00315 	stw	ra,12(sp)
 1006c64:	2021883a 	mov	r16,r4
 1006c68:	2823883a 	mov	r17,r5
 1006c6c:	20000226 	beq	r4,zero,1006c78 <_putc_r+0x24>
 1006c70:	20800e17 	ldw	r2,56(r4)
 1006c74:	10001026 	beq	r2,zero,1006cb8 <_putc_r+0x64>
 1006c78:	30800217 	ldw	r2,8(r6)
 1006c7c:	10ffffc4 	addi	r3,r2,-1
 1006c80:	30c00215 	stw	r3,8(r6)
 1006c84:	18001316 	blt	r3,zero,1006cd4 <_putc_r+0x80>
 1006c88:	30800017 	ldw	r2,0(r6)
 1006c8c:	14400005 	stb	r17,0(r2)
 1006c90:	30c00017 	ldw	r3,0(r6)
 1006c94:	18800044 	addi	r2,r3,1
 1006c98:	18c00003 	ldbu	r3,0(r3)
 1006c9c:	30800015 	stw	r2,0(r6)
 1006ca0:	1805883a 	mov	r2,r3
 1006ca4:	dfc00317 	ldw	ra,12(sp)
 1006ca8:	dc400217 	ldw	r17,8(sp)
 1006cac:	dc000117 	ldw	r16,4(sp)
 1006cb0:	dec00404 	addi	sp,sp,16
 1006cb4:	f800283a 	ret
 1006cb8:	d9800015 	stw	r6,0(sp)
 1006cbc:	10042140 	call	1004214 <__sinit>
 1006cc0:	d9800017 	ldw	r6,0(sp)
 1006cc4:	30800217 	ldw	r2,8(r6)
 1006cc8:	10ffffc4 	addi	r3,r2,-1
 1006ccc:	30c00215 	stw	r3,8(r6)
 1006cd0:	183fed0e 	bge	r3,zero,1006c88 <_putc_r+0x34>
 1006cd4:	30800617 	ldw	r2,24(r6)
 1006cd8:	18800e16 	blt	r3,r2,1006d14 <_putc_r+0xc0>
 1006cdc:	30800017 	ldw	r2,0(r6)
 1006ce0:	14400005 	stb	r17,0(r2)
 1006ce4:	31000017 	ldw	r4,0(r6)
 1006ce8:	00800284 	movi	r2,10
 1006cec:	20c00003 	ldbu	r3,0(r4)
 1006cf0:	18800f26 	beq	r3,r2,1006d30 <_putc_r+0xdc>
 1006cf4:	20800044 	addi	r2,r4,1
 1006cf8:	30800015 	stw	r2,0(r6)
 1006cfc:	1805883a 	mov	r2,r3
 1006d00:	dfc00317 	ldw	ra,12(sp)
 1006d04:	dc400217 	ldw	r17,8(sp)
 1006d08:	dc000117 	ldw	r16,4(sp)
 1006d0c:	dec00404 	addi	sp,sp,16
 1006d10:	f800283a 	ret
 1006d14:	8009883a 	mov	r4,r16
 1006d18:	880b883a 	mov	r5,r17
 1006d1c:	dfc00317 	ldw	ra,12(sp)
 1006d20:	dc400217 	ldw	r17,8(sp)
 1006d24:	dc000117 	ldw	r16,4(sp)
 1006d28:	dec00404 	addi	sp,sp,16
 1006d2c:	10076181 	jmpi	1007618 <__swbuf_r>
 1006d30:	8009883a 	mov	r4,r16
 1006d34:	180b883a 	mov	r5,r3
 1006d38:	003ff806 	br	1006d1c <_putc_r+0xc8>

01006d3c <_realloc_r>:
 1006d3c:	defff404 	addi	sp,sp,-48
 1006d40:	dd800815 	stw	r22,32(sp)
 1006d44:	dc800415 	stw	r18,16(sp)
 1006d48:	dc400315 	stw	r17,12(sp)
 1006d4c:	dfc00b15 	stw	ra,44(sp)
 1006d50:	df000a15 	stw	fp,40(sp)
 1006d54:	ddc00915 	stw	r23,36(sp)
 1006d58:	dd400715 	stw	r21,28(sp)
 1006d5c:	dd000615 	stw	r20,24(sp)
 1006d60:	dcc00515 	stw	r19,20(sp)
 1006d64:	dc000215 	stw	r16,8(sp)
 1006d68:	2825883a 	mov	r18,r5
 1006d6c:	3023883a 	mov	r17,r6
 1006d70:	202d883a 	mov	r22,r4
 1006d74:	2800c926 	beq	r5,zero,100709c <_realloc_r+0x360>
 1006d78:	100a6ac0 	call	100a6ac <__malloc_lock>
 1006d7c:	943ffe04 	addi	r16,r18,-8
 1006d80:	88c002c4 	addi	r3,r17,11
 1006d84:	00800584 	movi	r2,22
 1006d88:	82000117 	ldw	r8,4(r16)
 1006d8c:	10c01b2e 	bgeu	r2,r3,1006dfc <_realloc_r+0xc0>
 1006d90:	00bffe04 	movi	r2,-8
 1006d94:	188e703a 	and	r7,r3,r2
 1006d98:	3839883a 	mov	fp,r7
 1006d9c:	38001a16 	blt	r7,zero,1006e08 <_realloc_r+0xcc>
 1006da0:	e4401936 	bltu	fp,r17,1006e08 <_realloc_r+0xcc>
 1006da4:	013fff04 	movi	r4,-4
 1006da8:	4126703a 	and	r19,r8,r4
 1006dac:	99c02616 	blt	r19,r7,1006e48 <_realloc_r+0x10c>
 1006db0:	802b883a 	mov	r21,r16
 1006db4:	9829883a 	mov	r20,r19
 1006db8:	84000204 	addi	r16,r16,8
 1006dbc:	a80f883a 	mov	r7,r21
 1006dc0:	a70dc83a 	sub	r6,r20,fp
 1006dc4:	008003c4 	movi	r2,15
 1006dc8:	1180c136 	bltu	r2,r6,10070d0 <_realloc_r+0x394>
 1006dcc:	38800117 	ldw	r2,4(r7)
 1006dd0:	a549883a 	add	r4,r20,r21
 1006dd4:	1080004c 	andi	r2,r2,1
 1006dd8:	a084b03a 	or	r2,r20,r2
 1006ddc:	38800115 	stw	r2,4(r7)
 1006de0:	20c00117 	ldw	r3,4(r4)
 1006de4:	18c00054 	ori	r3,r3,1
 1006de8:	20c00115 	stw	r3,4(r4)
 1006dec:	b009883a 	mov	r4,r22
 1006df0:	100a6cc0 	call	100a6cc <__malloc_unlock>
 1006df4:	8023883a 	mov	r17,r16
 1006df8:	00000606 	br	1006e14 <_realloc_r+0xd8>
 1006dfc:	01c00404 	movi	r7,16
 1006e00:	3839883a 	mov	fp,r7
 1006e04:	e47fe72e 	bgeu	fp,r17,1006da4 <_realloc_r+0x68>
 1006e08:	00800304 	movi	r2,12
 1006e0c:	0023883a 	mov	r17,zero
 1006e10:	b0800015 	stw	r2,0(r22)
 1006e14:	8805883a 	mov	r2,r17
 1006e18:	dfc00b17 	ldw	ra,44(sp)
 1006e1c:	df000a17 	ldw	fp,40(sp)
 1006e20:	ddc00917 	ldw	r23,36(sp)
 1006e24:	dd800817 	ldw	r22,32(sp)
 1006e28:	dd400717 	ldw	r21,28(sp)
 1006e2c:	dd000617 	ldw	r20,24(sp)
 1006e30:	dcc00517 	ldw	r19,20(sp)
 1006e34:	dc800417 	ldw	r18,16(sp)
 1006e38:	dc400317 	ldw	r17,12(sp)
 1006e3c:	dc000217 	ldw	r16,8(sp)
 1006e40:	dec00c04 	addi	sp,sp,48
 1006e44:	f800283a 	ret
 1006e48:	00804074 	movhi	r2,257
 1006e4c:	108f1504 	addi	r2,r2,15444
 1006e50:	12400217 	ldw	r9,8(r2)
 1006e54:	84cd883a 	add	r6,r16,r19
 1006e58:	802b883a 	mov	r21,r16
 1006e5c:	3240b926 	beq	r6,r9,1007144 <_realloc_r+0x408>
 1006e60:	31400117 	ldw	r5,4(r6)
 1006e64:	00bfff84 	movi	r2,-2
 1006e68:	2884703a 	and	r2,r5,r2
 1006e6c:	1185883a 	add	r2,r2,r6
 1006e70:	10c00117 	ldw	r3,4(r2)
 1006e74:	18c0004c 	andi	r3,r3,1
 1006e78:	1807003a 	cmpeq	r3,r3,zero
 1006e7c:	1800a326 	beq	r3,zero,100710c <_realloc_r+0x3d0>
 1006e80:	2908703a 	and	r4,r5,r4
 1006e84:	9929883a 	add	r20,r19,r4
 1006e88:	a1c0a30e 	bge	r20,r7,1007118 <_realloc_r+0x3dc>
 1006e8c:	4080004c 	andi	r2,r8,1
 1006e90:	1000551e 	bne	r2,zero,1006fe8 <_realloc_r+0x2ac>
 1006e94:	80800017 	ldw	r2,0(r16)
 1006e98:	80afc83a 	sub	r23,r16,r2
 1006e9c:	b8c00117 	ldw	r3,4(r23)
 1006ea0:	00bfff04 	movi	r2,-4
 1006ea4:	1884703a 	and	r2,r3,r2
 1006ea8:	30002e26 	beq	r6,zero,1006f64 <_realloc_r+0x228>
 1006eac:	3240b926 	beq	r6,r9,1007194 <_realloc_r+0x458>
 1006eb0:	98a9883a 	add	r20,r19,r2
 1006eb4:	2509883a 	add	r4,r4,r20
 1006eb8:	d9000015 	stw	r4,0(sp)
 1006ebc:	21c02a16 	blt	r4,r7,1006f68 <_realloc_r+0x22c>
 1006ec0:	30800317 	ldw	r2,12(r6)
 1006ec4:	30c00217 	ldw	r3,8(r6)
 1006ec8:	01400904 	movi	r5,36
 1006ecc:	99bfff04 	addi	r6,r19,-4
 1006ed0:	18800315 	stw	r2,12(r3)
 1006ed4:	10c00215 	stw	r3,8(r2)
 1006ed8:	b9000317 	ldw	r4,12(r23)
 1006edc:	b8800217 	ldw	r2,8(r23)
 1006ee0:	b82b883a 	mov	r21,r23
 1006ee4:	bc000204 	addi	r16,r23,8
 1006ee8:	20800215 	stw	r2,8(r4)
 1006eec:	11000315 	stw	r4,12(r2)
 1006ef0:	2980e436 	bltu	r5,r6,1007284 <_realloc_r+0x548>
 1006ef4:	008004c4 	movi	r2,19
 1006ef8:	9009883a 	mov	r4,r18
 1006efc:	8011883a 	mov	r8,r16
 1006f00:	11800f2e 	bgeu	r2,r6,1006f40 <_realloc_r+0x204>
 1006f04:	90800017 	ldw	r2,0(r18)
 1006f08:	ba000404 	addi	r8,r23,16
 1006f0c:	91000204 	addi	r4,r18,8
 1006f10:	b8800215 	stw	r2,8(r23)
 1006f14:	90c00117 	ldw	r3,4(r18)
 1006f18:	008006c4 	movi	r2,27
 1006f1c:	b8c00315 	stw	r3,12(r23)
 1006f20:	1180072e 	bgeu	r2,r6,1006f40 <_realloc_r+0x204>
 1006f24:	90c00217 	ldw	r3,8(r18)
 1006f28:	ba000604 	addi	r8,r23,24
 1006f2c:	91000404 	addi	r4,r18,16
 1006f30:	b8c00415 	stw	r3,16(r23)
 1006f34:	90800317 	ldw	r2,12(r18)
 1006f38:	b8800515 	stw	r2,20(r23)
 1006f3c:	3140e726 	beq	r6,r5,10072dc <_realloc_r+0x5a0>
 1006f40:	20800017 	ldw	r2,0(r4)
 1006f44:	dd000017 	ldw	r20,0(sp)
 1006f48:	b80f883a 	mov	r7,r23
 1006f4c:	40800015 	stw	r2,0(r8)
 1006f50:	20c00117 	ldw	r3,4(r4)
 1006f54:	40c00115 	stw	r3,4(r8)
 1006f58:	20800217 	ldw	r2,8(r4)
 1006f5c:	40800215 	stw	r2,8(r8)
 1006f60:	003f9706 	br	1006dc0 <_realloc_r+0x84>
 1006f64:	98a9883a 	add	r20,r19,r2
 1006f68:	a1c01f16 	blt	r20,r7,1006fe8 <_realloc_r+0x2ac>
 1006f6c:	b8c00317 	ldw	r3,12(r23)
 1006f70:	b8800217 	ldw	r2,8(r23)
 1006f74:	99bfff04 	addi	r6,r19,-4
 1006f78:	01400904 	movi	r5,36
 1006f7c:	b82b883a 	mov	r21,r23
 1006f80:	18800215 	stw	r2,8(r3)
 1006f84:	10c00315 	stw	r3,12(r2)
 1006f88:	bc000204 	addi	r16,r23,8
 1006f8c:	2980c336 	bltu	r5,r6,100729c <_realloc_r+0x560>
 1006f90:	008004c4 	movi	r2,19
 1006f94:	9009883a 	mov	r4,r18
 1006f98:	8011883a 	mov	r8,r16
 1006f9c:	11800f2e 	bgeu	r2,r6,1006fdc <_realloc_r+0x2a0>
 1006fa0:	90800017 	ldw	r2,0(r18)
 1006fa4:	ba000404 	addi	r8,r23,16
 1006fa8:	91000204 	addi	r4,r18,8
 1006fac:	b8800215 	stw	r2,8(r23)
 1006fb0:	90c00117 	ldw	r3,4(r18)
 1006fb4:	008006c4 	movi	r2,27
 1006fb8:	b8c00315 	stw	r3,12(r23)
 1006fbc:	1180072e 	bgeu	r2,r6,1006fdc <_realloc_r+0x2a0>
 1006fc0:	90c00217 	ldw	r3,8(r18)
 1006fc4:	ba000604 	addi	r8,r23,24
 1006fc8:	91000404 	addi	r4,r18,16
 1006fcc:	b8c00415 	stw	r3,16(r23)
 1006fd0:	90800317 	ldw	r2,12(r18)
 1006fd4:	b8800515 	stw	r2,20(r23)
 1006fd8:	3140c726 	beq	r6,r5,10072f8 <_realloc_r+0x5bc>
 1006fdc:	20800017 	ldw	r2,0(r4)
 1006fe0:	b80f883a 	mov	r7,r23
 1006fe4:	003fd906 	br	1006f4c <_realloc_r+0x210>
 1006fe8:	880b883a 	mov	r5,r17
 1006fec:	b009883a 	mov	r4,r22
 1006ff0:	10051200 	call	1005120 <_malloc_r>
 1006ff4:	1023883a 	mov	r17,r2
 1006ff8:	10002526 	beq	r2,zero,1007090 <_realloc_r+0x354>
 1006ffc:	80800117 	ldw	r2,4(r16)
 1007000:	00ffff84 	movi	r3,-2
 1007004:	893ffe04 	addi	r4,r17,-8
 1007008:	10c4703a 	and	r2,r2,r3
 100700c:	8085883a 	add	r2,r16,r2
 1007010:	20809526 	beq	r4,r2,1007268 <_realloc_r+0x52c>
 1007014:	99bfff04 	addi	r6,r19,-4
 1007018:	01c00904 	movi	r7,36
 100701c:	39804536 	bltu	r7,r6,1007134 <_realloc_r+0x3f8>
 1007020:	008004c4 	movi	r2,19
 1007024:	9009883a 	mov	r4,r18
 1007028:	880b883a 	mov	r5,r17
 100702c:	11800f2e 	bgeu	r2,r6,100706c <_realloc_r+0x330>
 1007030:	90800017 	ldw	r2,0(r18)
 1007034:	89400204 	addi	r5,r17,8
 1007038:	91000204 	addi	r4,r18,8
 100703c:	88800015 	stw	r2,0(r17)
 1007040:	90c00117 	ldw	r3,4(r18)
 1007044:	008006c4 	movi	r2,27
 1007048:	88c00115 	stw	r3,4(r17)
 100704c:	1180072e 	bgeu	r2,r6,100706c <_realloc_r+0x330>
 1007050:	90c00217 	ldw	r3,8(r18)
 1007054:	89400404 	addi	r5,r17,16
 1007058:	91000404 	addi	r4,r18,16
 100705c:	88c00215 	stw	r3,8(r17)
 1007060:	90800317 	ldw	r2,12(r18)
 1007064:	88800315 	stw	r2,12(r17)
 1007068:	31c09126 	beq	r6,r7,10072b0 <_realloc_r+0x574>
 100706c:	20800017 	ldw	r2,0(r4)
 1007070:	28800015 	stw	r2,0(r5)
 1007074:	20c00117 	ldw	r3,4(r4)
 1007078:	28c00115 	stw	r3,4(r5)
 100707c:	20800217 	ldw	r2,8(r4)
 1007080:	28800215 	stw	r2,8(r5)
 1007084:	900b883a 	mov	r5,r18
 1007088:	b009883a 	mov	r4,r22
 100708c:	10045980 	call	1004598 <_free_r>
 1007090:	b009883a 	mov	r4,r22
 1007094:	100a6cc0 	call	100a6cc <__malloc_unlock>
 1007098:	003f5e06 	br	1006e14 <_realloc_r+0xd8>
 100709c:	300b883a 	mov	r5,r6
 10070a0:	dfc00b17 	ldw	ra,44(sp)
 10070a4:	df000a17 	ldw	fp,40(sp)
 10070a8:	ddc00917 	ldw	r23,36(sp)
 10070ac:	dd800817 	ldw	r22,32(sp)
 10070b0:	dd400717 	ldw	r21,28(sp)
 10070b4:	dd000617 	ldw	r20,24(sp)
 10070b8:	dcc00517 	ldw	r19,20(sp)
 10070bc:	dc800417 	ldw	r18,16(sp)
 10070c0:	dc400317 	ldw	r17,12(sp)
 10070c4:	dc000217 	ldw	r16,8(sp)
 10070c8:	dec00c04 	addi	sp,sp,48
 10070cc:	10051201 	jmpi	1005120 <_malloc_r>
 10070d0:	38800117 	ldw	r2,4(r7)
 10070d4:	e54b883a 	add	r5,fp,r21
 10070d8:	31000054 	ori	r4,r6,1
 10070dc:	1080004c 	andi	r2,r2,1
 10070e0:	1704b03a 	or	r2,r2,fp
 10070e4:	38800115 	stw	r2,4(r7)
 10070e8:	29000115 	stw	r4,4(r5)
 10070ec:	2987883a 	add	r3,r5,r6
 10070f0:	18800117 	ldw	r2,4(r3)
 10070f4:	29400204 	addi	r5,r5,8
 10070f8:	b009883a 	mov	r4,r22
 10070fc:	10800054 	ori	r2,r2,1
 1007100:	18800115 	stw	r2,4(r3)
 1007104:	10045980 	call	1004598 <_free_r>
 1007108:	003f3806 	br	1006dec <_realloc_r+0xb0>
 100710c:	000d883a 	mov	r6,zero
 1007110:	0009883a 	mov	r4,zero
 1007114:	003f5d06 	br	1006e8c <_realloc_r+0x150>
 1007118:	30c00217 	ldw	r3,8(r6)
 100711c:	30800317 	ldw	r2,12(r6)
 1007120:	800f883a 	mov	r7,r16
 1007124:	84000204 	addi	r16,r16,8
 1007128:	10c00215 	stw	r3,8(r2)
 100712c:	18800315 	stw	r2,12(r3)
 1007130:	003f2306 	br	1006dc0 <_realloc_r+0x84>
 1007134:	8809883a 	mov	r4,r17
 1007138:	900b883a 	mov	r5,r18
 100713c:	10059e40 	call	10059e4 <memmove>
 1007140:	003fd006 	br	1007084 <_realloc_r+0x348>
 1007144:	30800117 	ldw	r2,4(r6)
 1007148:	e0c00404 	addi	r3,fp,16
 100714c:	1108703a 	and	r4,r2,r4
 1007150:	9905883a 	add	r2,r19,r4
 1007154:	10ff4d16 	blt	r2,r3,1006e8c <_realloc_r+0x150>
 1007158:	1705c83a 	sub	r2,r2,fp
 100715c:	870b883a 	add	r5,r16,fp
 1007160:	10800054 	ori	r2,r2,1
 1007164:	28800115 	stw	r2,4(r5)
 1007168:	80c00117 	ldw	r3,4(r16)
 100716c:	00804074 	movhi	r2,257
 1007170:	108f1504 	addi	r2,r2,15444
 1007174:	b009883a 	mov	r4,r22
 1007178:	18c0004c 	andi	r3,r3,1
 100717c:	e0c6b03a 	or	r3,fp,r3
 1007180:	11400215 	stw	r5,8(r2)
 1007184:	80c00115 	stw	r3,4(r16)
 1007188:	100a6cc0 	call	100a6cc <__malloc_unlock>
 100718c:	84400204 	addi	r17,r16,8
 1007190:	003f2006 	br	1006e14 <_realloc_r+0xd8>
 1007194:	98a9883a 	add	r20,r19,r2
 1007198:	2509883a 	add	r4,r4,r20
 100719c:	e0800404 	addi	r2,fp,16
 10071a0:	d9000115 	stw	r4,4(sp)
 10071a4:	20bf7016 	blt	r4,r2,1006f68 <_realloc_r+0x22c>
 10071a8:	b8c00317 	ldw	r3,12(r23)
 10071ac:	b8800217 	ldw	r2,8(r23)
 10071b0:	99bfff04 	addi	r6,r19,-4
 10071b4:	01400904 	movi	r5,36
 10071b8:	18800215 	stw	r2,8(r3)
 10071bc:	10c00315 	stw	r3,12(r2)
 10071c0:	bc400204 	addi	r17,r23,8
 10071c4:	29804136 	bltu	r5,r6,10072cc <_realloc_r+0x590>
 10071c8:	008004c4 	movi	r2,19
 10071cc:	9009883a 	mov	r4,r18
 10071d0:	880f883a 	mov	r7,r17
 10071d4:	11800f2e 	bgeu	r2,r6,1007214 <_realloc_r+0x4d8>
 10071d8:	90800017 	ldw	r2,0(r18)
 10071dc:	b9c00404 	addi	r7,r23,16
 10071e0:	91000204 	addi	r4,r18,8
 10071e4:	b8800215 	stw	r2,8(r23)
 10071e8:	90c00117 	ldw	r3,4(r18)
 10071ec:	008006c4 	movi	r2,27
 10071f0:	b8c00315 	stw	r3,12(r23)
 10071f4:	1180072e 	bgeu	r2,r6,1007214 <_realloc_r+0x4d8>
 10071f8:	90c00217 	ldw	r3,8(r18)
 10071fc:	b9c00604 	addi	r7,r23,24
 1007200:	91000404 	addi	r4,r18,16
 1007204:	b8c00415 	stw	r3,16(r23)
 1007208:	90800317 	ldw	r2,12(r18)
 100720c:	b8800515 	stw	r2,20(r23)
 1007210:	31404026 	beq	r6,r5,1007314 <_realloc_r+0x5d8>
 1007214:	20800017 	ldw	r2,0(r4)
 1007218:	38800015 	stw	r2,0(r7)
 100721c:	20c00117 	ldw	r3,4(r4)
 1007220:	38c00115 	stw	r3,4(r7)
 1007224:	20800217 	ldw	r2,8(r4)
 1007228:	38800215 	stw	r2,8(r7)
 100722c:	d8c00117 	ldw	r3,4(sp)
 1007230:	bf0b883a 	add	r5,r23,fp
 1007234:	b009883a 	mov	r4,r22
 1007238:	1f05c83a 	sub	r2,r3,fp
 100723c:	10800054 	ori	r2,r2,1
 1007240:	28800115 	stw	r2,4(r5)
 1007244:	b8c00117 	ldw	r3,4(r23)
 1007248:	00804074 	movhi	r2,257
 100724c:	108f1504 	addi	r2,r2,15444
 1007250:	11400215 	stw	r5,8(r2)
 1007254:	18c0004c 	andi	r3,r3,1
 1007258:	e0c6b03a 	or	r3,fp,r3
 100725c:	b8c00115 	stw	r3,4(r23)
 1007260:	100a6cc0 	call	100a6cc <__malloc_unlock>
 1007264:	003eeb06 	br	1006e14 <_realloc_r+0xd8>
 1007268:	20800117 	ldw	r2,4(r4)
 100726c:	00ffff04 	movi	r3,-4
 1007270:	800f883a 	mov	r7,r16
 1007274:	10c4703a 	and	r2,r2,r3
 1007278:	98a9883a 	add	r20,r19,r2
 100727c:	84000204 	addi	r16,r16,8
 1007280:	003ecf06 	br	1006dc0 <_realloc_r+0x84>
 1007284:	900b883a 	mov	r5,r18
 1007288:	8009883a 	mov	r4,r16
 100728c:	10059e40 	call	10059e4 <memmove>
 1007290:	dd000017 	ldw	r20,0(sp)
 1007294:	b80f883a 	mov	r7,r23
 1007298:	003ec906 	br	1006dc0 <_realloc_r+0x84>
 100729c:	900b883a 	mov	r5,r18
 10072a0:	8009883a 	mov	r4,r16
 10072a4:	10059e40 	call	10059e4 <memmove>
 10072a8:	b80f883a 	mov	r7,r23
 10072ac:	003ec406 	br	1006dc0 <_realloc_r+0x84>
 10072b0:	90c00417 	ldw	r3,16(r18)
 10072b4:	89400604 	addi	r5,r17,24
 10072b8:	91000604 	addi	r4,r18,24
 10072bc:	88c00415 	stw	r3,16(r17)
 10072c0:	90800517 	ldw	r2,20(r18)
 10072c4:	88800515 	stw	r2,20(r17)
 10072c8:	003f6806 	br	100706c <_realloc_r+0x330>
 10072cc:	900b883a 	mov	r5,r18
 10072d0:	8809883a 	mov	r4,r17
 10072d4:	10059e40 	call	10059e4 <memmove>
 10072d8:	003fd406 	br	100722c <_realloc_r+0x4f0>
 10072dc:	90c00417 	ldw	r3,16(r18)
 10072e0:	91000604 	addi	r4,r18,24
 10072e4:	ba000804 	addi	r8,r23,32
 10072e8:	b8c00615 	stw	r3,24(r23)
 10072ec:	90800517 	ldw	r2,20(r18)
 10072f0:	b8800715 	stw	r2,28(r23)
 10072f4:	003f1206 	br	1006f40 <_realloc_r+0x204>
 10072f8:	90c00417 	ldw	r3,16(r18)
 10072fc:	91000604 	addi	r4,r18,24
 1007300:	ba000804 	addi	r8,r23,32
 1007304:	b8c00615 	stw	r3,24(r23)
 1007308:	90800517 	ldw	r2,20(r18)
 100730c:	b8800715 	stw	r2,28(r23)
 1007310:	003f3206 	br	1006fdc <_realloc_r+0x2a0>
 1007314:	90c00417 	ldw	r3,16(r18)
 1007318:	91000604 	addi	r4,r18,24
 100731c:	b9c00804 	addi	r7,r23,32
 1007320:	b8c00615 	stw	r3,24(r23)
 1007324:	90800517 	ldw	r2,20(r18)
 1007328:	b8800715 	stw	r2,28(r23)
 100732c:	003fb906 	br	1007214 <_realloc_r+0x4d8>

01007330 <__isinfd>:
 1007330:	200d883a 	mov	r6,r4
 1007334:	0109c83a 	sub	r4,zero,r4
 1007338:	2188b03a 	or	r4,r4,r6
 100733c:	2008d7fa 	srli	r4,r4,31
 1007340:	00a00034 	movhi	r2,32768
 1007344:	10bfffc4 	addi	r2,r2,-1
 1007348:	1144703a 	and	r2,r2,r5
 100734c:	2088b03a 	or	r4,r4,r2
 1007350:	009ffc34 	movhi	r2,32752
 1007354:	1105c83a 	sub	r2,r2,r4
 1007358:	0087c83a 	sub	r3,zero,r2
 100735c:	10c4b03a 	or	r2,r2,r3
 1007360:	1004d7fa 	srli	r2,r2,31
 1007364:	00c00044 	movi	r3,1
 1007368:	1885c83a 	sub	r2,r3,r2
 100736c:	f800283a 	ret

01007370 <__isnand>:
 1007370:	200d883a 	mov	r6,r4
 1007374:	0109c83a 	sub	r4,zero,r4
 1007378:	2188b03a 	or	r4,r4,r6
 100737c:	2008d7fa 	srli	r4,r4,31
 1007380:	00a00034 	movhi	r2,32768
 1007384:	10bfffc4 	addi	r2,r2,-1
 1007388:	1144703a 	and	r2,r2,r5
 100738c:	2088b03a 	or	r4,r4,r2
 1007390:	009ffc34 	movhi	r2,32752
 1007394:	1105c83a 	sub	r2,r2,r4
 1007398:	1004d7fa 	srli	r2,r2,31
 100739c:	f800283a 	ret

010073a0 <_sbrk_r>:
 10073a0:	defffd04 	addi	sp,sp,-12
 10073a4:	dc000015 	stw	r16,0(sp)
 10073a8:	04004074 	movhi	r16,257
 10073ac:	841c0904 	addi	r16,r16,28708
 10073b0:	dc400115 	stw	r17,4(sp)
 10073b4:	80000015 	stw	zero,0(r16)
 10073b8:	2023883a 	mov	r17,r4
 10073bc:	2809883a 	mov	r4,r5
 10073c0:	dfc00215 	stw	ra,8(sp)
 10073c4:	100a8cc0 	call	100a8cc <sbrk>
 10073c8:	1007883a 	mov	r3,r2
 10073cc:	00bfffc4 	movi	r2,-1
 10073d0:	18800626 	beq	r3,r2,10073ec <_sbrk_r+0x4c>
 10073d4:	1805883a 	mov	r2,r3
 10073d8:	dfc00217 	ldw	ra,8(sp)
 10073dc:	dc400117 	ldw	r17,4(sp)
 10073e0:	dc000017 	ldw	r16,0(sp)
 10073e4:	dec00304 	addi	sp,sp,12
 10073e8:	f800283a 	ret
 10073ec:	80800017 	ldw	r2,0(r16)
 10073f0:	103ff826 	beq	r2,zero,10073d4 <_sbrk_r+0x34>
 10073f4:	88800015 	stw	r2,0(r17)
 10073f8:	1805883a 	mov	r2,r3
 10073fc:	dfc00217 	ldw	ra,8(sp)
 1007400:	dc400117 	ldw	r17,4(sp)
 1007404:	dc000017 	ldw	r16,0(sp)
 1007408:	dec00304 	addi	sp,sp,12
 100740c:	f800283a 	ret

01007410 <__sclose>:
 1007410:	2940038f 	ldh	r5,14(r5)
 1007414:	10078901 	jmpi	1007890 <_close_r>

01007418 <__sseek>:
 1007418:	defffe04 	addi	sp,sp,-8
 100741c:	dc000015 	stw	r16,0(sp)
 1007420:	2821883a 	mov	r16,r5
 1007424:	2940038f 	ldh	r5,14(r5)
 1007428:	dfc00115 	stw	ra,4(sp)
 100742c:	1007b080 	call	1007b08 <_lseek_r>
 1007430:	1007883a 	mov	r3,r2
 1007434:	00bfffc4 	movi	r2,-1
 1007438:	18800926 	beq	r3,r2,1007460 <__sseek+0x48>
 100743c:	8080030b 	ldhu	r2,12(r16)
 1007440:	80c01415 	stw	r3,80(r16)
 1007444:	10840014 	ori	r2,r2,4096
 1007448:	8080030d 	sth	r2,12(r16)
 100744c:	1805883a 	mov	r2,r3
 1007450:	dfc00117 	ldw	ra,4(sp)
 1007454:	dc000017 	ldw	r16,0(sp)
 1007458:	dec00204 	addi	sp,sp,8
 100745c:	f800283a 	ret
 1007460:	8080030b 	ldhu	r2,12(r16)
 1007464:	10bbffcc 	andi	r2,r2,61439
 1007468:	8080030d 	sth	r2,12(r16)
 100746c:	1805883a 	mov	r2,r3
 1007470:	dfc00117 	ldw	ra,4(sp)
 1007474:	dc000017 	ldw	r16,0(sp)
 1007478:	dec00204 	addi	sp,sp,8
 100747c:	f800283a 	ret

01007480 <__swrite>:
 1007480:	2880030b 	ldhu	r2,12(r5)
 1007484:	defffb04 	addi	sp,sp,-20
 1007488:	dcc00315 	stw	r19,12(sp)
 100748c:	1080400c 	andi	r2,r2,256
 1007490:	dc800215 	stw	r18,8(sp)
 1007494:	dc400115 	stw	r17,4(sp)
 1007498:	dc000015 	stw	r16,0(sp)
 100749c:	3027883a 	mov	r19,r6
 10074a0:	3825883a 	mov	r18,r7
 10074a4:	dfc00415 	stw	ra,16(sp)
 10074a8:	2821883a 	mov	r16,r5
 10074ac:	000d883a 	mov	r6,zero
 10074b0:	01c00084 	movi	r7,2
 10074b4:	2023883a 	mov	r17,r4
 10074b8:	10000226 	beq	r2,zero,10074c4 <__swrite+0x44>
 10074bc:	2940038f 	ldh	r5,14(r5)
 10074c0:	1007b080 	call	1007b08 <_lseek_r>
 10074c4:	8080030b 	ldhu	r2,12(r16)
 10074c8:	8140038f 	ldh	r5,14(r16)
 10074cc:	8809883a 	mov	r4,r17
 10074d0:	10bbffcc 	andi	r2,r2,61439
 10074d4:	980d883a 	mov	r6,r19
 10074d8:	900f883a 	mov	r7,r18
 10074dc:	8080030d 	sth	r2,12(r16)
 10074e0:	dfc00417 	ldw	ra,16(sp)
 10074e4:	dcc00317 	ldw	r19,12(sp)
 10074e8:	dc800217 	ldw	r18,8(sp)
 10074ec:	dc400117 	ldw	r17,4(sp)
 10074f0:	dc000017 	ldw	r16,0(sp)
 10074f4:	dec00504 	addi	sp,sp,20
 10074f8:	10077641 	jmpi	1007764 <_write_r>

010074fc <__sread>:
 10074fc:	defffe04 	addi	sp,sp,-8
 1007500:	dc000015 	stw	r16,0(sp)
 1007504:	2821883a 	mov	r16,r5
 1007508:	2940038f 	ldh	r5,14(r5)
 100750c:	dfc00115 	stw	ra,4(sp)
 1007510:	1007b800 	call	1007b80 <_read_r>
 1007514:	1007883a 	mov	r3,r2
 1007518:	10000816 	blt	r2,zero,100753c <__sread+0x40>
 100751c:	80801417 	ldw	r2,80(r16)
 1007520:	10c5883a 	add	r2,r2,r3
 1007524:	80801415 	stw	r2,80(r16)
 1007528:	1805883a 	mov	r2,r3
 100752c:	dfc00117 	ldw	ra,4(sp)
 1007530:	dc000017 	ldw	r16,0(sp)
 1007534:	dec00204 	addi	sp,sp,8
 1007538:	f800283a 	ret
 100753c:	8080030b 	ldhu	r2,12(r16)
 1007540:	10bbffcc 	andi	r2,r2,61439
 1007544:	8080030d 	sth	r2,12(r16)
 1007548:	1805883a 	mov	r2,r3
 100754c:	dfc00117 	ldw	ra,4(sp)
 1007550:	dc000017 	ldw	r16,0(sp)
 1007554:	dec00204 	addi	sp,sp,8
 1007558:	f800283a 	ret

0100755c <strcmp>:
 100755c:	2144b03a 	or	r2,r4,r5
 1007560:	108000cc 	andi	r2,r2,3
 1007564:	10001d1e 	bne	r2,zero,10075dc <strcmp+0x80>
 1007568:	200f883a 	mov	r7,r4
 100756c:	28800017 	ldw	r2,0(r5)
 1007570:	21000017 	ldw	r4,0(r4)
 1007574:	280d883a 	mov	r6,r5
 1007578:	2080161e 	bne	r4,r2,10075d4 <strcmp+0x78>
 100757c:	023fbff4 	movhi	r8,65279
 1007580:	423fbfc4 	addi	r8,r8,-257
 1007584:	2207883a 	add	r3,r4,r8
 1007588:	01602074 	movhi	r5,32897
 100758c:	29602004 	addi	r5,r5,-32640
 1007590:	1946703a 	and	r3,r3,r5
 1007594:	0104303a 	nor	r2,zero,r4
 1007598:	10c4703a 	and	r2,r2,r3
 100759c:	10001c1e 	bne	r2,zero,1007610 <strcmp+0xb4>
 10075a0:	4013883a 	mov	r9,r8
 10075a4:	2811883a 	mov	r8,r5
 10075a8:	00000106 	br	10075b0 <strcmp+0x54>
 10075ac:	1800181e 	bne	r3,zero,1007610 <strcmp+0xb4>
 10075b0:	39c00104 	addi	r7,r7,4
 10075b4:	39000017 	ldw	r4,0(r7)
 10075b8:	31800104 	addi	r6,r6,4
 10075bc:	31400017 	ldw	r5,0(r6)
 10075c0:	2245883a 	add	r2,r4,r9
 10075c4:	1204703a 	and	r2,r2,r8
 10075c8:	0106303a 	nor	r3,zero,r4
 10075cc:	1886703a 	and	r3,r3,r2
 10075d0:	217ff626 	beq	r4,r5,10075ac <strcmp+0x50>
 10075d4:	3809883a 	mov	r4,r7
 10075d8:	300b883a 	mov	r5,r6
 10075dc:	20c00007 	ldb	r3,0(r4)
 10075e0:	1800051e 	bne	r3,zero,10075f8 <strcmp+0x9c>
 10075e4:	00000606 	br	1007600 <strcmp+0xa4>
 10075e8:	21000044 	addi	r4,r4,1
 10075ec:	20c00007 	ldb	r3,0(r4)
 10075f0:	29400044 	addi	r5,r5,1
 10075f4:	18000226 	beq	r3,zero,1007600 <strcmp+0xa4>
 10075f8:	28800007 	ldb	r2,0(r5)
 10075fc:	18bffa26 	beq	r3,r2,10075e8 <strcmp+0x8c>
 1007600:	20c00003 	ldbu	r3,0(r4)
 1007604:	28800003 	ldbu	r2,0(r5)
 1007608:	1885c83a 	sub	r2,r3,r2
 100760c:	f800283a 	ret
 1007610:	0005883a 	mov	r2,zero
 1007614:	f800283a 	ret

01007618 <__swbuf_r>:
 1007618:	defffc04 	addi	sp,sp,-16
 100761c:	dc400215 	stw	r17,8(sp)
 1007620:	dc000115 	stw	r16,4(sp)
 1007624:	dfc00315 	stw	ra,12(sp)
 1007628:	2023883a 	mov	r17,r4
 100762c:	2821883a 	mov	r16,r5
 1007630:	20000226 	beq	r4,zero,100763c <__swbuf_r+0x24>
 1007634:	20800e17 	ldw	r2,56(r4)
 1007638:	10002f26 	beq	r2,zero,10076f8 <__swbuf_r+0xe0>
 100763c:	3080030b 	ldhu	r2,12(r6)
 1007640:	30c00617 	ldw	r3,24(r6)
 1007644:	1080020c 	andi	r2,r2,8
 1007648:	30c00215 	stw	r3,8(r6)
 100764c:	10002226 	beq	r2,zero,10076d8 <__swbuf_r+0xc0>
 1007650:	30c00417 	ldw	r3,16(r6)
 1007654:	18002026 	beq	r3,zero,10076d8 <__swbuf_r+0xc0>
 1007658:	31000017 	ldw	r4,0(r6)
 100765c:	30800517 	ldw	r2,20(r6)
 1007660:	20c7c83a 	sub	r3,r4,r3
 1007664:	18802f0e 	bge	r3,r2,1007724 <__swbuf_r+0x10c>
 1007668:	19400044 	addi	r5,r3,1
 100766c:	30800217 	ldw	r2,8(r6)
 1007670:	84003fcc 	andi	r16,r16,255
 1007674:	20c00044 	addi	r3,r4,1
 1007678:	10bfffc4 	addi	r2,r2,-1
 100767c:	30800215 	stw	r2,8(r6)
 1007680:	24000005 	stb	r16,0(r4)
 1007684:	30800517 	ldw	r2,20(r6)
 1007688:	30c00015 	stw	r3,0(r6)
 100768c:	11400c26 	beq	r2,r5,10076c0 <__swbuf_r+0xa8>
 1007690:	3080030b 	ldhu	r2,12(r6)
 1007694:	1080004c 	andi	r2,r2,1
 1007698:	1005003a 	cmpeq	r2,r2,zero
 100769c:	10000626 	beq	r2,zero,10076b8 <__swbuf_r+0xa0>
 10076a0:	8005883a 	mov	r2,r16
 10076a4:	dfc00317 	ldw	ra,12(sp)
 10076a8:	dc400217 	ldw	r17,8(sp)
 10076ac:	dc000117 	ldw	r16,4(sp)
 10076b0:	dec00404 	addi	sp,sp,16
 10076b4:	f800283a 	ret
 10076b8:	00800284 	movi	r2,10
 10076bc:	80bff81e 	bne	r16,r2,10076a0 <__swbuf_r+0x88>
 10076c0:	8809883a 	mov	r4,r17
 10076c4:	300b883a 	mov	r5,r6
 10076c8:	1003f7c0 	call	1003f7c <_fflush_r>
 10076cc:	103ff426 	beq	r2,zero,10076a0 <__swbuf_r+0x88>
 10076d0:	043fffc4 	movi	r16,-1
 10076d4:	003ff206 	br	10076a0 <__swbuf_r+0x88>
 10076d8:	300b883a 	mov	r5,r6
 10076dc:	8809883a 	mov	r4,r17
 10076e0:	d9800015 	stw	r6,0(sp)
 10076e4:	10026740 	call	1002674 <__swsetup_r>
 10076e8:	d9800017 	ldw	r6,0(sp)
 10076ec:	1000061e 	bne	r2,zero,1007708 <__swbuf_r+0xf0>
 10076f0:	30c00417 	ldw	r3,16(r6)
 10076f4:	003fd806 	br	1007658 <__swbuf_r+0x40>
 10076f8:	d9800015 	stw	r6,0(sp)
 10076fc:	10042140 	call	1004214 <__sinit>
 1007700:	d9800017 	ldw	r6,0(sp)
 1007704:	003fcd06 	br	100763c <__swbuf_r+0x24>
 1007708:	3080030b 	ldhu	r2,12(r6)
 100770c:	00c00244 	movi	r3,9
 1007710:	043fffc4 	movi	r16,-1
 1007714:	10801014 	ori	r2,r2,64
 1007718:	3080030d 	sth	r2,12(r6)
 100771c:	88c00015 	stw	r3,0(r17)
 1007720:	003fdf06 	br	10076a0 <__swbuf_r+0x88>
 1007724:	300b883a 	mov	r5,r6
 1007728:	8809883a 	mov	r4,r17
 100772c:	d9800015 	stw	r6,0(sp)
 1007730:	1003f7c0 	call	1003f7c <_fflush_r>
 1007734:	d9800017 	ldw	r6,0(sp)
 1007738:	103fe51e 	bne	r2,zero,10076d0 <__swbuf_r+0xb8>
 100773c:	31000017 	ldw	r4,0(r6)
 1007740:	01400044 	movi	r5,1
 1007744:	003fc906 	br	100766c <__swbuf_r+0x54>

01007748 <__swbuf>:
 1007748:	01804074 	movhi	r6,257
 100774c:	3194ba04 	addi	r6,r6,21224
 1007750:	2007883a 	mov	r3,r4
 1007754:	31000017 	ldw	r4,0(r6)
 1007758:	280d883a 	mov	r6,r5
 100775c:	180b883a 	mov	r5,r3
 1007760:	10076181 	jmpi	1007618 <__swbuf_r>

01007764 <_write_r>:
 1007764:	defffd04 	addi	sp,sp,-12
 1007768:	dc000015 	stw	r16,0(sp)
 100776c:	04004074 	movhi	r16,257
 1007770:	841c0904 	addi	r16,r16,28708
 1007774:	dc400115 	stw	r17,4(sp)
 1007778:	80000015 	stw	zero,0(r16)
 100777c:	2023883a 	mov	r17,r4
 1007780:	2809883a 	mov	r4,r5
 1007784:	300b883a 	mov	r5,r6
 1007788:	380d883a 	mov	r6,r7
 100778c:	dfc00215 	stw	ra,8(sp)
 1007790:	100a9880 	call	100a988 <write>
 1007794:	1007883a 	mov	r3,r2
 1007798:	00bfffc4 	movi	r2,-1
 100779c:	18800626 	beq	r3,r2,10077b8 <_write_r+0x54>
 10077a0:	1805883a 	mov	r2,r3
 10077a4:	dfc00217 	ldw	ra,8(sp)
 10077a8:	dc400117 	ldw	r17,4(sp)
 10077ac:	dc000017 	ldw	r16,0(sp)
 10077b0:	dec00304 	addi	sp,sp,12
 10077b4:	f800283a 	ret
 10077b8:	80800017 	ldw	r2,0(r16)
 10077bc:	103ff826 	beq	r2,zero,10077a0 <_write_r+0x3c>
 10077c0:	88800015 	stw	r2,0(r17)
 10077c4:	1805883a 	mov	r2,r3
 10077c8:	dfc00217 	ldw	ra,8(sp)
 10077cc:	dc400117 	ldw	r17,4(sp)
 10077d0:	dc000017 	ldw	r16,0(sp)
 10077d4:	dec00304 	addi	sp,sp,12
 10077d8:	f800283a 	ret

010077dc <_calloc_r>:
 10077dc:	298b383a 	mul	r5,r5,r6
 10077e0:	defffe04 	addi	sp,sp,-8
 10077e4:	dc000015 	stw	r16,0(sp)
 10077e8:	dfc00115 	stw	ra,4(sp)
 10077ec:	10051200 	call	1005120 <_malloc_r>
 10077f0:	1021883a 	mov	r16,r2
 10077f4:	01c00904 	movi	r7,36
 10077f8:	10000d26 	beq	r2,zero,1007830 <_calloc_r+0x54>
 10077fc:	10ffff17 	ldw	r3,-4(r2)
 1007800:	1009883a 	mov	r4,r2
 1007804:	00bfff04 	movi	r2,-4
 1007808:	1886703a 	and	r3,r3,r2
 100780c:	1887883a 	add	r3,r3,r2
 1007810:	180d883a 	mov	r6,r3
 1007814:	000b883a 	mov	r5,zero
 1007818:	38c01736 	bltu	r7,r3,1007878 <_calloc_r+0x9c>
 100781c:	008004c4 	movi	r2,19
 1007820:	10c00836 	bltu	r2,r3,1007844 <_calloc_r+0x68>
 1007824:	20000215 	stw	zero,8(r4)
 1007828:	20000015 	stw	zero,0(r4)
 100782c:	20000115 	stw	zero,4(r4)
 1007830:	8005883a 	mov	r2,r16
 1007834:	dfc00117 	ldw	ra,4(sp)
 1007838:	dc000017 	ldw	r16,0(sp)
 100783c:	dec00204 	addi	sp,sp,8
 1007840:	f800283a 	ret
 1007844:	008006c4 	movi	r2,27
 1007848:	80000015 	stw	zero,0(r16)
 100784c:	80000115 	stw	zero,4(r16)
 1007850:	81000204 	addi	r4,r16,8
 1007854:	10fff32e 	bgeu	r2,r3,1007824 <_calloc_r+0x48>
 1007858:	80000215 	stw	zero,8(r16)
 100785c:	80000315 	stw	zero,12(r16)
 1007860:	81000404 	addi	r4,r16,16
 1007864:	19ffef1e 	bne	r3,r7,1007824 <_calloc_r+0x48>
 1007868:	81000604 	addi	r4,r16,24
 100786c:	80000415 	stw	zero,16(r16)
 1007870:	80000515 	stw	zero,20(r16)
 1007874:	003feb06 	br	1007824 <_calloc_r+0x48>
 1007878:	1005ac40 	call	1005ac4 <memset>
 100787c:	8005883a 	mov	r2,r16
 1007880:	dfc00117 	ldw	ra,4(sp)
 1007884:	dc000017 	ldw	r16,0(sp)
 1007888:	dec00204 	addi	sp,sp,8
 100788c:	f800283a 	ret

01007890 <_close_r>:
 1007890:	defffd04 	addi	sp,sp,-12
 1007894:	dc000015 	stw	r16,0(sp)
 1007898:	04004074 	movhi	r16,257
 100789c:	841c0904 	addi	r16,r16,28708
 10078a0:	dc400115 	stw	r17,4(sp)
 10078a4:	80000015 	stw	zero,0(r16)
 10078a8:	2023883a 	mov	r17,r4
 10078ac:	2809883a 	mov	r4,r5
 10078b0:	dfc00215 	stw	ra,8(sp)
 10078b4:	100a0280 	call	100a028 <close>
 10078b8:	1007883a 	mov	r3,r2
 10078bc:	00bfffc4 	movi	r2,-1
 10078c0:	18800626 	beq	r3,r2,10078dc <_close_r+0x4c>
 10078c4:	1805883a 	mov	r2,r3
 10078c8:	dfc00217 	ldw	ra,8(sp)
 10078cc:	dc400117 	ldw	r17,4(sp)
 10078d0:	dc000017 	ldw	r16,0(sp)
 10078d4:	dec00304 	addi	sp,sp,12
 10078d8:	f800283a 	ret
 10078dc:	80800017 	ldw	r2,0(r16)
 10078e0:	103ff826 	beq	r2,zero,10078c4 <_close_r+0x34>
 10078e4:	88800015 	stw	r2,0(r17)
 10078e8:	1805883a 	mov	r2,r3
 10078ec:	dfc00217 	ldw	ra,8(sp)
 10078f0:	dc400117 	ldw	r17,4(sp)
 10078f4:	dc000017 	ldw	r16,0(sp)
 10078f8:	dec00304 	addi	sp,sp,12
 10078fc:	f800283a 	ret

01007900 <_fclose_r>:
 1007900:	defffc04 	addi	sp,sp,-16
 1007904:	dc400115 	stw	r17,4(sp)
 1007908:	dc000015 	stw	r16,0(sp)
 100790c:	dfc00315 	stw	ra,12(sp)
 1007910:	dc800215 	stw	r18,8(sp)
 1007914:	2821883a 	mov	r16,r5
 1007918:	2023883a 	mov	r17,r4
 100791c:	28002926 	beq	r5,zero,10079c4 <_fclose_r+0xc4>
 1007920:	10042040 	call	1004204 <__sfp_lock_acquire>
 1007924:	88000226 	beq	r17,zero,1007930 <_fclose_r+0x30>
 1007928:	88800e17 	ldw	r2,56(r17)
 100792c:	10002d26 	beq	r2,zero,10079e4 <_fclose_r+0xe4>
 1007930:	8080030f 	ldh	r2,12(r16)
 1007934:	10002226 	beq	r2,zero,10079c0 <_fclose_r+0xc0>
 1007938:	8809883a 	mov	r4,r17
 100793c:	800b883a 	mov	r5,r16
 1007940:	1003f7c0 	call	1003f7c <_fflush_r>
 1007944:	1025883a 	mov	r18,r2
 1007948:	80800b17 	ldw	r2,44(r16)
 100794c:	10000426 	beq	r2,zero,1007960 <_fclose_r+0x60>
 1007950:	81400717 	ldw	r5,28(r16)
 1007954:	8809883a 	mov	r4,r17
 1007958:	103ee83a 	callr	r2
 100795c:	10002a16 	blt	r2,zero,1007a08 <_fclose_r+0x108>
 1007960:	8080030b 	ldhu	r2,12(r16)
 1007964:	1080200c 	andi	r2,r2,128
 1007968:	1000231e 	bne	r2,zero,10079f8 <_fclose_r+0xf8>
 100796c:	81400c17 	ldw	r5,48(r16)
 1007970:	28000526 	beq	r5,zero,1007988 <_fclose_r+0x88>
 1007974:	80801004 	addi	r2,r16,64
 1007978:	28800226 	beq	r5,r2,1007984 <_fclose_r+0x84>
 100797c:	8809883a 	mov	r4,r17
 1007980:	10045980 	call	1004598 <_free_r>
 1007984:	80000c15 	stw	zero,48(r16)
 1007988:	81401117 	ldw	r5,68(r16)
 100798c:	28000326 	beq	r5,zero,100799c <_fclose_r+0x9c>
 1007990:	8809883a 	mov	r4,r17
 1007994:	10045980 	call	1004598 <_free_r>
 1007998:	80001115 	stw	zero,68(r16)
 100799c:	8000030d 	sth	zero,12(r16)
 10079a0:	10042080 	call	1004208 <__sfp_lock_release>
 10079a4:	9005883a 	mov	r2,r18
 10079a8:	dfc00317 	ldw	ra,12(sp)
 10079ac:	dc800217 	ldw	r18,8(sp)
 10079b0:	dc400117 	ldw	r17,4(sp)
 10079b4:	dc000017 	ldw	r16,0(sp)
 10079b8:	dec00404 	addi	sp,sp,16
 10079bc:	f800283a 	ret
 10079c0:	10042080 	call	1004208 <__sfp_lock_release>
 10079c4:	0025883a 	mov	r18,zero
 10079c8:	9005883a 	mov	r2,r18
 10079cc:	dfc00317 	ldw	ra,12(sp)
 10079d0:	dc800217 	ldw	r18,8(sp)
 10079d4:	dc400117 	ldw	r17,4(sp)
 10079d8:	dc000017 	ldw	r16,0(sp)
 10079dc:	dec00404 	addi	sp,sp,16
 10079e0:	f800283a 	ret
 10079e4:	8809883a 	mov	r4,r17
 10079e8:	10042140 	call	1004214 <__sinit>
 10079ec:	8080030f 	ldh	r2,12(r16)
 10079f0:	103fd11e 	bne	r2,zero,1007938 <_fclose_r+0x38>
 10079f4:	003ff206 	br	10079c0 <_fclose_r+0xc0>
 10079f8:	81400417 	ldw	r5,16(r16)
 10079fc:	8809883a 	mov	r4,r17
 1007a00:	10045980 	call	1004598 <_free_r>
 1007a04:	003fd906 	br	100796c <_fclose_r+0x6c>
 1007a08:	04bfffc4 	movi	r18,-1
 1007a0c:	003fd406 	br	1007960 <_fclose_r+0x60>

01007a10 <fclose>:
 1007a10:	00804074 	movhi	r2,257
 1007a14:	1094ba04 	addi	r2,r2,21224
 1007a18:	200b883a 	mov	r5,r4
 1007a1c:	11000017 	ldw	r4,0(r2)
 1007a20:	10079001 	jmpi	1007900 <_fclose_r>

01007a24 <_fstat_r>:
 1007a24:	defffd04 	addi	sp,sp,-12
 1007a28:	dc000015 	stw	r16,0(sp)
 1007a2c:	04004074 	movhi	r16,257
 1007a30:	841c0904 	addi	r16,r16,28708
 1007a34:	dc400115 	stw	r17,4(sp)
 1007a38:	80000015 	stw	zero,0(r16)
 1007a3c:	2023883a 	mov	r17,r4
 1007a40:	2809883a 	mov	r4,r5
 1007a44:	300b883a 	mov	r5,r6
 1007a48:	dfc00215 	stw	ra,8(sp)
 1007a4c:	100a1b00 	call	100a1b0 <fstat>
 1007a50:	1007883a 	mov	r3,r2
 1007a54:	00bfffc4 	movi	r2,-1
 1007a58:	18800626 	beq	r3,r2,1007a74 <_fstat_r+0x50>
 1007a5c:	1805883a 	mov	r2,r3
 1007a60:	dfc00217 	ldw	ra,8(sp)
 1007a64:	dc400117 	ldw	r17,4(sp)
 1007a68:	dc000017 	ldw	r16,0(sp)
 1007a6c:	dec00304 	addi	sp,sp,12
 1007a70:	f800283a 	ret
 1007a74:	80800017 	ldw	r2,0(r16)
 1007a78:	103ff826 	beq	r2,zero,1007a5c <_fstat_r+0x38>
 1007a7c:	88800015 	stw	r2,0(r17)
 1007a80:	1805883a 	mov	r2,r3
 1007a84:	dfc00217 	ldw	ra,8(sp)
 1007a88:	dc400117 	ldw	r17,4(sp)
 1007a8c:	dc000017 	ldw	r16,0(sp)
 1007a90:	dec00304 	addi	sp,sp,12
 1007a94:	f800283a 	ret

01007a98 <_isatty_r>:
 1007a98:	defffd04 	addi	sp,sp,-12
 1007a9c:	dc000015 	stw	r16,0(sp)
 1007aa0:	04004074 	movhi	r16,257
 1007aa4:	841c0904 	addi	r16,r16,28708
 1007aa8:	dc400115 	stw	r17,4(sp)
 1007aac:	80000015 	stw	zero,0(r16)
 1007ab0:	2023883a 	mov	r17,r4
 1007ab4:	2809883a 	mov	r4,r5
 1007ab8:	dfc00215 	stw	ra,8(sp)
 1007abc:	100a2e40 	call	100a2e4 <isatty>
 1007ac0:	1007883a 	mov	r3,r2
 1007ac4:	00bfffc4 	movi	r2,-1
 1007ac8:	18800626 	beq	r3,r2,1007ae4 <_isatty_r+0x4c>
 1007acc:	1805883a 	mov	r2,r3
 1007ad0:	dfc00217 	ldw	ra,8(sp)
 1007ad4:	dc400117 	ldw	r17,4(sp)
 1007ad8:	dc000017 	ldw	r16,0(sp)
 1007adc:	dec00304 	addi	sp,sp,12
 1007ae0:	f800283a 	ret
 1007ae4:	80800017 	ldw	r2,0(r16)
 1007ae8:	103ff826 	beq	r2,zero,1007acc <_isatty_r+0x34>
 1007aec:	88800015 	stw	r2,0(r17)
 1007af0:	1805883a 	mov	r2,r3
 1007af4:	dfc00217 	ldw	ra,8(sp)
 1007af8:	dc400117 	ldw	r17,4(sp)
 1007afc:	dc000017 	ldw	r16,0(sp)
 1007b00:	dec00304 	addi	sp,sp,12
 1007b04:	f800283a 	ret

01007b08 <_lseek_r>:
 1007b08:	defffd04 	addi	sp,sp,-12
 1007b0c:	dc000015 	stw	r16,0(sp)
 1007b10:	04004074 	movhi	r16,257
 1007b14:	841c0904 	addi	r16,r16,28708
 1007b18:	dc400115 	stw	r17,4(sp)
 1007b1c:	80000015 	stw	zero,0(r16)
 1007b20:	2023883a 	mov	r17,r4
 1007b24:	2809883a 	mov	r4,r5
 1007b28:	300b883a 	mov	r5,r6
 1007b2c:	380d883a 	mov	r6,r7
 1007b30:	dfc00215 	stw	ra,8(sp)
 1007b34:	100a4f00 	call	100a4f0 <lseek>
 1007b38:	1007883a 	mov	r3,r2
 1007b3c:	00bfffc4 	movi	r2,-1
 1007b40:	18800626 	beq	r3,r2,1007b5c <_lseek_r+0x54>
 1007b44:	1805883a 	mov	r2,r3
 1007b48:	dfc00217 	ldw	ra,8(sp)
 1007b4c:	dc400117 	ldw	r17,4(sp)
 1007b50:	dc000017 	ldw	r16,0(sp)
 1007b54:	dec00304 	addi	sp,sp,12
 1007b58:	f800283a 	ret
 1007b5c:	80800017 	ldw	r2,0(r16)
 1007b60:	103ff826 	beq	r2,zero,1007b44 <_lseek_r+0x3c>
 1007b64:	88800015 	stw	r2,0(r17)
 1007b68:	1805883a 	mov	r2,r3
 1007b6c:	dfc00217 	ldw	ra,8(sp)
 1007b70:	dc400117 	ldw	r17,4(sp)
 1007b74:	dc000017 	ldw	r16,0(sp)
 1007b78:	dec00304 	addi	sp,sp,12
 1007b7c:	f800283a 	ret

01007b80 <_read_r>:
 1007b80:	defffd04 	addi	sp,sp,-12
 1007b84:	dc000015 	stw	r16,0(sp)
 1007b88:	04004074 	movhi	r16,257
 1007b8c:	841c0904 	addi	r16,r16,28708
 1007b90:	dc400115 	stw	r17,4(sp)
 1007b94:	80000015 	stw	zero,0(r16)
 1007b98:	2023883a 	mov	r17,r4
 1007b9c:	2809883a 	mov	r4,r5
 1007ba0:	300b883a 	mov	r5,r6
 1007ba4:	380d883a 	mov	r6,r7
 1007ba8:	dfc00215 	stw	ra,8(sp)
 1007bac:	100a6ec0 	call	100a6ec <read>
 1007bb0:	1007883a 	mov	r3,r2
 1007bb4:	00bfffc4 	movi	r2,-1
 1007bb8:	18800626 	beq	r3,r2,1007bd4 <_read_r+0x54>
 1007bbc:	1805883a 	mov	r2,r3
 1007bc0:	dfc00217 	ldw	ra,8(sp)
 1007bc4:	dc400117 	ldw	r17,4(sp)
 1007bc8:	dc000017 	ldw	r16,0(sp)
 1007bcc:	dec00304 	addi	sp,sp,12
 1007bd0:	f800283a 	ret
 1007bd4:	80800017 	ldw	r2,0(r16)
 1007bd8:	103ff826 	beq	r2,zero,1007bbc <_read_r+0x3c>
 1007bdc:	88800015 	stw	r2,0(r17)
 1007be0:	1805883a 	mov	r2,r3
 1007be4:	dfc00217 	ldw	ra,8(sp)
 1007be8:	dc400117 	ldw	r17,4(sp)
 1007bec:	dc000017 	ldw	r16,0(sp)
 1007bf0:	dec00304 	addi	sp,sp,12
 1007bf4:	f800283a 	ret

01007bf8 <__udivdi3>:
 1007bf8:	defff004 	addi	sp,sp,-64
 1007bfc:	2005883a 	mov	r2,r4
 1007c00:	3011883a 	mov	r8,r6
 1007c04:	df000e15 	stw	fp,56(sp)
 1007c08:	dd000a15 	stw	r20,40(sp)
 1007c0c:	dc000615 	stw	r16,24(sp)
 1007c10:	dfc00f15 	stw	ra,60(sp)
 1007c14:	ddc00d15 	stw	r23,52(sp)
 1007c18:	dd800c15 	stw	r22,48(sp)
 1007c1c:	dd400b15 	stw	r21,44(sp)
 1007c20:	dcc00915 	stw	r19,36(sp)
 1007c24:	dc800815 	stw	r18,32(sp)
 1007c28:	dc400715 	stw	r17,28(sp)
 1007c2c:	4021883a 	mov	r16,r8
 1007c30:	1039883a 	mov	fp,r2
 1007c34:	2829883a 	mov	r20,r5
 1007c38:	38003b1e 	bne	r7,zero,1007d28 <__udivdi3+0x130>
 1007c3c:	2a005c36 	bltu	r5,r8,1007db0 <__udivdi3+0x1b8>
 1007c40:	4000a626 	beq	r8,zero,1007edc <__udivdi3+0x2e4>
 1007c44:	00bfffd4 	movui	r2,65535
 1007c48:	14009e36 	bltu	r2,r16,1007ec4 <__udivdi3+0x2cc>
 1007c4c:	00803fc4 	movi	r2,255
 1007c50:	14013d36 	bltu	r2,r16,1008148 <__udivdi3+0x550>
 1007c54:	000b883a 	mov	r5,zero
 1007c58:	0005883a 	mov	r2,zero
 1007c5c:	8084d83a 	srl	r2,r16,r2
 1007c60:	01004074 	movhi	r4,257
 1007c64:	210d0004 	addi	r4,r4,13312
 1007c68:	01800804 	movi	r6,32
 1007c6c:	1105883a 	add	r2,r2,r4
 1007c70:	10c00003 	ldbu	r3,0(r2)
 1007c74:	28c7883a 	add	r3,r5,r3
 1007c78:	30edc83a 	sub	r22,r6,r3
 1007c7c:	b000ee1e 	bne	r22,zero,1008038 <__udivdi3+0x440>
 1007c80:	802ad43a 	srli	r21,r16,16
 1007c84:	00800044 	movi	r2,1
 1007c88:	a423c83a 	sub	r17,r20,r16
 1007c8c:	85ffffcc 	andi	r23,r16,65535
 1007c90:	d8800315 	stw	r2,12(sp)
 1007c94:	8809883a 	mov	r4,r17
 1007c98:	a80b883a 	mov	r5,r21
 1007c9c:	10099ec0 	call	10099ec <__udivsi3>
 1007ca0:	8809883a 	mov	r4,r17
 1007ca4:	a80b883a 	mov	r5,r21
 1007ca8:	102d883a 	mov	r22,r2
 1007cac:	10099f40 	call	10099f4 <__umodsi3>
 1007cb0:	1004943a 	slli	r2,r2,16
 1007cb4:	e006d43a 	srli	r3,fp,16
 1007cb8:	bda3383a 	mul	r17,r23,r22
 1007cbc:	10c4b03a 	or	r2,r2,r3
 1007cc0:	1440042e 	bgeu	r2,r17,1007cd4 <__udivdi3+0xdc>
 1007cc4:	1405883a 	add	r2,r2,r16
 1007cc8:	b5bfffc4 	addi	r22,r22,-1
 1007ccc:	14000136 	bltu	r2,r16,1007cd4 <__udivdi3+0xdc>
 1007cd0:	14413d36 	bltu	r2,r17,10081c8 <__udivdi3+0x5d0>
 1007cd4:	1463c83a 	sub	r17,r2,r17
 1007cd8:	8809883a 	mov	r4,r17
 1007cdc:	a80b883a 	mov	r5,r21
 1007ce0:	10099ec0 	call	10099ec <__udivsi3>
 1007ce4:	8809883a 	mov	r4,r17
 1007ce8:	a80b883a 	mov	r5,r21
 1007cec:	1029883a 	mov	r20,r2
 1007cf0:	10099f40 	call	10099f4 <__umodsi3>
 1007cf4:	1004943a 	slli	r2,r2,16
 1007cf8:	bd09383a 	mul	r4,r23,r20
 1007cfc:	e0ffffcc 	andi	r3,fp,65535
 1007d00:	10c4b03a 	or	r2,r2,r3
 1007d04:	1100042e 	bgeu	r2,r4,1007d18 <__udivdi3+0x120>
 1007d08:	8085883a 	add	r2,r16,r2
 1007d0c:	a53fffc4 	addi	r20,r20,-1
 1007d10:	14000136 	bltu	r2,r16,1007d18 <__udivdi3+0x120>
 1007d14:	11012036 	bltu	r2,r4,1008198 <__udivdi3+0x5a0>
 1007d18:	b004943a 	slli	r2,r22,16
 1007d1c:	d9000317 	ldw	r4,12(sp)
 1007d20:	a084b03a 	or	r2,r20,r2
 1007d24:	00001506 	br	1007d7c <__udivdi3+0x184>
 1007d28:	380d883a 	mov	r6,r7
 1007d2c:	29c06236 	bltu	r5,r7,1007eb8 <__udivdi3+0x2c0>
 1007d30:	00bfffd4 	movui	r2,65535
 1007d34:	11c05a36 	bltu	r2,r7,1007ea0 <__udivdi3+0x2a8>
 1007d38:	00803fc4 	movi	r2,255
 1007d3c:	11c0fc36 	bltu	r2,r7,1008130 <__udivdi3+0x538>
 1007d40:	000b883a 	mov	r5,zero
 1007d44:	0005883a 	mov	r2,zero
 1007d48:	3084d83a 	srl	r2,r6,r2
 1007d4c:	01004074 	movhi	r4,257
 1007d50:	210d0004 	addi	r4,r4,13312
 1007d54:	01c00804 	movi	r7,32
 1007d58:	1105883a 	add	r2,r2,r4
 1007d5c:	10c00003 	ldbu	r3,0(r2)
 1007d60:	28c7883a 	add	r3,r5,r3
 1007d64:	38efc83a 	sub	r23,r7,r3
 1007d68:	b800691e 	bne	r23,zero,1007f10 <__udivdi3+0x318>
 1007d6c:	35000136 	bltu	r6,r20,1007d74 <__udivdi3+0x17c>
 1007d70:	e4005136 	bltu	fp,r16,1007eb8 <__udivdi3+0x2c0>
 1007d74:	00800044 	movi	r2,1
 1007d78:	0009883a 	mov	r4,zero
 1007d7c:	2007883a 	mov	r3,r4
 1007d80:	dfc00f17 	ldw	ra,60(sp)
 1007d84:	df000e17 	ldw	fp,56(sp)
 1007d88:	ddc00d17 	ldw	r23,52(sp)
 1007d8c:	dd800c17 	ldw	r22,48(sp)
 1007d90:	dd400b17 	ldw	r21,44(sp)
 1007d94:	dd000a17 	ldw	r20,40(sp)
 1007d98:	dcc00917 	ldw	r19,36(sp)
 1007d9c:	dc800817 	ldw	r18,32(sp)
 1007da0:	dc400717 	ldw	r17,28(sp)
 1007da4:	dc000617 	ldw	r16,24(sp)
 1007da8:	dec01004 	addi	sp,sp,64
 1007dac:	f800283a 	ret
 1007db0:	00bfffd4 	movui	r2,65535
 1007db4:	12005036 	bltu	r2,r8,1007ef8 <__udivdi3+0x300>
 1007db8:	00803fc4 	movi	r2,255
 1007dbc:	1200e836 	bltu	r2,r8,1008160 <__udivdi3+0x568>
 1007dc0:	000b883a 	mov	r5,zero
 1007dc4:	0005883a 	mov	r2,zero
 1007dc8:	8084d83a 	srl	r2,r16,r2
 1007dcc:	01004074 	movhi	r4,257
 1007dd0:	210d0004 	addi	r4,r4,13312
 1007dd4:	01800804 	movi	r6,32
 1007dd8:	1105883a 	add	r2,r2,r4
 1007ddc:	10c00003 	ldbu	r3,0(r2)
 1007de0:	28c7883a 	add	r3,r5,r3
 1007de4:	30cbc83a 	sub	r5,r6,r3
 1007de8:	28000626 	beq	r5,zero,1007e04 <__udivdi3+0x20c>
 1007dec:	3145c83a 	sub	r2,r6,r5
 1007df0:	e084d83a 	srl	r2,fp,r2
 1007df4:	a146983a 	sll	r3,r20,r5
 1007df8:	e178983a 	sll	fp,fp,r5
 1007dfc:	8160983a 	sll	r16,r16,r5
 1007e00:	18a8b03a 	or	r20,r3,r2
 1007e04:	802ad43a 	srli	r21,r16,16
 1007e08:	a009883a 	mov	r4,r20
 1007e0c:	85ffffcc 	andi	r23,r16,65535
 1007e10:	a80b883a 	mov	r5,r21
 1007e14:	10099ec0 	call	10099ec <__udivsi3>
 1007e18:	a009883a 	mov	r4,r20
 1007e1c:	a80b883a 	mov	r5,r21
 1007e20:	102d883a 	mov	r22,r2
 1007e24:	10099f40 	call	10099f4 <__umodsi3>
 1007e28:	1004943a 	slli	r2,r2,16
 1007e2c:	e006d43a 	srli	r3,fp,16
 1007e30:	bda3383a 	mul	r17,r23,r22
 1007e34:	10c4b03a 	or	r2,r2,r3
 1007e38:	1440042e 	bgeu	r2,r17,1007e4c <__udivdi3+0x254>
 1007e3c:	1405883a 	add	r2,r2,r16
 1007e40:	b5bfffc4 	addi	r22,r22,-1
 1007e44:	14000136 	bltu	r2,r16,1007e4c <__udivdi3+0x254>
 1007e48:	1440d536 	bltu	r2,r17,10081a0 <__udivdi3+0x5a8>
 1007e4c:	1463c83a 	sub	r17,r2,r17
 1007e50:	8809883a 	mov	r4,r17
 1007e54:	a80b883a 	mov	r5,r21
 1007e58:	10099ec0 	call	10099ec <__udivsi3>
 1007e5c:	8809883a 	mov	r4,r17
 1007e60:	a80b883a 	mov	r5,r21
 1007e64:	1029883a 	mov	r20,r2
 1007e68:	10099f40 	call	10099f4 <__umodsi3>
 1007e6c:	1004943a 	slli	r2,r2,16
 1007e70:	bd09383a 	mul	r4,r23,r20
 1007e74:	e0ffffcc 	andi	r3,fp,65535
 1007e78:	10c4b03a 	or	r2,r2,r3
 1007e7c:	1100042e 	bgeu	r2,r4,1007e90 <__udivdi3+0x298>
 1007e80:	8085883a 	add	r2,r16,r2
 1007e84:	a53fffc4 	addi	r20,r20,-1
 1007e88:	14000136 	bltu	r2,r16,1007e90 <__udivdi3+0x298>
 1007e8c:	1100c736 	bltu	r2,r4,10081ac <__udivdi3+0x5b4>
 1007e90:	b004943a 	slli	r2,r22,16
 1007e94:	0009883a 	mov	r4,zero
 1007e98:	a084b03a 	or	r2,r20,r2
 1007e9c:	003fb706 	br	1007d7c <__udivdi3+0x184>
 1007ea0:	00804034 	movhi	r2,256
 1007ea4:	10bfffc4 	addi	r2,r2,-1
 1007ea8:	11c0a436 	bltu	r2,r7,100813c <__udivdi3+0x544>
 1007eac:	01400404 	movi	r5,16
 1007eb0:	2805883a 	mov	r2,r5
 1007eb4:	003fa406 	br	1007d48 <__udivdi3+0x150>
 1007eb8:	0005883a 	mov	r2,zero
 1007ebc:	0009883a 	mov	r4,zero
 1007ec0:	003fae06 	br	1007d7c <__udivdi3+0x184>
 1007ec4:	00804034 	movhi	r2,256
 1007ec8:	10bfffc4 	addi	r2,r2,-1
 1007ecc:	1400a136 	bltu	r2,r16,1008154 <__udivdi3+0x55c>
 1007ed0:	01400404 	movi	r5,16
 1007ed4:	2805883a 	mov	r2,r5
 1007ed8:	003f6006 	br	1007c5c <__udivdi3+0x64>
 1007edc:	01000044 	movi	r4,1
 1007ee0:	000b883a 	mov	r5,zero
 1007ee4:	10099ec0 	call	10099ec <__udivsi3>
 1007ee8:	1021883a 	mov	r16,r2
 1007eec:	00bfffd4 	movui	r2,65535
 1007ef0:	143ff436 	bltu	r2,r16,1007ec4 <__udivdi3+0x2cc>
 1007ef4:	003f5506 	br	1007c4c <__udivdi3+0x54>
 1007ef8:	00804034 	movhi	r2,256
 1007efc:	10bfffc4 	addi	r2,r2,-1
 1007f00:	12009a36 	bltu	r2,r8,100816c <__udivdi3+0x574>
 1007f04:	01400404 	movi	r5,16
 1007f08:	2805883a 	mov	r2,r5
 1007f0c:	003fae06 	br	1007dc8 <__udivdi3+0x1d0>
 1007f10:	3dc5c83a 	sub	r2,r7,r23
 1007f14:	35c8983a 	sll	r4,r6,r23
 1007f18:	8086d83a 	srl	r3,r16,r2
 1007f1c:	a0a2d83a 	srl	r17,r20,r2
 1007f20:	e084d83a 	srl	r2,fp,r2
 1007f24:	20eab03a 	or	r21,r4,r3
 1007f28:	a82cd43a 	srli	r22,r21,16
 1007f2c:	a5c6983a 	sll	r3,r20,r23
 1007f30:	8809883a 	mov	r4,r17
 1007f34:	b00b883a 	mov	r5,r22
 1007f38:	1886b03a 	or	r3,r3,r2
 1007f3c:	d8c00215 	stw	r3,8(sp)
 1007f40:	10099ec0 	call	10099ec <__udivsi3>
 1007f44:	8809883a 	mov	r4,r17
 1007f48:	b00b883a 	mov	r5,r22
 1007f4c:	1029883a 	mov	r20,r2
 1007f50:	10099f40 	call	10099f4 <__umodsi3>
 1007f54:	a8ffffcc 	andi	r3,r21,65535
 1007f58:	d8c00515 	stw	r3,20(sp)
 1007f5c:	d9000217 	ldw	r4,8(sp)
 1007f60:	d9400517 	ldw	r5,20(sp)
 1007f64:	1004943a 	slli	r2,r2,16
 1007f68:	2006d43a 	srli	r3,r4,16
 1007f6c:	85e0983a 	sll	r16,r16,r23
 1007f70:	2d23383a 	mul	r17,r5,r20
 1007f74:	10c4b03a 	or	r2,r2,r3
 1007f78:	dc000015 	stw	r16,0(sp)
 1007f7c:	1440032e 	bgeu	r2,r17,1007f8c <__udivdi3+0x394>
 1007f80:	1545883a 	add	r2,r2,r21
 1007f84:	a53fffc4 	addi	r20,r20,-1
 1007f88:	15407f2e 	bgeu	r2,r21,1008188 <__udivdi3+0x590>
 1007f8c:	1463c83a 	sub	r17,r2,r17
 1007f90:	8809883a 	mov	r4,r17
 1007f94:	b00b883a 	mov	r5,r22
 1007f98:	10099ec0 	call	10099ec <__udivsi3>
 1007f9c:	8809883a 	mov	r4,r17
 1007fa0:	b00b883a 	mov	r5,r22
 1007fa4:	1021883a 	mov	r16,r2
 1007fa8:	10099f40 	call	10099f4 <__umodsi3>
 1007fac:	d8c00517 	ldw	r3,20(sp)
 1007fb0:	d9000217 	ldw	r4,8(sp)
 1007fb4:	1004943a 	slli	r2,r2,16
 1007fb8:	1c0f383a 	mul	r7,r3,r16
 1007fbc:	20ffffcc 	andi	r3,r4,65535
 1007fc0:	10e2b03a 	or	r17,r2,r3
 1007fc4:	89c0032e 	bgeu	r17,r7,1007fd4 <__udivdi3+0x3dc>
 1007fc8:	8d63883a 	add	r17,r17,r21
 1007fcc:	843fffc4 	addi	r16,r16,-1
 1007fd0:	8d40692e 	bgeu	r17,r21,1008178 <__udivdi3+0x580>
 1007fd4:	a008943a 	slli	r4,r20,16
 1007fd8:	d9400017 	ldw	r5,0(sp)
 1007fdc:	89e3c83a 	sub	r17,r17,r7
 1007fe0:	8110b03a 	or	r8,r16,r4
 1007fe4:	280cd43a 	srli	r6,r5,16
 1007fe8:	28ffffcc 	andi	r3,r5,65535
 1007fec:	40bfffcc 	andi	r2,r8,65535
 1007ff0:	400ad43a 	srli	r5,r8,16
 1007ff4:	10d3383a 	mul	r9,r2,r3
 1007ff8:	1185383a 	mul	r2,r2,r6
 1007ffc:	28c7383a 	mul	r3,r5,r3
 1008000:	4808d43a 	srli	r4,r9,16
 1008004:	298b383a 	mul	r5,r5,r6
 1008008:	10c5883a 	add	r2,r2,r3
 100800c:	2089883a 	add	r4,r4,r2
 1008010:	20c0022e 	bgeu	r4,r3,100801c <__udivdi3+0x424>
 1008014:	00800074 	movhi	r2,1
 1008018:	288b883a 	add	r5,r5,r2
 100801c:	2004d43a 	srli	r2,r4,16
 1008020:	288b883a 	add	r5,r5,r2
 1008024:	89403f36 	bltu	r17,r5,1008124 <__udivdi3+0x52c>
 1008028:	89403926 	beq	r17,r5,1008110 <__udivdi3+0x518>
 100802c:	4005883a 	mov	r2,r8
 1008030:	0009883a 	mov	r4,zero
 1008034:	003f5106 	br	1007d7c <__udivdi3+0x184>
 1008038:	85a0983a 	sll	r16,r16,r22
 100803c:	3585c83a 	sub	r2,r6,r22
 1008040:	a0a2d83a 	srl	r17,r20,r2
 1008044:	802ad43a 	srli	r21,r16,16
 1008048:	e084d83a 	srl	r2,fp,r2
 100804c:	a586983a 	sll	r3,r20,r22
 1008050:	8809883a 	mov	r4,r17
 1008054:	a80b883a 	mov	r5,r21
 1008058:	1886b03a 	or	r3,r3,r2
 100805c:	d8c00115 	stw	r3,4(sp)
 1008060:	10099ec0 	call	10099ec <__udivsi3>
 1008064:	8809883a 	mov	r4,r17
 1008068:	a80b883a 	mov	r5,r21
 100806c:	d8800415 	stw	r2,16(sp)
 1008070:	10099f40 	call	10099f4 <__umodsi3>
 1008074:	d9000117 	ldw	r4,4(sp)
 1008078:	d9400417 	ldw	r5,16(sp)
 100807c:	1004943a 	slli	r2,r2,16
 1008080:	85ffffcc 	andi	r23,r16,65535
 1008084:	2006d43a 	srli	r3,r4,16
 1008088:	b963383a 	mul	r17,r23,r5
 100808c:	10c4b03a 	or	r2,r2,r3
 1008090:	1440042e 	bgeu	r2,r17,10080a4 <__udivdi3+0x4ac>
 1008094:	297fffc4 	addi	r5,r5,-1
 1008098:	1405883a 	add	r2,r2,r16
 100809c:	d9400415 	stw	r5,16(sp)
 10080a0:	1400442e 	bgeu	r2,r16,10081b4 <__udivdi3+0x5bc>
 10080a4:	1463c83a 	sub	r17,r2,r17
 10080a8:	8809883a 	mov	r4,r17
 10080ac:	a80b883a 	mov	r5,r21
 10080b0:	10099ec0 	call	10099ec <__udivsi3>
 10080b4:	8809883a 	mov	r4,r17
 10080b8:	a80b883a 	mov	r5,r21
 10080bc:	1029883a 	mov	r20,r2
 10080c0:	10099f40 	call	10099f4 <__umodsi3>
 10080c4:	d9400117 	ldw	r5,4(sp)
 10080c8:	1004943a 	slli	r2,r2,16
 10080cc:	bd09383a 	mul	r4,r23,r20
 10080d0:	28ffffcc 	andi	r3,r5,65535
 10080d4:	10c6b03a 	or	r3,r2,r3
 10080d8:	1900062e 	bgeu	r3,r4,10080f4 <__udivdi3+0x4fc>
 10080dc:	1c07883a 	add	r3,r3,r16
 10080e0:	a53fffc4 	addi	r20,r20,-1
 10080e4:	1c000336 	bltu	r3,r16,10080f4 <__udivdi3+0x4fc>
 10080e8:	1900022e 	bgeu	r3,r4,10080f4 <__udivdi3+0x4fc>
 10080ec:	a53fffc4 	addi	r20,r20,-1
 10080f0:	1c07883a 	add	r3,r3,r16
 10080f4:	d9400417 	ldw	r5,16(sp)
 10080f8:	e5b8983a 	sll	fp,fp,r22
 10080fc:	1923c83a 	sub	r17,r3,r4
 1008100:	2804943a 	slli	r2,r5,16
 1008104:	a0a8b03a 	or	r20,r20,r2
 1008108:	dd000315 	stw	r20,12(sp)
 100810c:	003ee106 	br	1007c94 <__udivdi3+0x9c>
 1008110:	2004943a 	slli	r2,r4,16
 1008114:	e5c8983a 	sll	r4,fp,r23
 1008118:	48ffffcc 	andi	r3,r9,65535
 100811c:	10c5883a 	add	r2,r2,r3
 1008120:	20bfc22e 	bgeu	r4,r2,100802c <__udivdi3+0x434>
 1008124:	40bfffc4 	addi	r2,r8,-1
 1008128:	0009883a 	mov	r4,zero
 100812c:	003f1306 	br	1007d7c <__udivdi3+0x184>
 1008130:	01400204 	movi	r5,8
 1008134:	2805883a 	mov	r2,r5
 1008138:	003f0306 	br	1007d48 <__udivdi3+0x150>
 100813c:	01400604 	movi	r5,24
 1008140:	2805883a 	mov	r2,r5
 1008144:	003f0006 	br	1007d48 <__udivdi3+0x150>
 1008148:	01400204 	movi	r5,8
 100814c:	2805883a 	mov	r2,r5
 1008150:	003ec206 	br	1007c5c <__udivdi3+0x64>
 1008154:	01400604 	movi	r5,24
 1008158:	2805883a 	mov	r2,r5
 100815c:	003ebf06 	br	1007c5c <__udivdi3+0x64>
 1008160:	01400204 	movi	r5,8
 1008164:	2805883a 	mov	r2,r5
 1008168:	003f1706 	br	1007dc8 <__udivdi3+0x1d0>
 100816c:	01400604 	movi	r5,24
 1008170:	2805883a 	mov	r2,r5
 1008174:	003f1406 	br	1007dc8 <__udivdi3+0x1d0>
 1008178:	89ff962e 	bgeu	r17,r7,1007fd4 <__udivdi3+0x3dc>
 100817c:	8d63883a 	add	r17,r17,r21
 1008180:	843fffc4 	addi	r16,r16,-1
 1008184:	003f9306 	br	1007fd4 <__udivdi3+0x3dc>
 1008188:	147f802e 	bgeu	r2,r17,1007f8c <__udivdi3+0x394>
 100818c:	a53fffc4 	addi	r20,r20,-1
 1008190:	1545883a 	add	r2,r2,r21
 1008194:	003f7d06 	br	1007f8c <__udivdi3+0x394>
 1008198:	a53fffc4 	addi	r20,r20,-1
 100819c:	003ede06 	br	1007d18 <__udivdi3+0x120>
 10081a0:	b5bfffc4 	addi	r22,r22,-1
 10081a4:	1405883a 	add	r2,r2,r16
 10081a8:	003f2806 	br	1007e4c <__udivdi3+0x254>
 10081ac:	a53fffc4 	addi	r20,r20,-1
 10081b0:	003f3706 	br	1007e90 <__udivdi3+0x298>
 10081b4:	147fbb2e 	bgeu	r2,r17,10080a4 <__udivdi3+0x4ac>
 10081b8:	297fffc4 	addi	r5,r5,-1
 10081bc:	1405883a 	add	r2,r2,r16
 10081c0:	d9400415 	stw	r5,16(sp)
 10081c4:	003fb706 	br	10080a4 <__udivdi3+0x4ac>
 10081c8:	b5bfffc4 	addi	r22,r22,-1
 10081cc:	1405883a 	add	r2,r2,r16
 10081d0:	003ec006 	br	1007cd4 <__udivdi3+0xdc>

010081d4 <__umoddi3>:
 10081d4:	defff104 	addi	sp,sp,-60
 10081d8:	dd800b15 	stw	r22,44(sp)
 10081dc:	dd000915 	stw	r20,36(sp)
 10081e0:	dc000515 	stw	r16,20(sp)
 10081e4:	dfc00e15 	stw	ra,56(sp)
 10081e8:	df000d15 	stw	fp,52(sp)
 10081ec:	ddc00c15 	stw	r23,48(sp)
 10081f0:	dd400a15 	stw	r21,40(sp)
 10081f4:	dcc00815 	stw	r19,32(sp)
 10081f8:	dc800715 	stw	r18,28(sp)
 10081fc:	dc400615 	stw	r17,24(sp)
 1008200:	3021883a 	mov	r16,r6
 1008204:	202d883a 	mov	r22,r4
 1008208:	2829883a 	mov	r20,r5
 100820c:	38002b1e 	bne	r7,zero,10082bc <__umoddi3+0xe8>
 1008210:	29805036 	bltu	r5,r6,1008354 <__umoddi3+0x180>
 1008214:	30008a26 	beq	r6,zero,1008440 <__umoddi3+0x26c>
 1008218:	00bfffd4 	movui	r2,65535
 100821c:	14008236 	bltu	r2,r16,1008428 <__umoddi3+0x254>
 1008220:	00803fc4 	movi	r2,255
 1008224:	14013636 	bltu	r2,r16,1008700 <__umoddi3+0x52c>
 1008228:	000b883a 	mov	r5,zero
 100822c:	0005883a 	mov	r2,zero
 1008230:	8084d83a 	srl	r2,r16,r2
 1008234:	01004074 	movhi	r4,257
 1008238:	210d0004 	addi	r4,r4,13312
 100823c:	01800804 	movi	r6,32
 1008240:	1105883a 	add	r2,r2,r4
 1008244:	10c00003 	ldbu	r3,0(r2)
 1008248:	28c7883a 	add	r3,r5,r3
 100824c:	30efc83a 	sub	r23,r6,r3
 1008250:	b800941e 	bne	r23,zero,10084a4 <__umoddi3+0x2d0>
 1008254:	802ad43a 	srli	r21,r16,16
 1008258:	a423c83a 	sub	r17,r20,r16
 100825c:	0039883a 	mov	fp,zero
 1008260:	853fffcc 	andi	r20,r16,65535
 1008264:	8809883a 	mov	r4,r17
 1008268:	a80b883a 	mov	r5,r21
 100826c:	10099ec0 	call	10099ec <__udivsi3>
 1008270:	8809883a 	mov	r4,r17
 1008274:	a80b883a 	mov	r5,r21
 1008278:	a0a3383a 	mul	r17,r20,r2
 100827c:	10099f40 	call	10099f4 <__umodsi3>
 1008280:	1004943a 	slli	r2,r2,16
 1008284:	b006d43a 	srli	r3,r22,16
 1008288:	10c4b03a 	or	r2,r2,r3
 100828c:	1440032e 	bgeu	r2,r17,100829c <__umoddi3+0xc8>
 1008290:	1405883a 	add	r2,r2,r16
 1008294:	14000136 	bltu	r2,r16,100829c <__umoddi3+0xc8>
 1008298:	14413536 	bltu	r2,r17,1008770 <__umoddi3+0x59c>
 100829c:	1463c83a 	sub	r17,r2,r17
 10082a0:	8809883a 	mov	r4,r17
 10082a4:	a80b883a 	mov	r5,r21
 10082a8:	10099ec0 	call	10099ec <__udivsi3>
 10082ac:	8809883a 	mov	r4,r17
 10082b0:	a0a3383a 	mul	r17,r20,r2
 10082b4:	a80b883a 	mov	r5,r21
 10082b8:	00004d06 	br	10083f0 <__umoddi3+0x21c>
 10082bc:	380d883a 	mov	r6,r7
 10082c0:	29c0102e 	bgeu	r5,r7,1008304 <__umoddi3+0x130>
 10082c4:	2011883a 	mov	r8,r4
 10082c8:	2813883a 	mov	r9,r5
 10082cc:	4005883a 	mov	r2,r8
 10082d0:	4807883a 	mov	r3,r9
 10082d4:	dfc00e17 	ldw	ra,56(sp)
 10082d8:	df000d17 	ldw	fp,52(sp)
 10082dc:	ddc00c17 	ldw	r23,48(sp)
 10082e0:	dd800b17 	ldw	r22,44(sp)
 10082e4:	dd400a17 	ldw	r21,40(sp)
 10082e8:	dd000917 	ldw	r20,36(sp)
 10082ec:	dcc00817 	ldw	r19,32(sp)
 10082f0:	dc800717 	ldw	r18,28(sp)
 10082f4:	dc400617 	ldw	r17,24(sp)
 10082f8:	dc000517 	ldw	r16,20(sp)
 10082fc:	dec00f04 	addi	sp,sp,60
 1008300:	f800283a 	ret
 1008304:	00bfffd4 	movui	r2,65535
 1008308:	11c05a36 	bltu	r2,r7,1008474 <__umoddi3+0x2a0>
 100830c:	00803fc4 	movi	r2,255
 1008310:	11c0fe36 	bltu	r2,r7,100870c <__umoddi3+0x538>
 1008314:	000b883a 	mov	r5,zero
 1008318:	0005883a 	mov	r2,zero
 100831c:	3084d83a 	srl	r2,r6,r2
 1008320:	01004074 	movhi	r4,257
 1008324:	210d0004 	addi	r4,r4,13312
 1008328:	01c00804 	movi	r7,32
 100832c:	1105883a 	add	r2,r2,r4
 1008330:	10c00003 	ldbu	r3,0(r2)
 1008334:	28c7883a 	add	r3,r5,r3
 1008338:	38ebc83a 	sub	r21,r7,r3
 100833c:	a800851e 	bne	r21,zero,1008554 <__umoddi3+0x380>
 1008340:	35005236 	bltu	r6,r20,100848c <__umoddi3+0x2b8>
 1008344:	b400512e 	bgeu	r22,r16,100848c <__umoddi3+0x2b8>
 1008348:	b011883a 	mov	r8,r22
 100834c:	a013883a 	mov	r9,r20
 1008350:	003fde06 	br	10082cc <__umoddi3+0xf8>
 1008354:	00bfffd4 	movui	r2,65535
 1008358:	11804036 	bltu	r2,r6,100845c <__umoddi3+0x288>
 100835c:	00803fc4 	movi	r2,255
 1008360:	1180ed36 	bltu	r2,r6,1008718 <__umoddi3+0x544>
 1008364:	000b883a 	mov	r5,zero
 1008368:	0005883a 	mov	r2,zero
 100836c:	8084d83a 	srl	r2,r16,r2
 1008370:	01004074 	movhi	r4,257
 1008374:	210d0004 	addi	r4,r4,13312
 1008378:	01800804 	movi	r6,32
 100837c:	1105883a 	add	r2,r2,r4
 1008380:	10c00003 	ldbu	r3,0(r2)
 1008384:	28c7883a 	add	r3,r5,r3
 1008388:	30c7c83a 	sub	r3,r6,r3
 100838c:	1800bf1e 	bne	r3,zero,100868c <__umoddi3+0x4b8>
 1008390:	0039883a 	mov	fp,zero
 1008394:	802ad43a 	srli	r21,r16,16
 1008398:	a009883a 	mov	r4,r20
 100839c:	85ffffcc 	andi	r23,r16,65535
 10083a0:	a80b883a 	mov	r5,r21
 10083a4:	10099ec0 	call	10099ec <__udivsi3>
 10083a8:	a009883a 	mov	r4,r20
 10083ac:	a80b883a 	mov	r5,r21
 10083b0:	b8a3383a 	mul	r17,r23,r2
 10083b4:	10099f40 	call	10099f4 <__umodsi3>
 10083b8:	1004943a 	slli	r2,r2,16
 10083bc:	b006d43a 	srli	r3,r22,16
 10083c0:	10c4b03a 	or	r2,r2,r3
 10083c4:	1440032e 	bgeu	r2,r17,10083d4 <__umoddi3+0x200>
 10083c8:	1405883a 	add	r2,r2,r16
 10083cc:	14000136 	bltu	r2,r16,10083d4 <__umoddi3+0x200>
 10083d0:	1440e536 	bltu	r2,r17,1008768 <__umoddi3+0x594>
 10083d4:	1463c83a 	sub	r17,r2,r17
 10083d8:	8809883a 	mov	r4,r17
 10083dc:	a80b883a 	mov	r5,r21
 10083e0:	10099ec0 	call	10099ec <__udivsi3>
 10083e4:	8809883a 	mov	r4,r17
 10083e8:	b8a3383a 	mul	r17,r23,r2
 10083ec:	a80b883a 	mov	r5,r21
 10083f0:	10099f40 	call	10099f4 <__umodsi3>
 10083f4:	1004943a 	slli	r2,r2,16
 10083f8:	b0ffffcc 	andi	r3,r22,65535
 10083fc:	10c4b03a 	or	r2,r2,r3
 1008400:	1440042e 	bgeu	r2,r17,1008414 <__umoddi3+0x240>
 1008404:	1405883a 	add	r2,r2,r16
 1008408:	14000236 	bltu	r2,r16,1008414 <__umoddi3+0x240>
 100840c:	1440012e 	bgeu	r2,r17,1008414 <__umoddi3+0x240>
 1008410:	1405883a 	add	r2,r2,r16
 1008414:	1445c83a 	sub	r2,r2,r17
 1008418:	1724d83a 	srl	r18,r2,fp
 100841c:	0013883a 	mov	r9,zero
 1008420:	9011883a 	mov	r8,r18
 1008424:	003fa906 	br	10082cc <__umoddi3+0xf8>
 1008428:	00804034 	movhi	r2,256
 100842c:	10bfffc4 	addi	r2,r2,-1
 1008430:	1400b036 	bltu	r2,r16,10086f4 <__umoddi3+0x520>
 1008434:	01400404 	movi	r5,16
 1008438:	2805883a 	mov	r2,r5
 100843c:	003f7c06 	br	1008230 <__umoddi3+0x5c>
 1008440:	01000044 	movi	r4,1
 1008444:	000b883a 	mov	r5,zero
 1008448:	10099ec0 	call	10099ec <__udivsi3>
 100844c:	1021883a 	mov	r16,r2
 1008450:	00bfffd4 	movui	r2,65535
 1008454:	143ff436 	bltu	r2,r16,1008428 <__umoddi3+0x254>
 1008458:	003f7106 	br	1008220 <__umoddi3+0x4c>
 100845c:	00804034 	movhi	r2,256
 1008460:	10bfffc4 	addi	r2,r2,-1
 1008464:	1180af36 	bltu	r2,r6,1008724 <__umoddi3+0x550>
 1008468:	01400404 	movi	r5,16
 100846c:	2805883a 	mov	r2,r5
 1008470:	003fbe06 	br	100836c <__umoddi3+0x198>
 1008474:	00804034 	movhi	r2,256
 1008478:	10bfffc4 	addi	r2,r2,-1
 100847c:	11c0ac36 	bltu	r2,r7,1008730 <__umoddi3+0x55c>
 1008480:	01400404 	movi	r5,16
 1008484:	2805883a 	mov	r2,r5
 1008488:	003fa406 	br	100831c <__umoddi3+0x148>
 100848c:	b409c83a 	sub	r4,r22,r16
 1008490:	b105803a 	cmpltu	r2,r22,r4
 1008494:	a187c83a 	sub	r3,r20,r6
 1008498:	18a9c83a 	sub	r20,r3,r2
 100849c:	202d883a 	mov	r22,r4
 10084a0:	003fa906 	br	1008348 <__umoddi3+0x174>
 10084a4:	85e0983a 	sll	r16,r16,r23
 10084a8:	35c5c83a 	sub	r2,r6,r23
 10084ac:	a0a2d83a 	srl	r17,r20,r2
 10084b0:	802ad43a 	srli	r21,r16,16
 10084b4:	b084d83a 	srl	r2,r22,r2
 10084b8:	a5c6983a 	sll	r3,r20,r23
 10084bc:	8809883a 	mov	r4,r17
 10084c0:	a80b883a 	mov	r5,r21
 10084c4:	1886b03a 	or	r3,r3,r2
 10084c8:	d8c00115 	stw	r3,4(sp)
 10084cc:	853fffcc 	andi	r20,r16,65535
 10084d0:	10099ec0 	call	10099ec <__udivsi3>
 10084d4:	8809883a 	mov	r4,r17
 10084d8:	a80b883a 	mov	r5,r21
 10084dc:	a0a3383a 	mul	r17,r20,r2
 10084e0:	10099f40 	call	10099f4 <__umodsi3>
 10084e4:	d9000117 	ldw	r4,4(sp)
 10084e8:	1004943a 	slli	r2,r2,16
 10084ec:	b839883a 	mov	fp,r23
 10084f0:	2006d43a 	srli	r3,r4,16
 10084f4:	10c4b03a 	or	r2,r2,r3
 10084f8:	1440022e 	bgeu	r2,r17,1008504 <__umoddi3+0x330>
 10084fc:	1405883a 	add	r2,r2,r16
 1008500:	1400962e 	bgeu	r2,r16,100875c <__umoddi3+0x588>
 1008504:	1463c83a 	sub	r17,r2,r17
 1008508:	8809883a 	mov	r4,r17
 100850c:	a80b883a 	mov	r5,r21
 1008510:	10099ec0 	call	10099ec <__udivsi3>
 1008514:	8809883a 	mov	r4,r17
 1008518:	a80b883a 	mov	r5,r21
 100851c:	a0a3383a 	mul	r17,r20,r2
 1008520:	10099f40 	call	10099f4 <__umodsi3>
 1008524:	d9400117 	ldw	r5,4(sp)
 1008528:	1004943a 	slli	r2,r2,16
 100852c:	28ffffcc 	andi	r3,r5,65535
 1008530:	10c4b03a 	or	r2,r2,r3
 1008534:	1440042e 	bgeu	r2,r17,1008548 <__umoddi3+0x374>
 1008538:	1405883a 	add	r2,r2,r16
 100853c:	14000236 	bltu	r2,r16,1008548 <__umoddi3+0x374>
 1008540:	1440012e 	bgeu	r2,r17,1008548 <__umoddi3+0x374>
 1008544:	1405883a 	add	r2,r2,r16
 1008548:	b5ec983a 	sll	r22,r22,r23
 100854c:	1463c83a 	sub	r17,r2,r17
 1008550:	003f4406 	br	1008264 <__umoddi3+0x90>
 1008554:	3d4fc83a 	sub	r7,r7,r21
 1008558:	3546983a 	sll	r3,r6,r21
 100855c:	81c4d83a 	srl	r2,r16,r7
 1008560:	a1e2d83a 	srl	r17,r20,r7
 1008564:	a54c983a 	sll	r6,r20,r21
 1008568:	18aeb03a 	or	r23,r3,r2
 100856c:	b828d43a 	srli	r20,r23,16
 1008570:	b1c4d83a 	srl	r2,r22,r7
 1008574:	8809883a 	mov	r4,r17
 1008578:	a00b883a 	mov	r5,r20
 100857c:	308cb03a 	or	r6,r6,r2
 1008580:	d9c00315 	stw	r7,12(sp)
 1008584:	d9800215 	stw	r6,8(sp)
 1008588:	10099ec0 	call	10099ec <__udivsi3>
 100858c:	8809883a 	mov	r4,r17
 1008590:	a00b883a 	mov	r5,r20
 1008594:	1039883a 	mov	fp,r2
 1008598:	10099f40 	call	10099f4 <__umodsi3>
 100859c:	b8ffffcc 	andi	r3,r23,65535
 10085a0:	d8c00415 	stw	r3,16(sp)
 10085a4:	d9000217 	ldw	r4,8(sp)
 10085a8:	d9400417 	ldw	r5,16(sp)
 10085ac:	1004943a 	slli	r2,r2,16
 10085b0:	2006d43a 	srli	r3,r4,16
 10085b4:	8560983a 	sll	r16,r16,r21
 10085b8:	2f23383a 	mul	r17,r5,fp
 10085bc:	10c4b03a 	or	r2,r2,r3
 10085c0:	dc000015 	stw	r16,0(sp)
 10085c4:	b56c983a 	sll	r22,r22,r21
 10085c8:	1440032e 	bgeu	r2,r17,10085d8 <__umoddi3+0x404>
 10085cc:	15c5883a 	add	r2,r2,r23
 10085d0:	e73fffc4 	addi	fp,fp,-1
 10085d4:	15c05d2e 	bgeu	r2,r23,100874c <__umoddi3+0x578>
 10085d8:	1463c83a 	sub	r17,r2,r17
 10085dc:	8809883a 	mov	r4,r17
 10085e0:	a00b883a 	mov	r5,r20
 10085e4:	10099ec0 	call	10099ec <__udivsi3>
 10085e8:	8809883a 	mov	r4,r17
 10085ec:	a00b883a 	mov	r5,r20
 10085f0:	1021883a 	mov	r16,r2
 10085f4:	10099f40 	call	10099f4 <__umodsi3>
 10085f8:	d8c00417 	ldw	r3,16(sp)
 10085fc:	d9000217 	ldw	r4,8(sp)
 1008600:	1004943a 	slli	r2,r2,16
 1008604:	1c23383a 	mul	r17,r3,r16
 1008608:	20ffffcc 	andi	r3,r4,65535
 100860c:	10ceb03a 	or	r7,r2,r3
 1008610:	3c40032e 	bgeu	r7,r17,1008620 <__umoddi3+0x44c>
 1008614:	3dcf883a 	add	r7,r7,r23
 1008618:	843fffc4 	addi	r16,r16,-1
 100861c:	3dc0472e 	bgeu	r7,r23,100873c <__umoddi3+0x568>
 1008620:	e004943a 	slli	r2,fp,16
 1008624:	d9400017 	ldw	r5,0(sp)
 1008628:	3c4fc83a 	sub	r7,r7,r17
 100862c:	8084b03a 	or	r2,r16,r2
 1008630:	28ffffcc 	andi	r3,r5,65535
 1008634:	280cd43a 	srli	r6,r5,16
 1008638:	100ad43a 	srli	r5,r2,16
 100863c:	10bfffcc 	andi	r2,r2,65535
 1008640:	10d1383a 	mul	r8,r2,r3
 1008644:	28c7383a 	mul	r3,r5,r3
 1008648:	1185383a 	mul	r2,r2,r6
 100864c:	4008d43a 	srli	r4,r8,16
 1008650:	298b383a 	mul	r5,r5,r6
 1008654:	10c5883a 	add	r2,r2,r3
 1008658:	2089883a 	add	r4,r4,r2
 100865c:	20c0022e 	bgeu	r4,r3,1008668 <__umoddi3+0x494>
 1008660:	00800074 	movhi	r2,1
 1008664:	288b883a 	add	r5,r5,r2
 1008668:	2004d43a 	srli	r2,r4,16
 100866c:	2008943a 	slli	r4,r4,16
 1008670:	40ffffcc 	andi	r3,r8,65535
 1008674:	288b883a 	add	r5,r5,r2
 1008678:	20c9883a 	add	r4,r4,r3
 100867c:	39400b36 	bltu	r7,r5,10086ac <__umoddi3+0x4d8>
 1008680:	39403d26 	beq	r7,r5,1008778 <__umoddi3+0x5a4>
 1008684:	394bc83a 	sub	r5,r7,r5
 1008688:	00000f06 	br	10086c8 <__umoddi3+0x4f4>
 100868c:	30c5c83a 	sub	r2,r6,r3
 1008690:	1839883a 	mov	fp,r3
 1008694:	b084d83a 	srl	r2,r22,r2
 1008698:	a0c6983a 	sll	r3,r20,r3
 100869c:	8720983a 	sll	r16,r16,fp
 10086a0:	b72c983a 	sll	r22,r22,fp
 10086a4:	18a8b03a 	or	r20,r3,r2
 10086a8:	003f3a06 	br	1008394 <__umoddi3+0x1c0>
 10086ac:	d8c00017 	ldw	r3,0(sp)
 10086b0:	20c5c83a 	sub	r2,r4,r3
 10086b4:	2089803a 	cmpltu	r4,r4,r2
 10086b8:	2dc7c83a 	sub	r3,r5,r23
 10086bc:	1907c83a 	sub	r3,r3,r4
 10086c0:	38cbc83a 	sub	r5,r7,r3
 10086c4:	1009883a 	mov	r4,r2
 10086c8:	b105c83a 	sub	r2,r22,r4
 10086cc:	b087803a 	cmpltu	r3,r22,r2
 10086d0:	28c7c83a 	sub	r3,r5,r3
 10086d4:	d9400317 	ldw	r5,12(sp)
 10086d8:	1544d83a 	srl	r2,r2,r21
 10086dc:	1948983a 	sll	r4,r3,r5
 10086e0:	1d46d83a 	srl	r3,r3,r21
 10086e4:	20a4b03a 	or	r18,r4,r2
 10086e8:	9011883a 	mov	r8,r18
 10086ec:	1813883a 	mov	r9,r3
 10086f0:	003ef606 	br	10082cc <__umoddi3+0xf8>
 10086f4:	01400604 	movi	r5,24
 10086f8:	2805883a 	mov	r2,r5
 10086fc:	003ecc06 	br	1008230 <__umoddi3+0x5c>
 1008700:	01400204 	movi	r5,8
 1008704:	2805883a 	mov	r2,r5
 1008708:	003ec906 	br	1008230 <__umoddi3+0x5c>
 100870c:	01400204 	movi	r5,8
 1008710:	2805883a 	mov	r2,r5
 1008714:	003f0106 	br	100831c <__umoddi3+0x148>
 1008718:	01400204 	movi	r5,8
 100871c:	2805883a 	mov	r2,r5
 1008720:	003f1206 	br	100836c <__umoddi3+0x198>
 1008724:	01400604 	movi	r5,24
 1008728:	2805883a 	mov	r2,r5
 100872c:	003f0f06 	br	100836c <__umoddi3+0x198>
 1008730:	01400604 	movi	r5,24
 1008734:	2805883a 	mov	r2,r5
 1008738:	003ef806 	br	100831c <__umoddi3+0x148>
 100873c:	3c7fb82e 	bgeu	r7,r17,1008620 <__umoddi3+0x44c>
 1008740:	843fffc4 	addi	r16,r16,-1
 1008744:	3dcf883a 	add	r7,r7,r23
 1008748:	003fb506 	br	1008620 <__umoddi3+0x44c>
 100874c:	147fa22e 	bgeu	r2,r17,10085d8 <__umoddi3+0x404>
 1008750:	e73fffc4 	addi	fp,fp,-1
 1008754:	15c5883a 	add	r2,r2,r23
 1008758:	003f9f06 	br	10085d8 <__umoddi3+0x404>
 100875c:	147f692e 	bgeu	r2,r17,1008504 <__umoddi3+0x330>
 1008760:	1405883a 	add	r2,r2,r16
 1008764:	003f6706 	br	1008504 <__umoddi3+0x330>
 1008768:	1405883a 	add	r2,r2,r16
 100876c:	003f1906 	br	10083d4 <__umoddi3+0x200>
 1008770:	1405883a 	add	r2,r2,r16
 1008774:	003ec906 	br	100829c <__umoddi3+0xc8>
 1008778:	b13fcc36 	bltu	r22,r4,10086ac <__umoddi3+0x4d8>
 100877c:	000b883a 	mov	r5,zero
 1008780:	003fd106 	br	10086c8 <__umoddi3+0x4f4>

01008784 <_fpadd_parts>:
 1008784:	defff804 	addi	sp,sp,-32
 1008788:	dcc00315 	stw	r19,12(sp)
 100878c:	2027883a 	mov	r19,r4
 1008790:	21000017 	ldw	r4,0(r4)
 1008794:	00c00044 	movi	r3,1
 1008798:	dd400515 	stw	r21,20(sp)
 100879c:	dd000415 	stw	r20,16(sp)
 10087a0:	ddc00715 	stw	r23,28(sp)
 10087a4:	dd800615 	stw	r22,24(sp)
 10087a8:	dc800215 	stw	r18,8(sp)
 10087ac:	dc400115 	stw	r17,4(sp)
 10087b0:	dc000015 	stw	r16,0(sp)
 10087b4:	282b883a 	mov	r21,r5
 10087b8:	3029883a 	mov	r20,r6
 10087bc:	1900632e 	bgeu	r3,r4,100894c <_fpadd_parts+0x1c8>
 10087c0:	28800017 	ldw	r2,0(r5)
 10087c4:	1880812e 	bgeu	r3,r2,10089cc <_fpadd_parts+0x248>
 10087c8:	00c00104 	movi	r3,4
 10087cc:	20c0dc26 	beq	r4,r3,1008b40 <_fpadd_parts+0x3bc>
 10087d0:	10c07e26 	beq	r2,r3,10089cc <_fpadd_parts+0x248>
 10087d4:	00c00084 	movi	r3,2
 10087d8:	10c06726 	beq	r2,r3,1008978 <_fpadd_parts+0x1f4>
 10087dc:	20c07b26 	beq	r4,r3,10089cc <_fpadd_parts+0x248>
 10087e0:	9dc00217 	ldw	r23,8(r19)
 10087e4:	28c00217 	ldw	r3,8(r5)
 10087e8:	9c400317 	ldw	r17,12(r19)
 10087ec:	2bc00317 	ldw	r15,12(r5)
 10087f0:	b8cdc83a 	sub	r6,r23,r3
 10087f4:	9c800417 	ldw	r18,16(r19)
 10087f8:	2c000417 	ldw	r16,16(r5)
 10087fc:	3009883a 	mov	r4,r6
 1008800:	30009716 	blt	r6,zero,1008a60 <_fpadd_parts+0x2dc>
 1008804:	00800fc4 	movi	r2,63
 1008808:	11806b16 	blt	r2,r6,10089b8 <_fpadd_parts+0x234>
 100880c:	0100a40e 	bge	zero,r4,1008aa0 <_fpadd_parts+0x31c>
 1008810:	35bff804 	addi	r22,r6,-32
 1008814:	b000bc16 	blt	r22,zero,1008b08 <_fpadd_parts+0x384>
 1008818:	8596d83a 	srl	r11,r16,r22
 100881c:	0019883a 	mov	r12,zero
 1008820:	0013883a 	mov	r9,zero
 1008824:	01000044 	movi	r4,1
 1008828:	0015883a 	mov	r10,zero
 100882c:	b000be16 	blt	r22,zero,1008b28 <_fpadd_parts+0x3a4>
 1008830:	2590983a 	sll	r8,r4,r22
 1008834:	000f883a 	mov	r7,zero
 1008838:	00bfffc4 	movi	r2,-1
 100883c:	3889883a 	add	r4,r7,r2
 1008840:	408b883a 	add	r5,r8,r2
 1008844:	21cd803a 	cmpltu	r6,r4,r7
 1008848:	314b883a 	add	r5,r6,r5
 100884c:	7904703a 	and	r2,r15,r4
 1008850:	8146703a 	and	r3,r16,r5
 1008854:	10c4b03a 	or	r2,r2,r3
 1008858:	10000226 	beq	r2,zero,1008864 <_fpadd_parts+0xe0>
 100885c:	02400044 	movi	r9,1
 1008860:	0015883a 	mov	r10,zero
 1008864:	5a5eb03a 	or	r15,r11,r9
 1008868:	62a0b03a 	or	r16,r12,r10
 100886c:	99400117 	ldw	r5,4(r19)
 1008870:	a8800117 	ldw	r2,4(r21)
 1008874:	28806e26 	beq	r5,r2,1008a30 <_fpadd_parts+0x2ac>
 1008878:	28006626 	beq	r5,zero,1008a14 <_fpadd_parts+0x290>
 100887c:	7c45c83a 	sub	r2,r15,r17
 1008880:	7889803a 	cmpltu	r4,r15,r2
 1008884:	8487c83a 	sub	r3,r16,r18
 1008888:	1909c83a 	sub	r4,r3,r4
 100888c:	100d883a 	mov	r6,r2
 1008890:	200f883a 	mov	r7,r4
 1008894:	38007716 	blt	r7,zero,1008a74 <_fpadd_parts+0x2f0>
 1008898:	a5c00215 	stw	r23,8(r20)
 100889c:	a1c00415 	stw	r7,16(r20)
 10088a0:	a0000115 	stw	zero,4(r20)
 10088a4:	a1800315 	stw	r6,12(r20)
 10088a8:	a2000317 	ldw	r8,12(r20)
 10088ac:	a2400417 	ldw	r9,16(r20)
 10088b0:	00bfffc4 	movi	r2,-1
 10088b4:	408b883a 	add	r5,r8,r2
 10088b8:	2a09803a 	cmpltu	r4,r5,r8
 10088bc:	488d883a 	add	r6,r9,r2
 10088c0:	01c40034 	movhi	r7,4096
 10088c4:	39ffffc4 	addi	r7,r7,-1
 10088c8:	218d883a 	add	r6,r4,r6
 10088cc:	39801736 	bltu	r7,r6,100892c <_fpadd_parts+0x1a8>
 10088d0:	31c06526 	beq	r6,r7,1008a68 <_fpadd_parts+0x2e4>
 10088d4:	a3000217 	ldw	r12,8(r20)
 10088d8:	4209883a 	add	r4,r8,r8
 10088dc:	00bfffc4 	movi	r2,-1
 10088e0:	220f803a 	cmpltu	r7,r4,r8
 10088e4:	4a4b883a 	add	r5,r9,r9
 10088e8:	394f883a 	add	r7,r7,r5
 10088ec:	2095883a 	add	r10,r4,r2
 10088f0:	3897883a 	add	r11,r7,r2
 10088f4:	510d803a 	cmpltu	r6,r10,r4
 10088f8:	6099883a 	add	r12,r12,r2
 10088fc:	32d7883a 	add	r11,r6,r11
 1008900:	00840034 	movhi	r2,4096
 1008904:	10bfffc4 	addi	r2,r2,-1
 1008908:	2011883a 	mov	r8,r4
 100890c:	3813883a 	mov	r9,r7
 1008910:	a1000315 	stw	r4,12(r20)
 1008914:	a1c00415 	stw	r7,16(r20)
 1008918:	a3000215 	stw	r12,8(r20)
 100891c:	12c00336 	bltu	r2,r11,100892c <_fpadd_parts+0x1a8>
 1008920:	58bfed1e 	bne	r11,r2,10088d8 <_fpadd_parts+0x154>
 1008924:	00bfff84 	movi	r2,-2
 1008928:	12bfeb2e 	bgeu	r2,r10,10088d8 <_fpadd_parts+0x154>
 100892c:	a2800417 	ldw	r10,16(r20)
 1008930:	008000c4 	movi	r2,3
 1008934:	00c80034 	movhi	r3,8192
 1008938:	18ffffc4 	addi	r3,r3,-1
 100893c:	a2400317 	ldw	r9,12(r20)
 1008940:	a0800015 	stw	r2,0(r20)
 1008944:	1a802336 	bltu	r3,r10,10089d4 <_fpadd_parts+0x250>
 1008948:	a027883a 	mov	r19,r20
 100894c:	9805883a 	mov	r2,r19
 1008950:	ddc00717 	ldw	r23,28(sp)
 1008954:	dd800617 	ldw	r22,24(sp)
 1008958:	dd400517 	ldw	r21,20(sp)
 100895c:	dd000417 	ldw	r20,16(sp)
 1008960:	dcc00317 	ldw	r19,12(sp)
 1008964:	dc800217 	ldw	r18,8(sp)
 1008968:	dc400117 	ldw	r17,4(sp)
 100896c:	dc000017 	ldw	r16,0(sp)
 1008970:	dec00804 	addi	sp,sp,32
 1008974:	f800283a 	ret
 1008978:	20fff41e 	bne	r4,r3,100894c <_fpadd_parts+0x1c8>
 100897c:	31000015 	stw	r4,0(r6)
 1008980:	98800117 	ldw	r2,4(r19)
 1008984:	30800115 	stw	r2,4(r6)
 1008988:	98c00217 	ldw	r3,8(r19)
 100898c:	30c00215 	stw	r3,8(r6)
 1008990:	98800317 	ldw	r2,12(r19)
 1008994:	30800315 	stw	r2,12(r6)
 1008998:	98c00417 	ldw	r3,16(r19)
 100899c:	30c00415 	stw	r3,16(r6)
 10089a0:	98800117 	ldw	r2,4(r19)
 10089a4:	28c00117 	ldw	r3,4(r5)
 10089a8:	3027883a 	mov	r19,r6
 10089ac:	10c4703a 	and	r2,r2,r3
 10089b0:	30800115 	stw	r2,4(r6)
 10089b4:	003fe506 	br	100894c <_fpadd_parts+0x1c8>
 10089b8:	1dc02616 	blt	r3,r23,1008a54 <_fpadd_parts+0x2d0>
 10089bc:	0023883a 	mov	r17,zero
 10089c0:	182f883a 	mov	r23,r3
 10089c4:	0025883a 	mov	r18,zero
 10089c8:	003fa806 	br	100886c <_fpadd_parts+0xe8>
 10089cc:	a827883a 	mov	r19,r21
 10089d0:	003fde06 	br	100894c <_fpadd_parts+0x1c8>
 10089d4:	01800044 	movi	r6,1
 10089d8:	500497fa 	slli	r2,r10,31
 10089dc:	4808d07a 	srli	r4,r9,1
 10089e0:	518ad83a 	srl	r5,r10,r6
 10089e4:	a2000217 	ldw	r8,8(r20)
 10089e8:	1108b03a 	or	r4,r2,r4
 10089ec:	0007883a 	mov	r3,zero
 10089f0:	4984703a 	and	r2,r9,r6
 10089f4:	208cb03a 	or	r6,r4,r2
 10089f8:	28ceb03a 	or	r7,r5,r3
 10089fc:	42000044 	addi	r8,r8,1
 1008a00:	a027883a 	mov	r19,r20
 1008a04:	a1c00415 	stw	r7,16(r20)
 1008a08:	a2000215 	stw	r8,8(r20)
 1008a0c:	a1800315 	stw	r6,12(r20)
 1008a10:	003fce06 	br	100894c <_fpadd_parts+0x1c8>
 1008a14:	8bc5c83a 	sub	r2,r17,r15
 1008a18:	8889803a 	cmpltu	r4,r17,r2
 1008a1c:	9407c83a 	sub	r3,r18,r16
 1008a20:	1909c83a 	sub	r4,r3,r4
 1008a24:	100d883a 	mov	r6,r2
 1008a28:	200f883a 	mov	r7,r4
 1008a2c:	003f9906 	br	1008894 <_fpadd_parts+0x110>
 1008a30:	7c45883a 	add	r2,r15,r17
 1008a34:	13c9803a 	cmpltu	r4,r2,r15
 1008a38:	8487883a 	add	r3,r16,r18
 1008a3c:	20c9883a 	add	r4,r4,r3
 1008a40:	a1400115 	stw	r5,4(r20)
 1008a44:	a5c00215 	stw	r23,8(r20)
 1008a48:	a0800315 	stw	r2,12(r20)
 1008a4c:	a1000415 	stw	r4,16(r20)
 1008a50:	003fb606 	br	100892c <_fpadd_parts+0x1a8>
 1008a54:	001f883a 	mov	r15,zero
 1008a58:	0021883a 	mov	r16,zero
 1008a5c:	003f8306 	br	100886c <_fpadd_parts+0xe8>
 1008a60:	018dc83a 	sub	r6,zero,r6
 1008a64:	003f6706 	br	1008804 <_fpadd_parts+0x80>
 1008a68:	00bfff84 	movi	r2,-2
 1008a6c:	117faf36 	bltu	r2,r5,100892c <_fpadd_parts+0x1a8>
 1008a70:	003f9806 	br	10088d4 <_fpadd_parts+0x150>
 1008a74:	0005883a 	mov	r2,zero
 1008a78:	1189c83a 	sub	r4,r2,r6
 1008a7c:	1105803a 	cmpltu	r2,r2,r4
 1008a80:	01cbc83a 	sub	r5,zero,r7
 1008a84:	2885c83a 	sub	r2,r5,r2
 1008a88:	01800044 	movi	r6,1
 1008a8c:	a1800115 	stw	r6,4(r20)
 1008a90:	a5c00215 	stw	r23,8(r20)
 1008a94:	a1000315 	stw	r4,12(r20)
 1008a98:	a0800415 	stw	r2,16(r20)
 1008a9c:	003f8206 	br	10088a8 <_fpadd_parts+0x124>
 1008aa0:	203f7226 	beq	r4,zero,100886c <_fpadd_parts+0xe8>
 1008aa4:	35bff804 	addi	r22,r6,-32
 1008aa8:	b9af883a 	add	r23,r23,r6
 1008aac:	b0003116 	blt	r22,zero,1008b74 <_fpadd_parts+0x3f0>
 1008ab0:	959ad83a 	srl	r13,r18,r22
 1008ab4:	001d883a 	mov	r14,zero
 1008ab8:	000f883a 	mov	r7,zero
 1008abc:	01000044 	movi	r4,1
 1008ac0:	0011883a 	mov	r8,zero
 1008ac4:	b0002516 	blt	r22,zero,1008b5c <_fpadd_parts+0x3d8>
 1008ac8:	2594983a 	sll	r10,r4,r22
 1008acc:	0013883a 	mov	r9,zero
 1008ad0:	00bfffc4 	movi	r2,-1
 1008ad4:	4889883a 	add	r4,r9,r2
 1008ad8:	508b883a 	add	r5,r10,r2
 1008adc:	224d803a 	cmpltu	r6,r4,r9
 1008ae0:	314b883a 	add	r5,r6,r5
 1008ae4:	8904703a 	and	r2,r17,r4
 1008ae8:	9146703a 	and	r3,r18,r5
 1008aec:	10c4b03a 	or	r2,r2,r3
 1008af0:	10000226 	beq	r2,zero,1008afc <_fpadd_parts+0x378>
 1008af4:	01c00044 	movi	r7,1
 1008af8:	0011883a 	mov	r8,zero
 1008afc:	69e2b03a 	or	r17,r13,r7
 1008b00:	7224b03a 	or	r18,r14,r8
 1008b04:	003f5906 	br	100886c <_fpadd_parts+0xe8>
 1008b08:	8407883a 	add	r3,r16,r16
 1008b0c:	008007c4 	movi	r2,31
 1008b10:	1185c83a 	sub	r2,r2,r6
 1008b14:	1886983a 	sll	r3,r3,r2
 1008b18:	7996d83a 	srl	r11,r15,r6
 1008b1c:	8198d83a 	srl	r12,r16,r6
 1008b20:	1ad6b03a 	or	r11,r3,r11
 1008b24:	003f3e06 	br	1008820 <_fpadd_parts+0x9c>
 1008b28:	2006d07a 	srli	r3,r4,1
 1008b2c:	008007c4 	movi	r2,31
 1008b30:	1185c83a 	sub	r2,r2,r6
 1008b34:	1890d83a 	srl	r8,r3,r2
 1008b38:	218e983a 	sll	r7,r4,r6
 1008b3c:	003f3e06 	br	1008838 <_fpadd_parts+0xb4>
 1008b40:	113f821e 	bne	r2,r4,100894c <_fpadd_parts+0x1c8>
 1008b44:	28c00117 	ldw	r3,4(r5)
 1008b48:	98800117 	ldw	r2,4(r19)
 1008b4c:	10ff7f26 	beq	r2,r3,100894c <_fpadd_parts+0x1c8>
 1008b50:	04c04074 	movhi	r19,257
 1008b54:	9cccfb04 	addi	r19,r19,13292
 1008b58:	003f7c06 	br	100894c <_fpadd_parts+0x1c8>
 1008b5c:	2006d07a 	srli	r3,r4,1
 1008b60:	008007c4 	movi	r2,31
 1008b64:	1185c83a 	sub	r2,r2,r6
 1008b68:	1894d83a 	srl	r10,r3,r2
 1008b6c:	2192983a 	sll	r9,r4,r6
 1008b70:	003fd706 	br	1008ad0 <_fpadd_parts+0x34c>
 1008b74:	9487883a 	add	r3,r18,r18
 1008b78:	008007c4 	movi	r2,31
 1008b7c:	1185c83a 	sub	r2,r2,r6
 1008b80:	1886983a 	sll	r3,r3,r2
 1008b84:	899ad83a 	srl	r13,r17,r6
 1008b88:	919cd83a 	srl	r14,r18,r6
 1008b8c:	1b5ab03a 	or	r13,r3,r13
 1008b90:	003fc906 	br	1008ab8 <_fpadd_parts+0x334>

01008b94 <__subdf3>:
 1008b94:	deffea04 	addi	sp,sp,-88
 1008b98:	dcc01415 	stw	r19,80(sp)
 1008b9c:	dcc00404 	addi	r19,sp,16
 1008ba0:	2011883a 	mov	r8,r4
 1008ba4:	2813883a 	mov	r9,r5
 1008ba8:	dc401315 	stw	r17,76(sp)
 1008bac:	d809883a 	mov	r4,sp
 1008bb0:	980b883a 	mov	r5,r19
 1008bb4:	dc400904 	addi	r17,sp,36
 1008bb8:	dfc01515 	stw	ra,84(sp)
 1008bbc:	da400115 	stw	r9,4(sp)
 1008bc0:	d9c00315 	stw	r7,12(sp)
 1008bc4:	da000015 	stw	r8,0(sp)
 1008bc8:	d9800215 	stw	r6,8(sp)
 1008bcc:	1009e280 	call	1009e28 <__unpack_d>
 1008bd0:	d9000204 	addi	r4,sp,8
 1008bd4:	880b883a 	mov	r5,r17
 1008bd8:	1009e280 	call	1009e28 <__unpack_d>
 1008bdc:	d8800a17 	ldw	r2,40(sp)
 1008be0:	880b883a 	mov	r5,r17
 1008be4:	9809883a 	mov	r4,r19
 1008be8:	d9800e04 	addi	r6,sp,56
 1008bec:	1080005c 	xori	r2,r2,1
 1008bf0:	d8800a15 	stw	r2,40(sp)
 1008bf4:	10087840 	call	1008784 <_fpadd_parts>
 1008bf8:	1009883a 	mov	r4,r2
 1008bfc:	1009b140 	call	1009b14 <__pack_d>
 1008c00:	dfc01517 	ldw	ra,84(sp)
 1008c04:	dcc01417 	ldw	r19,80(sp)
 1008c08:	dc401317 	ldw	r17,76(sp)
 1008c0c:	dec01604 	addi	sp,sp,88
 1008c10:	f800283a 	ret

01008c14 <__adddf3>:
 1008c14:	deffea04 	addi	sp,sp,-88
 1008c18:	dcc01415 	stw	r19,80(sp)
 1008c1c:	dcc00404 	addi	r19,sp,16
 1008c20:	2011883a 	mov	r8,r4
 1008c24:	2813883a 	mov	r9,r5
 1008c28:	dc401315 	stw	r17,76(sp)
 1008c2c:	d809883a 	mov	r4,sp
 1008c30:	980b883a 	mov	r5,r19
 1008c34:	dc400904 	addi	r17,sp,36
 1008c38:	dfc01515 	stw	ra,84(sp)
 1008c3c:	da400115 	stw	r9,4(sp)
 1008c40:	d9c00315 	stw	r7,12(sp)
 1008c44:	da000015 	stw	r8,0(sp)
 1008c48:	d9800215 	stw	r6,8(sp)
 1008c4c:	1009e280 	call	1009e28 <__unpack_d>
 1008c50:	d9000204 	addi	r4,sp,8
 1008c54:	880b883a 	mov	r5,r17
 1008c58:	1009e280 	call	1009e28 <__unpack_d>
 1008c5c:	d9800e04 	addi	r6,sp,56
 1008c60:	9809883a 	mov	r4,r19
 1008c64:	880b883a 	mov	r5,r17
 1008c68:	10087840 	call	1008784 <_fpadd_parts>
 1008c6c:	1009883a 	mov	r4,r2
 1008c70:	1009b140 	call	1009b14 <__pack_d>
 1008c74:	dfc01517 	ldw	ra,84(sp)
 1008c78:	dcc01417 	ldw	r19,80(sp)
 1008c7c:	dc401317 	ldw	r17,76(sp)
 1008c80:	dec01604 	addi	sp,sp,88
 1008c84:	f800283a 	ret

01008c88 <__muldf3>:
 1008c88:	deffe004 	addi	sp,sp,-128
 1008c8c:	dc401815 	stw	r17,96(sp)
 1008c90:	dc400404 	addi	r17,sp,16
 1008c94:	2011883a 	mov	r8,r4
 1008c98:	2813883a 	mov	r9,r5
 1008c9c:	dc001715 	stw	r16,92(sp)
 1008ca0:	d809883a 	mov	r4,sp
 1008ca4:	880b883a 	mov	r5,r17
 1008ca8:	dc000904 	addi	r16,sp,36
 1008cac:	dfc01f15 	stw	ra,124(sp)
 1008cb0:	da400115 	stw	r9,4(sp)
 1008cb4:	d9c00315 	stw	r7,12(sp)
 1008cb8:	da000015 	stw	r8,0(sp)
 1008cbc:	d9800215 	stw	r6,8(sp)
 1008cc0:	ddc01e15 	stw	r23,120(sp)
 1008cc4:	dd801d15 	stw	r22,116(sp)
 1008cc8:	dd401c15 	stw	r21,112(sp)
 1008ccc:	dd001b15 	stw	r20,108(sp)
 1008cd0:	dcc01a15 	stw	r19,104(sp)
 1008cd4:	dc801915 	stw	r18,100(sp)
 1008cd8:	1009e280 	call	1009e28 <__unpack_d>
 1008cdc:	d9000204 	addi	r4,sp,8
 1008ce0:	800b883a 	mov	r5,r16
 1008ce4:	1009e280 	call	1009e28 <__unpack_d>
 1008ce8:	d9000417 	ldw	r4,16(sp)
 1008cec:	00800044 	movi	r2,1
 1008cf0:	1100102e 	bgeu	r2,r4,1008d34 <__muldf3+0xac>
 1008cf4:	d8c00917 	ldw	r3,36(sp)
 1008cf8:	10c0062e 	bgeu	r2,r3,1008d14 <__muldf3+0x8c>
 1008cfc:	00800104 	movi	r2,4
 1008d00:	20800a26 	beq	r4,r2,1008d2c <__muldf3+0xa4>
 1008d04:	1880cc26 	beq	r3,r2,1009038 <__muldf3+0x3b0>
 1008d08:	00800084 	movi	r2,2
 1008d0c:	20800926 	beq	r4,r2,1008d34 <__muldf3+0xac>
 1008d10:	1880191e 	bne	r3,r2,1008d78 <__muldf3+0xf0>
 1008d14:	d8c00a17 	ldw	r3,40(sp)
 1008d18:	d8800517 	ldw	r2,20(sp)
 1008d1c:	8009883a 	mov	r4,r16
 1008d20:	10c4c03a 	cmpne	r2,r2,r3
 1008d24:	d8800a15 	stw	r2,40(sp)
 1008d28:	00000706 	br	1008d48 <__muldf3+0xc0>
 1008d2c:	00800084 	movi	r2,2
 1008d30:	1880c326 	beq	r3,r2,1009040 <__muldf3+0x3b8>
 1008d34:	d8800517 	ldw	r2,20(sp)
 1008d38:	d8c00a17 	ldw	r3,40(sp)
 1008d3c:	8809883a 	mov	r4,r17
 1008d40:	10c4c03a 	cmpne	r2,r2,r3
 1008d44:	d8800515 	stw	r2,20(sp)
 1008d48:	1009b140 	call	1009b14 <__pack_d>
 1008d4c:	dfc01f17 	ldw	ra,124(sp)
 1008d50:	ddc01e17 	ldw	r23,120(sp)
 1008d54:	dd801d17 	ldw	r22,116(sp)
 1008d58:	dd401c17 	ldw	r21,112(sp)
 1008d5c:	dd001b17 	ldw	r20,108(sp)
 1008d60:	dcc01a17 	ldw	r19,104(sp)
 1008d64:	dc801917 	ldw	r18,100(sp)
 1008d68:	dc401817 	ldw	r17,96(sp)
 1008d6c:	dc001717 	ldw	r16,92(sp)
 1008d70:	dec02004 	addi	sp,sp,128
 1008d74:	f800283a 	ret
 1008d78:	dd800717 	ldw	r22,28(sp)
 1008d7c:	dc800c17 	ldw	r18,48(sp)
 1008d80:	002b883a 	mov	r21,zero
 1008d84:	0023883a 	mov	r17,zero
 1008d88:	a80b883a 	mov	r5,r21
 1008d8c:	b00d883a 	mov	r6,r22
 1008d90:	880f883a 	mov	r7,r17
 1008d94:	ddc00817 	ldw	r23,32(sp)
 1008d98:	dcc00d17 	ldw	r19,52(sp)
 1008d9c:	9009883a 	mov	r4,r18
 1008da0:	10099fc0 	call	10099fc <__muldi3>
 1008da4:	001b883a 	mov	r13,zero
 1008da8:	680f883a 	mov	r7,r13
 1008dac:	b009883a 	mov	r4,r22
 1008db0:	000b883a 	mov	r5,zero
 1008db4:	980d883a 	mov	r6,r19
 1008db8:	b82d883a 	mov	r22,r23
 1008dbc:	002f883a 	mov	r23,zero
 1008dc0:	db401615 	stw	r13,88(sp)
 1008dc4:	d8801315 	stw	r2,76(sp)
 1008dc8:	d8c01415 	stw	r3,80(sp)
 1008dcc:	dcc01515 	stw	r19,84(sp)
 1008dd0:	10099fc0 	call	10099fc <__muldi3>
 1008dd4:	b00d883a 	mov	r6,r22
 1008dd8:	000b883a 	mov	r5,zero
 1008ddc:	9009883a 	mov	r4,r18
 1008de0:	b80f883a 	mov	r7,r23
 1008de4:	1021883a 	mov	r16,r2
 1008de8:	1823883a 	mov	r17,r3
 1008dec:	10099fc0 	call	10099fc <__muldi3>
 1008df0:	8085883a 	add	r2,r16,r2
 1008df4:	140d803a 	cmpltu	r6,r2,r16
 1008df8:	88c7883a 	add	r3,r17,r3
 1008dfc:	30cd883a 	add	r6,r6,r3
 1008e00:	1029883a 	mov	r20,r2
 1008e04:	302b883a 	mov	r21,r6
 1008e08:	da801317 	ldw	r10,76(sp)
 1008e0c:	dac01417 	ldw	r11,80(sp)
 1008e10:	db001517 	ldw	r12,84(sp)
 1008e14:	db401617 	ldw	r13,88(sp)
 1008e18:	3440612e 	bgeu	r6,r17,1008fa0 <__muldf3+0x318>
 1008e1c:	0009883a 	mov	r4,zero
 1008e20:	5105883a 	add	r2,r10,r4
 1008e24:	128d803a 	cmpltu	r6,r2,r10
 1008e28:	5d07883a 	add	r3,r11,r20
 1008e2c:	30cd883a 	add	r6,r6,r3
 1008e30:	0021883a 	mov	r16,zero
 1008e34:	04400044 	movi	r17,1
 1008e38:	1025883a 	mov	r18,r2
 1008e3c:	3027883a 	mov	r19,r6
 1008e40:	32c06236 	bltu	r6,r11,1008fcc <__muldf3+0x344>
 1008e44:	59807a26 	beq	r11,r6,1009030 <__muldf3+0x3a8>
 1008e48:	680b883a 	mov	r5,r13
 1008e4c:	b80f883a 	mov	r7,r23
 1008e50:	6009883a 	mov	r4,r12
 1008e54:	b00d883a 	mov	r6,r22
 1008e58:	10099fc0 	call	10099fc <__muldi3>
 1008e5c:	1009883a 	mov	r4,r2
 1008e60:	000f883a 	mov	r7,zero
 1008e64:	1545883a 	add	r2,r2,r21
 1008e68:	1111803a 	cmpltu	r8,r2,r4
 1008e6c:	19c7883a 	add	r3,r3,r7
 1008e70:	40c7883a 	add	r3,r8,r3
 1008e74:	88cb883a 	add	r5,r17,r3
 1008e78:	d8c00617 	ldw	r3,24(sp)
 1008e7c:	8089883a 	add	r4,r16,r2
 1008e80:	d8800b17 	ldw	r2,44(sp)
 1008e84:	18c00104 	addi	r3,r3,4
 1008e88:	240d803a 	cmpltu	r6,r4,r16
 1008e8c:	10c7883a 	add	r3,r2,r3
 1008e90:	2013883a 	mov	r9,r4
 1008e94:	d8800a17 	ldw	r2,40(sp)
 1008e98:	d9000517 	ldw	r4,20(sp)
 1008e9c:	314d883a 	add	r6,r6,r5
 1008ea0:	3015883a 	mov	r10,r6
 1008ea4:	2088c03a 	cmpne	r4,r4,r2
 1008ea8:	00880034 	movhi	r2,8192
 1008eac:	10bfffc4 	addi	r2,r2,-1
 1008eb0:	d9000f15 	stw	r4,60(sp)
 1008eb4:	d8c01015 	stw	r3,64(sp)
 1008eb8:	1180162e 	bgeu	r2,r6,1008f14 <__muldf3+0x28c>
 1008ebc:	1811883a 	mov	r8,r3
 1008ec0:	101f883a 	mov	r15,r2
 1008ec4:	980497fa 	slli	r2,r19,31
 1008ec8:	9016d07a 	srli	r11,r18,1
 1008ecc:	500697fa 	slli	r3,r10,31
 1008ed0:	480cd07a 	srli	r6,r9,1
 1008ed4:	500ed07a 	srli	r7,r10,1
 1008ed8:	12d6b03a 	or	r11,r2,r11
 1008edc:	00800044 	movi	r2,1
 1008ee0:	198cb03a 	or	r6,r3,r6
 1008ee4:	4888703a 	and	r4,r9,r2
 1008ee8:	9818d07a 	srli	r12,r19,1
 1008eec:	001b883a 	mov	r13,zero
 1008ef0:	03a00034 	movhi	r14,32768
 1008ef4:	3013883a 	mov	r9,r6
 1008ef8:	3815883a 	mov	r10,r7
 1008efc:	4091883a 	add	r8,r8,r2
 1008f00:	20000226 	beq	r4,zero,1008f0c <__muldf3+0x284>
 1008f04:	5b64b03a 	or	r18,r11,r13
 1008f08:	63a6b03a 	or	r19,r12,r14
 1008f0c:	7abfed36 	bltu	r15,r10,1008ec4 <__muldf3+0x23c>
 1008f10:	da001015 	stw	r8,64(sp)
 1008f14:	00840034 	movhi	r2,4096
 1008f18:	10bfffc4 	addi	r2,r2,-1
 1008f1c:	12801436 	bltu	r2,r10,1008f70 <__muldf3+0x2e8>
 1008f20:	da001017 	ldw	r8,64(sp)
 1008f24:	101f883a 	mov	r15,r2
 1008f28:	4a45883a 	add	r2,r9,r9
 1008f2c:	124d803a 	cmpltu	r6,r2,r9
 1008f30:	5287883a 	add	r3,r10,r10
 1008f34:	9497883a 	add	r11,r18,r18
 1008f38:	5c8f803a 	cmpltu	r7,r11,r18
 1008f3c:	9cd9883a 	add	r12,r19,r19
 1008f40:	01000044 	movi	r4,1
 1008f44:	30cd883a 	add	r6,r6,r3
 1008f48:	3b0f883a 	add	r7,r7,r12
 1008f4c:	423fffc4 	addi	r8,r8,-1
 1008f50:	1013883a 	mov	r9,r2
 1008f54:	3015883a 	mov	r10,r6
 1008f58:	111ab03a 	or	r13,r2,r4
 1008f5c:	98003016 	blt	r19,zero,1009020 <__muldf3+0x398>
 1008f60:	5825883a 	mov	r18,r11
 1008f64:	3827883a 	mov	r19,r7
 1008f68:	7abfef2e 	bgeu	r15,r10,1008f28 <__muldf3+0x2a0>
 1008f6c:	da001015 	stw	r8,64(sp)
 1008f70:	00803fc4 	movi	r2,255
 1008f74:	488e703a 	and	r7,r9,r2
 1008f78:	00802004 	movi	r2,128
 1008f7c:	0007883a 	mov	r3,zero
 1008f80:	0011883a 	mov	r8,zero
 1008f84:	38801826 	beq	r7,r2,1008fe8 <__muldf3+0x360>
 1008f88:	008000c4 	movi	r2,3
 1008f8c:	d9000e04 	addi	r4,sp,56
 1008f90:	da801215 	stw	r10,72(sp)
 1008f94:	d8800e15 	stw	r2,56(sp)
 1008f98:	da401115 	stw	r9,68(sp)
 1008f9c:	003f6a06 	br	1008d48 <__muldf3+0xc0>
 1008fa0:	89802126 	beq	r17,r6,1009028 <__muldf3+0x3a0>
 1008fa4:	0009883a 	mov	r4,zero
 1008fa8:	5105883a 	add	r2,r10,r4
 1008fac:	128d803a 	cmpltu	r6,r2,r10
 1008fb0:	5d07883a 	add	r3,r11,r20
 1008fb4:	30cd883a 	add	r6,r6,r3
 1008fb8:	0021883a 	mov	r16,zero
 1008fbc:	0023883a 	mov	r17,zero
 1008fc0:	1025883a 	mov	r18,r2
 1008fc4:	3027883a 	mov	r19,r6
 1008fc8:	32ff9e2e 	bgeu	r6,r11,1008e44 <__muldf3+0x1bc>
 1008fcc:	00800044 	movi	r2,1
 1008fd0:	8089883a 	add	r4,r16,r2
 1008fd4:	240d803a 	cmpltu	r6,r4,r16
 1008fd8:	344d883a 	add	r6,r6,r17
 1008fdc:	2021883a 	mov	r16,r4
 1008fe0:	3023883a 	mov	r17,r6
 1008fe4:	003f9806 	br	1008e48 <__muldf3+0x1c0>
 1008fe8:	403fe71e 	bne	r8,zero,1008f88 <__muldf3+0x300>
 1008fec:	01004004 	movi	r4,256
 1008ff0:	4904703a 	and	r2,r9,r4
 1008ff4:	10c4b03a 	or	r2,r2,r3
 1008ff8:	103fe31e 	bne	r2,zero,1008f88 <__muldf3+0x300>
 1008ffc:	94c4b03a 	or	r2,r18,r19
 1009000:	103fe126 	beq	r2,zero,1008f88 <__muldf3+0x300>
 1009004:	49c5883a 	add	r2,r9,r7
 1009008:	1251803a 	cmpltu	r8,r2,r9
 100900c:	4291883a 	add	r8,r8,r10
 1009010:	013fc004 	movi	r4,-256
 1009014:	1112703a 	and	r9,r2,r4
 1009018:	4015883a 	mov	r10,r8
 100901c:	003fda06 	br	1008f88 <__muldf3+0x300>
 1009020:	6813883a 	mov	r9,r13
 1009024:	003fce06 	br	1008f60 <__muldf3+0x2d8>
 1009028:	143f7c36 	bltu	r2,r16,1008e1c <__muldf3+0x194>
 100902c:	003fdd06 	br	1008fa4 <__muldf3+0x31c>
 1009030:	12bf852e 	bgeu	r2,r10,1008e48 <__muldf3+0x1c0>
 1009034:	003fe506 	br	1008fcc <__muldf3+0x344>
 1009038:	00800084 	movi	r2,2
 100903c:	20bf351e 	bne	r4,r2,1008d14 <__muldf3+0x8c>
 1009040:	01004074 	movhi	r4,257
 1009044:	210cfb04 	addi	r4,r4,13292
 1009048:	003f3f06 	br	1008d48 <__muldf3+0xc0>

0100904c <__divdf3>:
 100904c:	deffed04 	addi	sp,sp,-76
 1009050:	dcc01115 	stw	r19,68(sp)
 1009054:	dcc00404 	addi	r19,sp,16
 1009058:	2011883a 	mov	r8,r4
 100905c:	2813883a 	mov	r9,r5
 1009060:	dc000e15 	stw	r16,56(sp)
 1009064:	d809883a 	mov	r4,sp
 1009068:	980b883a 	mov	r5,r19
 100906c:	dc000904 	addi	r16,sp,36
 1009070:	dfc01215 	stw	ra,72(sp)
 1009074:	da400115 	stw	r9,4(sp)
 1009078:	d9c00315 	stw	r7,12(sp)
 100907c:	da000015 	stw	r8,0(sp)
 1009080:	d9800215 	stw	r6,8(sp)
 1009084:	dc801015 	stw	r18,64(sp)
 1009088:	dc400f15 	stw	r17,60(sp)
 100908c:	1009e280 	call	1009e28 <__unpack_d>
 1009090:	d9000204 	addi	r4,sp,8
 1009094:	800b883a 	mov	r5,r16
 1009098:	1009e280 	call	1009e28 <__unpack_d>
 100909c:	d9000417 	ldw	r4,16(sp)
 10090a0:	00800044 	movi	r2,1
 10090a4:	11000b2e 	bgeu	r2,r4,10090d4 <__divdf3+0x88>
 10090a8:	d9400917 	ldw	r5,36(sp)
 10090ac:	1140762e 	bgeu	r2,r5,1009288 <__divdf3+0x23c>
 10090b0:	d8800517 	ldw	r2,20(sp)
 10090b4:	d8c00a17 	ldw	r3,40(sp)
 10090b8:	01800104 	movi	r6,4
 10090bc:	10c4f03a 	xor	r2,r2,r3
 10090c0:	d8800515 	stw	r2,20(sp)
 10090c4:	21800226 	beq	r4,r6,10090d0 <__divdf3+0x84>
 10090c8:	00800084 	movi	r2,2
 10090cc:	2080141e 	bne	r4,r2,1009120 <__divdf3+0xd4>
 10090d0:	29000926 	beq	r5,r4,10090f8 <__divdf3+0xac>
 10090d4:	9809883a 	mov	r4,r19
 10090d8:	1009b140 	call	1009b14 <__pack_d>
 10090dc:	dfc01217 	ldw	ra,72(sp)
 10090e0:	dcc01117 	ldw	r19,68(sp)
 10090e4:	dc801017 	ldw	r18,64(sp)
 10090e8:	dc400f17 	ldw	r17,60(sp)
 10090ec:	dc000e17 	ldw	r16,56(sp)
 10090f0:	dec01304 	addi	sp,sp,76
 10090f4:	f800283a 	ret
 10090f8:	01004074 	movhi	r4,257
 10090fc:	210cfb04 	addi	r4,r4,13292
 1009100:	1009b140 	call	1009b14 <__pack_d>
 1009104:	dfc01217 	ldw	ra,72(sp)
 1009108:	dcc01117 	ldw	r19,68(sp)
 100910c:	dc801017 	ldw	r18,64(sp)
 1009110:	dc400f17 	ldw	r17,60(sp)
 1009114:	dc000e17 	ldw	r16,56(sp)
 1009118:	dec01304 	addi	sp,sp,76
 100911c:	f800283a 	ret
 1009120:	29805b26 	beq	r5,r6,1009290 <__divdf3+0x244>
 1009124:	28802d26 	beq	r5,r2,10091dc <__divdf3+0x190>
 1009128:	d8c00617 	ldw	r3,24(sp)
 100912c:	d8800b17 	ldw	r2,44(sp)
 1009130:	d9c00817 	ldw	r7,32(sp)
 1009134:	dc400d17 	ldw	r17,52(sp)
 1009138:	188bc83a 	sub	r5,r3,r2
 100913c:	d9800717 	ldw	r6,28(sp)
 1009140:	dc000c17 	ldw	r16,48(sp)
 1009144:	d9400615 	stw	r5,24(sp)
 1009148:	3c403836 	bltu	r7,r17,100922c <__divdf3+0x1e0>
 100914c:	89c03626 	beq	r17,r7,1009228 <__divdf3+0x1dc>
 1009150:	0015883a 	mov	r10,zero
 1009154:	001d883a 	mov	r14,zero
 1009158:	02c40034 	movhi	r11,4096
 100915c:	001f883a 	mov	r15,zero
 1009160:	003f883a 	mov	ra,zero
 1009164:	04800f44 	movi	r18,61
 1009168:	00000f06 	br	10091a8 <__divdf3+0x15c>
 100916c:	601d883a 	mov	r14,r12
 1009170:	681f883a 	mov	r15,r13
 1009174:	400d883a 	mov	r6,r8
 1009178:	100f883a 	mov	r7,r2
 100917c:	3191883a 	add	r8,r6,r6
 1009180:	5808d07a 	srli	r4,r11,1
 1009184:	4185803a 	cmpltu	r2,r8,r6
 1009188:	39d3883a 	add	r9,r7,r7
 100918c:	28c6b03a 	or	r3,r5,r3
 1009190:	1245883a 	add	r2,r2,r9
 1009194:	1815883a 	mov	r10,r3
 1009198:	2017883a 	mov	r11,r4
 100919c:	400d883a 	mov	r6,r8
 10091a0:	100f883a 	mov	r7,r2
 10091a4:	fc801726 	beq	ra,r18,1009204 <__divdf3+0x1b8>
 10091a8:	580a97fa 	slli	r5,r11,31
 10091ac:	5006d07a 	srli	r3,r10,1
 10091b0:	ffc00044 	addi	ra,ra,1
 10091b4:	3c7ff136 	bltu	r7,r17,100917c <__divdf3+0x130>
 10091b8:	3411c83a 	sub	r8,r6,r16
 10091bc:	3205803a 	cmpltu	r2,r6,r8
 10091c0:	3c53c83a 	sub	r9,r7,r17
 10091c4:	7298b03a 	or	r12,r14,r10
 10091c8:	7adab03a 	or	r13,r15,r11
 10091cc:	4885c83a 	sub	r2,r9,r2
 10091d0:	89ffe61e 	bne	r17,r7,100916c <__divdf3+0x120>
 10091d4:	343fe936 	bltu	r6,r16,100917c <__divdf3+0x130>
 10091d8:	003fe406 	br	100916c <__divdf3+0x120>
 10091dc:	9809883a 	mov	r4,r19
 10091e0:	d9800415 	stw	r6,16(sp)
 10091e4:	1009b140 	call	1009b14 <__pack_d>
 10091e8:	dfc01217 	ldw	ra,72(sp)
 10091ec:	dcc01117 	ldw	r19,68(sp)
 10091f0:	dc801017 	ldw	r18,64(sp)
 10091f4:	dc400f17 	ldw	r17,60(sp)
 10091f8:	dc000e17 	ldw	r16,56(sp)
 10091fc:	dec01304 	addi	sp,sp,76
 1009200:	f800283a 	ret
 1009204:	00803fc4 	movi	r2,255
 1009208:	7090703a 	and	r8,r14,r2
 100920c:	00802004 	movi	r2,128
 1009210:	0007883a 	mov	r3,zero
 1009214:	0013883a 	mov	r9,zero
 1009218:	40800d26 	beq	r8,r2,1009250 <__divdf3+0x204>
 100921c:	dbc00815 	stw	r15,32(sp)
 1009220:	db800715 	stw	r14,28(sp)
 1009224:	003fab06 	br	10090d4 <__divdf3+0x88>
 1009228:	343fc92e 	bgeu	r6,r16,1009150 <__divdf3+0x104>
 100922c:	3185883a 	add	r2,r6,r6
 1009230:	1189803a 	cmpltu	r4,r2,r6
 1009234:	39c7883a 	add	r3,r7,r7
 1009238:	20c9883a 	add	r4,r4,r3
 100923c:	297fffc4 	addi	r5,r5,-1
 1009240:	100d883a 	mov	r6,r2
 1009244:	200f883a 	mov	r7,r4
 1009248:	d9400615 	stw	r5,24(sp)
 100924c:	003fc006 	br	1009150 <__divdf3+0x104>
 1009250:	483ff21e 	bne	r9,zero,100921c <__divdf3+0x1d0>
 1009254:	01004004 	movi	r4,256
 1009258:	7104703a 	and	r2,r14,r4
 100925c:	10c4b03a 	or	r2,r2,r3
 1009260:	103fee1e 	bne	r2,zero,100921c <__divdf3+0x1d0>
 1009264:	31c4b03a 	or	r2,r6,r7
 1009268:	103fec26 	beq	r2,zero,100921c <__divdf3+0x1d0>
 100926c:	7205883a 	add	r2,r14,r8
 1009270:	1391803a 	cmpltu	r8,r2,r14
 1009274:	43d1883a 	add	r8,r8,r15
 1009278:	013fc004 	movi	r4,-256
 100927c:	111c703a 	and	r14,r2,r4
 1009280:	401f883a 	mov	r15,r8
 1009284:	003fe506 	br	100921c <__divdf3+0x1d0>
 1009288:	8009883a 	mov	r4,r16
 100928c:	003f9206 	br	10090d8 <__divdf3+0x8c>
 1009290:	9809883a 	mov	r4,r19
 1009294:	d8000715 	stw	zero,28(sp)
 1009298:	d8000815 	stw	zero,32(sp)
 100929c:	d8000615 	stw	zero,24(sp)
 10092a0:	003f8d06 	br	10090d8 <__divdf3+0x8c>

010092a4 <__eqdf2>:
 10092a4:	deffef04 	addi	sp,sp,-68
 10092a8:	dc400f15 	stw	r17,60(sp)
 10092ac:	dc400404 	addi	r17,sp,16
 10092b0:	2005883a 	mov	r2,r4
 10092b4:	2807883a 	mov	r3,r5
 10092b8:	dc000e15 	stw	r16,56(sp)
 10092bc:	d809883a 	mov	r4,sp
 10092c0:	880b883a 	mov	r5,r17
 10092c4:	dc000904 	addi	r16,sp,36
 10092c8:	d8c00115 	stw	r3,4(sp)
 10092cc:	d8800015 	stw	r2,0(sp)
 10092d0:	d9800215 	stw	r6,8(sp)
 10092d4:	dfc01015 	stw	ra,64(sp)
 10092d8:	d9c00315 	stw	r7,12(sp)
 10092dc:	1009e280 	call	1009e28 <__unpack_d>
 10092e0:	d9000204 	addi	r4,sp,8
 10092e4:	800b883a 	mov	r5,r16
 10092e8:	1009e280 	call	1009e28 <__unpack_d>
 10092ec:	d8800417 	ldw	r2,16(sp)
 10092f0:	00c00044 	movi	r3,1
 10092f4:	180d883a 	mov	r6,r3
 10092f8:	1880062e 	bgeu	r3,r2,1009314 <__eqdf2+0x70>
 10092fc:	d8800917 	ldw	r2,36(sp)
 1009300:	8809883a 	mov	r4,r17
 1009304:	800b883a 	mov	r5,r16
 1009308:	1880022e 	bgeu	r3,r2,1009314 <__eqdf2+0x70>
 100930c:	1009f600 	call	1009f60 <__fpcmp_parts_d>
 1009310:	100d883a 	mov	r6,r2
 1009314:	3005883a 	mov	r2,r6
 1009318:	dfc01017 	ldw	ra,64(sp)
 100931c:	dc400f17 	ldw	r17,60(sp)
 1009320:	dc000e17 	ldw	r16,56(sp)
 1009324:	dec01104 	addi	sp,sp,68
 1009328:	f800283a 	ret

0100932c <__nedf2>:
 100932c:	deffef04 	addi	sp,sp,-68
 1009330:	dc400f15 	stw	r17,60(sp)
 1009334:	dc400404 	addi	r17,sp,16
 1009338:	2005883a 	mov	r2,r4
 100933c:	2807883a 	mov	r3,r5
 1009340:	dc000e15 	stw	r16,56(sp)
 1009344:	d809883a 	mov	r4,sp
 1009348:	880b883a 	mov	r5,r17
 100934c:	dc000904 	addi	r16,sp,36
 1009350:	d8c00115 	stw	r3,4(sp)
 1009354:	d8800015 	stw	r2,0(sp)
 1009358:	d9800215 	stw	r6,8(sp)
 100935c:	dfc01015 	stw	ra,64(sp)
 1009360:	d9c00315 	stw	r7,12(sp)
 1009364:	1009e280 	call	1009e28 <__unpack_d>
 1009368:	d9000204 	addi	r4,sp,8
 100936c:	800b883a 	mov	r5,r16
 1009370:	1009e280 	call	1009e28 <__unpack_d>
 1009374:	d8800417 	ldw	r2,16(sp)
 1009378:	00c00044 	movi	r3,1
 100937c:	180d883a 	mov	r6,r3
 1009380:	1880062e 	bgeu	r3,r2,100939c <__nedf2+0x70>
 1009384:	d8800917 	ldw	r2,36(sp)
 1009388:	8809883a 	mov	r4,r17
 100938c:	800b883a 	mov	r5,r16
 1009390:	1880022e 	bgeu	r3,r2,100939c <__nedf2+0x70>
 1009394:	1009f600 	call	1009f60 <__fpcmp_parts_d>
 1009398:	100d883a 	mov	r6,r2
 100939c:	3005883a 	mov	r2,r6
 10093a0:	dfc01017 	ldw	ra,64(sp)
 10093a4:	dc400f17 	ldw	r17,60(sp)
 10093a8:	dc000e17 	ldw	r16,56(sp)
 10093ac:	dec01104 	addi	sp,sp,68
 10093b0:	f800283a 	ret

010093b4 <__gtdf2>:
 10093b4:	deffef04 	addi	sp,sp,-68
 10093b8:	dc400f15 	stw	r17,60(sp)
 10093bc:	dc400404 	addi	r17,sp,16
 10093c0:	2005883a 	mov	r2,r4
 10093c4:	2807883a 	mov	r3,r5
 10093c8:	dc000e15 	stw	r16,56(sp)
 10093cc:	d809883a 	mov	r4,sp
 10093d0:	880b883a 	mov	r5,r17
 10093d4:	dc000904 	addi	r16,sp,36
 10093d8:	d8c00115 	stw	r3,4(sp)
 10093dc:	d8800015 	stw	r2,0(sp)
 10093e0:	d9800215 	stw	r6,8(sp)
 10093e4:	dfc01015 	stw	ra,64(sp)
 10093e8:	d9c00315 	stw	r7,12(sp)
 10093ec:	1009e280 	call	1009e28 <__unpack_d>
 10093f0:	d9000204 	addi	r4,sp,8
 10093f4:	800b883a 	mov	r5,r16
 10093f8:	1009e280 	call	1009e28 <__unpack_d>
 10093fc:	d8800417 	ldw	r2,16(sp)
 1009400:	00c00044 	movi	r3,1
 1009404:	01bfffc4 	movi	r6,-1
 1009408:	1880062e 	bgeu	r3,r2,1009424 <__gtdf2+0x70>
 100940c:	d8800917 	ldw	r2,36(sp)
 1009410:	8809883a 	mov	r4,r17
 1009414:	800b883a 	mov	r5,r16
 1009418:	1880022e 	bgeu	r3,r2,1009424 <__gtdf2+0x70>
 100941c:	1009f600 	call	1009f60 <__fpcmp_parts_d>
 1009420:	100d883a 	mov	r6,r2
 1009424:	3005883a 	mov	r2,r6
 1009428:	dfc01017 	ldw	ra,64(sp)
 100942c:	dc400f17 	ldw	r17,60(sp)
 1009430:	dc000e17 	ldw	r16,56(sp)
 1009434:	dec01104 	addi	sp,sp,68
 1009438:	f800283a 	ret

0100943c <__gedf2>:
 100943c:	deffef04 	addi	sp,sp,-68
 1009440:	dc400f15 	stw	r17,60(sp)
 1009444:	dc400404 	addi	r17,sp,16
 1009448:	2005883a 	mov	r2,r4
 100944c:	2807883a 	mov	r3,r5
 1009450:	dc000e15 	stw	r16,56(sp)
 1009454:	d809883a 	mov	r4,sp
 1009458:	880b883a 	mov	r5,r17
 100945c:	dc000904 	addi	r16,sp,36
 1009460:	d8c00115 	stw	r3,4(sp)
 1009464:	d8800015 	stw	r2,0(sp)
 1009468:	d9800215 	stw	r6,8(sp)
 100946c:	dfc01015 	stw	ra,64(sp)
 1009470:	d9c00315 	stw	r7,12(sp)
 1009474:	1009e280 	call	1009e28 <__unpack_d>
 1009478:	d9000204 	addi	r4,sp,8
 100947c:	800b883a 	mov	r5,r16
 1009480:	1009e280 	call	1009e28 <__unpack_d>
 1009484:	d8800417 	ldw	r2,16(sp)
 1009488:	00c00044 	movi	r3,1
 100948c:	01bfffc4 	movi	r6,-1
 1009490:	1880062e 	bgeu	r3,r2,10094ac <__gedf2+0x70>
 1009494:	d8800917 	ldw	r2,36(sp)
 1009498:	8809883a 	mov	r4,r17
 100949c:	800b883a 	mov	r5,r16
 10094a0:	1880022e 	bgeu	r3,r2,10094ac <__gedf2+0x70>
 10094a4:	1009f600 	call	1009f60 <__fpcmp_parts_d>
 10094a8:	100d883a 	mov	r6,r2
 10094ac:	3005883a 	mov	r2,r6
 10094b0:	dfc01017 	ldw	ra,64(sp)
 10094b4:	dc400f17 	ldw	r17,60(sp)
 10094b8:	dc000e17 	ldw	r16,56(sp)
 10094bc:	dec01104 	addi	sp,sp,68
 10094c0:	f800283a 	ret

010094c4 <__ltdf2>:
 10094c4:	deffef04 	addi	sp,sp,-68
 10094c8:	dc400f15 	stw	r17,60(sp)
 10094cc:	dc400404 	addi	r17,sp,16
 10094d0:	2005883a 	mov	r2,r4
 10094d4:	2807883a 	mov	r3,r5
 10094d8:	dc000e15 	stw	r16,56(sp)
 10094dc:	d809883a 	mov	r4,sp
 10094e0:	880b883a 	mov	r5,r17
 10094e4:	dc000904 	addi	r16,sp,36
 10094e8:	d8c00115 	stw	r3,4(sp)
 10094ec:	d8800015 	stw	r2,0(sp)
 10094f0:	d9800215 	stw	r6,8(sp)
 10094f4:	dfc01015 	stw	ra,64(sp)
 10094f8:	d9c00315 	stw	r7,12(sp)
 10094fc:	1009e280 	call	1009e28 <__unpack_d>
 1009500:	d9000204 	addi	r4,sp,8
 1009504:	800b883a 	mov	r5,r16
 1009508:	1009e280 	call	1009e28 <__unpack_d>
 100950c:	d8800417 	ldw	r2,16(sp)
 1009510:	00c00044 	movi	r3,1
 1009514:	180d883a 	mov	r6,r3
 1009518:	1880062e 	bgeu	r3,r2,1009534 <__ltdf2+0x70>
 100951c:	d8800917 	ldw	r2,36(sp)
 1009520:	8809883a 	mov	r4,r17
 1009524:	800b883a 	mov	r5,r16
 1009528:	1880022e 	bgeu	r3,r2,1009534 <__ltdf2+0x70>
 100952c:	1009f600 	call	1009f60 <__fpcmp_parts_d>
 1009530:	100d883a 	mov	r6,r2
 1009534:	3005883a 	mov	r2,r6
 1009538:	dfc01017 	ldw	ra,64(sp)
 100953c:	dc400f17 	ldw	r17,60(sp)
 1009540:	dc000e17 	ldw	r16,56(sp)
 1009544:	dec01104 	addi	sp,sp,68
 1009548:	f800283a 	ret

0100954c <__floatsidf>:
 100954c:	2006d7fa 	srli	r3,r4,31
 1009550:	defff604 	addi	sp,sp,-40
 1009554:	008000c4 	movi	r2,3
 1009558:	dfc00915 	stw	ra,36(sp)
 100955c:	dcc00815 	stw	r19,32(sp)
 1009560:	dc800715 	stw	r18,28(sp)
 1009564:	dc400615 	stw	r17,24(sp)
 1009568:	dc000515 	stw	r16,20(sp)
 100956c:	d8800015 	stw	r2,0(sp)
 1009570:	d8c00115 	stw	r3,4(sp)
 1009574:	20000f1e 	bne	r4,zero,10095b4 <__floatsidf+0x68>
 1009578:	00800084 	movi	r2,2
 100957c:	d8800015 	stw	r2,0(sp)
 1009580:	d809883a 	mov	r4,sp
 1009584:	1009b140 	call	1009b14 <__pack_d>
 1009588:	1009883a 	mov	r4,r2
 100958c:	180b883a 	mov	r5,r3
 1009590:	2005883a 	mov	r2,r4
 1009594:	2807883a 	mov	r3,r5
 1009598:	dfc00917 	ldw	ra,36(sp)
 100959c:	dcc00817 	ldw	r19,32(sp)
 10095a0:	dc800717 	ldw	r18,28(sp)
 10095a4:	dc400617 	ldw	r17,24(sp)
 10095a8:	dc000517 	ldw	r16,20(sp)
 10095ac:	dec00a04 	addi	sp,sp,40
 10095b0:	f800283a 	ret
 10095b4:	00800f04 	movi	r2,60
 10095b8:	1807003a 	cmpeq	r3,r3,zero
 10095bc:	d8800215 	stw	r2,8(sp)
 10095c0:	18001126 	beq	r3,zero,1009608 <__floatsidf+0xbc>
 10095c4:	0027883a 	mov	r19,zero
 10095c8:	2025883a 	mov	r18,r4
 10095cc:	d9000315 	stw	r4,12(sp)
 10095d0:	dcc00415 	stw	r19,16(sp)
 10095d4:	1009a940 	call	1009a94 <__clzsi2>
 10095d8:	11000744 	addi	r4,r2,29
 10095dc:	013fe80e 	bge	zero,r4,1009580 <__floatsidf+0x34>
 10095e0:	10bfff44 	addi	r2,r2,-3
 10095e4:	10000c16 	blt	r2,zero,1009618 <__floatsidf+0xcc>
 10095e8:	90a2983a 	sll	r17,r18,r2
 10095ec:	0021883a 	mov	r16,zero
 10095f0:	d8800217 	ldw	r2,8(sp)
 10095f4:	dc400415 	stw	r17,16(sp)
 10095f8:	dc000315 	stw	r16,12(sp)
 10095fc:	1105c83a 	sub	r2,r2,r4
 1009600:	d8800215 	stw	r2,8(sp)
 1009604:	003fde06 	br	1009580 <__floatsidf+0x34>
 1009608:	00a00034 	movhi	r2,32768
 100960c:	20800a26 	beq	r4,r2,1009638 <__floatsidf+0xec>
 1009610:	0109c83a 	sub	r4,zero,r4
 1009614:	003feb06 	br	10095c4 <__floatsidf+0x78>
 1009618:	9006d07a 	srli	r3,r18,1
 100961c:	008007c4 	movi	r2,31
 1009620:	1105c83a 	sub	r2,r2,r4
 1009624:	1886d83a 	srl	r3,r3,r2
 1009628:	9922983a 	sll	r17,r19,r4
 100962c:	9120983a 	sll	r16,r18,r4
 1009630:	1c62b03a 	or	r17,r3,r17
 1009634:	003fee06 	br	10095f0 <__floatsidf+0xa4>
 1009638:	0009883a 	mov	r4,zero
 100963c:	01707834 	movhi	r5,49632
 1009640:	003fd306 	br	1009590 <__floatsidf+0x44>

01009644 <__fixdfsi>:
 1009644:	defff804 	addi	sp,sp,-32
 1009648:	2005883a 	mov	r2,r4
 100964c:	2807883a 	mov	r3,r5
 1009650:	d809883a 	mov	r4,sp
 1009654:	d9400204 	addi	r5,sp,8
 1009658:	d8c00115 	stw	r3,4(sp)
 100965c:	d8800015 	stw	r2,0(sp)
 1009660:	dfc00715 	stw	ra,28(sp)
 1009664:	1009e280 	call	1009e28 <__unpack_d>
 1009668:	d8c00217 	ldw	r3,8(sp)
 100966c:	00800084 	movi	r2,2
 1009670:	1880051e 	bne	r3,r2,1009688 <__fixdfsi+0x44>
 1009674:	0007883a 	mov	r3,zero
 1009678:	1805883a 	mov	r2,r3
 100967c:	dfc00717 	ldw	ra,28(sp)
 1009680:	dec00804 	addi	sp,sp,32
 1009684:	f800283a 	ret
 1009688:	00800044 	movi	r2,1
 100968c:	10fff92e 	bgeu	r2,r3,1009674 <__fixdfsi+0x30>
 1009690:	00800104 	movi	r2,4
 1009694:	18800426 	beq	r3,r2,10096a8 <__fixdfsi+0x64>
 1009698:	d8c00417 	ldw	r3,16(sp)
 100969c:	183ff516 	blt	r3,zero,1009674 <__fixdfsi+0x30>
 10096a0:	00800784 	movi	r2,30
 10096a4:	10c0080e 	bge	r2,r3,10096c8 <__fixdfsi+0x84>
 10096a8:	d8800317 	ldw	r2,12(sp)
 10096ac:	1000121e 	bne	r2,zero,10096f8 <__fixdfsi+0xb4>
 10096b0:	00e00034 	movhi	r3,32768
 10096b4:	18ffffc4 	addi	r3,r3,-1
 10096b8:	1805883a 	mov	r2,r3
 10096bc:	dfc00717 	ldw	ra,28(sp)
 10096c0:	dec00804 	addi	sp,sp,32
 10096c4:	f800283a 	ret
 10096c8:	00800f04 	movi	r2,60
 10096cc:	10d1c83a 	sub	r8,r2,r3
 10096d0:	40bff804 	addi	r2,r8,-32
 10096d4:	d9800517 	ldw	r6,20(sp)
 10096d8:	d9c00617 	ldw	r7,24(sp)
 10096dc:	10000816 	blt	r2,zero,1009700 <__fixdfsi+0xbc>
 10096e0:	3888d83a 	srl	r4,r7,r2
 10096e4:	d8800317 	ldw	r2,12(sp)
 10096e8:	2007883a 	mov	r3,r4
 10096ec:	103fe226 	beq	r2,zero,1009678 <__fixdfsi+0x34>
 10096f0:	0107c83a 	sub	r3,zero,r4
 10096f4:	003fe006 	br	1009678 <__fixdfsi+0x34>
 10096f8:	00e00034 	movhi	r3,32768
 10096fc:	003fde06 	br	1009678 <__fixdfsi+0x34>
 1009700:	39c7883a 	add	r3,r7,r7
 1009704:	008007c4 	movi	r2,31
 1009708:	1205c83a 	sub	r2,r2,r8
 100970c:	1886983a 	sll	r3,r3,r2
 1009710:	3208d83a 	srl	r4,r6,r8
 1009714:	1908b03a 	or	r4,r3,r4
 1009718:	003ff206 	br	10096e4 <__fixdfsi+0xa0>

0100971c <__floatunsidf>:
 100971c:	defff204 	addi	sp,sp,-56
 1009720:	dfc00d15 	stw	ra,52(sp)
 1009724:	ddc00c15 	stw	r23,48(sp)
 1009728:	dd800b15 	stw	r22,44(sp)
 100972c:	dd400a15 	stw	r21,40(sp)
 1009730:	dd000915 	stw	r20,36(sp)
 1009734:	dcc00815 	stw	r19,32(sp)
 1009738:	dc800715 	stw	r18,28(sp)
 100973c:	dc400615 	stw	r17,24(sp)
 1009740:	dc000515 	stw	r16,20(sp)
 1009744:	d8000115 	stw	zero,4(sp)
 1009748:	20000f1e 	bne	r4,zero,1009788 <__floatunsidf+0x6c>
 100974c:	00800084 	movi	r2,2
 1009750:	d8800015 	stw	r2,0(sp)
 1009754:	d809883a 	mov	r4,sp
 1009758:	1009b140 	call	1009b14 <__pack_d>
 100975c:	dfc00d17 	ldw	ra,52(sp)
 1009760:	ddc00c17 	ldw	r23,48(sp)
 1009764:	dd800b17 	ldw	r22,44(sp)
 1009768:	dd400a17 	ldw	r21,40(sp)
 100976c:	dd000917 	ldw	r20,36(sp)
 1009770:	dcc00817 	ldw	r19,32(sp)
 1009774:	dc800717 	ldw	r18,28(sp)
 1009778:	dc400617 	ldw	r17,24(sp)
 100977c:	dc000517 	ldw	r16,20(sp)
 1009780:	dec00e04 	addi	sp,sp,56
 1009784:	f800283a 	ret
 1009788:	008000c4 	movi	r2,3
 100978c:	00c00f04 	movi	r3,60
 1009790:	002f883a 	mov	r23,zero
 1009794:	202d883a 	mov	r22,r4
 1009798:	d8800015 	stw	r2,0(sp)
 100979c:	d8c00215 	stw	r3,8(sp)
 10097a0:	d9000315 	stw	r4,12(sp)
 10097a4:	ddc00415 	stw	r23,16(sp)
 10097a8:	1009a940 	call	1009a94 <__clzsi2>
 10097ac:	12400744 	addi	r9,r2,29
 10097b0:	48000b16 	blt	r9,zero,10097e0 <__floatunsidf+0xc4>
 10097b4:	483fe726 	beq	r9,zero,1009754 <__floatunsidf+0x38>
 10097b8:	10bfff44 	addi	r2,r2,-3
 10097bc:	10002e16 	blt	r2,zero,1009878 <__floatunsidf+0x15c>
 10097c0:	b0a2983a 	sll	r17,r22,r2
 10097c4:	0021883a 	mov	r16,zero
 10097c8:	d8800217 	ldw	r2,8(sp)
 10097cc:	dc400415 	stw	r17,16(sp)
 10097d0:	dc000315 	stw	r16,12(sp)
 10097d4:	1245c83a 	sub	r2,r2,r9
 10097d8:	d8800215 	stw	r2,8(sp)
 10097dc:	003fdd06 	br	1009754 <__floatunsidf+0x38>
 10097e0:	0255c83a 	sub	r10,zero,r9
 10097e4:	51bff804 	addi	r6,r10,-32
 10097e8:	30001b16 	blt	r6,zero,1009858 <__floatunsidf+0x13c>
 10097ec:	b9a8d83a 	srl	r20,r23,r6
 10097f0:	002b883a 	mov	r21,zero
 10097f4:	000f883a 	mov	r7,zero
 10097f8:	01000044 	movi	r4,1
 10097fc:	0011883a 	mov	r8,zero
 1009800:	30002516 	blt	r6,zero,1009898 <__floatunsidf+0x17c>
 1009804:	21a6983a 	sll	r19,r4,r6
 1009808:	0025883a 	mov	r18,zero
 100980c:	00bfffc4 	movi	r2,-1
 1009810:	9089883a 	add	r4,r18,r2
 1009814:	988b883a 	add	r5,r19,r2
 1009818:	248d803a 	cmpltu	r6,r4,r18
 100981c:	314b883a 	add	r5,r6,r5
 1009820:	b104703a 	and	r2,r22,r4
 1009824:	b946703a 	and	r3,r23,r5
 1009828:	10c4b03a 	or	r2,r2,r3
 100982c:	10000226 	beq	r2,zero,1009838 <__floatunsidf+0x11c>
 1009830:	01c00044 	movi	r7,1
 1009834:	0011883a 	mov	r8,zero
 1009838:	d9000217 	ldw	r4,8(sp)
 100983c:	a1c4b03a 	or	r2,r20,r7
 1009840:	aa06b03a 	or	r3,r21,r8
 1009844:	2249c83a 	sub	r4,r4,r9
 1009848:	d8c00415 	stw	r3,16(sp)
 100984c:	d9000215 	stw	r4,8(sp)
 1009850:	d8800315 	stw	r2,12(sp)
 1009854:	003fbf06 	br	1009754 <__floatunsidf+0x38>
 1009858:	bdc7883a 	add	r3,r23,r23
 100985c:	008007c4 	movi	r2,31
 1009860:	1285c83a 	sub	r2,r2,r10
 1009864:	1886983a 	sll	r3,r3,r2
 1009868:	b2a8d83a 	srl	r20,r22,r10
 100986c:	baaad83a 	srl	r21,r23,r10
 1009870:	1d28b03a 	or	r20,r3,r20
 1009874:	003fdf06 	br	10097f4 <__floatunsidf+0xd8>
 1009878:	b006d07a 	srli	r3,r22,1
 100987c:	008007c4 	movi	r2,31
 1009880:	1245c83a 	sub	r2,r2,r9
 1009884:	1886d83a 	srl	r3,r3,r2
 1009888:	ba62983a 	sll	r17,r23,r9
 100988c:	b260983a 	sll	r16,r22,r9
 1009890:	1c62b03a 	or	r17,r3,r17
 1009894:	003fcc06 	br	10097c8 <__floatunsidf+0xac>
 1009898:	2006d07a 	srli	r3,r4,1
 100989c:	008007c4 	movi	r2,31
 10098a0:	1285c83a 	sub	r2,r2,r10
 10098a4:	18a6d83a 	srl	r19,r3,r2
 10098a8:	22a4983a 	sll	r18,r4,r10
 10098ac:	003fd706 	br	100980c <__floatunsidf+0xf0>

010098b0 <udivmodsi4>:
 10098b0:	29001b2e 	bgeu	r5,r4,1009920 <udivmodsi4+0x70>
 10098b4:	28001a16 	blt	r5,zero,1009920 <udivmodsi4+0x70>
 10098b8:	00800044 	movi	r2,1
 10098bc:	0007883a 	mov	r3,zero
 10098c0:	01c007c4 	movi	r7,31
 10098c4:	00000306 	br	10098d4 <udivmodsi4+0x24>
 10098c8:	19c01326 	beq	r3,r7,1009918 <udivmodsi4+0x68>
 10098cc:	18c00044 	addi	r3,r3,1
 10098d0:	28000416 	blt	r5,zero,10098e4 <udivmodsi4+0x34>
 10098d4:	294b883a 	add	r5,r5,r5
 10098d8:	1085883a 	add	r2,r2,r2
 10098dc:	293ffa36 	bltu	r5,r4,10098c8 <udivmodsi4+0x18>
 10098e0:	10000d26 	beq	r2,zero,1009918 <udivmodsi4+0x68>
 10098e4:	0007883a 	mov	r3,zero
 10098e8:	21400236 	bltu	r4,r5,10098f4 <udivmodsi4+0x44>
 10098ec:	2149c83a 	sub	r4,r4,r5
 10098f0:	1886b03a 	or	r3,r3,r2
 10098f4:	1004d07a 	srli	r2,r2,1
 10098f8:	280ad07a 	srli	r5,r5,1
 10098fc:	103ffa1e 	bne	r2,zero,10098e8 <udivmodsi4+0x38>
 1009900:	30000226 	beq	r6,zero,100990c <udivmodsi4+0x5c>
 1009904:	2005883a 	mov	r2,r4
 1009908:	f800283a 	ret
 100990c:	1809883a 	mov	r4,r3
 1009910:	2005883a 	mov	r2,r4
 1009914:	f800283a 	ret
 1009918:	0007883a 	mov	r3,zero
 100991c:	003ff806 	br	1009900 <udivmodsi4+0x50>
 1009920:	00800044 	movi	r2,1
 1009924:	0007883a 	mov	r3,zero
 1009928:	003fef06 	br	10098e8 <udivmodsi4+0x38>

0100992c <__divsi3>:
 100992c:	defffe04 	addi	sp,sp,-8
 1009930:	dc000015 	stw	r16,0(sp)
 1009934:	dfc00115 	stw	ra,4(sp)
 1009938:	0021883a 	mov	r16,zero
 100993c:	20000c16 	blt	r4,zero,1009970 <__divsi3+0x44>
 1009940:	000d883a 	mov	r6,zero
 1009944:	28000e16 	blt	r5,zero,1009980 <__divsi3+0x54>
 1009948:	10098b00 	call	10098b0 <udivmodsi4>
 100994c:	1007883a 	mov	r3,r2
 1009950:	8005003a 	cmpeq	r2,r16,zero
 1009954:	1000011e 	bne	r2,zero,100995c <__divsi3+0x30>
 1009958:	00c7c83a 	sub	r3,zero,r3
 100995c:	1805883a 	mov	r2,r3
 1009960:	dfc00117 	ldw	ra,4(sp)
 1009964:	dc000017 	ldw	r16,0(sp)
 1009968:	dec00204 	addi	sp,sp,8
 100996c:	f800283a 	ret
 1009970:	0109c83a 	sub	r4,zero,r4
 1009974:	04000044 	movi	r16,1
 1009978:	000d883a 	mov	r6,zero
 100997c:	283ff20e 	bge	r5,zero,1009948 <__divsi3+0x1c>
 1009980:	014bc83a 	sub	r5,zero,r5
 1009984:	8021003a 	cmpeq	r16,r16,zero
 1009988:	003fef06 	br	1009948 <__divsi3+0x1c>

0100998c <__modsi3>:
 100998c:	deffff04 	addi	sp,sp,-4
 1009990:	dfc00015 	stw	ra,0(sp)
 1009994:	01800044 	movi	r6,1
 1009998:	2807883a 	mov	r3,r5
 100999c:	20000416 	blt	r4,zero,10099b0 <__modsi3+0x24>
 10099a0:	28000c16 	blt	r5,zero,10099d4 <__modsi3+0x48>
 10099a4:	dfc00017 	ldw	ra,0(sp)
 10099a8:	dec00104 	addi	sp,sp,4
 10099ac:	10098b01 	jmpi	10098b0 <udivmodsi4>
 10099b0:	0109c83a 	sub	r4,zero,r4
 10099b4:	28000b16 	blt	r5,zero,10099e4 <__modsi3+0x58>
 10099b8:	180b883a 	mov	r5,r3
 10099bc:	01800044 	movi	r6,1
 10099c0:	10098b00 	call	10098b0 <udivmodsi4>
 10099c4:	0085c83a 	sub	r2,zero,r2
 10099c8:	dfc00017 	ldw	ra,0(sp)
 10099cc:	dec00104 	addi	sp,sp,4
 10099d0:	f800283a 	ret
 10099d4:	014bc83a 	sub	r5,zero,r5
 10099d8:	dfc00017 	ldw	ra,0(sp)
 10099dc:	dec00104 	addi	sp,sp,4
 10099e0:	10098b01 	jmpi	10098b0 <udivmodsi4>
 10099e4:	0147c83a 	sub	r3,zero,r5
 10099e8:	003ff306 	br	10099b8 <__modsi3+0x2c>

010099ec <__udivsi3>:
 10099ec:	000d883a 	mov	r6,zero
 10099f0:	10098b01 	jmpi	10098b0 <udivmodsi4>

010099f4 <__umodsi3>:
 10099f4:	01800044 	movi	r6,1
 10099f8:	10098b01 	jmpi	10098b0 <udivmodsi4>

010099fc <__muldi3>:
 10099fc:	2011883a 	mov	r8,r4
 1009a00:	427fffcc 	andi	r9,r8,65535
 1009a04:	4018d43a 	srli	r12,r8,16
 1009a08:	32bfffcc 	andi	r10,r6,65535
 1009a0c:	3016d43a 	srli	r11,r6,16
 1009a10:	4a85383a 	mul	r2,r9,r10
 1009a14:	6295383a 	mul	r10,r12,r10
 1009a18:	4ad3383a 	mul	r9,r9,r11
 1009a1c:	113fffcc 	andi	r4,r2,65535
 1009a20:	1004d43a 	srli	r2,r2,16
 1009a24:	4a93883a 	add	r9,r9,r10
 1009a28:	3807883a 	mov	r3,r7
 1009a2c:	1245883a 	add	r2,r2,r9
 1009a30:	280f883a 	mov	r7,r5
 1009a34:	180b883a 	mov	r5,r3
 1009a38:	1006943a 	slli	r3,r2,16
 1009a3c:	defffd04 	addi	sp,sp,-12
 1009a40:	dc800215 	stw	r18,8(sp)
 1009a44:	1907883a 	add	r3,r3,r4
 1009a48:	dc400115 	stw	r17,4(sp)
 1009a4c:	dc000015 	stw	r16,0(sp)
 1009a50:	4165383a 	mul	r18,r8,r5
 1009a54:	31e3383a 	mul	r17,r6,r7
 1009a58:	1012d43a 	srli	r9,r2,16
 1009a5c:	62d9383a 	mul	r12,r12,r11
 1009a60:	181f883a 	mov	r15,r3
 1009a64:	1280022e 	bgeu	r2,r10,1009a70 <__muldi3+0x74>
 1009a68:	00800074 	movhi	r2,1
 1009a6c:	6099883a 	add	r12,r12,r2
 1009a70:	624d883a 	add	r6,r12,r9
 1009a74:	9187883a 	add	r3,r18,r6
 1009a78:	88c7883a 	add	r3,r17,r3
 1009a7c:	7805883a 	mov	r2,r15
 1009a80:	dc800217 	ldw	r18,8(sp)
 1009a84:	dc400117 	ldw	r17,4(sp)
 1009a88:	dc000017 	ldw	r16,0(sp)
 1009a8c:	dec00304 	addi	sp,sp,12
 1009a90:	f800283a 	ret

01009a94 <__clzsi2>:
 1009a94:	00bfffd4 	movui	r2,65535
 1009a98:	11000e36 	bltu	r2,r4,1009ad4 <__clzsi2+0x40>
 1009a9c:	00803fc4 	movi	r2,255
 1009aa0:	01400204 	movi	r5,8
 1009aa4:	0007883a 	mov	r3,zero
 1009aa8:	11001036 	bltu	r2,r4,1009aec <__clzsi2+0x58>
 1009aac:	000b883a 	mov	r5,zero
 1009ab0:	20c6d83a 	srl	r3,r4,r3
 1009ab4:	00804074 	movhi	r2,257
 1009ab8:	108d0004 	addi	r2,r2,13312
 1009abc:	1887883a 	add	r3,r3,r2
 1009ac0:	18800003 	ldbu	r2,0(r3)
 1009ac4:	00c00804 	movi	r3,32
 1009ac8:	2885883a 	add	r2,r5,r2
 1009acc:	1885c83a 	sub	r2,r3,r2
 1009ad0:	f800283a 	ret
 1009ad4:	01400404 	movi	r5,16
 1009ad8:	00804034 	movhi	r2,256
 1009adc:	10bfffc4 	addi	r2,r2,-1
 1009ae0:	2807883a 	mov	r3,r5
 1009ae4:	113ff22e 	bgeu	r2,r4,1009ab0 <__clzsi2+0x1c>
 1009ae8:	01400604 	movi	r5,24
 1009aec:	2807883a 	mov	r3,r5
 1009af0:	20c6d83a 	srl	r3,r4,r3
 1009af4:	00804074 	movhi	r2,257
 1009af8:	108d0004 	addi	r2,r2,13312
 1009afc:	1887883a 	add	r3,r3,r2
 1009b00:	18800003 	ldbu	r2,0(r3)
 1009b04:	00c00804 	movi	r3,32
 1009b08:	2885883a 	add	r2,r5,r2
 1009b0c:	1885c83a 	sub	r2,r3,r2
 1009b10:	f800283a 	ret

01009b14 <__pack_d>:
 1009b14:	20c00017 	ldw	r3,0(r4)
 1009b18:	defffd04 	addi	sp,sp,-12
 1009b1c:	dc000015 	stw	r16,0(sp)
 1009b20:	dc800215 	stw	r18,8(sp)
 1009b24:	dc400115 	stw	r17,4(sp)
 1009b28:	00800044 	movi	r2,1
 1009b2c:	22000317 	ldw	r8,12(r4)
 1009b30:	001f883a 	mov	r15,zero
 1009b34:	22400417 	ldw	r9,16(r4)
 1009b38:	24000117 	ldw	r16,4(r4)
 1009b3c:	10c0552e 	bgeu	r2,r3,1009c94 <__pack_d+0x180>
 1009b40:	00800104 	movi	r2,4
 1009b44:	18804f26 	beq	r3,r2,1009c84 <__pack_d+0x170>
 1009b48:	00800084 	movi	r2,2
 1009b4c:	18800226 	beq	r3,r2,1009b58 <__pack_d+0x44>
 1009b50:	4244b03a 	or	r2,r8,r9
 1009b54:	10001a1e 	bne	r2,zero,1009bc0 <__pack_d+0xac>
 1009b58:	000d883a 	mov	r6,zero
 1009b5c:	000f883a 	mov	r7,zero
 1009b60:	0011883a 	mov	r8,zero
 1009b64:	00800434 	movhi	r2,16
 1009b68:	10bfffc4 	addi	r2,r2,-1
 1009b6c:	301d883a 	mov	r14,r6
 1009b70:	3884703a 	and	r2,r7,r2
 1009b74:	400a953a 	slli	r5,r8,20
 1009b78:	79bffc2c 	andhi	r6,r15,65520
 1009b7c:	308cb03a 	or	r6,r6,r2
 1009b80:	00e00434 	movhi	r3,32784
 1009b84:	18ffffc4 	addi	r3,r3,-1
 1009b88:	800497fa 	slli	r2,r16,31
 1009b8c:	30c6703a 	and	r3,r6,r3
 1009b90:	1946b03a 	or	r3,r3,r5
 1009b94:	01600034 	movhi	r5,32768
 1009b98:	297fffc4 	addi	r5,r5,-1
 1009b9c:	194a703a 	and	r5,r3,r5
 1009ba0:	288ab03a 	or	r5,r5,r2
 1009ba4:	2807883a 	mov	r3,r5
 1009ba8:	7005883a 	mov	r2,r14
 1009bac:	dc800217 	ldw	r18,8(sp)
 1009bb0:	dc400117 	ldw	r17,4(sp)
 1009bb4:	dc000017 	ldw	r16,0(sp)
 1009bb8:	dec00304 	addi	sp,sp,12
 1009bbc:	f800283a 	ret
 1009bc0:	21000217 	ldw	r4,8(r4)
 1009bc4:	00bf0084 	movi	r2,-1022
 1009bc8:	20803f16 	blt	r4,r2,1009cc8 <__pack_d+0x1b4>
 1009bcc:	0080ffc4 	movi	r2,1023
 1009bd0:	11002c16 	blt	r2,r4,1009c84 <__pack_d+0x170>
 1009bd4:	00803fc4 	movi	r2,255
 1009bd8:	408c703a 	and	r6,r8,r2
 1009bdc:	00802004 	movi	r2,128
 1009be0:	0007883a 	mov	r3,zero
 1009be4:	000f883a 	mov	r7,zero
 1009be8:	2280ffc4 	addi	r10,r4,1023
 1009bec:	30801e26 	beq	r6,r2,1009c68 <__pack_d+0x154>
 1009bf0:	00801fc4 	movi	r2,127
 1009bf4:	4089883a 	add	r4,r8,r2
 1009bf8:	220d803a 	cmpltu	r6,r4,r8
 1009bfc:	324d883a 	add	r6,r6,r9
 1009c00:	2011883a 	mov	r8,r4
 1009c04:	3013883a 	mov	r9,r6
 1009c08:	00880034 	movhi	r2,8192
 1009c0c:	10bfffc4 	addi	r2,r2,-1
 1009c10:	12400d36 	bltu	r2,r9,1009c48 <__pack_d+0x134>
 1009c14:	4804963a 	slli	r2,r9,24
 1009c18:	400cd23a 	srli	r6,r8,8
 1009c1c:	480ed23a 	srli	r7,r9,8
 1009c20:	013fffc4 	movi	r4,-1
 1009c24:	118cb03a 	or	r6,r2,r6
 1009c28:	01400434 	movhi	r5,16
 1009c2c:	297fffc4 	addi	r5,r5,-1
 1009c30:	3104703a 	and	r2,r6,r4
 1009c34:	3946703a 	and	r3,r7,r5
 1009c38:	5201ffcc 	andi	r8,r10,2047
 1009c3c:	100d883a 	mov	r6,r2
 1009c40:	180f883a 	mov	r7,r3
 1009c44:	003fc706 	br	1009b64 <__pack_d+0x50>
 1009c48:	480897fa 	slli	r4,r9,31
 1009c4c:	4004d07a 	srli	r2,r8,1
 1009c50:	4806d07a 	srli	r3,r9,1
 1009c54:	52800044 	addi	r10,r10,1
 1009c58:	2084b03a 	or	r2,r4,r2
 1009c5c:	1011883a 	mov	r8,r2
 1009c60:	1813883a 	mov	r9,r3
 1009c64:	003feb06 	br	1009c14 <__pack_d+0x100>
 1009c68:	383fe11e 	bne	r7,zero,1009bf0 <__pack_d+0xdc>
 1009c6c:	01004004 	movi	r4,256
 1009c70:	4104703a 	and	r2,r8,r4
 1009c74:	10c4b03a 	or	r2,r2,r3
 1009c78:	103fe326 	beq	r2,zero,1009c08 <__pack_d+0xf4>
 1009c7c:	3005883a 	mov	r2,r6
 1009c80:	003fdc06 	br	1009bf4 <__pack_d+0xe0>
 1009c84:	000d883a 	mov	r6,zero
 1009c88:	000f883a 	mov	r7,zero
 1009c8c:	0201ffc4 	movi	r8,2047
 1009c90:	003fb406 	br	1009b64 <__pack_d+0x50>
 1009c94:	0005883a 	mov	r2,zero
 1009c98:	00c00234 	movhi	r3,8
 1009c9c:	408cb03a 	or	r6,r8,r2
 1009ca0:	48ceb03a 	or	r7,r9,r3
 1009ca4:	013fffc4 	movi	r4,-1
 1009ca8:	01400434 	movhi	r5,16
 1009cac:	297fffc4 	addi	r5,r5,-1
 1009cb0:	3104703a 	and	r2,r6,r4
 1009cb4:	3946703a 	and	r3,r7,r5
 1009cb8:	100d883a 	mov	r6,r2
 1009cbc:	180f883a 	mov	r7,r3
 1009cc0:	0201ffc4 	movi	r8,2047
 1009cc4:	003fa706 	br	1009b64 <__pack_d+0x50>
 1009cc8:	1109c83a 	sub	r4,r2,r4
 1009ccc:	00800e04 	movi	r2,56
 1009cd0:	11004316 	blt	r2,r4,1009de0 <__pack_d+0x2cc>
 1009cd4:	21fff804 	addi	r7,r4,-32
 1009cd8:	38004516 	blt	r7,zero,1009df0 <__pack_d+0x2dc>
 1009cdc:	49d8d83a 	srl	r12,r9,r7
 1009ce0:	001b883a 	mov	r13,zero
 1009ce4:	0023883a 	mov	r17,zero
 1009ce8:	01400044 	movi	r5,1
 1009cec:	0025883a 	mov	r18,zero
 1009cf0:	38004716 	blt	r7,zero,1009e10 <__pack_d+0x2fc>
 1009cf4:	29d6983a 	sll	r11,r5,r7
 1009cf8:	0015883a 	mov	r10,zero
 1009cfc:	00bfffc4 	movi	r2,-1
 1009d00:	5089883a 	add	r4,r10,r2
 1009d04:	588b883a 	add	r5,r11,r2
 1009d08:	228d803a 	cmpltu	r6,r4,r10
 1009d0c:	314b883a 	add	r5,r6,r5
 1009d10:	4104703a 	and	r2,r8,r4
 1009d14:	4946703a 	and	r3,r9,r5
 1009d18:	10c4b03a 	or	r2,r2,r3
 1009d1c:	10000226 	beq	r2,zero,1009d28 <__pack_d+0x214>
 1009d20:	04400044 	movi	r17,1
 1009d24:	0025883a 	mov	r18,zero
 1009d28:	00803fc4 	movi	r2,255
 1009d2c:	644eb03a 	or	r7,r12,r17
 1009d30:	3892703a 	and	r9,r7,r2
 1009d34:	00802004 	movi	r2,128
 1009d38:	6c90b03a 	or	r8,r13,r18
 1009d3c:	0015883a 	mov	r10,zero
 1009d40:	48801626 	beq	r9,r2,1009d9c <__pack_d+0x288>
 1009d44:	01001fc4 	movi	r4,127
 1009d48:	3905883a 	add	r2,r7,r4
 1009d4c:	11cd803a 	cmpltu	r6,r2,r7
 1009d50:	320d883a 	add	r6,r6,r8
 1009d54:	100f883a 	mov	r7,r2
 1009d58:	00840034 	movhi	r2,4096
 1009d5c:	10bfffc4 	addi	r2,r2,-1
 1009d60:	3011883a 	mov	r8,r6
 1009d64:	0007883a 	mov	r3,zero
 1009d68:	11801b36 	bltu	r2,r6,1009dd8 <__pack_d+0x2c4>
 1009d6c:	4004963a 	slli	r2,r8,24
 1009d70:	3808d23a 	srli	r4,r7,8
 1009d74:	400ad23a 	srli	r5,r8,8
 1009d78:	1813883a 	mov	r9,r3
 1009d7c:	1108b03a 	or	r4,r2,r4
 1009d80:	00bfffc4 	movi	r2,-1
 1009d84:	00c00434 	movhi	r3,16
 1009d88:	18ffffc4 	addi	r3,r3,-1
 1009d8c:	208c703a 	and	r6,r4,r2
 1009d90:	28ce703a 	and	r7,r5,r3
 1009d94:	4a01ffcc 	andi	r8,r9,2047
 1009d98:	003f7206 	br	1009b64 <__pack_d+0x50>
 1009d9c:	503fe91e 	bne	r10,zero,1009d44 <__pack_d+0x230>
 1009da0:	01004004 	movi	r4,256
 1009da4:	3904703a 	and	r2,r7,r4
 1009da8:	0007883a 	mov	r3,zero
 1009dac:	10c4b03a 	or	r2,r2,r3
 1009db0:	10000626 	beq	r2,zero,1009dcc <__pack_d+0x2b8>
 1009db4:	3a45883a 	add	r2,r7,r9
 1009db8:	11cd803a 	cmpltu	r6,r2,r7
 1009dbc:	320d883a 	add	r6,r6,r8
 1009dc0:	100f883a 	mov	r7,r2
 1009dc4:	3011883a 	mov	r8,r6
 1009dc8:	0007883a 	mov	r3,zero
 1009dcc:	00840034 	movhi	r2,4096
 1009dd0:	10bfffc4 	addi	r2,r2,-1
 1009dd4:	123fe52e 	bgeu	r2,r8,1009d6c <__pack_d+0x258>
 1009dd8:	00c00044 	movi	r3,1
 1009ddc:	003fe306 	br	1009d6c <__pack_d+0x258>
 1009de0:	0009883a 	mov	r4,zero
 1009de4:	0013883a 	mov	r9,zero
 1009de8:	000b883a 	mov	r5,zero
 1009dec:	003fe406 	br	1009d80 <__pack_d+0x26c>
 1009df0:	4a47883a 	add	r3,r9,r9
 1009df4:	008007c4 	movi	r2,31
 1009df8:	1105c83a 	sub	r2,r2,r4
 1009dfc:	1886983a 	sll	r3,r3,r2
 1009e00:	4118d83a 	srl	r12,r8,r4
 1009e04:	491ad83a 	srl	r13,r9,r4
 1009e08:	1b18b03a 	or	r12,r3,r12
 1009e0c:	003fb506 	br	1009ce4 <__pack_d+0x1d0>
 1009e10:	2806d07a 	srli	r3,r5,1
 1009e14:	008007c4 	movi	r2,31
 1009e18:	1105c83a 	sub	r2,r2,r4
 1009e1c:	1896d83a 	srl	r11,r3,r2
 1009e20:	2914983a 	sll	r10,r5,r4
 1009e24:	003fb506 	br	1009cfc <__pack_d+0x1e8>

01009e28 <__unpack_d>:
 1009e28:	20c00117 	ldw	r3,4(r4)
 1009e2c:	22400017 	ldw	r9,0(r4)
 1009e30:	00800434 	movhi	r2,16
 1009e34:	10bfffc4 	addi	r2,r2,-1
 1009e38:	1808d53a 	srli	r4,r3,20
 1009e3c:	180cd7fa 	srli	r6,r3,31
 1009e40:	1894703a 	and	r10,r3,r2
 1009e44:	2201ffcc 	andi	r8,r4,2047
 1009e48:	281b883a 	mov	r13,r5
 1009e4c:	4817883a 	mov	r11,r9
 1009e50:	29800115 	stw	r6,4(r5)
 1009e54:	5019883a 	mov	r12,r10
 1009e58:	40001e1e 	bne	r8,zero,1009ed4 <__unpack_d+0xac>
 1009e5c:	4a84b03a 	or	r2,r9,r10
 1009e60:	10001926 	beq	r2,zero,1009ec8 <__unpack_d+0xa0>
 1009e64:	4804d63a 	srli	r2,r9,24
 1009e68:	500c923a 	slli	r6,r10,8
 1009e6c:	013f0084 	movi	r4,-1022
 1009e70:	00c40034 	movhi	r3,4096
 1009e74:	18ffffc4 	addi	r3,r3,-1
 1009e78:	118cb03a 	or	r6,r2,r6
 1009e7c:	008000c4 	movi	r2,3
 1009e80:	480a923a 	slli	r5,r9,8
 1009e84:	68800015 	stw	r2,0(r13)
 1009e88:	69000215 	stw	r4,8(r13)
 1009e8c:	19800b36 	bltu	r3,r6,1009ebc <__unpack_d+0x94>
 1009e90:	200f883a 	mov	r7,r4
 1009e94:	1811883a 	mov	r8,r3
 1009e98:	2945883a 	add	r2,r5,r5
 1009e9c:	1149803a 	cmpltu	r4,r2,r5
 1009ea0:	3187883a 	add	r3,r6,r6
 1009ea4:	20c9883a 	add	r4,r4,r3
 1009ea8:	100b883a 	mov	r5,r2
 1009eac:	200d883a 	mov	r6,r4
 1009eb0:	39ffffc4 	addi	r7,r7,-1
 1009eb4:	413ff82e 	bgeu	r8,r4,1009e98 <__unpack_d+0x70>
 1009eb8:	69c00215 	stw	r7,8(r13)
 1009ebc:	69800415 	stw	r6,16(r13)
 1009ec0:	69400315 	stw	r5,12(r13)
 1009ec4:	f800283a 	ret
 1009ec8:	00800084 	movi	r2,2
 1009ecc:	28800015 	stw	r2,0(r5)
 1009ed0:	f800283a 	ret
 1009ed4:	0081ffc4 	movi	r2,2047
 1009ed8:	40800f26 	beq	r8,r2,1009f18 <__unpack_d+0xf0>
 1009edc:	480cd63a 	srli	r6,r9,24
 1009ee0:	5006923a 	slli	r3,r10,8
 1009ee4:	4804923a 	slli	r2,r9,8
 1009ee8:	0009883a 	mov	r4,zero
 1009eec:	30c6b03a 	or	r3,r6,r3
 1009ef0:	01440034 	movhi	r5,4096
 1009ef4:	110cb03a 	or	r6,r2,r4
 1009ef8:	423f0044 	addi	r8,r8,-1023
 1009efc:	194eb03a 	or	r7,r3,r5
 1009f00:	008000c4 	movi	r2,3
 1009f04:	69c00415 	stw	r7,16(r13)
 1009f08:	6a000215 	stw	r8,8(r13)
 1009f0c:	68800015 	stw	r2,0(r13)
 1009f10:	69800315 	stw	r6,12(r13)
 1009f14:	f800283a 	ret
 1009f18:	4a84b03a 	or	r2,r9,r10
 1009f1c:	1000031e 	bne	r2,zero,1009f2c <__unpack_d+0x104>
 1009f20:	00800104 	movi	r2,4
 1009f24:	28800015 	stw	r2,0(r5)
 1009f28:	f800283a 	ret
 1009f2c:	0009883a 	mov	r4,zero
 1009f30:	01400234 	movhi	r5,8
 1009f34:	4904703a 	and	r2,r9,r4
 1009f38:	5146703a 	and	r3,r10,r5
 1009f3c:	10c4b03a 	or	r2,r2,r3
 1009f40:	10000526 	beq	r2,zero,1009f58 <__unpack_d+0x130>
 1009f44:	00800044 	movi	r2,1
 1009f48:	68800015 	stw	r2,0(r13)
 1009f4c:	6b000415 	stw	r12,16(r13)
 1009f50:	6ac00315 	stw	r11,12(r13)
 1009f54:	f800283a 	ret
 1009f58:	68000015 	stw	zero,0(r13)
 1009f5c:	003ffb06 	br	1009f4c <__unpack_d+0x124>

01009f60 <__fpcmp_parts_d>:
 1009f60:	21800017 	ldw	r6,0(r4)
 1009f64:	00c00044 	movi	r3,1
 1009f68:	19800a2e 	bgeu	r3,r6,1009f94 <__fpcmp_parts_d+0x34>
 1009f6c:	28800017 	ldw	r2,0(r5)
 1009f70:	1880082e 	bgeu	r3,r2,1009f94 <__fpcmp_parts_d+0x34>
 1009f74:	00c00104 	movi	r3,4
 1009f78:	30c02626 	beq	r6,r3,100a014 <__fpcmp_parts_d+0xb4>
 1009f7c:	10c02226 	beq	r2,r3,100a008 <__fpcmp_parts_d+0xa8>
 1009f80:	00c00084 	movi	r3,2
 1009f84:	30c00526 	beq	r6,r3,1009f9c <__fpcmp_parts_d+0x3c>
 1009f88:	10c0071e 	bne	r2,r3,1009fa8 <__fpcmp_parts_d+0x48>
 1009f8c:	20800117 	ldw	r2,4(r4)
 1009f90:	1000091e 	bne	r2,zero,1009fb8 <__fpcmp_parts_d+0x58>
 1009f94:	00800044 	movi	r2,1
 1009f98:	f800283a 	ret
 1009f9c:	10c01a1e 	bne	r2,r3,100a008 <__fpcmp_parts_d+0xa8>
 1009fa0:	0005883a 	mov	r2,zero
 1009fa4:	f800283a 	ret
 1009fa8:	22000117 	ldw	r8,4(r4)
 1009fac:	28800117 	ldw	r2,4(r5)
 1009fb0:	40800326 	beq	r8,r2,1009fc0 <__fpcmp_parts_d+0x60>
 1009fb4:	403ff726 	beq	r8,zero,1009f94 <__fpcmp_parts_d+0x34>
 1009fb8:	00bfffc4 	movi	r2,-1
 1009fbc:	f800283a 	ret
 1009fc0:	20c00217 	ldw	r3,8(r4)
 1009fc4:	28800217 	ldw	r2,8(r5)
 1009fc8:	10fffa16 	blt	r2,r3,1009fb4 <__fpcmp_parts_d+0x54>
 1009fcc:	18800916 	blt	r3,r2,1009ff4 <__fpcmp_parts_d+0x94>
 1009fd0:	21c00417 	ldw	r7,16(r4)
 1009fd4:	28c00417 	ldw	r3,16(r5)
 1009fd8:	21800317 	ldw	r6,12(r4)
 1009fdc:	28800317 	ldw	r2,12(r5)
 1009fe0:	19fff436 	bltu	r3,r7,1009fb4 <__fpcmp_parts_d+0x54>
 1009fe4:	38c00526 	beq	r7,r3,1009ffc <__fpcmp_parts_d+0x9c>
 1009fe8:	38c00236 	bltu	r7,r3,1009ff4 <__fpcmp_parts_d+0x94>
 1009fec:	19ffec1e 	bne	r3,r7,1009fa0 <__fpcmp_parts_d+0x40>
 1009ff0:	30bfeb2e 	bgeu	r6,r2,1009fa0 <__fpcmp_parts_d+0x40>
 1009ff4:	403fe71e 	bne	r8,zero,1009f94 <__fpcmp_parts_d+0x34>
 1009ff8:	003fef06 	br	1009fb8 <__fpcmp_parts_d+0x58>
 1009ffc:	11bffa2e 	bgeu	r2,r6,1009fe8 <__fpcmp_parts_d+0x88>
 100a000:	403fe426 	beq	r8,zero,1009f94 <__fpcmp_parts_d+0x34>
 100a004:	003fec06 	br	1009fb8 <__fpcmp_parts_d+0x58>
 100a008:	28800117 	ldw	r2,4(r5)
 100a00c:	103fe11e 	bne	r2,zero,1009f94 <__fpcmp_parts_d+0x34>
 100a010:	003fe906 	br	1009fb8 <__fpcmp_parts_d+0x58>
 100a014:	11bfdd1e 	bne	r2,r6,1009f8c <__fpcmp_parts_d+0x2c>
 100a018:	28c00117 	ldw	r3,4(r5)
 100a01c:	20800117 	ldw	r2,4(r4)
 100a020:	1885c83a 	sub	r2,r3,r2
 100a024:	f800283a 	ret

0100a028 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 100a028:	defff804 	addi	sp,sp,-32
 100a02c:	dfc00715 	stw	ra,28(sp)
 100a030:	df000615 	stw	fp,24(sp)
 100a034:	df000604 	addi	fp,sp,24
 100a038:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 100a03c:	e0bffc17 	ldw	r2,-16(fp)
 100a040:	1004803a 	cmplt	r2,r2,zero
 100a044:	1000081e 	bne	r2,zero,100a068 <close+0x40>
 100a048:	e0bffc17 	ldw	r2,-16(fp)
 100a04c:	10800324 	muli	r2,r2,12
 100a050:	1007883a 	mov	r3,r2
 100a054:	00804074 	movhi	r2,257
 100a058:	10902104 	addi	r2,r2,16516
 100a05c:	1887883a 	add	r3,r3,r2
 100a060:	e0ffff15 	stw	r3,-4(fp)
 100a064:	00000106 	br	100a06c <close+0x44>
 100a068:	e03fff15 	stw	zero,-4(fp)
 100a06c:	e0bfff17 	ldw	r2,-4(fp)
 100a070:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 100a074:	e0bffb17 	ldw	r2,-20(fp)
 100a078:	1005003a 	cmpeq	r2,r2,zero
 100a07c:	10001d1e 	bne	r2,zero,100a0f4 <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 100a080:	e0bffb17 	ldw	r2,-20(fp)
 100a084:	10800017 	ldw	r2,0(r2)
 100a088:	10800417 	ldw	r2,16(r2)
 100a08c:	1005003a 	cmpeq	r2,r2,zero
 100a090:	1000071e 	bne	r2,zero,100a0b0 <close+0x88>
 100a094:	e0bffb17 	ldw	r2,-20(fp)
 100a098:	10800017 	ldw	r2,0(r2)
 100a09c:	10800417 	ldw	r2,16(r2)
 100a0a0:	e13ffb17 	ldw	r4,-20(fp)
 100a0a4:	103ee83a 	callr	r2
 100a0a8:	e0bffe15 	stw	r2,-8(fp)
 100a0ac:	00000106 	br	100a0b4 <close+0x8c>
 100a0b0:	e03ffe15 	stw	zero,-8(fp)
 100a0b4:	e0bffe17 	ldw	r2,-8(fp)
 100a0b8:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 100a0bc:	e13ffc17 	ldw	r4,-16(fp)
 100a0c0:	100a86c0 	call	100a86c <alt_release_fd>
    if (rval < 0)
 100a0c4:	e0bffa17 	ldw	r2,-24(fp)
 100a0c8:	1004403a 	cmpge	r2,r2,zero
 100a0cc:	1000071e 	bne	r2,zero,100a0ec <close+0xc4>
    {
      ALT_ERRNO = -rval;
 100a0d0:	100a1240 	call	100a124 <alt_get_errno>
 100a0d4:	e0fffa17 	ldw	r3,-24(fp)
 100a0d8:	00c7c83a 	sub	r3,zero,r3
 100a0dc:	10c00015 	stw	r3,0(r2)
      return -1;
 100a0e0:	00bfffc4 	movi	r2,-1
 100a0e4:	e0bffd15 	stw	r2,-12(fp)
 100a0e8:	00000806 	br	100a10c <close+0xe4>
    }
    return 0;
 100a0ec:	e03ffd15 	stw	zero,-12(fp)
 100a0f0:	00000606 	br	100a10c <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a0f4:	100a1240 	call	100a124 <alt_get_errno>
 100a0f8:	1007883a 	mov	r3,r2
 100a0fc:	00801444 	movi	r2,81
 100a100:	18800015 	stw	r2,0(r3)
    return -1;
 100a104:	00bfffc4 	movi	r2,-1
 100a108:	e0bffd15 	stw	r2,-12(fp)
 100a10c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 100a110:	e037883a 	mov	sp,fp
 100a114:	dfc00117 	ldw	ra,4(sp)
 100a118:	df000017 	ldw	fp,0(sp)
 100a11c:	dec00204 	addi	sp,sp,8
 100a120:	f800283a 	ret

0100a124 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a124:	defffd04 	addi	sp,sp,-12
 100a128:	dfc00215 	stw	ra,8(sp)
 100a12c:	df000115 	stw	fp,4(sp)
 100a130:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a134:	00804074 	movhi	r2,257
 100a138:	1094c504 	addi	r2,r2,21268
 100a13c:	10800017 	ldw	r2,0(r2)
 100a140:	1005003a 	cmpeq	r2,r2,zero
 100a144:	1000061e 	bne	r2,zero,100a160 <alt_get_errno+0x3c>
 100a148:	00804074 	movhi	r2,257
 100a14c:	1094c504 	addi	r2,r2,21268
 100a150:	10800017 	ldw	r2,0(r2)
 100a154:	103ee83a 	callr	r2
 100a158:	e0bfff15 	stw	r2,-4(fp)
 100a15c:	00000306 	br	100a16c <alt_get_errno+0x48>
 100a160:	00804074 	movhi	r2,257
 100a164:	109c0904 	addi	r2,r2,28708
 100a168:	e0bfff15 	stw	r2,-4(fp)
 100a16c:	e0bfff17 	ldw	r2,-4(fp)
}
 100a170:	e037883a 	mov	sp,fp
 100a174:	dfc00117 	ldw	ra,4(sp)
 100a178:	df000017 	ldw	fp,0(sp)
 100a17c:	dec00204 	addi	sp,sp,8
 100a180:	f800283a 	ret

0100a184 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 100a184:	defffc04 	addi	sp,sp,-16
 100a188:	df000315 	stw	fp,12(sp)
 100a18c:	df000304 	addi	fp,sp,12
 100a190:	e13ffd15 	stw	r4,-12(fp)
 100a194:	e17ffe15 	stw	r5,-8(fp)
 100a198:	e1bfff15 	stw	r6,-4(fp)
  return len;
 100a19c:	e0bfff17 	ldw	r2,-4(fp)
}
 100a1a0:	e037883a 	mov	sp,fp
 100a1a4:	df000017 	ldw	fp,0(sp)
 100a1a8:	dec00104 	addi	sp,sp,4
 100a1ac:	f800283a 	ret

0100a1b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 100a1b0:	defff904 	addi	sp,sp,-28
 100a1b4:	dfc00615 	stw	ra,24(sp)
 100a1b8:	df000515 	stw	fp,20(sp)
 100a1bc:	df000504 	addi	fp,sp,20
 100a1c0:	e13ffc15 	stw	r4,-16(fp)
 100a1c4:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a1c8:	e0bffc17 	ldw	r2,-16(fp)
 100a1cc:	1004803a 	cmplt	r2,r2,zero
 100a1d0:	1000081e 	bne	r2,zero,100a1f4 <fstat+0x44>
 100a1d4:	e0bffc17 	ldw	r2,-16(fp)
 100a1d8:	10800324 	muli	r2,r2,12
 100a1dc:	1007883a 	mov	r3,r2
 100a1e0:	00804074 	movhi	r2,257
 100a1e4:	10902104 	addi	r2,r2,16516
 100a1e8:	1887883a 	add	r3,r3,r2
 100a1ec:	e0ffff15 	stw	r3,-4(fp)
 100a1f0:	00000106 	br	100a1f8 <fstat+0x48>
 100a1f4:	e03fff15 	stw	zero,-4(fp)
 100a1f8:	e0bfff17 	ldw	r2,-4(fp)
 100a1fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 100a200:	e0bffb17 	ldw	r2,-20(fp)
 100a204:	1005003a 	cmpeq	r2,r2,zero
 100a208:	1000121e 	bne	r2,zero,100a254 <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 100a20c:	e0bffb17 	ldw	r2,-20(fp)
 100a210:	10800017 	ldw	r2,0(r2)
 100a214:	10800817 	ldw	r2,32(r2)
 100a218:	1005003a 	cmpeq	r2,r2,zero
 100a21c:	1000081e 	bne	r2,zero,100a240 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 100a220:	e0bffb17 	ldw	r2,-20(fp)
 100a224:	10800017 	ldw	r2,0(r2)
 100a228:	10800817 	ldw	r2,32(r2)
 100a22c:	e13ffb17 	ldw	r4,-20(fp)
 100a230:	e17ffd17 	ldw	r5,-12(fp)
 100a234:	103ee83a 	callr	r2
 100a238:	e0bffe15 	stw	r2,-8(fp)
 100a23c:	00000b06 	br	100a26c <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 100a240:	e0fffd17 	ldw	r3,-12(fp)
 100a244:	00880004 	movi	r2,8192
 100a248:	18800115 	stw	r2,4(r3)
      return 0;
 100a24c:	e03ffe15 	stw	zero,-8(fp)
 100a250:	00000606 	br	100a26c <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a254:	100a2840 	call	100a284 <alt_get_errno>
 100a258:	1007883a 	mov	r3,r2
 100a25c:	00801444 	movi	r2,81
 100a260:	18800015 	stw	r2,0(r3)
    return -1;
 100a264:	00bfffc4 	movi	r2,-1
 100a268:	e0bffe15 	stw	r2,-8(fp)
 100a26c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a270:	e037883a 	mov	sp,fp
 100a274:	dfc00117 	ldw	ra,4(sp)
 100a278:	df000017 	ldw	fp,0(sp)
 100a27c:	dec00204 	addi	sp,sp,8
 100a280:	f800283a 	ret

0100a284 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a284:	defffd04 	addi	sp,sp,-12
 100a288:	dfc00215 	stw	ra,8(sp)
 100a28c:	df000115 	stw	fp,4(sp)
 100a290:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a294:	00804074 	movhi	r2,257
 100a298:	1094c504 	addi	r2,r2,21268
 100a29c:	10800017 	ldw	r2,0(r2)
 100a2a0:	1005003a 	cmpeq	r2,r2,zero
 100a2a4:	1000061e 	bne	r2,zero,100a2c0 <alt_get_errno+0x3c>
 100a2a8:	00804074 	movhi	r2,257
 100a2ac:	1094c504 	addi	r2,r2,21268
 100a2b0:	10800017 	ldw	r2,0(r2)
 100a2b4:	103ee83a 	callr	r2
 100a2b8:	e0bfff15 	stw	r2,-4(fp)
 100a2bc:	00000306 	br	100a2cc <alt_get_errno+0x48>
 100a2c0:	00804074 	movhi	r2,257
 100a2c4:	109c0904 	addi	r2,r2,28708
 100a2c8:	e0bfff15 	stw	r2,-4(fp)
 100a2cc:	e0bfff17 	ldw	r2,-4(fp)
}
 100a2d0:	e037883a 	mov	sp,fp
 100a2d4:	dfc00117 	ldw	ra,4(sp)
 100a2d8:	df000017 	ldw	fp,0(sp)
 100a2dc:	dec00204 	addi	sp,sp,8
 100a2e0:	f800283a 	ret

0100a2e4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100a2e4:	deffeb04 	addi	sp,sp,-84
 100a2e8:	dfc01415 	stw	ra,80(sp)
 100a2ec:	df001315 	stw	fp,76(sp)
 100a2f0:	df001304 	addi	fp,sp,76
 100a2f4:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a2f8:	e0bffd17 	ldw	r2,-12(fp)
 100a2fc:	1004803a 	cmplt	r2,r2,zero
 100a300:	1000081e 	bne	r2,zero,100a324 <isatty+0x40>
 100a304:	e0bffd17 	ldw	r2,-12(fp)
 100a308:	10800324 	muli	r2,r2,12
 100a30c:	1007883a 	mov	r3,r2
 100a310:	00804074 	movhi	r2,257
 100a314:	10902104 	addi	r2,r2,16516
 100a318:	1887883a 	add	r3,r3,r2
 100a31c:	e0ffff15 	stw	r3,-4(fp)
 100a320:	00000106 	br	100a328 <isatty+0x44>
 100a324:	e03fff15 	stw	zero,-4(fp)
 100a328:	e0bfff17 	ldw	r2,-4(fp)
 100a32c:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100a330:	e0bfed17 	ldw	r2,-76(fp)
 100a334:	1005003a 	cmpeq	r2,r2,zero
 100a338:	10000f1e 	bne	r2,zero,100a378 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100a33c:	e0bfed17 	ldw	r2,-76(fp)
 100a340:	10800017 	ldw	r2,0(r2)
 100a344:	10800817 	ldw	r2,32(r2)
 100a348:	1004c03a 	cmpne	r2,r2,zero
 100a34c:	1000031e 	bne	r2,zero,100a35c <isatty+0x78>
    {
      return 1;
 100a350:	00800044 	movi	r2,1
 100a354:	e0bffe15 	stw	r2,-8(fp)
 100a358:	00000c06 	br	100a38c <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100a35c:	e17fee04 	addi	r5,fp,-72
 100a360:	e13ffd17 	ldw	r4,-12(fp)
 100a364:	100a1b00 	call	100a1b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100a368:	e0bfef17 	ldw	r2,-68(fp)
 100a36c:	10880020 	cmpeqi	r2,r2,8192
 100a370:	e0bffe15 	stw	r2,-8(fp)
 100a374:	00000506 	br	100a38c <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a378:	100a3a40 	call	100a3a4 <alt_get_errno>
 100a37c:	1007883a 	mov	r3,r2
 100a380:	00801444 	movi	r2,81
 100a384:	18800015 	stw	r2,0(r3)
    return 0;
 100a388:	e03ffe15 	stw	zero,-8(fp)
 100a38c:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a390:	e037883a 	mov	sp,fp
 100a394:	dfc00117 	ldw	ra,4(sp)
 100a398:	df000017 	ldw	fp,0(sp)
 100a39c:	dec00204 	addi	sp,sp,8
 100a3a0:	f800283a 	ret

0100a3a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a3a4:	defffd04 	addi	sp,sp,-12
 100a3a8:	dfc00215 	stw	ra,8(sp)
 100a3ac:	df000115 	stw	fp,4(sp)
 100a3b0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a3b4:	00804074 	movhi	r2,257
 100a3b8:	1094c504 	addi	r2,r2,21268
 100a3bc:	10800017 	ldw	r2,0(r2)
 100a3c0:	1005003a 	cmpeq	r2,r2,zero
 100a3c4:	1000061e 	bne	r2,zero,100a3e0 <alt_get_errno+0x3c>
 100a3c8:	00804074 	movhi	r2,257
 100a3cc:	1094c504 	addi	r2,r2,21268
 100a3d0:	10800017 	ldw	r2,0(r2)
 100a3d4:	103ee83a 	callr	r2
 100a3d8:	e0bfff15 	stw	r2,-4(fp)
 100a3dc:	00000306 	br	100a3ec <alt_get_errno+0x48>
 100a3e0:	00804074 	movhi	r2,257
 100a3e4:	109c0904 	addi	r2,r2,28708
 100a3e8:	e0bfff15 	stw	r2,-4(fp)
 100a3ec:	e0bfff17 	ldw	r2,-4(fp)
}
 100a3f0:	e037883a 	mov	sp,fp
 100a3f4:	dfc00117 	ldw	ra,4(sp)
 100a3f8:	df000017 	ldw	fp,0(sp)
 100a3fc:	dec00204 	addi	sp,sp,8
 100a400:	f800283a 	ret

0100a404 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100a404:	defffe04 	addi	sp,sp,-8
 100a408:	dfc00115 	stw	ra,4(sp)
 100a40c:	df000015 	stw	fp,0(sp)
 100a410:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100a414:	01004074 	movhi	r4,257
 100a418:	2114ca04 	addi	r4,r4,21288
 100a41c:	01404074 	movhi	r5,257
 100a420:	294d9204 	addi	r5,r5,13896
 100a424:	01804074 	movhi	r6,257
 100a428:	3194ca04 	addi	r6,r6,21288
 100a42c:	100a4840 	call	100a484 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100a430:	01004034 	movhi	r4,256
 100a434:	21000804 	addi	r4,r4,32
 100a438:	01404034 	movhi	r5,256
 100a43c:	29400804 	addi	r5,r5,32
 100a440:	01804034 	movhi	r6,256
 100a444:	31806e04 	addi	r6,r6,440
 100a448:	100a4840 	call	100a484 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100a44c:	01004074 	movhi	r4,257
 100a450:	210bf704 	addi	r4,r4,12252
 100a454:	01404074 	movhi	r5,257
 100a458:	294bf704 	addi	r5,r5,12252
 100a45c:	01804074 	movhi	r6,257
 100a460:	318d9204 	addi	r6,r6,13896
 100a464:	100a4840 	call	100a484 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100a468:	10107b80 	call	10107b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 100a46c:	1010a6c0 	call	1010a6c <alt_icache_flush_all>
}
 100a470:	e037883a 	mov	sp,fp
 100a474:	dfc00117 	ldw	ra,4(sp)
 100a478:	df000017 	ldw	fp,0(sp)
 100a47c:	dec00204 	addi	sp,sp,8
 100a480:	f800283a 	ret

0100a484 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100a484:	defffc04 	addi	sp,sp,-16
 100a488:	df000315 	stw	fp,12(sp)
 100a48c:	df000304 	addi	fp,sp,12
 100a490:	e13ffd15 	stw	r4,-12(fp)
 100a494:	e17ffe15 	stw	r5,-8(fp)
 100a498:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100a49c:	e0fffe17 	ldw	r3,-8(fp)
 100a4a0:	e0bffd17 	ldw	r2,-12(fp)
 100a4a4:	18800e26 	beq	r3,r2,100a4e0 <alt_load_section+0x5c>
  {
    while( to != end )
 100a4a8:	00000a06 	br	100a4d4 <alt_load_section+0x50>
    {
      *to++ = *from++;
 100a4ac:	e0bffd17 	ldw	r2,-12(fp)
 100a4b0:	10c00017 	ldw	r3,0(r2)
 100a4b4:	e0bffe17 	ldw	r2,-8(fp)
 100a4b8:	10c00015 	stw	r3,0(r2)
 100a4bc:	e0bffe17 	ldw	r2,-8(fp)
 100a4c0:	10800104 	addi	r2,r2,4
 100a4c4:	e0bffe15 	stw	r2,-8(fp)
 100a4c8:	e0bffd17 	ldw	r2,-12(fp)
 100a4cc:	10800104 	addi	r2,r2,4
 100a4d0:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100a4d4:	e0fffe17 	ldw	r3,-8(fp)
 100a4d8:	e0bfff17 	ldw	r2,-4(fp)
 100a4dc:	18bff31e 	bne	r3,r2,100a4ac <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100a4e0:	e037883a 	mov	sp,fp
 100a4e4:	df000017 	ldw	fp,0(sp)
 100a4e8:	dec00104 	addi	sp,sp,4
 100a4ec:	f800283a 	ret

0100a4f0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100a4f0:	defff804 	addi	sp,sp,-32
 100a4f4:	dfc00715 	stw	ra,28(sp)
 100a4f8:	df000615 	stw	fp,24(sp)
 100a4fc:	df000604 	addi	fp,sp,24
 100a500:	e13ffc15 	stw	r4,-16(fp)
 100a504:	e17ffd15 	stw	r5,-12(fp)
 100a508:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100a50c:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a510:	e0bffc17 	ldw	r2,-16(fp)
 100a514:	1004803a 	cmplt	r2,r2,zero
 100a518:	1000081e 	bne	r2,zero,100a53c <lseek+0x4c>
 100a51c:	e0bffc17 	ldw	r2,-16(fp)
 100a520:	10800324 	muli	r2,r2,12
 100a524:	1007883a 	mov	r3,r2
 100a528:	00804074 	movhi	r2,257
 100a52c:	10902104 	addi	r2,r2,16516
 100a530:	1887883a 	add	r3,r3,r2
 100a534:	e0ffff15 	stw	r3,-4(fp)
 100a538:	00000106 	br	100a540 <lseek+0x50>
 100a53c:	e03fff15 	stw	zero,-4(fp)
 100a540:	e0bfff17 	ldw	r2,-4(fp)
 100a544:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100a548:	e0bffb17 	ldw	r2,-20(fp)
 100a54c:	1005003a 	cmpeq	r2,r2,zero
 100a550:	1000111e 	bne	r2,zero,100a598 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100a554:	e0bffb17 	ldw	r2,-20(fp)
 100a558:	10800017 	ldw	r2,0(r2)
 100a55c:	10800717 	ldw	r2,28(r2)
 100a560:	1005003a 	cmpeq	r2,r2,zero
 100a564:	1000091e 	bne	r2,zero,100a58c <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100a568:	e0bffb17 	ldw	r2,-20(fp)
 100a56c:	10800017 	ldw	r2,0(r2)
 100a570:	10800717 	ldw	r2,28(r2)
 100a574:	e13ffb17 	ldw	r4,-20(fp)
 100a578:	e17ffd17 	ldw	r5,-12(fp)
 100a57c:	e1bffe17 	ldw	r6,-8(fp)
 100a580:	103ee83a 	callr	r2
 100a584:	e0bffa15 	stw	r2,-24(fp)
 100a588:	00000506 	br	100a5a0 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100a58c:	00bfde84 	movi	r2,-134
 100a590:	e0bffa15 	stw	r2,-24(fp)
 100a594:	00000206 	br	100a5a0 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 100a598:	00bfebc4 	movi	r2,-81
 100a59c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100a5a0:	e0bffa17 	ldw	r2,-24(fp)
 100a5a4:	1004403a 	cmpge	r2,r2,zero
 100a5a8:	1000071e 	bne	r2,zero,100a5c8 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 100a5ac:	100a5e00 	call	100a5e0 <alt_get_errno>
 100a5b0:	1007883a 	mov	r3,r2
 100a5b4:	e0bffa17 	ldw	r2,-24(fp)
 100a5b8:	0085c83a 	sub	r2,zero,r2
 100a5bc:	18800015 	stw	r2,0(r3)
    rc = -1;
 100a5c0:	00bfffc4 	movi	r2,-1
 100a5c4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100a5c8:	e0bffa17 	ldw	r2,-24(fp)
}
 100a5cc:	e037883a 	mov	sp,fp
 100a5d0:	dfc00117 	ldw	ra,4(sp)
 100a5d4:	df000017 	ldw	fp,0(sp)
 100a5d8:	dec00204 	addi	sp,sp,8
 100a5dc:	f800283a 	ret

0100a5e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a5e0:	defffd04 	addi	sp,sp,-12
 100a5e4:	dfc00215 	stw	ra,8(sp)
 100a5e8:	df000115 	stw	fp,4(sp)
 100a5ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a5f0:	00804074 	movhi	r2,257
 100a5f4:	1094c504 	addi	r2,r2,21268
 100a5f8:	10800017 	ldw	r2,0(r2)
 100a5fc:	1005003a 	cmpeq	r2,r2,zero
 100a600:	1000061e 	bne	r2,zero,100a61c <alt_get_errno+0x3c>
 100a604:	00804074 	movhi	r2,257
 100a608:	1094c504 	addi	r2,r2,21268
 100a60c:	10800017 	ldw	r2,0(r2)
 100a610:	103ee83a 	callr	r2
 100a614:	e0bfff15 	stw	r2,-4(fp)
 100a618:	00000306 	br	100a628 <alt_get_errno+0x48>
 100a61c:	00804074 	movhi	r2,257
 100a620:	109c0904 	addi	r2,r2,28708
 100a624:	e0bfff15 	stw	r2,-4(fp)
 100a628:	e0bfff17 	ldw	r2,-4(fp)
}
 100a62c:	e037883a 	mov	sp,fp
 100a630:	dfc00117 	ldw	ra,4(sp)
 100a634:	df000017 	ldw	fp,0(sp)
 100a638:	dec00204 	addi	sp,sp,8
 100a63c:	f800283a 	ret

0100a640 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100a640:	defffd04 	addi	sp,sp,-12
 100a644:	dfc00215 	stw	ra,8(sp)
 100a648:	df000115 	stw	fp,4(sp)
 100a64c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100a650:	0009883a 	mov	r4,zero
 100a654:	100ab080 	call	100ab08 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100a658:	100ab3c0 	call	100ab3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100a65c:	01004074 	movhi	r4,257
 100a660:	210d4304 	addi	r4,r4,13580
 100a664:	01404074 	movhi	r5,257
 100a668:	294d4304 	addi	r5,r5,13580
 100a66c:	01804074 	movhi	r6,257
 100a670:	318d4304 	addi	r6,r6,13580
 100a674:	1010b600 	call	1010b60 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100a678:	10109100 	call	1010910 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100a67c:	01004074 	movhi	r4,257
 100a680:	21025d04 	addi	r4,r4,2420
 100a684:	10115000 	call	1011500 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100a688:	d1275017 	ldw	r4,-25280(gp)
 100a68c:	d1675117 	ldw	r5,-25276(gp)
 100a690:	d1a75217 	ldw	r6,-25272(gp)
 100a694:	10002040 	call	1000204 <main>
 100a698:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100a69c:	01000044 	movi	r4,1
 100a6a0:	100a0280 	call	100a028 <close>
  exit (result);
 100a6a4:	e13fff17 	ldw	r4,-4(fp)
 100a6a8:	10115140 	call	1011514 <exit>

0100a6ac <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100a6ac:	defffe04 	addi	sp,sp,-8
 100a6b0:	df000115 	stw	fp,4(sp)
 100a6b4:	df000104 	addi	fp,sp,4
 100a6b8:	e13fff15 	stw	r4,-4(fp)
}
 100a6bc:	e037883a 	mov	sp,fp
 100a6c0:	df000017 	ldw	fp,0(sp)
 100a6c4:	dec00104 	addi	sp,sp,4
 100a6c8:	f800283a 	ret

0100a6cc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100a6cc:	defffe04 	addi	sp,sp,-8
 100a6d0:	df000115 	stw	fp,4(sp)
 100a6d4:	df000104 	addi	fp,sp,4
 100a6d8:	e13fff15 	stw	r4,-4(fp)
}
 100a6dc:	e037883a 	mov	sp,fp
 100a6e0:	df000017 	ldw	fp,0(sp)
 100a6e4:	dec00104 	addi	sp,sp,4
 100a6e8:	f800283a 	ret

0100a6ec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100a6ec:	defff704 	addi	sp,sp,-36
 100a6f0:	dfc00815 	stw	ra,32(sp)
 100a6f4:	df000715 	stw	fp,28(sp)
 100a6f8:	df000704 	addi	fp,sp,28
 100a6fc:	e13ffb15 	stw	r4,-20(fp)
 100a700:	e17ffc15 	stw	r5,-16(fp)
 100a704:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a708:	e0bffb17 	ldw	r2,-20(fp)
 100a70c:	1004803a 	cmplt	r2,r2,zero
 100a710:	1000081e 	bne	r2,zero,100a734 <read+0x48>
 100a714:	e0bffb17 	ldw	r2,-20(fp)
 100a718:	10800324 	muli	r2,r2,12
 100a71c:	1007883a 	mov	r3,r2
 100a720:	00804074 	movhi	r2,257
 100a724:	10902104 	addi	r2,r2,16516
 100a728:	1887883a 	add	r3,r3,r2
 100a72c:	e0ffff15 	stw	r3,-4(fp)
 100a730:	00000106 	br	100a738 <read+0x4c>
 100a734:	e03fff15 	stw	zero,-4(fp)
 100a738:	e0bfff17 	ldw	r2,-4(fp)
 100a73c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a740:	e0bffa17 	ldw	r2,-24(fp)
 100a744:	1005003a 	cmpeq	r2,r2,zero
 100a748:	1000241e 	bne	r2,zero,100a7dc <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100a74c:	e0bffa17 	ldw	r2,-24(fp)
 100a750:	10800217 	ldw	r2,8(r2)
 100a754:	108000cc 	andi	r2,r2,3
 100a758:	10800060 	cmpeqi	r2,r2,1
 100a75c:	10001a1e 	bne	r2,zero,100a7c8 <read+0xdc>
 100a760:	e0bffa17 	ldw	r2,-24(fp)
 100a764:	10800017 	ldw	r2,0(r2)
 100a768:	10800517 	ldw	r2,20(r2)
 100a76c:	1005003a 	cmpeq	r2,r2,zero
 100a770:	1000151e 	bne	r2,zero,100a7c8 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100a774:	e0bffa17 	ldw	r2,-24(fp)
 100a778:	10800017 	ldw	r2,0(r2)
 100a77c:	10800517 	ldw	r2,20(r2)
 100a780:	e17ffc17 	ldw	r5,-16(fp)
 100a784:	e1bffd17 	ldw	r6,-12(fp)
 100a788:	e13ffa17 	ldw	r4,-24(fp)
 100a78c:	103ee83a 	callr	r2
 100a790:	e0bff915 	stw	r2,-28(fp)
 100a794:	e0bff917 	ldw	r2,-28(fp)
 100a798:	1004403a 	cmpge	r2,r2,zero
 100a79c:	1000071e 	bne	r2,zero,100a7bc <read+0xd0>
        {
          ALT_ERRNO = -rval;
 100a7a0:	100a80c0 	call	100a80c <alt_get_errno>
 100a7a4:	e0fff917 	ldw	r3,-28(fp)
 100a7a8:	00c7c83a 	sub	r3,zero,r3
 100a7ac:	10c00015 	stw	r3,0(r2)
          return -1;
 100a7b0:	00bfffc4 	movi	r2,-1
 100a7b4:	e0bffe15 	stw	r2,-8(fp)
 100a7b8:	00000e06 	br	100a7f4 <read+0x108>
        }
        return rval;
 100a7bc:	e0bff917 	ldw	r2,-28(fp)
 100a7c0:	e0bffe15 	stw	r2,-8(fp)
 100a7c4:	00000b06 	br	100a7f4 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100a7c8:	100a80c0 	call	100a80c <alt_get_errno>
 100a7cc:	1007883a 	mov	r3,r2
 100a7d0:	00800344 	movi	r2,13
 100a7d4:	18800015 	stw	r2,0(r3)
 100a7d8:	00000406 	br	100a7ec <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100a7dc:	100a80c0 	call	100a80c <alt_get_errno>
 100a7e0:	1007883a 	mov	r3,r2
 100a7e4:	00801444 	movi	r2,81
 100a7e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100a7ec:	00bfffc4 	movi	r2,-1
 100a7f0:	e0bffe15 	stw	r2,-8(fp)
 100a7f4:	e0bffe17 	ldw	r2,-8(fp)
}
 100a7f8:	e037883a 	mov	sp,fp
 100a7fc:	dfc00117 	ldw	ra,4(sp)
 100a800:	df000017 	ldw	fp,0(sp)
 100a804:	dec00204 	addi	sp,sp,8
 100a808:	f800283a 	ret

0100a80c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a80c:	defffd04 	addi	sp,sp,-12
 100a810:	dfc00215 	stw	ra,8(sp)
 100a814:	df000115 	stw	fp,4(sp)
 100a818:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a81c:	00804074 	movhi	r2,257
 100a820:	1094c504 	addi	r2,r2,21268
 100a824:	10800017 	ldw	r2,0(r2)
 100a828:	1005003a 	cmpeq	r2,r2,zero
 100a82c:	1000061e 	bne	r2,zero,100a848 <alt_get_errno+0x3c>
 100a830:	00804074 	movhi	r2,257
 100a834:	1094c504 	addi	r2,r2,21268
 100a838:	10800017 	ldw	r2,0(r2)
 100a83c:	103ee83a 	callr	r2
 100a840:	e0bfff15 	stw	r2,-4(fp)
 100a844:	00000306 	br	100a854 <alt_get_errno+0x48>
 100a848:	00804074 	movhi	r2,257
 100a84c:	109c0904 	addi	r2,r2,28708
 100a850:	e0bfff15 	stw	r2,-4(fp)
 100a854:	e0bfff17 	ldw	r2,-4(fp)
}
 100a858:	e037883a 	mov	sp,fp
 100a85c:	dfc00117 	ldw	ra,4(sp)
 100a860:	df000017 	ldw	fp,0(sp)
 100a864:	dec00204 	addi	sp,sp,8
 100a868:	f800283a 	ret

0100a86c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100a86c:	defffe04 	addi	sp,sp,-8
 100a870:	df000115 	stw	fp,4(sp)
 100a874:	df000104 	addi	fp,sp,4
 100a878:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100a87c:	e0bfff17 	ldw	r2,-4(fp)
 100a880:	108000d0 	cmplti	r2,r2,3
 100a884:	10000d1e 	bne	r2,zero,100a8bc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 100a888:	e0bfff17 	ldw	r2,-4(fp)
 100a88c:	00c04074 	movhi	r3,257
 100a890:	18d02104 	addi	r3,r3,16516
 100a894:	10800324 	muli	r2,r2,12
 100a898:	10c5883a 	add	r2,r2,r3
 100a89c:	10800204 	addi	r2,r2,8
 100a8a0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100a8a4:	e0bfff17 	ldw	r2,-4(fp)
 100a8a8:	00c04074 	movhi	r3,257
 100a8ac:	18d02104 	addi	r3,r3,16516
 100a8b0:	10800324 	muli	r2,r2,12
 100a8b4:	10c5883a 	add	r2,r2,r3
 100a8b8:	10000015 	stw	zero,0(r2)
  }
}
 100a8bc:	e037883a 	mov	sp,fp
 100a8c0:	df000017 	ldw	fp,0(sp)
 100a8c4:	dec00104 	addi	sp,sp,4
 100a8c8:	f800283a 	ret

0100a8cc <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100a8cc:	defff804 	addi	sp,sp,-32
 100a8d0:	df000715 	stw	fp,28(sp)
 100a8d4:	df000704 	addi	fp,sp,28
 100a8d8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a8dc:	0005303a 	rdctl	r2,status
 100a8e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a8e4:	e0fffb17 	ldw	r3,-20(fp)
 100a8e8:	00bfff84 	movi	r2,-2
 100a8ec:	1884703a 	and	r2,r3,r2
 100a8f0:	1001703a 	wrctl	status,r2
  
  return context;
 100a8f4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100a8f8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100a8fc:	d0a00c17 	ldw	r2,-32720(gp)
 100a900:	10c000c4 	addi	r3,r2,3
 100a904:	00bfff04 	movi	r2,-4
 100a908:	1884703a 	and	r2,r3,r2
 100a90c:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100a910:	d0e00c17 	ldw	r3,-32720(gp)
 100a914:	e0bffe17 	ldw	r2,-8(fp)
 100a918:	1887883a 	add	r3,r3,r2
 100a91c:	00806034 	movhi	r2,384
 100a920:	10800004 	addi	r2,r2,0
 100a924:	10c0072e 	bgeu	r2,r3,100a944 <sbrk+0x78>
 100a928:	e0bffd17 	ldw	r2,-12(fp)
 100a92c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a930:	e0bffa17 	ldw	r2,-24(fp)
 100a934:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100a938:	00bfffc4 	movi	r2,-1
 100a93c:	e0bfff15 	stw	r2,-4(fp)
 100a940:	00000c06 	br	100a974 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100a944:	d0a00c17 	ldw	r2,-32720(gp)
 100a948:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100a94c:	d0e00c17 	ldw	r3,-32720(gp)
 100a950:	e0bffe17 	ldw	r2,-8(fp)
 100a954:	1885883a 	add	r2,r3,r2
 100a958:	d0a00c15 	stw	r2,-32720(gp)
 100a95c:	e0bffd17 	ldw	r2,-12(fp)
 100a960:	e0bff915 	stw	r2,-28(fp)
 100a964:	e0bff917 	ldw	r2,-28(fp)
 100a968:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100a96c:	e0bffc17 	ldw	r2,-16(fp)
 100a970:	e0bfff15 	stw	r2,-4(fp)
 100a974:	e0bfff17 	ldw	r2,-4(fp)
} 
 100a978:	e037883a 	mov	sp,fp
 100a97c:	df000017 	ldw	fp,0(sp)
 100a980:	dec00104 	addi	sp,sp,4
 100a984:	f800283a 	ret

0100a988 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100a988:	defff704 	addi	sp,sp,-36
 100a98c:	dfc00815 	stw	ra,32(sp)
 100a990:	df000715 	stw	fp,28(sp)
 100a994:	df000704 	addi	fp,sp,28
 100a998:	e13ffb15 	stw	r4,-20(fp)
 100a99c:	e17ffc15 	stw	r5,-16(fp)
 100a9a0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a9a4:	e0bffb17 	ldw	r2,-20(fp)
 100a9a8:	1004803a 	cmplt	r2,r2,zero
 100a9ac:	1000081e 	bne	r2,zero,100a9d0 <write+0x48>
 100a9b0:	e0bffb17 	ldw	r2,-20(fp)
 100a9b4:	10800324 	muli	r2,r2,12
 100a9b8:	1007883a 	mov	r3,r2
 100a9bc:	00804074 	movhi	r2,257
 100a9c0:	10902104 	addi	r2,r2,16516
 100a9c4:	1887883a 	add	r3,r3,r2
 100a9c8:	e0ffff15 	stw	r3,-4(fp)
 100a9cc:	00000106 	br	100a9d4 <write+0x4c>
 100a9d0:	e03fff15 	stw	zero,-4(fp)
 100a9d4:	e0bfff17 	ldw	r2,-4(fp)
 100a9d8:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a9dc:	e0bffa17 	ldw	r2,-24(fp)
 100a9e0:	1005003a 	cmpeq	r2,r2,zero
 100a9e4:	1000241e 	bne	r2,zero,100aa78 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100a9e8:	e0bffa17 	ldw	r2,-24(fp)
 100a9ec:	10800217 	ldw	r2,8(r2)
 100a9f0:	108000cc 	andi	r2,r2,3
 100a9f4:	1005003a 	cmpeq	r2,r2,zero
 100a9f8:	10001a1e 	bne	r2,zero,100aa64 <write+0xdc>
 100a9fc:	e0bffa17 	ldw	r2,-24(fp)
 100aa00:	10800017 	ldw	r2,0(r2)
 100aa04:	10800617 	ldw	r2,24(r2)
 100aa08:	1005003a 	cmpeq	r2,r2,zero
 100aa0c:	1000151e 	bne	r2,zero,100aa64 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100aa10:	e0bffa17 	ldw	r2,-24(fp)
 100aa14:	10800017 	ldw	r2,0(r2)
 100aa18:	10800617 	ldw	r2,24(r2)
 100aa1c:	e17ffc17 	ldw	r5,-16(fp)
 100aa20:	e1bffd17 	ldw	r6,-12(fp)
 100aa24:	e13ffa17 	ldw	r4,-24(fp)
 100aa28:	103ee83a 	callr	r2
 100aa2c:	e0bff915 	stw	r2,-28(fp)
 100aa30:	e0bff917 	ldw	r2,-28(fp)
 100aa34:	1004403a 	cmpge	r2,r2,zero
 100aa38:	1000071e 	bne	r2,zero,100aa58 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 100aa3c:	100aaa80 	call	100aaa8 <alt_get_errno>
 100aa40:	e0fff917 	ldw	r3,-28(fp)
 100aa44:	00c7c83a 	sub	r3,zero,r3
 100aa48:	10c00015 	stw	r3,0(r2)
        return -1;
 100aa4c:	00bfffc4 	movi	r2,-1
 100aa50:	e0bffe15 	stw	r2,-8(fp)
 100aa54:	00000e06 	br	100aa90 <write+0x108>
      }
      return rval;
 100aa58:	e0bff917 	ldw	r2,-28(fp)
 100aa5c:	e0bffe15 	stw	r2,-8(fp)
 100aa60:	00000b06 	br	100aa90 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100aa64:	100aaa80 	call	100aaa8 <alt_get_errno>
 100aa68:	1007883a 	mov	r3,r2
 100aa6c:	00800344 	movi	r2,13
 100aa70:	18800015 	stw	r2,0(r3)
 100aa74:	00000406 	br	100aa88 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100aa78:	100aaa80 	call	100aaa8 <alt_get_errno>
 100aa7c:	1007883a 	mov	r3,r2
 100aa80:	00801444 	movi	r2,81
 100aa84:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100aa88:	00bfffc4 	movi	r2,-1
 100aa8c:	e0bffe15 	stw	r2,-8(fp)
 100aa90:	e0bffe17 	ldw	r2,-8(fp)
}
 100aa94:	e037883a 	mov	sp,fp
 100aa98:	dfc00117 	ldw	ra,4(sp)
 100aa9c:	df000017 	ldw	fp,0(sp)
 100aaa0:	dec00204 	addi	sp,sp,8
 100aaa4:	f800283a 	ret

0100aaa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100aaa8:	defffd04 	addi	sp,sp,-12
 100aaac:	dfc00215 	stw	ra,8(sp)
 100aab0:	df000115 	stw	fp,4(sp)
 100aab4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100aab8:	00804074 	movhi	r2,257
 100aabc:	1094c504 	addi	r2,r2,21268
 100aac0:	10800017 	ldw	r2,0(r2)
 100aac4:	1005003a 	cmpeq	r2,r2,zero
 100aac8:	1000061e 	bne	r2,zero,100aae4 <alt_get_errno+0x3c>
 100aacc:	00804074 	movhi	r2,257
 100aad0:	1094c504 	addi	r2,r2,21268
 100aad4:	10800017 	ldw	r2,0(r2)
 100aad8:	103ee83a 	callr	r2
 100aadc:	e0bfff15 	stw	r2,-4(fp)
 100aae0:	00000306 	br	100aaf0 <alt_get_errno+0x48>
 100aae4:	00804074 	movhi	r2,257
 100aae8:	109c0904 	addi	r2,r2,28708
 100aaec:	e0bfff15 	stw	r2,-4(fp)
 100aaf0:	e0bfff17 	ldw	r2,-4(fp)
}
 100aaf4:	e037883a 	mov	sp,fp
 100aaf8:	dfc00117 	ldw	ra,4(sp)
 100aafc:	df000017 	ldw	fp,0(sp)
 100ab00:	dec00204 	addi	sp,sp,8
 100ab04:	f800283a 	ret

0100ab08 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100ab08:	defffd04 	addi	sp,sp,-12
 100ab0c:	dfc00215 	stw	ra,8(sp)
 100ab10:	df000115 	stw	fp,4(sp)
 100ab14:	df000104 	addi	fp,sp,4
 100ab18:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 100ab1c:	10112000 	call	1011200 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100ab20:	00800044 	movi	r2,1
 100ab24:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100ab28:	e037883a 	mov	sp,fp
 100ab2c:	dfc00117 	ldw	ra,4(sp)
 100ab30:	df000017 	ldw	fp,0(sp)
 100ab34:	dec00204 	addi	sp,sp,8
 100ab38:	f800283a 	ret

0100ab3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100ab3c:	defffe04 	addi	sp,sp,-8
 100ab40:	dfc00115 	stw	ra,4(sp)
 100ab44:	df000015 	stw	fp,0(sp)
 100ab48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 100ab4c:	01043804 	movi	r4,4320
 100ab50:	000b883a 	mov	r5,zero
 100ab54:	018000c4 	movi	r6,3
 100ab58:	01c0fa04 	movi	r7,1000
 100ab5c:	100fd140 	call	100fd14 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100ab60:	01004074 	movhi	r4,257
 100ab64:	21108b04 	addi	r4,r4,16940
 100ab68:	000b883a 	mov	r5,zero
 100ab6c:	000d883a 	mov	r6,zero
 100ab70:	100f3400 	call	100f340 <altera_avalon_jtag_uart_init>
 100ab74:	01004074 	movhi	r4,257
 100ab78:	21108104 	addi	r4,r4,16900
 100ab7c:	100abc40 	call	100abc4 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100ab80:	01004074 	movhi	r4,257
 100ab84:	21149904 	addi	r4,r4,21092
 100ab88:	100fe4c0 	call	100fe4c <alt_up_character_lcd_init>
 100ab8c:	01004074 	movhi	r4,257
 100ab90:	21149904 	addi	r4,r4,21092
 100ab94:	100abc40 	call	100abc4 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 100ab98:	01004074 	movhi	r4,257
 100ab9c:	2114a404 	addi	r4,r4,21136
 100aba0:	100abc40 	call	100abc4 <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 100aba4:	01004074 	movhi	r4,257
 100aba8:	2114af04 	addi	r4,r4,21180
 100abac:	100abc40 	call	100abc4 <alt_dev_reg>
}
 100abb0:	e037883a 	mov	sp,fp
 100abb4:	dfc00117 	ldw	ra,4(sp)
 100abb8:	df000017 	ldw	fp,0(sp)
 100abbc:	dec00204 	addi	sp,sp,8
 100abc0:	f800283a 	ret

0100abc4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100abc4:	defffd04 	addi	sp,sp,-12
 100abc8:	dfc00215 	stw	ra,8(sp)
 100abcc:	df000115 	stw	fp,4(sp)
 100abd0:	df000104 	addi	fp,sp,4
 100abd4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100abd8:	e13fff17 	ldw	r4,-4(fp)
 100abdc:	01404074 	movhi	r5,257
 100abe0:	2954c204 	addi	r5,r5,21256
 100abe4:	10107fc0 	call	10107fc <alt_dev_llist_insert>
}
 100abe8:	e037883a 	mov	sp,fp
 100abec:	dfc00117 	ldw	ra,4(sp)
 100abf0:	df000017 	ldw	fp,0(sp)
 100abf4:	dec00204 	addi	sp,sp,8
 100abf8:	f800283a 	ret

0100abfc <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset);

bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 100abfc:	defffa04 	addi	sp,sp,-24
 100ac00:	dfc00515 	stw	ra,20(sp)
 100ac04:	df000415 	stw	fp,16(sp)
 100ac08:	df000404 	addi	fp,sp,16
 100ac0c:	e13ffe15 	stw	r4,-8(fp)
 100ac10:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 100ac14:	e03ffd15 	stw	zero,-12(fp)

	if (alt_up_sd_card_is_Present()) {
 100ac18:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100ac1c:	1005003a 	cmpeq	r2,r2,zero
 100ac20:	1000221e 	bne	r2,zero,100acac <Write_Sector_Data+0xb0>
		short int reg_state = 0xff;
 100ac24:	00803fc4 	movi	r2,255
 100ac28:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 100ac2c:	d0a75917 	ldw	r2,-25244(gp)
 100ac30:	1009883a 	mov	r4,r2
 100ac34:	e0fffe17 	ldw	r3,-8(fp)
 100ac38:	e0bfff17 	ldw	r2,-4(fp)
 100ac3c:	1885883a 	add	r2,r3,r2
 100ac40:	1006927a 	slli	r3,r2,9
 100ac44:	2005883a 	mov	r2,r4
 100ac48:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 100ac4c:	d0a75817 	ldw	r2,-25248(gp)
 100ac50:	1007883a 	mov	r3,r2
 100ac54:	00800604 	movi	r2,24
 100ac58:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 100ac5c:	d0a75517 	ldw	r2,-25260(gp)
 100ac60:	1080002b 	ldhuio	r2,0(r2)
 100ac64:	e0bffc0d 	sth	r2,-16(fp)
		} while ((reg_state & 0x04) != 0);
 100ac68:	e0bffc0b 	ldhu	r2,-16(fp)
 100ac6c:	10bfffcc 	andi	r2,r2,65535
 100ac70:	1080010c 	andi	r2,r2,4
 100ac74:	1004c03a 	cmpne	r2,r2,zero
 100ac78:	103ff81e 	bne	r2,zero,100ac5c <Write_Sector_Data+0x60>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 100ac7c:	e0bffc0b 	ldhu	r2,-16(fp)
 100ac80:	10bfffcc 	andi	r2,r2,65535
 100ac84:	1080040c 	andi	r2,r2,16
 100ac88:	1004c03a 	cmpne	r2,r2,zero
 100ac8c:	1000071e 	bne	r2,zero,100acac <Write_Sector_Data+0xb0>
			result = true;
 100ac90:	00800044 	movi	r2,1
 100ac94:	e0bffd15 	stw	r2,-12(fp)
			current_sector_modified = false;
 100ac98:	d0275e15 	stw	zero,-25224(gp)
			current_sector_index = sector_index + partition_offset;
 100ac9c:	e0fffe17 	ldw	r3,-8(fp)
 100aca0:	e0bfff17 	ldw	r2,-4(fp)
 100aca4:	1885883a 	add	r2,r3,r2
 100aca8:	d0a75f15 	stw	r2,-25220(gp)
		}
	}
	return result;
 100acac:	e0bffd17 	ldw	r2,-12(fp)
}
 100acb0:	e037883a 	mov	sp,fp
 100acb4:	dfc00117 	ldw	ra,4(sp)
 100acb8:	df000017 	ldw	fp,0(sp)
 100acbc:	dec00204 	addi	sp,sp,8
 100acc0:	f800283a 	ret

0100acc4 <Save_Modified_Sector>:

bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 100acc4:	defffd04 	addi	sp,sp,-12
 100acc8:	dfc00215 	stw	ra,8(sp)
 100accc:	df000115 	stw	fp,4(sp)
 100acd0:	df000104 	addi	fp,sp,4
	bool result = true;
 100acd4:	00800044 	movi	r2,1
 100acd8:	e0bfff15 	stw	r2,-4(fp)
	if (current_sector_modified) {
 100acdc:	d0a75e17 	ldw	r2,-25224(gp)
 100ace0:	1005003a 	cmpeq	r2,r2,zero
 100ace4:	1000051e 	bne	r2,zero,100acfc <Save_Modified_Sector+0x38>
		result = Write_Sector_Data(current_sector_index, 0);
 100ace8:	d0a75f17 	ldw	r2,-25220(gp)
 100acec:	1009883a 	mov	r4,r2
 100acf0:	000b883a 	mov	r5,zero
 100acf4:	100abfc0 	call	100abfc <Write_Sector_Data>
 100acf8:	e0bfff15 	stw	r2,-4(fp)
	}
	return result;
 100acfc:	e0bfff17 	ldw	r2,-4(fp)
}
 100ad00:	e037883a 	mov	sp,fp
 100ad04:	dfc00117 	ldw	ra,4(sp)
 100ad08:	df000017 	ldw	fp,0(sp)
 100ad0c:	dec00204 	addi	sp,sp,8
 100ad10:	f800283a 	ret

0100ad14 <Read_Sector_Data>:

bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 100ad14:	defff904 	addi	sp,sp,-28
 100ad18:	dfc00615 	stw	ra,24(sp)
 100ad1c:	df000515 	stw	fp,20(sp)
 100ad20:	df000504 	addi	fp,sp,20
 100ad24:	e13ffd15 	stw	r4,-12(fp)
 100ad28:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 100ad2c:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 100ad30:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100ad34:	1005003a 	cmpeq	r2,r2,zero
 100ad38:	10002d1e 	bne	r2,zero,100adf0 <Read_Sector_Data+0xdc>
		short int reg_state = 0xff;
 100ad3c:	00803fc4 	movi	r2,255
 100ad40:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 100ad44:	d0a75e17 	ldw	r2,-25224(gp)
 100ad48:	1005003a 	cmpeq	r2,r2,zero
 100ad4c:	1000081e 	bne	r2,zero,100ad70 <Read_Sector_Data+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 100ad50:	d0a75f17 	ldw	r2,-25220(gp)
 100ad54:	1009883a 	mov	r4,r2
 100ad58:	000b883a 	mov	r5,zero
 100ad5c:	100abfc0 	call	100abfc <Write_Sector_Data>
 100ad60:	1004c03a 	cmpne	r2,r2,zero
 100ad64:	1000021e 	bne	r2,zero,100ad70 <Read_Sector_Data+0x5c>
				return false;
 100ad68:	e03fff15 	stw	zero,-4(fp)
 100ad6c:	00002206 	br	100adf8 <Read_Sector_Data+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 100ad70:	d0a75917 	ldw	r2,-25244(gp)
 100ad74:	1009883a 	mov	r4,r2
 100ad78:	e0fffd17 	ldw	r3,-12(fp)
 100ad7c:	e0bffe17 	ldw	r2,-8(fp)
 100ad80:	1885883a 	add	r2,r3,r2
 100ad84:	1006927a 	slli	r3,r2,9
 100ad88:	2005883a 	mov	r2,r4
 100ad8c:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 100ad90:	d0a75817 	ldw	r2,-25248(gp)
 100ad94:	1007883a 	mov	r3,r2
 100ad98:	00800444 	movi	r2,17
 100ad9c:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 100ada0:	d0a75517 	ldw	r2,-25260(gp)
 100ada4:	1080002b 	ldhuio	r2,0(r2)
 100ada8:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 100adac:	e0bffb0b 	ldhu	r2,-20(fp)
 100adb0:	10bfffcc 	andi	r2,r2,65535
 100adb4:	1080010c 	andi	r2,r2,4
 100adb8:	1004c03a 	cmpne	r2,r2,zero
 100adbc:	103ff81e 	bne	r2,zero,100ada0 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0) {
 100adc0:	e0bffb0b 	ldhu	r2,-20(fp)
 100adc4:	10bfffcc 	andi	r2,r2,65535
 100adc8:	1080040c 	andi	r2,r2,16
 100adcc:	1004c03a 	cmpne	r2,r2,zero
 100add0:	1000071e 	bne	r2,zero,100adf0 <Read_Sector_Data+0xdc>
			result = true;
 100add4:	00800044 	movi	r2,1
 100add8:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 100addc:	d0275e15 	stw	zero,-25224(gp)
			current_sector_index = sector_index + partition_offset;
 100ade0:	e0fffd17 	ldw	r3,-12(fp)
 100ade4:	e0bffe17 	ldw	r2,-8(fp)
 100ade8:	1885883a 	add	r2,r3,r2
 100adec:	d0a75f15 	stw	r2,-25220(gp)
		}
	}
	return result;
 100adf0:	e0bffc17 	ldw	r2,-16(fp)
 100adf4:	e0bfff15 	stw	r2,-4(fp)
 100adf8:	e0bfff17 	ldw	r2,-4(fp)
}
 100adfc:	e037883a 	mov	sp,fp
 100ae00:	dfc00117 	ldw	ra,4(sp)
 100ae04:	df000017 	ldw	fp,0(sp)
 100ae08:	dec00204 	addi	sp,sp,8
 100ae0c:	f800283a 	ret

0100ae10 <get_cluster_flag>:

bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 100ae10:	defffa04 	addi	sp,sp,-24
 100ae14:	dfc00515 	stw	ra,20(sp)
 100ae18:	df000415 	stw	fp,16(sp)
 100ae1c:	df000404 	addi	fp,sp,16
 100ae20:	e13ffd15 	stw	r4,-12(fp)
 100ae24:	e17ffe15 	stw	r5,-8(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 100ae28:	e0bffd17 	ldw	r2,-12(fp)
 100ae2c:	1006d23a 	srli	r3,r2,8
 100ae30:	d0a75b17 	ldw	r2,-25236(gp)
 100ae34:	1885883a 	add	r2,r3,r2
 100ae38:	e0bffc15 	stw	r2,-16(fp)

	sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 100ae3c:	00804074 	movhi	r2,257
 100ae40:	109cac04 	addi	r2,r2,29360
 100ae44:	10c01117 	ldw	r3,68(r2)
 100ae48:	e0bffc17 	ldw	r2,-16(fp)
 100ae4c:	10c5883a 	add	r2,r2,r3
 100ae50:	e0bffc15 	stw	r2,-16(fp)

	if (sector_index != current_sector_index) {
 100ae54:	d0e75f17 	ldw	r3,-25220(gp)
 100ae58:	e0bffc17 	ldw	r2,-16(fp)
 100ae5c:	10c00726 	beq	r2,r3,100ae7c <get_cluster_flag+0x6c>
		if (Read_Sector_Data(sector_index, 0) == false) {
 100ae60:	e13ffc17 	ldw	r4,-16(fp)
 100ae64:	000b883a 	mov	r5,zero
 100ae68:	100ad140 	call	100ad14 <Read_Sector_Data>
 100ae6c:	1004c03a 	cmpne	r2,r2,zero
 100ae70:	1000021e 	bne	r2,zero,100ae7c <get_cluster_flag+0x6c>
			return false;
 100ae74:	e03fff15 	stw	zero,-4(fp)
 100ae78:	00000d06 	br	100aeb0 <get_cluster_flag+0xa0>
		}
	}
	*flag =
 100ae7c:	d0a75d17 	ldw	r2,-25228(gp)
 100ae80:	10800a17 	ldw	r2,40(r2)
 100ae84:	1007883a 	mov	r3,r2
 100ae88:	e0bffd17 	ldw	r2,-12(fp)
 100ae8c:	10803fcc 	andi	r2,r2,255
 100ae90:	1085883a 	add	r2,r2,r2
 100ae94:	1885883a 	add	r2,r3,r2
 100ae98:	1080002b 	ldhuio	r2,0(r2)
 100ae9c:	1007883a 	mov	r3,r2
 100aea0:	e0bffe17 	ldw	r2,-8(fp)
 100aea4:	10c0000d 	sth	r3,0(r2)
			(unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
	return true;
 100aea8:	00800044 	movi	r2,1
 100aeac:	e0bfff15 	stw	r2,-4(fp)
 100aeb0:	e0bfff17 	ldw	r2,-4(fp)
}
 100aeb4:	e037883a 	mov	sp,fp
 100aeb8:	dfc00117 	ldw	ra,4(sp)
 100aebc:	df000017 	ldw	fp,0(sp)
 100aec0:	dec00204 	addi	sp,sp,8
 100aec4:	f800283a 	ret

0100aec8 <mark_cluster>:

bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 100aec8:	defff904 	addi	sp,sp,-28
 100aecc:	dfc00615 	stw	ra,24(sp)
 100aed0:	df000515 	stw	fp,20(sp)
 100aed4:	df000504 	addi	fp,sp,20
 100aed8:	e13ffc15 	stw	r4,-16(fp)
 100aedc:	e1bffe15 	stw	r6,-8(fp)
 100aee0:	e17ffd0d 	sth	r5,-12(fp)
	unsigned int sector_index = (cluster_index / 256)
			+ fat_partition_offset_in_512_byte_sectors;
 100aee4:	e0bffc17 	ldw	r2,-16(fp)
 100aee8:	1006d23a 	srli	r3,r2,8
 100aeec:	d0a75b17 	ldw	r2,-25236(gp)
 100aef0:	1885883a 	add	r2,r3,r2
 100aef4:	e0bffb15 	stw	r2,-20(fp)

	if (first_fat) {
 100aef8:	e0bffe17 	ldw	r2,-8(fp)
 100aefc:	1005003a 	cmpeq	r2,r2,zero
 100af00:	1000071e 	bne	r2,zero,100af20 <mark_cluster+0x58>
		sector_index = sector_index + boot_sector_data.first_fat_sector_offset;
 100af04:	00804074 	movhi	r2,257
 100af08:	109cac04 	addi	r2,r2,29360
 100af0c:	10c01117 	ldw	r3,68(r2)
 100af10:	e0bffb17 	ldw	r2,-20(fp)
 100af14:	10c5883a 	add	r2,r2,r3
 100af18:	e0bffb15 	stw	r2,-20(fp)
 100af1c:	00000606 	br	100af38 <mark_cluster+0x70>
	} else {
		sector_index = sector_index + boot_sector_data.second_fat_sector_offset;
 100af20:	00804074 	movhi	r2,257
 100af24:	109cac04 	addi	r2,r2,29360
 100af28:	10c01217 	ldw	r3,72(r2)
 100af2c:	e0bffb17 	ldw	r2,-20(fp)
 100af30:	10c5883a 	add	r2,r2,r3
 100af34:	e0bffb15 	stw	r2,-20(fp)
	}

	if (sector_index != current_sector_index) {
 100af38:	d0e75f17 	ldw	r3,-25220(gp)
 100af3c:	e0bffb17 	ldw	r2,-20(fp)
 100af40:	10c00726 	beq	r2,r3,100af60 <mark_cluster+0x98>
		if (Read_Sector_Data(sector_index, 0) == false) {
 100af44:	e13ffb17 	ldw	r4,-20(fp)
 100af48:	000b883a 	mov	r5,zero
 100af4c:	100ad140 	call	100ad14 <Read_Sector_Data>
 100af50:	1004c03a 	cmpne	r2,r2,zero
 100af54:	1000021e 	bne	r2,zero,100af60 <mark_cluster+0x98>
			return false;
 100af58:	e03fff15 	stw	zero,-4(fp)
 100af5c:	00000d06 	br	100af94 <mark_cluster+0xcc>
		}
	}
	IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 100af60:	d0a75d17 	ldw	r2,-25228(gp)
 100af64:	10800a17 	ldw	r2,40(r2)
 100af68:	1007883a 	mov	r3,r2
 100af6c:	e0bffc17 	ldw	r2,-16(fp)
 100af70:	10803fcc 	andi	r2,r2,255
 100af74:	1085883a 	add	r2,r2,r2
 100af78:	1885883a 	add	r2,r3,r2
 100af7c:	e0fffd0f 	ldh	r3,-12(fp)
 100af80:	10c0002d 	sthio	r3,0(r2)
	current_sector_modified = true;
 100af84:	00800044 	movi	r2,1
 100af88:	d0a75e15 	stw	r2,-25224(gp)
	return true;
 100af8c:	00800044 	movi	r2,1
 100af90:	e0bfff15 	stw	r2,-4(fp)
 100af94:	e0bfff17 	ldw	r2,-4(fp)
}
 100af98:	e037883a 	mov	sp,fp
 100af9c:	dfc00117 	ldw	ra,4(sp)
 100afa0:	df000017 	ldw	fp,0(sp)
 100afa4:	dec00204 	addi	sp,sp,8
 100afa8:	f800283a 	ret

0100afac <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 100afac:	defff704 	addi	sp,sp,-36
 100afb0:	dfc00815 	stw	ra,32(sp)
 100afb4:	df000715 	stw	fp,28(sp)
 100afb8:	df000704 	addi	fp,sp,28
	bool result = false;
 100afbc:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data_Attempt_CRC(0, 0)) {
 100afc0:	0009883a 	mov	r4,zero
 100afc4:	000b883a 	mov	r5,zero
 100afc8:	100f1680 	call	100f168 <Read_Sector_Data_Attempt_CRC>
 100afcc:	1005003a 	cmpeq	r2,r2,zero
 100afd0:	10005c1e 	bne	r2,zero,100b144 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 100afd4:	d0a75d17 	ldw	r2,-25228(gp)
 100afd8:	10800a17 	ldw	r2,40(r2)
 100afdc:	10807f84 	addi	r2,r2,510
 100afe0:	1080002b 	ldhuio	r2,0(r2)
 100afe4:	10bfffcc 	andi	r2,r2,65535
 100afe8:	10a0001c 	xori	r2,r2,32768
 100afec:	10a00004 	addi	r2,r2,-32768
 100aff0:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
 100aff4:	e0bffd17 	ldw	r2,-12(fp)
 100aff8:	10ffffcc 	andi	r3,r2,65535
 100affc:	00aa9554 	movui	r2,43605
 100b000:	1880501e 	bne	r3,r2,100b144 <Check_for_Master_Boot_Record+0x198>
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 100b004:	e03ffe15 	stw	zero,-8(fp)
 100b008:	00004b06 	br	100b138 <Check_for_Master_Boot_Record+0x18c>
				int partition_data_offset = (index * 16) + 0x01be;
 100b00c:	e0bffe17 	ldw	r2,-8(fp)
 100b010:	1004913a 	slli	r2,r2,4
 100b014:	10806f84 	addi	r2,r2,446
 100b018:	e0bffa15 	stw	r2,-24(fp)
				char type;

				// Read Partition type
				type =
 100b01c:	d0a75d17 	ldw	r2,-25228(gp)
 100b020:	10800a17 	ldw	r2,40(r2)
 100b024:	1007883a 	mov	r3,r2
 100b028:	e0bffa17 	ldw	r2,-24(fp)
 100b02c:	1885883a 	add	r2,r3,r2
 100b030:	10800104 	addi	r2,r2,4
 100b034:	10800023 	ldbuio	r2,0(r2)
 100b038:	e0bff905 	stb	r2,-28(fp)
						(unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14)) {
 100b03c:	e0bff907 	ldb	r2,-28(fp)
 100b040:	10800060 	cmpeqi	r2,r2,1
 100b044:	1000091e 	bne	r2,zero,100b06c <Check_for_Master_Boot_Record+0xc0>
 100b048:	e0bff907 	ldb	r2,-28(fp)
 100b04c:	10800120 	cmpeqi	r2,r2,4
 100b050:	1000061e 	bne	r2,zero,100b06c <Check_for_Master_Boot_Record+0xc0>
 100b054:	e0bff907 	ldb	r2,-28(fp)
 100b058:	108001a0 	cmpeqi	r2,r2,6
 100b05c:	1000031e 	bne	r2,zero,100b06c <Check_for_Master_Boot_Record+0xc0>
 100b060:	e0bff907 	ldb	r2,-28(fp)
 100b064:	10800398 	cmpnei	r2,r2,14
 100b068:	1000301e 	bne	r2,zero,100b12c <Check_for_Master_Boot_Record+0x180>
					// Get partition offset and size.
					offset =
 100b06c:	d0a75d17 	ldw	r2,-25228(gp)
 100b070:	10800a17 	ldw	r2,40(r2)
 100b074:	1007883a 	mov	r3,r2
 100b078:	e0bffa17 	ldw	r2,-24(fp)
 100b07c:	1885883a 	add	r2,r3,r2
 100b080:	10800284 	addi	r2,r2,10
 100b084:	1080002b 	ldhuio	r2,0(r2)
 100b088:	10bfffcc 	andi	r2,r2,65535
 100b08c:	1008943a 	slli	r4,r2,16
 100b090:	d0a75d17 	ldw	r2,-25228(gp)
 100b094:	10800a17 	ldw	r2,40(r2)
 100b098:	1007883a 	mov	r3,r2
 100b09c:	e0bffa17 	ldw	r2,-24(fp)
 100b0a0:	1885883a 	add	r2,r3,r2
 100b0a4:	10800204 	addi	r2,r2,8
 100b0a8:	1080002b 	ldhuio	r2,0(r2)
 100b0ac:	10bfffcc 	andi	r2,r2,65535
 100b0b0:	2084b03a 	or	r2,r4,r2
 100b0b4:	e0bffc15 	stw	r2,-16(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
					partition_size =
 100b0b8:	d0a75d17 	ldw	r2,-25228(gp)
 100b0bc:	10800a17 	ldw	r2,40(r2)
 100b0c0:	1007883a 	mov	r3,r2
 100b0c4:	e0bffa17 	ldw	r2,-24(fp)
 100b0c8:	1885883a 	add	r2,r3,r2
 100b0cc:	10800384 	addi	r2,r2,14
 100b0d0:	1080002b 	ldhuio	r2,0(r2)
 100b0d4:	10bfffcc 	andi	r2,r2,65535
 100b0d8:	1008943a 	slli	r4,r2,16
 100b0dc:	d0a75d17 	ldw	r2,-25228(gp)
 100b0e0:	10800a17 	ldw	r2,40(r2)
 100b0e4:	1007883a 	mov	r3,r2
 100b0e8:	e0bffa17 	ldw	r2,-24(fp)
 100b0ec:	1885883a 	add	r2,r3,r2
 100b0f0:	10800304 	addi	r2,r2,12
 100b0f4:	1080002b 	ldhuio	r2,0(r2)
 100b0f8:	10bfffcc 	andi	r2,r2,65535
 100b0fc:	2084b03a 	or	r2,r4,r2
 100b100:	e0bffb15 	stw	r2,-20(fp)
							(((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E))
									<< 16)
									| ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));

					// Check if the partition is valid
					if (partition_size > 0) {
 100b104:	e0bffb17 	ldw	r2,-20(fp)
 100b108:	10800050 	cmplti	r2,r2,1
 100b10c:	1000071e 	bne	r2,zero,100b12c <Check_for_Master_Boot_Record+0x180>
						result = true;
 100b110:	00800044 	movi	r2,1
 100b114:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 100b118:	e0bffb17 	ldw	r2,-20(fp)
 100b11c:	d0a75c15 	stw	r2,-25232(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 100b120:	e0bffc17 	ldw	r2,-16(fp)
 100b124:	d0a75b15 	stw	r2,-25236(gp)
						break;
 100b128:	00000606 	br	100b144 <Check_for_Master_Boot_Record+0x198>
		end = (short int) IORD_16DIRECT(device_pointer->base,0x1fe);

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55) {
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++) {
 100b12c:	e0bffe17 	ldw	r2,-8(fp)
 100b130:	10800044 	addi	r2,r2,1
 100b134:	e0bffe15 	stw	r2,-8(fp)
 100b138:	e0bffe17 	ldw	r2,-8(fp)
 100b13c:	10800110 	cmplti	r2,r2,4
 100b140:	103fb21e 	bne	r2,zero,100b00c <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 100b144:	e0bfff17 	ldw	r2,-4(fp)
}
 100b148:	e037883a 	mov	sp,fp
 100b14c:	dfc00117 	ldw	ra,4(sp)
 100b150:	df000017 	ldw	fp,0(sp)
 100b154:	dec00204 	addi	sp,sp,8
 100b158:	f800283a 	ret

0100b15c <Read_File_Record_At_Offset>:

bool Read_File_Record_At_Offset(int offset, t_file_record *record,
		unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 100b15c:	defff804 	addi	sp,sp,-32
 100b160:	dfc00715 	stw	ra,28(sp)
 100b164:	df000615 	stw	fp,24(sp)
 100b168:	df000604 	addi	fp,sp,24
 100b16c:	e13ffc15 	stw	r4,-16(fp)
 100b170:	e17ffd15 	stw	r5,-12(fp)
 100b174:	e1bffe15 	stw	r6,-8(fp)
 100b178:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 100b17c:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 100b180:	e0bffc17 	ldw	r2,-16(fp)
 100b184:	108007cc 	andi	r2,r2,31
 100b188:	1004c03a 	cmpne	r2,r2,zero
 100b18c:	10008e1e 	bne	r2,zero,100b3c8 <Read_File_Record_At_Offset+0x26c>
 100b190:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100b194:	1005003a 	cmpeq	r2,r2,zero
 100b198:	10008b1e 	bne	r2,zero,100b3c8 <Read_File_Record_At_Offset+0x26c>
 100b19c:	d0a75417 	ldw	r2,-25264(gp)
 100b1a0:	1005003a 	cmpeq	r2,r2,zero
 100b1a4:	1000881e 	bne	r2,zero,100b3c8 <Read_File_Record_At_Offset+0x26c>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 100b1a8:	e03ffa15 	stw	zero,-24(fp)
 100b1ac:	00001006 	br	100b1f0 <Read_File_Record_At_Offset+0x94>
			record->name[counter] =
 100b1b0:	e17ffa17 	ldw	r5,-24(fp)
 100b1b4:	d0a75d17 	ldw	r2,-25228(gp)
 100b1b8:	10800a17 	ldw	r2,40(r2)
 100b1bc:	1009883a 	mov	r4,r2
 100b1c0:	e0fffc17 	ldw	r3,-16(fp)
 100b1c4:	e0bffa17 	ldw	r2,-24(fp)
 100b1c8:	1885883a 	add	r2,r3,r2
 100b1cc:	2085883a 	add	r2,r4,r2
 100b1d0:	10800023 	ldbuio	r2,0(r2)
 100b1d4:	1007883a 	mov	r3,r2
 100b1d8:	e0bffd17 	ldw	r2,-12(fp)
 100b1dc:	1145883a 	add	r2,r2,r5
 100b1e0:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter++) {
 100b1e4:	e0bffa17 	ldw	r2,-24(fp)
 100b1e8:	10800044 	addi	r2,r2,1
 100b1ec:	e0bffa15 	stw	r2,-24(fp)
 100b1f0:	e0bffa17 	ldw	r2,-24(fp)
 100b1f4:	10800210 	cmplti	r2,r2,8
 100b1f8:	103fed1e 	bne	r2,zero,100b1b0 <Read_File_Record_At_Offset+0x54>
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 100b1fc:	e03ffa15 	stw	zero,-24(fp)
 100b200:	00001206 	br	100b24c <Read_File_Record_At_Offset+0xf0>
			record->extension[counter] =
 100b204:	e17ffa17 	ldw	r5,-24(fp)
 100b208:	d0a75d17 	ldw	r2,-25228(gp)
 100b20c:	10800a17 	ldw	r2,40(r2)
 100b210:	1009883a 	mov	r4,r2
 100b214:	e0fffc17 	ldw	r3,-16(fp)
 100b218:	e0bffa17 	ldw	r2,-24(fp)
 100b21c:	1885883a 	add	r2,r3,r2
 100b220:	2085883a 	add	r2,r4,r2
 100b224:	10800204 	addi	r2,r2,8
 100b228:	10800023 	ldbuio	r2,0(r2)
 100b22c:	1007883a 	mov	r3,r2
 100b230:	e0bffd17 	ldw	r2,-12(fp)
 100b234:	2885883a 	add	r2,r5,r2
 100b238:	10800204 	addi	r2,r2,8
 100b23c:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++) {
			record->name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}
		for (counter = 0; counter < 3; counter++) {
 100b240:	e0bffa17 	ldw	r2,-24(fp)
 100b244:	10800044 	addi	r2,r2,1
 100b248:	e0bffa15 	stw	r2,-24(fp)
 100b24c:	e0bffa17 	ldw	r2,-24(fp)
 100b250:	108000d0 	cmplti	r2,r2,3
 100b254:	103feb1e 	bne	r2,zero,100b204 <Read_File_Record_At_Offset+0xa8>
			record->extension[counter] =
					(char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}
		record->attributes =
 100b258:	d0a75d17 	ldw	r2,-25228(gp)
 100b25c:	10800a17 	ldw	r2,40(r2)
 100b260:	1007883a 	mov	r3,r2
 100b264:	e0bffc17 	ldw	r2,-16(fp)
 100b268:	1885883a 	add	r2,r3,r2
 100b26c:	108002c4 	addi	r2,r2,11
 100b270:	10800023 	ldbuio	r2,0(r2)
 100b274:	1007883a 	mov	r3,r2
 100b278:	e0bffd17 	ldw	r2,-12(fp)
 100b27c:	10c002c5 	stb	r3,11(r2)
				(char) IORD_8DIRECT(device_pointer->base, offset+11);
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time =
 100b280:	d0a75d17 	ldw	r2,-25228(gp)
 100b284:	10800a17 	ldw	r2,40(r2)
 100b288:	1007883a 	mov	r3,r2
 100b28c:	e0bffc17 	ldw	r2,-16(fp)
 100b290:	1885883a 	add	r2,r3,r2
 100b294:	10800384 	addi	r2,r2,14
 100b298:	1080002b 	ldhuio	r2,0(r2)
 100b29c:	1007883a 	mov	r3,r2
 100b2a0:	e0bffd17 	ldw	r2,-12(fp)
 100b2a4:	10c0030d 	sth	r3,12(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
		record->create_date =
 100b2a8:	d0a75d17 	ldw	r2,-25228(gp)
 100b2ac:	10800a17 	ldw	r2,40(r2)
 100b2b0:	1007883a 	mov	r3,r2
 100b2b4:	e0bffc17 	ldw	r2,-16(fp)
 100b2b8:	1885883a 	add	r2,r3,r2
 100b2bc:	10800404 	addi	r2,r2,16
 100b2c0:	1080002b 	ldhuio	r2,0(r2)
 100b2c4:	1007883a 	mov	r3,r2
 100b2c8:	e0bffd17 	ldw	r2,-12(fp)
 100b2cc:	10c0038d 	sth	r3,14(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
		record->last_access_date =
 100b2d0:	d0a75d17 	ldw	r2,-25228(gp)
 100b2d4:	10800a17 	ldw	r2,40(r2)
 100b2d8:	1007883a 	mov	r3,r2
 100b2dc:	e0bffc17 	ldw	r2,-16(fp)
 100b2e0:	1885883a 	add	r2,r3,r2
 100b2e4:	10800484 	addi	r2,r2,18
 100b2e8:	1080002b 	ldhuio	r2,0(r2)
 100b2ec:	1007883a 	mov	r3,r2
 100b2f0:	e0bffd17 	ldw	r2,-12(fp)
 100b2f4:	10c0040d 	sth	r3,16(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time =
 100b2f8:	d0a75d17 	ldw	r2,-25228(gp)
 100b2fc:	10800a17 	ldw	r2,40(r2)
 100b300:	1007883a 	mov	r3,r2
 100b304:	e0bffc17 	ldw	r2,-16(fp)
 100b308:	1885883a 	add	r2,r3,r2
 100b30c:	10800584 	addi	r2,r2,22
 100b310:	1080002b 	ldhuio	r2,0(r2)
 100b314:	1007883a 	mov	r3,r2
 100b318:	e0bffd17 	ldw	r2,-12(fp)
 100b31c:	10c0048d 	sth	r3,18(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
		record->last_modified_date =
 100b320:	d0a75d17 	ldw	r2,-25228(gp)
 100b324:	10800a17 	ldw	r2,40(r2)
 100b328:	1007883a 	mov	r3,r2
 100b32c:	e0bffc17 	ldw	r2,-16(fp)
 100b330:	1885883a 	add	r2,r3,r2
 100b334:	10800604 	addi	r2,r2,24
 100b338:	1080002b 	ldhuio	r2,0(r2)
 100b33c:	1007883a 	mov	r3,r2
 100b340:	e0bffd17 	ldw	r2,-12(fp)
 100b344:	10c0050d 	sth	r3,20(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
		record->start_cluster_index =
 100b348:	d0a75d17 	ldw	r2,-25228(gp)
 100b34c:	10800a17 	ldw	r2,40(r2)
 100b350:	1007883a 	mov	r3,r2
 100b354:	e0bffc17 	ldw	r2,-16(fp)
 100b358:	1885883a 	add	r2,r3,r2
 100b35c:	10800684 	addi	r2,r2,26
 100b360:	1080002b 	ldhuio	r2,0(r2)
 100b364:	1007883a 	mov	r3,r2
 100b368:	e0bffd17 	ldw	r2,-12(fp)
 100b36c:	10c0058d 	sth	r3,22(r2)
				(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
		record->file_size_in_bytes =
 100b370:	d0a75d17 	ldw	r2,-25228(gp)
 100b374:	10800a17 	ldw	r2,40(r2)
 100b378:	1007883a 	mov	r3,r2
 100b37c:	e0bffc17 	ldw	r2,-16(fp)
 100b380:	1885883a 	add	r2,r3,r2
 100b384:	10800704 	addi	r2,r2,28
 100b388:	10800037 	ldwio	r2,0(r2)
 100b38c:	1007883a 	mov	r3,r2
 100b390:	e0bffd17 	ldw	r2,-12(fp)
 100b394:	10c00615 	stw	r3,24(r2)
				(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
		record->file_record_cluster = cluster_index;
 100b398:	e0fffd17 	ldw	r3,-12(fp)
 100b39c:	e0bffe17 	ldw	r2,-8(fp)
 100b3a0:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 100b3a4:	e0fffd17 	ldw	r3,-12(fp)
 100b3a8:	e0bfff17 	ldw	r2,-4(fp)
 100b3ac:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 100b3b0:	e0bffc17 	ldw	r2,-16(fp)
 100b3b4:	1007883a 	mov	r3,r2
 100b3b8:	e0bffd17 	ldw	r2,-12(fp)
 100b3bc:	10c00c0d 	sth	r3,48(r2)
		result = true;
 100b3c0:	00800044 	movi	r2,1
 100b3c4:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 100b3c8:	e0bffb17 	ldw	r2,-20(fp)
}
 100b3cc:	e037883a 	mov	sp,fp
 100b3d0:	dfc00117 	ldw	ra,4(sp)
 100b3d4:	df000017 	ldw	fp,0(sp)
 100b3d8:	dec00204 	addi	sp,sp,8
 100b3dc:	f800283a 	ret

0100b3e0 <Write_File_Record_At_Offset>:

bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 100b3e0:	defff904 	addi	sp,sp,-28
 100b3e4:	dfc00615 	stw	ra,24(sp)
 100b3e8:	df000515 	stw	fp,20(sp)
 100b3ec:	df000504 	addi	fp,sp,20
 100b3f0:	e13ffe15 	stw	r4,-8(fp)
 100b3f4:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 100b3f8:	e03ffd15 	stw	zero,-12(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
 100b3fc:	e0bffe17 	ldw	r2,-8(fp)
 100b400:	108007cc 	andi	r2,r2,31
 100b404:	1004c03a 	cmpne	r2,r2,zero
 100b408:	10009d1e 	bne	r2,zero,100b680 <Write_File_Record_At_Offset+0x2a0>
 100b40c:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100b410:	1005003a 	cmpeq	r2,r2,zero
 100b414:	10009a1e 	bne	r2,zero,100b680 <Write_File_Record_At_Offset+0x2a0>
 100b418:	d0a75417 	ldw	r2,-25264(gp)
 100b41c:	1005003a 	cmpeq	r2,r2,zero
 100b420:	1000971e 	bne	r2,zero,100b680 <Write_File_Record_At_Offset+0x2a0>
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 100b424:	e03ffc15 	stw	zero,-16(fp)
 100b428:	00001e06 	br	100b4a4 <Write_File_Record_At_Offset+0xc4>
			short int two_chars = (short int) record->name[counter + 1];
 100b42c:	e0bffc17 	ldw	r2,-16(fp)
 100b430:	10c00044 	addi	r3,r2,1
 100b434:	e0bfff17 	ldw	r2,-4(fp)
 100b438:	10c5883a 	add	r2,r2,r3
 100b43c:	10800003 	ldbu	r2,0(r2)
 100b440:	10803fcc 	andi	r2,r2,255
 100b444:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars << 8;
 100b448:	e0bffb0f 	ldh	r2,-20(fp)
 100b44c:	1004923a 	slli	r2,r2,8
 100b450:	e0bffb0d 	sth	r2,-20(fp)
			two_chars = two_chars | record->name[counter];
 100b454:	e0fffc17 	ldw	r3,-16(fp)
 100b458:	e0bfff17 	ldw	r2,-4(fp)
 100b45c:	10c5883a 	add	r2,r2,r3
 100b460:	10800003 	ldbu	r2,0(r2)
 100b464:	10c03fcc 	andi	r3,r2,255
 100b468:	e0bffb0b 	ldhu	r2,-20(fp)
 100b46c:	10c4b03a 	or	r2,r2,r3
 100b470:	e0bffb0d 	sth	r2,-20(fp)
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 100b474:	d0a75d17 	ldw	r2,-25228(gp)
 100b478:	10800a17 	ldw	r2,40(r2)
 100b47c:	1009883a 	mov	r4,r2
 100b480:	e0fffe17 	ldw	r3,-8(fp)
 100b484:	e0bffc17 	ldw	r2,-16(fp)
 100b488:	1885883a 	add	r2,r3,r2
 100b48c:	2085883a 	add	r2,r4,r2
 100b490:	e0fffb0f 	ldh	r3,-20(fp)
 100b494:	10c0002d 	sthio	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present())
			&& (is_sd_card_formated_as_FAT16)) {
		int counter;

		for (counter = 0; counter < 8; counter = counter + 2) {
 100b498:	e0bffc17 	ldw	r2,-16(fp)
 100b49c:	10800084 	addi	r2,r2,2
 100b4a0:	e0bffc15 	stw	r2,-16(fp)
 100b4a4:	e0bffc17 	ldw	r2,-16(fp)
 100b4a8:	10800210 	cmplti	r2,r2,8
 100b4ac:	103fdf1e 	bne	r2,zero,100b42c <Write_File_Record_At_Offset+0x4c>
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 100b4b0:	e03ffc15 	stw	zero,-16(fp)
 100b4b4:	00001306 	br	100b504 <Write_File_Record_At_Offset+0x124>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
 100b4b8:	d0a75d17 	ldw	r2,-25228(gp)
 100b4bc:	10800a17 	ldw	r2,40(r2)
 100b4c0:	1009883a 	mov	r4,r2
 100b4c4:	e0fffe17 	ldw	r3,-8(fp)
 100b4c8:	e0bffc17 	ldw	r2,-16(fp)
 100b4cc:	1885883a 	add	r2,r3,r2
 100b4d0:	2085883a 	add	r2,r4,r2
 100b4d4:	11000204 	addi	r4,r2,8
 100b4d8:	e0fffc17 	ldw	r3,-16(fp)
 100b4dc:	e0bfff17 	ldw	r2,-4(fp)
 100b4e0:	1885883a 	add	r2,r3,r2
 100b4e4:	10800204 	addi	r2,r2,8
 100b4e8:	10800003 	ldbu	r2,0(r2)
 100b4ec:	10c03fcc 	andi	r3,r2,255
 100b4f0:	2005883a 	mov	r2,r4
 100b4f4:	10c00025 	stbio	r3,0(r2)
			short int two_chars = (short int) record->name[counter + 1];
			two_chars = two_chars << 8;
			two_chars = two_chars | record->name[counter];
			IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
		}
		for (counter = 0; counter < 3; counter++) {
 100b4f8:	e0bffc17 	ldw	r2,-16(fp)
 100b4fc:	10800044 	addi	r2,r2,1
 100b500:	e0bffc15 	stw	r2,-16(fp)
 100b504:	e0bffc17 	ldw	r2,-16(fp)
 100b508:	108000d0 	cmplti	r2,r2,3
 100b50c:	103fea1e 	bne	r2,zero,100b4b8 <Write_File_Record_At_Offset+0xd8>
			IOWR_8DIRECT(device_pointer->base, offset+counter+8,
					record->extension[counter]);
		}
		IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 100b510:	d0a75d17 	ldw	r2,-25228(gp)
 100b514:	10800a17 	ldw	r2,40(r2)
 100b518:	1007883a 	mov	r3,r2
 100b51c:	e0bffe17 	ldw	r2,-8(fp)
 100b520:	1885883a 	add	r2,r3,r2
 100b524:	110002c4 	addi	r4,r2,11
 100b528:	e0bfff17 	ldw	r2,-4(fp)
 100b52c:	108002c3 	ldbu	r2,11(r2)
 100b530:	10c03fcc 	andi	r3,r2,255
 100b534:	2005883a 	mov	r2,r4
 100b538:	10c00025 	stbio	r3,0(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 100b53c:	d0a75d17 	ldw	r2,-25228(gp)
 100b540:	10800a17 	ldw	r2,40(r2)
 100b544:	1007883a 	mov	r3,r2
 100b548:	e0bffe17 	ldw	r2,-8(fp)
 100b54c:	1885883a 	add	r2,r3,r2
 100b550:	11000384 	addi	r4,r2,14
 100b554:	e0bfff17 	ldw	r2,-4(fp)
 100b558:	1080030b 	ldhu	r2,12(r2)
 100b55c:	10ffffcc 	andi	r3,r2,65535
 100b560:	2005883a 	mov	r2,r4
 100b564:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 100b568:	d0a75d17 	ldw	r2,-25228(gp)
 100b56c:	10800a17 	ldw	r2,40(r2)
 100b570:	1007883a 	mov	r3,r2
 100b574:	e0bffe17 	ldw	r2,-8(fp)
 100b578:	1885883a 	add	r2,r3,r2
 100b57c:	11000404 	addi	r4,r2,16
 100b580:	e0bfff17 	ldw	r2,-4(fp)
 100b584:	1080038b 	ldhu	r2,14(r2)
 100b588:	10ffffcc 	andi	r3,r2,65535
 100b58c:	2005883a 	mov	r2,r4
 100b590:	10c0002d 	sthio	r3,0(r2)
		IOWR_16DIRECT(device_pointer->base, offset+18,
 100b594:	d0a75d17 	ldw	r2,-25228(gp)
 100b598:	10800a17 	ldw	r2,40(r2)
 100b59c:	1007883a 	mov	r3,r2
 100b5a0:	e0bffe17 	ldw	r2,-8(fp)
 100b5a4:	1885883a 	add	r2,r3,r2
 100b5a8:	11000484 	addi	r4,r2,18
 100b5ac:	e0bfff17 	ldw	r2,-4(fp)
 100b5b0:	1080040b 	ldhu	r2,16(r2)
 100b5b4:	10ffffcc 	andi	r3,r2,65535
 100b5b8:	2005883a 	mov	r2,r4
 100b5bc:	10c0002d 	sthio	r3,0(r2)
				record->last_access_date);
		/* Ignore reserved bytes at locations 20 and 21. */
		IOWR_16DIRECT(device_pointer->base, offset+22,
 100b5c0:	d0a75d17 	ldw	r2,-25228(gp)
 100b5c4:	10800a17 	ldw	r2,40(r2)
 100b5c8:	1007883a 	mov	r3,r2
 100b5cc:	e0bffe17 	ldw	r2,-8(fp)
 100b5d0:	1885883a 	add	r2,r3,r2
 100b5d4:	11000584 	addi	r4,r2,22
 100b5d8:	e0bfff17 	ldw	r2,-4(fp)
 100b5dc:	1080048b 	ldhu	r2,18(r2)
 100b5e0:	10ffffcc 	andi	r3,r2,65535
 100b5e4:	2005883a 	mov	r2,r4
 100b5e8:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_time);
		IOWR_16DIRECT(device_pointer->base, offset+24,
 100b5ec:	d0a75d17 	ldw	r2,-25228(gp)
 100b5f0:	10800a17 	ldw	r2,40(r2)
 100b5f4:	1007883a 	mov	r3,r2
 100b5f8:	e0bffe17 	ldw	r2,-8(fp)
 100b5fc:	1885883a 	add	r2,r3,r2
 100b600:	11000604 	addi	r4,r2,24
 100b604:	e0bfff17 	ldw	r2,-4(fp)
 100b608:	1080050b 	ldhu	r2,20(r2)
 100b60c:	10ffffcc 	andi	r3,r2,65535
 100b610:	2005883a 	mov	r2,r4
 100b614:	10c0002d 	sthio	r3,0(r2)
				record->last_modified_date);
		IOWR_16DIRECT(device_pointer->base, offset+26,
 100b618:	d0a75d17 	ldw	r2,-25228(gp)
 100b61c:	10800a17 	ldw	r2,40(r2)
 100b620:	1007883a 	mov	r3,r2
 100b624:	e0bffe17 	ldw	r2,-8(fp)
 100b628:	1885883a 	add	r2,r3,r2
 100b62c:	11000684 	addi	r4,r2,26
 100b630:	e0bfff17 	ldw	r2,-4(fp)
 100b634:	1080058b 	ldhu	r2,22(r2)
 100b638:	10ffffcc 	andi	r3,r2,65535
 100b63c:	2005883a 	mov	r2,r4
 100b640:	10c0002d 	sthio	r3,0(r2)
				record->start_cluster_index);
		IOWR_32DIRECT(device_pointer->base, offset+28,
 100b644:	d0a75d17 	ldw	r2,-25228(gp)
 100b648:	10800a17 	ldw	r2,40(r2)
 100b64c:	1007883a 	mov	r3,r2
 100b650:	e0bffe17 	ldw	r2,-8(fp)
 100b654:	1885883a 	add	r2,r3,r2
 100b658:	11000704 	addi	r4,r2,28
 100b65c:	e0bfff17 	ldw	r2,-4(fp)
 100b660:	10800617 	ldw	r2,24(r2)
 100b664:	1007883a 	mov	r3,r2
 100b668:	2005883a 	mov	r2,r4
 100b66c:	10c00035 	stwio	r3,0(r2)
				record->file_size_in_bytes);
		current_sector_modified = true;
 100b670:	00800044 	movi	r2,1
 100b674:	d0a75e15 	stw	r2,-25224(gp)
		result = true;
 100b678:	00800044 	movi	r2,1
 100b67c:	e0bffd15 	stw	r2,-12(fp)
	}
	return result;
 100b680:	e0bffd17 	ldw	r2,-12(fp)
}
 100b684:	e037883a 	mov	sp,fp
 100b688:	dfc00117 	ldw	ra,4(sp)
 100b68c:	df000017 	ldw	fp,0(sp)
 100b690:	dec00204 	addi	sp,sp,8
 100b694:	f800283a 	ret

0100b698 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 100b698:	defff904 	addi	sp,sp,-28
 100b69c:	dfc00615 	stw	ra,24(sp)
 100b6a0:	df000515 	stw	fp,20(sp)
 100b6a4:	df000504 	addi	fp,sp,20
 100b6a8:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 100b6ac:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 100b6b0:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
 100b6b4:	0009883a 	mov	r4,zero
 100b6b8:	e17fff17 	ldw	r5,-4(fp)
 100b6bc:	100f1680 	call	100f168 <Read_Sector_Data_Attempt_CRC>
 100b6c0:	e0bffe15 	stw	r2,-8(fp)
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 100b6c4:	d0a75d17 	ldw	r2,-25228(gp)
 100b6c8:	10800a17 	ldw	r2,40(r2)
 100b6cc:	10807f84 	addi	r2,r2,510
 100b6d0:	1080002b 	ldhuio	r2,0(r2)
 100b6d4:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 100b6d8:	e0bffc0f 	ldh	r2,-16(fp)
 100b6dc:	10ffffcc 	andi	r3,r2,65535
 100b6e0:	00aa9554 	movui	r2,43605
 100b6e4:	1881751e 	bne	r3,r2,100bcbc <Check_for_DOS_FAT+0x624>
 100b6e8:	e0bffe17 	ldw	r2,-8(fp)
 100b6ec:	1005003a 	cmpeq	r2,r2,zero
 100b6f0:	1001721e 	bne	r2,zero,100bcbc <Check_for_DOS_FAT+0x624>
		int num_clusters = 0;
 100b6f4:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] =
 100b6f8:	d0a75d17 	ldw	r2,-25228(gp)
 100b6fc:	10800a17 	ldw	r2,40(r2)
 100b700:	10800023 	ldbuio	r2,0(r2)
 100b704:	1007883a 	mov	r3,r2
 100b708:	00804074 	movhi	r2,257
 100b70c:	109cac04 	addi	r2,r2,29360
 100b710:	10c00005 	stb	r3,0(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
 100b714:	d0a75d17 	ldw	r2,-25228(gp)
 100b718:	10800a17 	ldw	r2,40(r2)
 100b71c:	10800044 	addi	r2,r2,1
 100b720:	10800023 	ldbuio	r2,0(r2)
 100b724:	1007883a 	mov	r3,r2
 100b728:	00804074 	movhi	r2,257
 100b72c:	109cac04 	addi	r2,r2,29360
 100b730:	10c00045 	stb	r3,1(r2)
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
 100b734:	d0a75d17 	ldw	r2,-25228(gp)
 100b738:	10800a17 	ldw	r2,40(r2)
 100b73c:	10800084 	addi	r2,r2,2
 100b740:	10800023 	ldbuio	r2,0(r2)
 100b744:	1007883a 	mov	r3,r2
 100b748:	00804074 	movhi	r2,257
 100b74c:	109cac04 	addi	r2,r2,29360
 100b750:	10c00085 	stb	r3,2(r2)
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 100b754:	e03ffd15 	stw	zero,-12(fp)
 100b758:	00001006 	br	100b79c <Check_for_DOS_FAT+0x104>
			boot_sector_data.OEM_name[counter] =
 100b75c:	e13ffd17 	ldw	r4,-12(fp)
 100b760:	d0a75d17 	ldw	r2,-25228(gp)
 100b764:	10800a17 	ldw	r2,40(r2)
 100b768:	1007883a 	mov	r3,r2
 100b76c:	e0bffd17 	ldw	r2,-12(fp)
 100b770:	1885883a 	add	r2,r3,r2
 100b774:	108000c4 	addi	r2,r2,3
 100b778:	10800023 	ldbuio	r2,0(r2)
 100b77c:	1007883a 	mov	r3,r2
 100b780:	00804074 	movhi	r2,257
 100b784:	109cac04 	addi	r2,r2,29360
 100b788:	1105883a 	add	r2,r2,r4
 100b78c:	10c000c5 	stb	r3,3(r2)
				(char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] =
				(char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] =
				(char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++) {
 100b790:	e0bffd17 	ldw	r2,-12(fp)
 100b794:	10800044 	addi	r2,r2,1
 100b798:	e0bffd15 	stw	r2,-12(fp)
 100b79c:	e0bffd17 	ldw	r2,-12(fp)
 100b7a0:	10800210 	cmplti	r2,r2,8
 100b7a4:	103fed1e 	bne	r2,zero,100b75c <Check_for_DOS_FAT+0xc4>
			boot_sector_data.OEM_name[counter] =
					(char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes =
 100b7a8:	d0a75d17 	ldw	r2,-25228(gp)
 100b7ac:	10800a17 	ldw	r2,40(r2)
 100b7b0:	10800304 	addi	r2,r2,12
 100b7b4:	10800023 	ldbuio	r2,0(r2)
 100b7b8:	10803fcc 	andi	r2,r2,255
 100b7bc:	1004923a 	slli	r2,r2,8
 100b7c0:	1007883a 	mov	r3,r2
 100b7c4:	d0a75d17 	ldw	r2,-25228(gp)
 100b7c8:	10800a17 	ldw	r2,40(r2)
 100b7cc:	108002c4 	addi	r2,r2,11
 100b7d0:	10800023 	ldbuio	r2,0(r2)
 100b7d4:	10803fcc 	andi	r2,r2,255
 100b7d8:	1080201c 	xori	r2,r2,128
 100b7dc:	10bfe004 	addi	r2,r2,-128
 100b7e0:	1884b03a 	or	r2,r3,r2
 100b7e4:	1007883a 	mov	r3,r2
 100b7e8:	00804074 	movhi	r2,257
 100b7ec:	109cac04 	addi	r2,r2,29360
 100b7f0:	10c0030d 	sth	r3,12(r2)
				(((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8)
						| ((char) IORD_8DIRECT(device_pointer->base, 11));
		boot_sector_data.sectors_per_cluster =
 100b7f4:	d0a75d17 	ldw	r2,-25228(gp)
 100b7f8:	10800a17 	ldw	r2,40(r2)
 100b7fc:	10800344 	addi	r2,r2,13
 100b800:	10800023 	ldbuio	r2,0(r2)
 100b804:	1007883a 	mov	r3,r2
 100b808:	00804074 	movhi	r2,257
 100b80c:	109cac04 	addi	r2,r2,29360
 100b810:	10c00385 	stb	r3,14(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
		boot_sector_data.reserved_sectors =
 100b814:	d0a75d17 	ldw	r2,-25228(gp)
 100b818:	10800a17 	ldw	r2,40(r2)
 100b81c:	10800384 	addi	r2,r2,14
 100b820:	1080002b 	ldhuio	r2,0(r2)
 100b824:	1007883a 	mov	r3,r2
 100b828:	00804074 	movhi	r2,257
 100b82c:	109cac04 	addi	r2,r2,29360
 100b830:	10c0040d 	sth	r3,16(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
		boot_sector_data.number_of_FATs =
 100b834:	d0a75d17 	ldw	r2,-25228(gp)
 100b838:	10800a17 	ldw	r2,40(r2)
 100b83c:	10800404 	addi	r2,r2,16
 100b840:	10800023 	ldbuio	r2,0(r2)
 100b844:	1007883a 	mov	r3,r2
 100b848:	00804074 	movhi	r2,257
 100b84c:	109cac04 	addi	r2,r2,29360
 100b850:	10c00485 	stb	r3,18(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
		boot_sector_data.max_number_of_dir_entires =
 100b854:	d0a75d17 	ldw	r2,-25228(gp)
 100b858:	10800a17 	ldw	r2,40(r2)
 100b85c:	10800484 	addi	r2,r2,18
 100b860:	10800023 	ldbuio	r2,0(r2)
 100b864:	10803fcc 	andi	r2,r2,255
 100b868:	1004923a 	slli	r2,r2,8
 100b86c:	1007883a 	mov	r3,r2
 100b870:	d0a75d17 	ldw	r2,-25228(gp)
 100b874:	10800a17 	ldw	r2,40(r2)
 100b878:	10800444 	addi	r2,r2,17
 100b87c:	10800023 	ldbuio	r2,0(r2)
 100b880:	10803fcc 	andi	r2,r2,255
 100b884:	1884b03a 	or	r2,r3,r2
 100b888:	1007883a 	mov	r3,r2
 100b88c:	00804074 	movhi	r2,257
 100b890:	109cac04 	addi	r2,r2,29360
 100b894:	10c0050d 	sth	r3,20(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 18))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
		boot_sector_data.number_of_sectors_in_partition =
 100b898:	d0a75d17 	ldw	r2,-25228(gp)
 100b89c:	10800a17 	ldw	r2,40(r2)
 100b8a0:	10800504 	addi	r2,r2,20
 100b8a4:	10800023 	ldbuio	r2,0(r2)
 100b8a8:	10803fcc 	andi	r2,r2,255
 100b8ac:	1004923a 	slli	r2,r2,8
 100b8b0:	1007883a 	mov	r3,r2
 100b8b4:	d0a75d17 	ldw	r2,-25228(gp)
 100b8b8:	10800a17 	ldw	r2,40(r2)
 100b8bc:	108004c4 	addi	r2,r2,19
 100b8c0:	10800023 	ldbuio	r2,0(r2)
 100b8c4:	10803fcc 	andi	r2,r2,255
 100b8c8:	1884b03a 	or	r2,r3,r2
 100b8cc:	1007883a 	mov	r3,r2
 100b8d0:	00804074 	movhi	r2,257
 100b8d4:	109cac04 	addi	r2,r2,29360
 100b8d8:	10c0058d 	sth	r3,22(r2)
				(((unsigned short int) (((unsigned char) IORD_8DIRECT(device_pointer->base, 20))))
						<< 8)
						| ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
		boot_sector_data.media_descriptor =
 100b8dc:	d0a75d17 	ldw	r2,-25228(gp)
 100b8e0:	10800a17 	ldw	r2,40(r2)
 100b8e4:	10800544 	addi	r2,r2,21
 100b8e8:	10800023 	ldbuio	r2,0(r2)
 100b8ec:	1007883a 	mov	r3,r2
 100b8f0:	00804074 	movhi	r2,257
 100b8f4:	109cac04 	addi	r2,r2,29360
 100b8f8:	10c00605 	stb	r3,24(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
		boot_sector_data.number_of_sectors_per_table =
 100b8fc:	d0a75d17 	ldw	r2,-25228(gp)
 100b900:	10800a17 	ldw	r2,40(r2)
 100b904:	10800584 	addi	r2,r2,22
 100b908:	1080002b 	ldhuio	r2,0(r2)
 100b90c:	1007883a 	mov	r3,r2
 100b910:	00804074 	movhi	r2,257
 100b914:	109cac04 	addi	r2,r2,29360
 100b918:	10c0068d 	sth	r3,26(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
		boot_sector_data.number_of_sectors_per_track =
 100b91c:	d0a75d17 	ldw	r2,-25228(gp)
 100b920:	10800a17 	ldw	r2,40(r2)
 100b924:	10800604 	addi	r2,r2,24
 100b928:	1080002b 	ldhuio	r2,0(r2)
 100b92c:	1007883a 	mov	r3,r2
 100b930:	00804074 	movhi	r2,257
 100b934:	109cac04 	addi	r2,r2,29360
 100b938:	10c0070d 	sth	r3,28(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
		boot_sector_data.number_of_heads =
 100b93c:	d0a75d17 	ldw	r2,-25228(gp)
 100b940:	10800a17 	ldw	r2,40(r2)
 100b944:	10800684 	addi	r2,r2,26
 100b948:	1080002b 	ldhuio	r2,0(r2)
 100b94c:	1007883a 	mov	r3,r2
 100b950:	00804074 	movhi	r2,257
 100b954:	109cac04 	addi	r2,r2,29360
 100b958:	10c0078d 	sth	r3,30(r2)
				((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
		boot_sector_data.number_of_hidden_sectors =
 100b95c:	d0a75d17 	ldw	r2,-25228(gp)
 100b960:	10800a17 	ldw	r2,40(r2)
 100b964:	10800704 	addi	r2,r2,28
 100b968:	10800037 	ldwio	r2,0(r2)
 100b96c:	1007883a 	mov	r3,r2
 100b970:	00804074 	movhi	r2,257
 100b974:	109cac04 	addi	r2,r2,29360
 100b978:	10c00815 	stw	r3,32(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
		boot_sector_data.total_sector_count_if_above_32MB =
 100b97c:	d0a75d17 	ldw	r2,-25228(gp)
 100b980:	10800a17 	ldw	r2,40(r2)
 100b984:	10800804 	addi	r2,r2,32
 100b988:	10800037 	ldwio	r2,0(r2)
 100b98c:	1007883a 	mov	r3,r2
 100b990:	00804074 	movhi	r2,257
 100b994:	109cac04 	addi	r2,r2,29360
 100b998:	10c00915 	stw	r3,36(r2)
				((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
		boot_sector_data.drive_number =
 100b99c:	d0a75d17 	ldw	r2,-25228(gp)
 100b9a0:	10800a17 	ldw	r2,40(r2)
 100b9a4:	10800904 	addi	r2,r2,36
 100b9a8:	10800023 	ldbuio	r2,0(r2)
 100b9ac:	1007883a 	mov	r3,r2
 100b9b0:	00804074 	movhi	r2,257
 100b9b4:	109cac04 	addi	r2,r2,29360
 100b9b8:	10c00a05 	stb	r3,40(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
		boot_sector_data.current_head =
 100b9bc:	d0a75d17 	ldw	r2,-25228(gp)
 100b9c0:	10800a17 	ldw	r2,40(r2)
 100b9c4:	10800944 	addi	r2,r2,37
 100b9c8:	10800023 	ldbuio	r2,0(r2)
 100b9cc:	1007883a 	mov	r3,r2
 100b9d0:	00804074 	movhi	r2,257
 100b9d4:	109cac04 	addi	r2,r2,29360
 100b9d8:	10c00a45 	stb	r3,41(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
		boot_sector_data.boot_signature =
 100b9dc:	d0a75d17 	ldw	r2,-25228(gp)
 100b9e0:	10800a17 	ldw	r2,40(r2)
 100b9e4:	10800984 	addi	r2,r2,38
 100b9e8:	10800023 	ldbuio	r2,0(r2)
 100b9ec:	1007883a 	mov	r3,r2
 100b9f0:	00804074 	movhi	r2,257
 100b9f4:	109cac04 	addi	r2,r2,29360
 100b9f8:	10c00a85 	stb	r3,42(r2)
				((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
		boot_sector_data.first_fat_sector_offset =
 100b9fc:	00804074 	movhi	r2,257
 100ba00:	109cac04 	addi	r2,r2,29360
 100ba04:	1080040b 	ldhu	r2,16(r2)
 100ba08:	10ffffcc 	andi	r3,r2,65535
 100ba0c:	00804074 	movhi	r2,257
 100ba10:	109cac04 	addi	r2,r2,29360
 100ba14:	10c01115 	stw	r3,68(r2)
				boot_sector_data.reserved_sectors;
		boot_sector_data.second_fat_sector_offset =
 100ba18:	00804074 	movhi	r2,257
 100ba1c:	109cac04 	addi	r2,r2,29360
 100ba20:	10c01117 	ldw	r3,68(r2)
 100ba24:	00804074 	movhi	r2,257
 100ba28:	109cac04 	addi	r2,r2,29360
 100ba2c:	1080068b 	ldhu	r2,26(r2)
 100ba30:	10bfffcc 	andi	r2,r2,65535
 100ba34:	1887883a 	add	r3,r3,r2
 100ba38:	00804074 	movhi	r2,257
 100ba3c:	109cac04 	addi	r2,r2,29360
 100ba40:	10c01215 	stw	r3,72(r2)
				boot_sector_data.first_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.root_directory_sector_offset =
 100ba44:	00804074 	movhi	r2,257
 100ba48:	109cac04 	addi	r2,r2,29360
 100ba4c:	10c01217 	ldw	r3,72(r2)
 100ba50:	00804074 	movhi	r2,257
 100ba54:	109cac04 	addi	r2,r2,29360
 100ba58:	1080068b 	ldhu	r2,26(r2)
 100ba5c:	10bfffcc 	andi	r2,r2,65535
 100ba60:	1887883a 	add	r3,r3,r2
 100ba64:	00804074 	movhi	r2,257
 100ba68:	109cac04 	addi	r2,r2,29360
 100ba6c:	10c01315 	stw	r3,76(r2)
				boot_sector_data.second_fat_sector_offset
						+ boot_sector_data.number_of_sectors_per_table;
		boot_sector_data.data_sector_offset =
 100ba70:	00804074 	movhi	r2,257
 100ba74:	109cac04 	addi	r2,r2,29360
 100ba78:	11001317 	ldw	r4,76(r2)
 100ba7c:	00804074 	movhi	r2,257
 100ba80:	109cac04 	addi	r2,r2,29360
 100ba84:	1080050b 	ldhu	r2,20(r2)
 100ba88:	10bfffcc 	andi	r2,r2,65535
 100ba8c:	1006917a 	slli	r3,r2,5
 100ba90:	00804074 	movhi	r2,257
 100ba94:	109cac04 	addi	r2,r2,29360
 100ba98:	1080030b 	ldhu	r2,12(r2)
 100ba9c:	10bfffcc 	andi	r2,r2,65535
 100baa0:	1885283a 	div	r2,r3,r2
 100baa4:	2087883a 	add	r3,r4,r2
 100baa8:	00804074 	movhi	r2,257
 100baac:	109cac04 	addi	r2,r2,29360
 100bab0:	10c01415 	stw	r3,80(r2)
				boot_sector_data.root_directory_sector_offset
						+ (32 * boot_sector_data.max_number_of_dir_entires
								/ boot_sector_data.sector_size_in_bytes);

		if (boot_sector_data.number_of_sectors_in_partition > 0) {
 100bab4:	00804074 	movhi	r2,257
 100bab8:	109cac04 	addi	r2,r2,29360
 100babc:	1080058b 	ldhu	r2,22(r2)
 100bac0:	10bfffcc 	andi	r2,r2,65535
 100bac4:	1005003a 	cmpeq	r2,r2,zero
 100bac8:	10000b1e 	bne	r2,zero,100baf8 <Check_for_DOS_FAT+0x460>
			num_clusters = (boot_sector_data.number_of_sectors_in_partition
 100bacc:	00804074 	movhi	r2,257
 100bad0:	109cac04 	addi	r2,r2,29360
 100bad4:	1080058b 	ldhu	r2,22(r2)
 100bad8:	10ffffcc 	andi	r3,r2,65535
 100badc:	00804074 	movhi	r2,257
 100bae0:	109cac04 	addi	r2,r2,29360
 100bae4:	10800383 	ldbu	r2,14(r2)
 100bae8:	10803fcc 	andi	r2,r2,255
 100baec:	1885283a 	div	r2,r3,r2
 100baf0:	e0bffb15 	stw	r2,-20(fp)
 100baf4:	00000906 	br	100bb1c <Check_for_DOS_FAT+0x484>
					/ boot_sector_data.sectors_per_cluster);
		} else {
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB
 100baf8:	00804074 	movhi	r2,257
 100bafc:	109cac04 	addi	r2,r2,29360
 100bb00:	10c00917 	ldw	r3,36(r2)
 100bb04:	00804074 	movhi	r2,257
 100bb08:	109cac04 	addi	r2,r2,29360
 100bb0c:	10800383 	ldbu	r2,14(r2)
 100bb10:	10803fcc 	andi	r2,r2,255
 100bb14:	1885203a 	divu	r2,r3,r2
 100bb18:	e0bffb15 	stw	r2,-20(fp)
					/ boot_sector_data.sectors_per_cluster);
		}
		if (num_clusters < 4087) {
 100bb1c:	e0bffb17 	ldw	r2,-20(fp)
 100bb20:	1083fdc8 	cmpgei	r2,r2,4087
 100bb24:	1000051e 	bne	r2,zero,100bb3c <Check_for_DOS_FAT+0x4a4>
			boot_sector_data.bits_for_cluster_index = 12;
 100bb28:	00c04074 	movhi	r3,257
 100bb2c:	18dcac04 	addi	r3,r3,29360
 100bb30:	00800304 	movi	r2,12
 100bb34:	18801085 	stb	r2,66(r3)
 100bb38:	00000c06 	br	100bb6c <Check_for_DOS_FAT+0x4d4>
		} else if (num_clusters <= 65517) {
 100bb3c:	e0fffb17 	ldw	r3,-20(fp)
 100bb40:	00bffb54 	movui	r2,65517
 100bb44:	10c00516 	blt	r2,r3,100bb5c <Check_for_DOS_FAT+0x4c4>
			boot_sector_data.bits_for_cluster_index = 16;
 100bb48:	00c04074 	movhi	r3,257
 100bb4c:	18dcac04 	addi	r3,r3,29360
 100bb50:	00800404 	movi	r2,16
 100bb54:	18801085 	stb	r2,66(r3)
 100bb58:	00000406 	br	100bb6c <Check_for_DOS_FAT+0x4d4>
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
 100bb5c:	00c04074 	movhi	r3,257
 100bb60:	18dcac04 	addi	r3,r3,29360
 100bb64:	00800804 	movi	r2,32
 100bb68:	18801085 	stb	r2,66(r3)
		}

		for (counter = 0; counter < 4; counter++) {
 100bb6c:	e03ffd15 	stw	zero,-12(fp)
 100bb70:	00001106 	br	100bbb8 <Check_for_DOS_FAT+0x520>
			boot_sector_data.volume_id[counter] =
 100bb74:	e13ffd17 	ldw	r4,-12(fp)
 100bb78:	d0a75d17 	ldw	r2,-25228(gp)
 100bb7c:	10800a17 	ldw	r2,40(r2)
 100bb80:	1007883a 	mov	r3,r2
 100bb84:	e0bffd17 	ldw	r2,-12(fp)
 100bb88:	1885883a 	add	r2,r3,r2
 100bb8c:	108009c4 	addi	r2,r2,39
 100bb90:	10800023 	ldbuio	r2,0(r2)
 100bb94:	1007883a 	mov	r3,r2
 100bb98:	00804074 	movhi	r2,257
 100bb9c:	109cac04 	addi	r2,r2,29360
 100bba0:	2085883a 	add	r2,r4,r2
 100bba4:	10800a04 	addi	r2,r2,40
 100bba8:	10c000c5 	stb	r3,3(r2)
			boot_sector_data.bits_for_cluster_index = 16;
		} else {
			boot_sector_data.bits_for_cluster_index = 32;
		}

		for (counter = 0; counter < 4; counter++) {
 100bbac:	e0bffd17 	ldw	r2,-12(fp)
 100bbb0:	10800044 	addi	r2,r2,1
 100bbb4:	e0bffd15 	stw	r2,-12(fp)
 100bbb8:	e0bffd17 	ldw	r2,-12(fp)
 100bbbc:	10800110 	cmplti	r2,r2,4
 100bbc0:	103fec1e 	bne	r2,zero,100bb74 <Check_for_DOS_FAT+0x4dc>
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 100bbc4:	e03ffd15 	stw	zero,-12(fp)
 100bbc8:	00001106 	br	100bc10 <Check_for_DOS_FAT+0x578>
			boot_sector_data.volume_label[counter] =
 100bbcc:	e13ffd17 	ldw	r4,-12(fp)
 100bbd0:	d0a75d17 	ldw	r2,-25228(gp)
 100bbd4:	10800a17 	ldw	r2,40(r2)
 100bbd8:	1007883a 	mov	r3,r2
 100bbdc:	e0bffd17 	ldw	r2,-12(fp)
 100bbe0:	1885883a 	add	r2,r3,r2
 100bbe4:	10800ac4 	addi	r2,r2,43
 100bbe8:	10800023 	ldbuio	r2,0(r2)
 100bbec:	1007883a 	mov	r3,r2
 100bbf0:	00804074 	movhi	r2,257
 100bbf4:	109cac04 	addi	r2,r2,29360
 100bbf8:	2085883a 	add	r2,r4,r2
 100bbfc:	10800b04 	addi	r2,r2,44
 100bc00:	10c000c5 	stb	r3,3(r2)

		for (counter = 0; counter < 4; counter++) {
			boot_sector_data.volume_id[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}
		for (counter = 0; counter < 11; counter++) {
 100bc04:	e0bffd17 	ldw	r2,-12(fp)
 100bc08:	10800044 	addi	r2,r2,1
 100bc0c:	e0bffd15 	stw	r2,-12(fp)
 100bc10:	e0bffd17 	ldw	r2,-12(fp)
 100bc14:	108002d0 	cmplti	r2,r2,11
 100bc18:	103fec1e 	bne	r2,zero,100bbcc <Check_for_DOS_FAT+0x534>
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 100bc1c:	e03ffd15 	stw	zero,-12(fp)
 100bc20:	00001106 	br	100bc68 <Check_for_DOS_FAT+0x5d0>
			boot_sector_data.file_system_type[counter] =
 100bc24:	e13ffd17 	ldw	r4,-12(fp)
 100bc28:	d0a75d17 	ldw	r2,-25228(gp)
 100bc2c:	10800a17 	ldw	r2,40(r2)
 100bc30:	1007883a 	mov	r3,r2
 100bc34:	e0bffd17 	ldw	r2,-12(fp)
 100bc38:	1885883a 	add	r2,r3,r2
 100bc3c:	10800d84 	addi	r2,r2,54
 100bc40:	10800023 	ldbuio	r2,0(r2)
 100bc44:	1007883a 	mov	r3,r2
 100bc48:	00804074 	movhi	r2,257
 100bc4c:	109cac04 	addi	r2,r2,29360
 100bc50:	2085883a 	add	r2,r4,r2
 100bc54:	10800e04 	addi	r2,r2,56
 100bc58:	10c00085 	stb	r3,2(r2)
		}
		for (counter = 0; counter < 11; counter++) {
			boot_sector_data.volume_label[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}
		for (counter = 0; counter < 8; counter++) {
 100bc5c:	e0bffd17 	ldw	r2,-12(fp)
 100bc60:	10800044 	addi	r2,r2,1
 100bc64:	e0bffd15 	stw	r2,-12(fp)
 100bc68:	e0bffd17 	ldw	r2,-12(fp)
 100bc6c:	10800210 	cmplti	r2,r2,8
 100bc70:	103fec1e 	bne	r2,zero,100bc24 <Check_for_DOS_FAT+0x58c>
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 100bc74:	e03ffd15 	stw	zero,-12(fp)
 100bc78:	00000a06 	br	100bca4 <Check_for_DOS_FAT+0x60c>
			active_files[counter].in_use = false;
 100bc7c:	e0bffd17 	ldw	r2,-12(fp)
 100bc80:	00c04074 	movhi	r3,257
 100bc84:	18dcc104 	addi	r3,r3,29444
 100bc88:	100491ba 	slli	r2,r2,6
 100bc8c:	10c5883a 	add	r2,r2,r3
 100bc90:	10800f04 	addi	r2,r2,60
 100bc94:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++) {
			boot_sector_data.file_system_type[counter] =
					((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
 100bc98:	e0bffd17 	ldw	r2,-12(fp)
 100bc9c:	10800044 	addi	r2,r2,1
 100bca0:	e0bffd15 	stw	r2,-12(fp)
 100bca4:	e0bffd17 	ldw	r2,-12(fp)
 100bca8:	10800510 	cmplti	r2,r2,20
 100bcac:	103ff31e 	bne	r2,zero,100bc7c <Check_for_DOS_FAT+0x5e4>
			active_files[counter].in_use = false;
		}
		result = true;
 100bcb0:	00800044 	movi	r2,1
 100bcb4:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data_Attempt_CRC(0, FAT_partition_start_sector);
	end = (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result)) {
 100bcb8:	00000106 	br	100bcc0 <Check_for_DOS_FAT+0x628>
		for (counter = 0; counter < MAX_FILES_OPENED; counter++) {
			active_files[counter].in_use = false;
		}
		result = true;
	} else {
		result = false;
 100bcbc:	e03ffe15 	stw	zero,-8(fp)
	}
	return result;
 100bcc0:	e0bffe17 	ldw	r2,-8(fp)
}
 100bcc4:	e037883a 	mov	sp,fp
 100bcc8:	dfc00117 	ldw	ra,4(sp)
 100bccc:	df000017 	ldw	fp,0(sp)
 100bcd0:	dec00204 	addi	sp,sp,8
 100bcd4:	f800283a 	ret

0100bcd8 <Look_for_FAT16>:

bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 100bcd8:	defffc04 	addi	sp,sp,-16
 100bcdc:	dfc00315 	stw	ra,12(sp)
 100bce0:	df000215 	stw	fp,8(sp)
 100bce4:	df000204 	addi	fp,sp,8
	bool result = false;
 100bce8:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 100bcec:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100bcf0:	1005003a 	cmpeq	r2,r2,zero
 100bcf4:	1000331e 	bne	r2,zero,100bdc4 <Look_for_FAT16+0xec>
		Read_Sector_Data_Attempt_CRC(0, 0);
 100bcf8:	0009883a 	mov	r4,zero
 100bcfc:	000b883a 	mov	r5,zero
 100bd00:	100f1680 	call	100f168 <Read_Sector_Data_Attempt_CRC>

		short int csd_file_format = *CSD_register_w0;
 100bd04:	d0a75717 	ldw	r2,-25252(gp)
 100bd08:	1080000b 	ldhu	r2,0(r2)
 100bd0c:	e0bffe0d 	sth	r2,-8(fp)

		fat_partition_offset_in_512_byte_sectors = 0;
 100bd10:	d0275b15 	stw	zero,-25236(gp)
		fat_partition_size_in_512_byte_sectors = 0;
 100bd14:	d0275c15 	stw	zero,-25232(gp)

		if (((csd_file_format & 0x8000) == 0)
 100bd18:	e0bffe0f 	ldh	r2,-8(fp)
 100bd1c:	1004803a 	cmplt	r2,r2,zero
 100bd20:	1000281e 	bne	r2,zero,100bdc4 <Look_for_FAT16+0xec>
 100bd24:	e0bffe0b 	ldhu	r2,-8(fp)
 100bd28:	10bfffcc 	andi	r2,r2,65535
 100bd2c:	1083000c 	andi	r2,r2,3072
 100bd30:	10830020 	cmpeqi	r2,r2,3072
 100bd34:	1000231e 	bne	r2,zero,100bdc4 <Look_for_FAT16+0xec>
				&& ((csd_file_format & 0x0c00) != 0x0c00)) {
			if ((csd_file_format & 0x0c00) == 0x0400) {
 100bd38:	e0bffe0b 	ldhu	r2,-8(fp)
 100bd3c:	10bfffcc 	andi	r2,r2,65535
 100bd40:	1083000c 	andi	r2,r2,3072
 100bd44:	10810018 	cmpnei	r2,r2,1024
 100bd48:	1000031e 	bne	r2,zero,100bd58 <Look_for_FAT16+0x80>
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 100bd4c:	0009883a 	mov	r4,zero
 100bd50:	100b6980 	call	100b698 <Check_for_DOS_FAT>
 100bd54:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000) {
 100bd58:	e0bffe0b 	ldhu	r2,-8(fp)
 100bd5c:	10bfffcc 	andi	r2,r2,65535
 100bd60:	1083000c 	andi	r2,r2,3072
 100bd64:	1004c03a 	cmpne	r2,r2,zero
 100bd68:	1000061e 	bne	r2,zero,100bd84 <Look_for_FAT16+0xac>
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record()) {
 100bd6c:	100afac0 	call	100afac <Check_for_Master_Boot_Record>
 100bd70:	1005003a 	cmpeq	r2,r2,zero
 100bd74:	1000031e 	bne	r2,zero,100bd84 <Look_for_FAT16+0xac>
					result = Check_for_DOS_FAT(
 100bd78:	d1275b17 	ldw	r4,-25236(gp)
 100bd7c:	100b6980 	call	100b698 <Check_for_DOS_FAT>
 100bd80:	e0bfff15 	stw	r2,-4(fp)
							fat_partition_offset_in_512_byte_sectors);
				}
			}
			if (result == true) {
 100bd84:	e0bfff17 	ldw	r2,-4(fp)
 100bd88:	10800058 	cmpnei	r2,r2,1
 100bd8c:	10000d1e 	bne	r2,zero,100bdc4 <Look_for_FAT16+0xec>
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16) {
 100bd90:	00804074 	movhi	r2,257
 100bd94:	109cac04 	addi	r2,r2,29360
 100bd98:	10801083 	ldbu	r2,66(r2)
 100bd9c:	10803fcc 	andi	r2,r2,255
 100bda0:	10800420 	cmpeqi	r2,r2,16
 100bda4:	1000021e 	bne	r2,zero,100bdb0 <Look_for_FAT16+0xd8>
					result = false;
 100bda8:	e03fff15 	stw	zero,-4(fp)
 100bdac:	00000506 	br	100bdc4 <Look_for_FAT16+0xec>
				} else {
					fat_partition_size_in_512_byte_sectors =
 100bdb0:	00804074 	movhi	r2,257
 100bdb4:	109cac04 	addi	r2,r2,29360
 100bdb8:	1080058b 	ldhu	r2,22(r2)
 100bdbc:	10bfffcc 	andi	r2,r2,65535
 100bdc0:	d0a75c15 	stw	r2,-25232(gp)
							boot_sector_data.number_of_sectors_in_partition;
				}
			}
		}
	}
	return result;
 100bdc4:	e0bfff17 	ldw	r2,-4(fp)
}
 100bdc8:	e037883a 	mov	sp,fp
 100bdcc:	dfc00117 	ldw	ra,4(sp)
 100bdd0:	df000017 	ldw	fp,0(sp)
 100bdd4:	dec00204 	addi	sp,sp,8
 100bdd8:	f800283a 	ret

0100bddc <filename_to_upper_case>:

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 100bddc:	defffb04 	addi	sp,sp,-20
 100bde0:	dfc00415 	stw	ra,16(sp)
 100bde4:	df000315 	stw	fp,12(sp)
 100bde8:	df000304 	addi	fp,sp,12
 100bdec:	e13fff15 	stw	r4,-4(fp)
	int index;
	int length = strlen(file_name);
 100bdf0:	e13fff17 	ldw	r4,-4(fp)
 100bdf4:	10006d80 	call	10006d8 <strlen>
 100bdf8:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 100bdfc:	e03ffe15 	stw	zero,-8(fp)
 100be00:	00002206 	br	100be8c <filename_to_upper_case+0xb0>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
 100be04:	e0bffe17 	ldw	r2,-8(fp)
 100be08:	1007883a 	mov	r3,r2
 100be0c:	e0bfff17 	ldw	r2,-4(fp)
 100be10:	1885883a 	add	r2,r3,r2
 100be14:	10800003 	ldbu	r2,0(r2)
 100be18:	10803fcc 	andi	r2,r2,255
 100be1c:	1080201c 	xori	r2,r2,128
 100be20:	10bfe004 	addi	r2,r2,-128
 100be24:	10801850 	cmplti	r2,r2,97
 100be28:	1000151e 	bne	r2,zero,100be80 <filename_to_upper_case+0xa4>
 100be2c:	e0bffe17 	ldw	r2,-8(fp)
 100be30:	1007883a 	mov	r3,r2
 100be34:	e0bfff17 	ldw	r2,-4(fp)
 100be38:	1885883a 	add	r2,r3,r2
 100be3c:	10800003 	ldbu	r2,0(r2)
 100be40:	10803fcc 	andi	r2,r2,255
 100be44:	1080201c 	xori	r2,r2,128
 100be48:	10bfe004 	addi	r2,r2,-128
 100be4c:	10801ec8 	cmpgei	r2,r2,123
 100be50:	10000b1e 	bne	r2,zero,100be80 <filename_to_upper_case+0xa4>
			file_name[index] = (file_name[index] - 'a') + 'A';
 100be54:	e0bffe17 	ldw	r2,-8(fp)
 100be58:	1007883a 	mov	r3,r2
 100be5c:	e0bfff17 	ldw	r2,-4(fp)
 100be60:	1889883a 	add	r4,r3,r2
 100be64:	e0bffe17 	ldw	r2,-8(fp)
 100be68:	1007883a 	mov	r3,r2
 100be6c:	e0bfff17 	ldw	r2,-4(fp)
 100be70:	1885883a 	add	r2,r3,r2
 100be74:	10800003 	ldbu	r2,0(r2)
 100be78:	10bff804 	addi	r2,r2,-32
 100be7c:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
	int index;
	int length = strlen(file_name);

	for (index = 0; index < length; index++) {
 100be80:	e0bffe17 	ldw	r2,-8(fp)
 100be84:	10800044 	addi	r2,r2,1
 100be88:	e0bffe15 	stw	r2,-8(fp)
 100be8c:	e0fffe17 	ldw	r3,-8(fp)
 100be90:	e0bffd17 	ldw	r2,-12(fp)
 100be94:	18bfdb16 	blt	r3,r2,100be04 <filename_to_upper_case+0x28>
		if ((file_name[index] >= 'a') && (file_name[index] <= 'z')) {
			file_name[index] = (file_name[index] - 'a') + 'A';
		}
	}
}
 100be98:	e037883a 	mov	sp,fp
 100be9c:	dfc00117 	ldw	ra,4(sp)
 100bea0:	df000017 	ldw	fp,0(sp)
 100bea4:	dec00204 	addi	sp,sp,8
 100bea8:	f800283a 	ret

0100beac <check_file_name_for_FAT16_compliance>:

bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 100beac:	defff804 	addi	sp,sp,-32
 100beb0:	dfc00715 	stw	ra,28(sp)
 100beb4:	df000615 	stw	fp,24(sp)
 100beb8:	df000604 	addi	fp,sp,24
 100bebc:	e13fff15 	stw	r4,-4(fp)
	int length = strlen(file_name);
 100bec0:	e13fff17 	ldw	r4,-4(fp)
 100bec4:	10006d80 	call	10006d8 <strlen>
 100bec8:	e0bffe15 	stw	r2,-8(fp)
	int index;
	int last_dir_break_position = -1;
 100becc:	00bfffc4 	movi	r2,-1
 100bed0:	e0bffc15 	stw	r2,-16(fp)
	int last_period = -1;
 100bed4:	00bfffc4 	movi	r2,-1
 100bed8:	e0bffb15 	stw	r2,-20(fp)
	bool result = true;
 100bedc:	00800044 	movi	r2,1
 100bee0:	e0bffa15 	stw	r2,-24(fp)

	for (index = 0; index < length; index++) {
 100bee4:	e03ffd15 	stw	zero,-12(fp)
 100bee8:	00007606 	br	100c0c4 <check_file_name_for_FAT16_compliance+0x218>
		if ((file_name[index] == ' ')
 100beec:	e0bffd17 	ldw	r2,-12(fp)
 100bef0:	1007883a 	mov	r3,r2
 100bef4:	e0bfff17 	ldw	r2,-4(fp)
 100bef8:	1885883a 	add	r2,r3,r2
 100befc:	10800003 	ldbu	r2,0(r2)
 100bf00:	10803fcc 	andi	r2,r2,255
 100bf04:	1080201c 	xori	r2,r2,128
 100bf08:	10bfe004 	addi	r2,r2,-128
 100bf0c:	10800820 	cmpeqi	r2,r2,32
 100bf10:	1000431e 	bne	r2,zero,100c020 <check_file_name_for_FAT16_compliance+0x174>
 100bf14:	e0bffd17 	ldw	r2,-12(fp)
 100bf18:	10ffffc4 	addi	r3,r2,-1
 100bf1c:	e0bffc17 	ldw	r2,-16(fp)
 100bf20:	1880141e 	bne	r3,r2,100bf74 <check_file_name_for_FAT16_compliance+0xc8>
 100bf24:	e0bffd17 	ldw	r2,-12(fp)
 100bf28:	1007883a 	mov	r3,r2
 100bf2c:	e0bfff17 	ldw	r2,-4(fp)
 100bf30:	1885883a 	add	r2,r3,r2
 100bf34:	10800003 	ldbu	r2,0(r2)
 100bf38:	10803fcc 	andi	r2,r2,255
 100bf3c:	1080201c 	xori	r2,r2,128
 100bf40:	10bfe004 	addi	r2,r2,-128
 100bf44:	10801720 	cmpeqi	r2,r2,92
 100bf48:	1000351e 	bne	r2,zero,100c020 <check_file_name_for_FAT16_compliance+0x174>
 100bf4c:	e0bffd17 	ldw	r2,-12(fp)
 100bf50:	1007883a 	mov	r3,r2
 100bf54:	e0bfff17 	ldw	r2,-4(fp)
 100bf58:	1885883a 	add	r2,r3,r2
 100bf5c:	10800003 	ldbu	r2,0(r2)
 100bf60:	10803fcc 	andi	r2,r2,255
 100bf64:	1080201c 	xori	r2,r2,128
 100bf68:	10bfe004 	addi	r2,r2,-128
 100bf6c:	10800be0 	cmpeqi	r2,r2,47
 100bf70:	10002b1e 	bne	r2,zero,100c020 <check_file_name_for_FAT16_compliance+0x174>
 100bf74:	e0fffd17 	ldw	r3,-12(fp)
 100bf78:	e0bffb17 	ldw	r2,-20(fp)
 100bf7c:	1885c83a 	sub	r2,r3,r2
 100bf80:	10800258 	cmpnei	r2,r2,9
 100bf84:	10000a1e 	bne	r2,zero,100bfb0 <check_file_name_for_FAT16_compliance+0x104>
 100bf88:	e0bffd17 	ldw	r2,-12(fp)
 100bf8c:	1007883a 	mov	r3,r2
 100bf90:	e0bfff17 	ldw	r2,-4(fp)
 100bf94:	1885883a 	add	r2,r3,r2
 100bf98:	10800003 	ldbu	r2,0(r2)
 100bf9c:	10803fcc 	andi	r2,r2,255
 100bfa0:	1080201c 	xori	r2,r2,128
 100bfa4:	10bfe004 	addi	r2,r2,-128
 100bfa8:	10800b98 	cmpnei	r2,r2,46
 100bfac:	10001c1e 	bne	r2,zero,100c020 <check_file_name_for_FAT16_compliance+0x174>
 100bfb0:	e0fffc17 	ldw	r3,-16(fp)
 100bfb4:	e0bffb17 	ldw	r2,-20(fp)
 100bfb8:	18801b26 	beq	r3,r2,100c028 <check_file_name_for_FAT16_compliance+0x17c>
 100bfbc:	e0fffd17 	ldw	r3,-12(fp)
 100bfc0:	e0bffb17 	ldw	r2,-20(fp)
 100bfc4:	1885c83a 	sub	r2,r3,r2
 100bfc8:	10800110 	cmplti	r2,r2,4
 100bfcc:	1000161e 	bne	r2,zero,100c028 <check_file_name_for_FAT16_compliance+0x17c>
 100bfd0:	e0bffd17 	ldw	r2,-12(fp)
 100bfd4:	1007883a 	mov	r3,r2
 100bfd8:	e0bfff17 	ldw	r2,-4(fp)
 100bfdc:	1885883a 	add	r2,r3,r2
 100bfe0:	10800003 	ldbu	r2,0(r2)
 100bfe4:	10803fcc 	andi	r2,r2,255
 100bfe8:	1080201c 	xori	r2,r2,128
 100bfec:	10bfe004 	addi	r2,r2,-128
 100bff0:	10801720 	cmpeqi	r2,r2,92
 100bff4:	10000c1e 	bne	r2,zero,100c028 <check_file_name_for_FAT16_compliance+0x17c>
 100bff8:	e0bffd17 	ldw	r2,-12(fp)
 100bffc:	1007883a 	mov	r3,r2
 100c000:	e0bfff17 	ldw	r2,-4(fp)
 100c004:	1885883a 	add	r2,r3,r2
 100c008:	10800003 	ldbu	r2,0(r2)
 100c00c:	10803fcc 	andi	r2,r2,255
 100c010:	1080201c 	xori	r2,r2,128
 100c014:	10bfe004 	addi	r2,r2,-128
 100c018:	10800be0 	cmpeqi	r2,r2,47
 100c01c:	1000021e 	bne	r2,zero,100c028 <check_file_name_for_FAT16_compliance+0x17c>
				|| ((index - last_period == 9) && (file_name[index] != '.'))
				|| ((last_dir_break_position != last_period)
						&& (index - last_period > 3)
						&& (file_name[index] != '\\')
						&& (file_name[index] != '/'))) {
			result = false;
 100c020:	e03ffa15 	stw	zero,-24(fp)
			break;
 100c024:	00002a06 	br	100c0d0 <check_file_name_for_FAT16_compliance+0x224>
		}
		if ((file_name[index] == '\\') || (file_name[index] == '/')) {
 100c028:	e0bffd17 	ldw	r2,-12(fp)
 100c02c:	1007883a 	mov	r3,r2
 100c030:	e0bfff17 	ldw	r2,-4(fp)
 100c034:	1885883a 	add	r2,r3,r2
 100c038:	10800003 	ldbu	r2,0(r2)
 100c03c:	10803fcc 	andi	r2,r2,255
 100c040:	1080201c 	xori	r2,r2,128
 100c044:	10bfe004 	addi	r2,r2,-128
 100c048:	10801720 	cmpeqi	r2,r2,92
 100c04c:	10000a1e 	bne	r2,zero,100c078 <check_file_name_for_FAT16_compliance+0x1cc>
 100c050:	e0bffd17 	ldw	r2,-12(fp)
 100c054:	1007883a 	mov	r3,r2
 100c058:	e0bfff17 	ldw	r2,-4(fp)
 100c05c:	1885883a 	add	r2,r3,r2
 100c060:	10800003 	ldbu	r2,0(r2)
 100c064:	10803fcc 	andi	r2,r2,255
 100c068:	1080201c 	xori	r2,r2,128
 100c06c:	10bfe004 	addi	r2,r2,-128
 100c070:	10800bd8 	cmpnei	r2,r2,47
 100c074:	1000041e 	bne	r2,zero,100c088 <check_file_name_for_FAT16_compliance+0x1dc>
			last_period = index;
 100c078:	e0bffd17 	ldw	r2,-12(fp)
 100c07c:	e0bffb15 	stw	r2,-20(fp)
			last_dir_break_position = index;
 100c080:	e0bffd17 	ldw	r2,-12(fp)
 100c084:	e0bffc15 	stw	r2,-16(fp)
		}
		if (file_name[index] == '.') {
 100c088:	e0bffd17 	ldw	r2,-12(fp)
 100c08c:	1007883a 	mov	r3,r2
 100c090:	e0bfff17 	ldw	r2,-4(fp)
 100c094:	1885883a 	add	r2,r3,r2
 100c098:	10800003 	ldbu	r2,0(r2)
 100c09c:	10803fcc 	andi	r2,r2,255
 100c0a0:	1080201c 	xori	r2,r2,128
 100c0a4:	10bfe004 	addi	r2,r2,-128
 100c0a8:	10800b98 	cmpnei	r2,r2,46
 100c0ac:	1000021e 	bne	r2,zero,100c0b8 <check_file_name_for_FAT16_compliance+0x20c>
			last_period = index;
 100c0b0:	e0bffd17 	ldw	r2,-12(fp)
 100c0b4:	e0bffb15 	stw	r2,-20(fp)
	int index;
	int last_dir_break_position = -1;
	int last_period = -1;
	bool result = true;

	for (index = 0; index < length; index++) {
 100c0b8:	e0bffd17 	ldw	r2,-12(fp)
 100c0bc:	10800044 	addi	r2,r2,1
 100c0c0:	e0bffd15 	stw	r2,-12(fp)
 100c0c4:	e0fffd17 	ldw	r3,-12(fp)
 100c0c8:	e0bffe17 	ldw	r2,-8(fp)
 100c0cc:	18bf8716 	blt	r3,r2,100beec <check_file_name_for_FAT16_compliance+0x40>
		}
		if (file_name[index] == '.') {
			last_period = index;
		}
	}
	if ((file_name[length - 1] == '\\') || (file_name[length - 1] == '/')) {
 100c0d0:	e0fffe17 	ldw	r3,-8(fp)
 100c0d4:	e0bfff17 	ldw	r2,-4(fp)
 100c0d8:	1885883a 	add	r2,r3,r2
 100c0dc:	10bfffc4 	addi	r2,r2,-1
 100c0e0:	10800003 	ldbu	r2,0(r2)
 100c0e4:	10803fcc 	andi	r2,r2,255
 100c0e8:	1080201c 	xori	r2,r2,128
 100c0ec:	10bfe004 	addi	r2,r2,-128
 100c0f0:	10801720 	cmpeqi	r2,r2,92
 100c0f4:	10000a1e 	bne	r2,zero,100c120 <check_file_name_for_FAT16_compliance+0x274>
 100c0f8:	e0fffe17 	ldw	r3,-8(fp)
 100c0fc:	e0bfff17 	ldw	r2,-4(fp)
 100c100:	1885883a 	add	r2,r3,r2
 100c104:	10bfffc4 	addi	r2,r2,-1
 100c108:	10800003 	ldbu	r2,0(r2)
 100c10c:	10803fcc 	andi	r2,r2,255
 100c110:	1080201c 	xori	r2,r2,128
 100c114:	10bfe004 	addi	r2,r2,-128
 100c118:	10800bd8 	cmpnei	r2,r2,47
 100c11c:	1000011e 	bne	r2,zero,100c124 <check_file_name_for_FAT16_compliance+0x278>
		result = false;
 100c120:	e03ffa15 	stw	zero,-24(fp)
	}
	return result;
 100c124:	e0bffa17 	ldw	r2,-24(fp)
}
 100c128:	e037883a 	mov	sp,fp
 100c12c:	dfc00117 	ldw	ra,4(sp)
 100c130:	df000017 	ldw	fp,0(sp)
 100c134:	dec00204 	addi	sp,sp,8
 100c138:	f800283a 	ret

0100c13c <get_dir_divider_location>:

int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 100c13c:	defffb04 	addi	sp,sp,-20
 100c140:	dfc00415 	stw	ra,16(sp)
 100c144:	df000315 	stw	fp,12(sp)
 100c148:	df000304 	addi	fp,sp,12
 100c14c:	e13fff15 	stw	r4,-4(fp)
	int index = 0;
 100c150:	e03ffe15 	stw	zero,-8(fp)
	int length = strlen(name);
 100c154:	e13fff17 	ldw	r4,-4(fp)
 100c158:	10006d80 	call	10006d8 <strlen>
 100c15c:	e0bffd15 	stw	r2,-12(fp)

	for (index = 0; index < length; index++) {
 100c160:	e03ffe15 	stw	zero,-8(fp)
 100c164:	00001706 	br	100c1c4 <get_dir_divider_location+0x88>
		if ((name[index] == '\\') || (name[index] == '/')) {
 100c168:	e0bffe17 	ldw	r2,-8(fp)
 100c16c:	1007883a 	mov	r3,r2
 100c170:	e0bfff17 	ldw	r2,-4(fp)
 100c174:	1885883a 	add	r2,r3,r2
 100c178:	10800003 	ldbu	r2,0(r2)
 100c17c:	10803fcc 	andi	r2,r2,255
 100c180:	1080201c 	xori	r2,r2,128
 100c184:	10bfe004 	addi	r2,r2,-128
 100c188:	10801720 	cmpeqi	r2,r2,92
 100c18c:	1000101e 	bne	r2,zero,100c1d0 <get_dir_divider_location+0x94>
 100c190:	e0bffe17 	ldw	r2,-8(fp)
 100c194:	1007883a 	mov	r3,r2
 100c198:	e0bfff17 	ldw	r2,-4(fp)
 100c19c:	1885883a 	add	r2,r3,r2
 100c1a0:	10800003 	ldbu	r2,0(r2)
 100c1a4:	10803fcc 	andi	r2,r2,255
 100c1a8:	1080201c 	xori	r2,r2,128
 100c1ac:	10bfe004 	addi	r2,r2,-128
 100c1b0:	10800be0 	cmpeqi	r2,r2,47
 100c1b4:	1000061e 	bne	r2,zero,100c1d0 <get_dir_divider_location+0x94>
// Find a directory divider location.
{
	int index = 0;
	int length = strlen(name);

	for (index = 0; index < length; index++) {
 100c1b8:	e0bffe17 	ldw	r2,-8(fp)
 100c1bc:	10800044 	addi	r2,r2,1
 100c1c0:	e0bffe15 	stw	r2,-8(fp)
 100c1c4:	e0fffe17 	ldw	r3,-8(fp)
 100c1c8:	e0bffd17 	ldw	r2,-12(fp)
 100c1cc:	18bfe616 	blt	r3,r2,100c168 <get_dir_divider_location+0x2c>
		if ((name[index] == '\\') || (name[index] == '/')) {
			break;
		}
	}

	if (index == length) {
 100c1d0:	e0fffe17 	ldw	r3,-8(fp)
 100c1d4:	e0bffd17 	ldw	r2,-12(fp)
 100c1d8:	1880021e 	bne	r3,r2,100c1e4 <get_dir_divider_location+0xa8>
		index = -1;
 100c1dc:	00bfffc4 	movi	r2,-1
 100c1e0:	e0bffe15 	stw	r2,-8(fp)
	}

	return index;
 100c1e4:	e0bffe17 	ldw	r2,-8(fp)
}
 100c1e8:	e037883a 	mov	sp,fp
 100c1ec:	dfc00117 	ldw	ra,4(sp)
 100c1f0:	df000017 	ldw	fp,0(sp)
 100c1f4:	dec00204 	addi	sp,sp,8
 100c1f8:	f800283a 	ret

0100c1fc <match_file_record_to_name_ext>:

bool match_file_record_to_name_ext(t_file_record *file_record, char *name,
		char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 100c1fc:	defff604 	addi	sp,sp,-40
 100c200:	df000915 	stw	fp,36(sp)
 100c204:	df000904 	addi	fp,sp,36
 100c208:	e13ff915 	stw	r4,-28(fp)
 100c20c:	e17ffa15 	stw	r5,-24(fp)
 100c210:	e1bffb15 	stw	r6,-20(fp)
	bool match = true;
 100c214:	00800044 	movi	r2,1
 100c218:	e0bff815 	stw	r2,-32(fp)
	int index;

	for (index = 0; index < 8; index++) {
 100c21c:	e03ff715 	stw	zero,-36(fp)
 100c220:	00005006 	br	100c364 <match_file_record_to_name_ext+0x168>
		if (CHAR_TO_UPPER(file_record->name[index])
 100c224:	e0fff717 	ldw	r3,-36(fp)
 100c228:	e0bff917 	ldw	r2,-28(fp)
 100c22c:	10c5883a 	add	r2,r2,r3
 100c230:	10800003 	ldbu	r2,0(r2)
 100c234:	10803fcc 	andi	r2,r2,255
 100c238:	10801870 	cmpltui	r2,r2,97
 100c23c:	1000111e 	bne	r2,zero,100c284 <match_file_record_to_name_ext+0x88>
 100c240:	e0fff717 	ldw	r3,-36(fp)
 100c244:	e0bff917 	ldw	r2,-28(fp)
 100c248:	10c5883a 	add	r2,r2,r3
 100c24c:	10800003 	ldbu	r2,0(r2)
 100c250:	10803fcc 	andi	r2,r2,255
 100c254:	10801ee8 	cmpgeui	r2,r2,123
 100c258:	10000a1e 	bne	r2,zero,100c284 <match_file_record_to_name_ext+0x88>
 100c25c:	e0fff717 	ldw	r3,-36(fp)
 100c260:	e0bff917 	ldw	r2,-28(fp)
 100c264:	10c5883a 	add	r2,r2,r3
 100c268:	10800003 	ldbu	r2,0(r2)
 100c26c:	10bff804 	addi	r2,r2,-32
 100c270:	10803fcc 	andi	r2,r2,255
 100c274:	1080201c 	xori	r2,r2,128
 100c278:	10bfe004 	addi	r2,r2,-128
 100c27c:	e0bfff15 	stw	r2,-4(fp)
 100c280:	00000806 	br	100c2a4 <match_file_record_to_name_ext+0xa8>
 100c284:	e0fff717 	ldw	r3,-36(fp)
 100c288:	e0bff917 	ldw	r2,-28(fp)
 100c28c:	10c5883a 	add	r2,r2,r3
 100c290:	10800003 	ldbu	r2,0(r2)
 100c294:	10803fcc 	andi	r2,r2,255
 100c298:	1080201c 	xori	r2,r2,128
 100c29c:	10bfe004 	addi	r2,r2,-128
 100c2a0:	e0bfff15 	stw	r2,-4(fp)
 100c2a4:	e0bff717 	ldw	r2,-36(fp)
 100c2a8:	1007883a 	mov	r3,r2
 100c2ac:	e0bffa17 	ldw	r2,-24(fp)
 100c2b0:	1885883a 	add	r2,r3,r2
 100c2b4:	10800003 	ldbu	r2,0(r2)
 100c2b8:	10803fcc 	andi	r2,r2,255
 100c2bc:	1080201c 	xori	r2,r2,128
 100c2c0:	10bfe004 	addi	r2,r2,-128
 100c2c4:	10801850 	cmplti	r2,r2,97
 100c2c8:	1000151e 	bne	r2,zero,100c320 <match_file_record_to_name_ext+0x124>
 100c2cc:	e0bff717 	ldw	r2,-36(fp)
 100c2d0:	1007883a 	mov	r3,r2
 100c2d4:	e0bffa17 	ldw	r2,-24(fp)
 100c2d8:	1885883a 	add	r2,r3,r2
 100c2dc:	10800003 	ldbu	r2,0(r2)
 100c2e0:	10803fcc 	andi	r2,r2,255
 100c2e4:	1080201c 	xori	r2,r2,128
 100c2e8:	10bfe004 	addi	r2,r2,-128
 100c2ec:	10801ec8 	cmpgei	r2,r2,123
 100c2f0:	10000b1e 	bne	r2,zero,100c320 <match_file_record_to_name_ext+0x124>
 100c2f4:	e0bff717 	ldw	r2,-36(fp)
 100c2f8:	1007883a 	mov	r3,r2
 100c2fc:	e0bffa17 	ldw	r2,-24(fp)
 100c300:	1885883a 	add	r2,r3,r2
 100c304:	10800003 	ldbu	r2,0(r2)
 100c308:	10bff804 	addi	r2,r2,-32
 100c30c:	10803fcc 	andi	r2,r2,255
 100c310:	1080201c 	xori	r2,r2,128
 100c314:	10bfe004 	addi	r2,r2,-128
 100c318:	e0bffe15 	stw	r2,-8(fp)
 100c31c:	00000906 	br	100c344 <match_file_record_to_name_ext+0x148>
 100c320:	e0bff717 	ldw	r2,-36(fp)
 100c324:	1007883a 	mov	r3,r2
 100c328:	e0bffa17 	ldw	r2,-24(fp)
 100c32c:	1885883a 	add	r2,r3,r2
 100c330:	10800003 	ldbu	r2,0(r2)
 100c334:	10803fcc 	andi	r2,r2,255
 100c338:	1080201c 	xori	r2,r2,128
 100c33c:	10bfe004 	addi	r2,r2,-128
 100c340:	e0bffe15 	stw	r2,-8(fp)
 100c344:	e0bfff17 	ldw	r2,-4(fp)
 100c348:	e0fffe17 	ldw	r3,-8(fp)
 100c34c:	10c00226 	beq	r2,r3,100c358 <match_file_record_to_name_ext+0x15c>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
 100c350:	e03ff815 	stw	zero,-32(fp)
			break;
 100c354:	00000606 	br	100c370 <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
	bool match = true;
	int index;

	for (index = 0; index < 8; index++) {
 100c358:	e0bff717 	ldw	r2,-36(fp)
 100c35c:	10800044 	addi	r2,r2,1
 100c360:	e0bff715 	stw	r2,-36(fp)
 100c364:	e0bff717 	ldw	r2,-36(fp)
 100c368:	10800210 	cmplti	r2,r2,8
 100c36c:	103fad1e 	bne	r2,zero,100c224 <match_file_record_to_name_ext+0x28>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 100c370:	e03ff715 	stw	zero,-36(fp)
 100c374:	00005406 	br	100c4c8 <match_file_record_to_name_ext+0x2cc>
		if (CHAR_TO_UPPER(file_record->extension[index])
 100c378:	e0fff717 	ldw	r3,-36(fp)
 100c37c:	e0bff917 	ldw	r2,-28(fp)
 100c380:	1885883a 	add	r2,r3,r2
 100c384:	10800204 	addi	r2,r2,8
 100c388:	10800003 	ldbu	r2,0(r2)
 100c38c:	10803fcc 	andi	r2,r2,255
 100c390:	10801870 	cmpltui	r2,r2,97
 100c394:	1000131e 	bne	r2,zero,100c3e4 <match_file_record_to_name_ext+0x1e8>
 100c398:	e0fff717 	ldw	r3,-36(fp)
 100c39c:	e0bff917 	ldw	r2,-28(fp)
 100c3a0:	1885883a 	add	r2,r3,r2
 100c3a4:	10800204 	addi	r2,r2,8
 100c3a8:	10800003 	ldbu	r2,0(r2)
 100c3ac:	10803fcc 	andi	r2,r2,255
 100c3b0:	10801ee8 	cmpgeui	r2,r2,123
 100c3b4:	10000b1e 	bne	r2,zero,100c3e4 <match_file_record_to_name_ext+0x1e8>
 100c3b8:	e0fff717 	ldw	r3,-36(fp)
 100c3bc:	e0bff917 	ldw	r2,-28(fp)
 100c3c0:	1885883a 	add	r2,r3,r2
 100c3c4:	10800204 	addi	r2,r2,8
 100c3c8:	10800003 	ldbu	r2,0(r2)
 100c3cc:	10bff804 	addi	r2,r2,-32
 100c3d0:	10803fcc 	andi	r2,r2,255
 100c3d4:	1080201c 	xori	r2,r2,128
 100c3d8:	10bfe004 	addi	r2,r2,-128
 100c3dc:	e0bffd15 	stw	r2,-12(fp)
 100c3e0:	00000906 	br	100c408 <match_file_record_to_name_ext+0x20c>
 100c3e4:	e0fff717 	ldw	r3,-36(fp)
 100c3e8:	e0bff917 	ldw	r2,-28(fp)
 100c3ec:	1885883a 	add	r2,r3,r2
 100c3f0:	10800204 	addi	r2,r2,8
 100c3f4:	10800003 	ldbu	r2,0(r2)
 100c3f8:	10803fcc 	andi	r2,r2,255
 100c3fc:	1080201c 	xori	r2,r2,128
 100c400:	10bfe004 	addi	r2,r2,-128
 100c404:	e0bffd15 	stw	r2,-12(fp)
 100c408:	e0bff717 	ldw	r2,-36(fp)
 100c40c:	1007883a 	mov	r3,r2
 100c410:	e0bffb17 	ldw	r2,-20(fp)
 100c414:	1885883a 	add	r2,r3,r2
 100c418:	10800003 	ldbu	r2,0(r2)
 100c41c:	10803fcc 	andi	r2,r2,255
 100c420:	1080201c 	xori	r2,r2,128
 100c424:	10bfe004 	addi	r2,r2,-128
 100c428:	10801850 	cmplti	r2,r2,97
 100c42c:	1000151e 	bne	r2,zero,100c484 <match_file_record_to_name_ext+0x288>
 100c430:	e0bff717 	ldw	r2,-36(fp)
 100c434:	1007883a 	mov	r3,r2
 100c438:	e0bffb17 	ldw	r2,-20(fp)
 100c43c:	1885883a 	add	r2,r3,r2
 100c440:	10800003 	ldbu	r2,0(r2)
 100c444:	10803fcc 	andi	r2,r2,255
 100c448:	1080201c 	xori	r2,r2,128
 100c44c:	10bfe004 	addi	r2,r2,-128
 100c450:	10801ec8 	cmpgei	r2,r2,123
 100c454:	10000b1e 	bne	r2,zero,100c484 <match_file_record_to_name_ext+0x288>
 100c458:	e0bff717 	ldw	r2,-36(fp)
 100c45c:	1007883a 	mov	r3,r2
 100c460:	e0bffb17 	ldw	r2,-20(fp)
 100c464:	1885883a 	add	r2,r3,r2
 100c468:	10800003 	ldbu	r2,0(r2)
 100c46c:	10bff804 	addi	r2,r2,-32
 100c470:	10803fcc 	andi	r2,r2,255
 100c474:	1080201c 	xori	r2,r2,128
 100c478:	10bfe004 	addi	r2,r2,-128
 100c47c:	e0bffc15 	stw	r2,-16(fp)
 100c480:	00000906 	br	100c4a8 <match_file_record_to_name_ext+0x2ac>
 100c484:	e0bff717 	ldw	r2,-36(fp)
 100c488:	1007883a 	mov	r3,r2
 100c48c:	e0bffb17 	ldw	r2,-20(fp)
 100c490:	1885883a 	add	r2,r3,r2
 100c494:	10800003 	ldbu	r2,0(r2)
 100c498:	10803fcc 	andi	r2,r2,255
 100c49c:	1080201c 	xori	r2,r2,128
 100c4a0:	10bfe004 	addi	r2,r2,-128
 100c4a4:	e0bffc15 	stw	r2,-16(fp)
 100c4a8:	e0bffd17 	ldw	r2,-12(fp)
 100c4ac:	e0fffc17 	ldw	r3,-16(fp)
 100c4b0:	10c00226 	beq	r2,r3,100c4bc <match_file_record_to_name_ext+0x2c0>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
 100c4b4:	e03ff815 	stw	zero,-32(fp)
			break;
 100c4b8:	00000606 	br	100c4d4 <match_file_record_to_name_ext+0x2d8>
				!= CHAR_TO_UPPER(name[index])) {
			match = false;
			break;
		}
	}
	for (index = 0; index < 3; index++) {
 100c4bc:	e0bff717 	ldw	r2,-36(fp)
 100c4c0:	10800044 	addi	r2,r2,1
 100c4c4:	e0bff715 	stw	r2,-36(fp)
 100c4c8:	e0bff717 	ldw	r2,-36(fp)
 100c4cc:	108000d0 	cmplti	r2,r2,3
 100c4d0:	103fa91e 	bne	r2,zero,100c378 <match_file_record_to_name_ext+0x17c>
				!= CHAR_TO_UPPER(extension[index])) {
			match = false;
			break;
		}
	}
	return match;
 100c4d4:	e0bff817 	ldw	r2,-32(fp)
}
 100c4d8:	e037883a 	mov	sp,fp
 100c4dc:	df000017 	ldw	fp,0(sp)
 100c4e0:	dec00104 	addi	sp,sp,4
 100c4e4:	f800283a 	ret

0100c4e8 <get_home_directory_cluster_for_file>:

bool get_home_directory_cluster_for_file(char *file_name,
		int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 100c4e8:	deffe604 	addi	sp,sp,-104
 100c4ec:	dfc01915 	stw	ra,100(sp)
 100c4f0:	df001815 	stw	fp,96(sp)
 100c4f4:	df001804 	addi	fp,sp,96
 100c4f8:	e13ffc15 	stw	r4,-16(fp)
 100c4fc:	e17ffd15 	stw	r5,-12(fp)
 100c500:	e1bffe15 	stw	r6,-8(fp)
	bool result = false;
 100c504:	e03ff715 	stw	zero,-36(fp)
	int home_dir_cluster = 0;
 100c508:	e03ff615 	stw	zero,-40(fp)
	int location, index;
	int start_location = 0;
 100c50c:	e03ff315 	stw	zero,-52(fp)

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
 100c510:	e13ffc17 	ldw	r4,-16(fp)
 100c514:	100c13c0 	call	100c13c <get_dir_divider_location>
 100c518:	e0bff515 	stw	r2,-44(fp)
	while (location > 0) {
 100c51c:	00012206 	br	100c9a8 <get_home_directory_cluster_for_file+0x4c0>
		char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 100c520:	00800804 	movi	r2,32
 100c524:	e0bff805 	stb	r2,-32(fp)
 100c528:	00800804 	movi	r2,32
 100c52c:	e0bff845 	stb	r2,-31(fp)
 100c530:	00800804 	movi	r2,32
 100c534:	e0bff885 	stb	r2,-30(fp)
 100c538:	00800804 	movi	r2,32
 100c53c:	e0bff8c5 	stb	r2,-29(fp)
 100c540:	00800804 	movi	r2,32
 100c544:	e0bff905 	stb	r2,-28(fp)
 100c548:	00800804 	movi	r2,32
 100c54c:	e0bff945 	stb	r2,-27(fp)
 100c550:	00800804 	movi	r2,32
 100c554:	e0bff985 	stb	r2,-26(fp)
 100c558:	00800804 	movi	r2,32
 100c55c:	e0bff9c5 	stb	r2,-25(fp)
		char extension[3] = { ' ', ' ', ' ' };
 100c560:	00800804 	movi	r2,32
 100c564:	e0bffa05 	stb	r2,-24(fp)
 100c568:	00800804 	movi	r2,32
 100c56c:	e0bffa45 	stb	r2,-23(fp)
 100c570:	00800804 	movi	r2,32
 100c574:	e0bffa85 	stb	r2,-22(fp)
		int ext_index = -1;
 100c578:	00bfffc4 	movi	r2,-1
 100c57c:	e0bff215 	stw	r2,-56(fp)
		int new_cluster = home_dir_cluster;
 100c580:	e0bff617 	ldw	r2,-40(fp)
 100c584:	e0bff115 	stw	r2,-60(fp)

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 100c588:	e03ff415 	stw	zero,-48(fp)
 100c58c:	00002e06 	br	100c648 <get_home_directory_cluster_for_file+0x160>
			if (file_name[index + start_location] == '.') {
 100c590:	e0fff417 	ldw	r3,-48(fp)
 100c594:	e0bff317 	ldw	r2,-52(fp)
 100c598:	1885883a 	add	r2,r3,r2
 100c59c:	1007883a 	mov	r3,r2
 100c5a0:	e0bffc17 	ldw	r2,-16(fp)
 100c5a4:	1885883a 	add	r2,r3,r2
 100c5a8:	10800003 	ldbu	r2,0(r2)
 100c5ac:	10803fcc 	andi	r2,r2,255
 100c5b0:	1080201c 	xori	r2,r2,128
 100c5b4:	10bfe004 	addi	r2,r2,-128
 100c5b8:	10800b98 	cmpnei	r2,r2,46
 100c5bc:	1000031e 	bne	r2,zero,100c5cc <get_home_directory_cluster_for_file+0xe4>
				ext_index = index;
 100c5c0:	e0bff417 	ldw	r2,-48(fp)
 100c5c4:	e0bff215 	stw	r2,-56(fp)
 100c5c8:	00001c06 	br	100c63c <get_home_directory_cluster_for_file+0x154>
			} else if (ext_index < 0) {
 100c5cc:	e0bff217 	ldw	r2,-56(fp)
 100c5d0:	1004403a 	cmpge	r2,r2,zero
 100c5d4:	10000c1e 	bne	r2,zero,100c608 <get_home_directory_cluster_for_file+0x120>
				name[index] = file_name[index + start_location];
 100c5d8:	e13ff417 	ldw	r4,-48(fp)
 100c5dc:	e0fff417 	ldw	r3,-48(fp)
 100c5e0:	e0bff317 	ldw	r2,-52(fp)
 100c5e4:	1885883a 	add	r2,r3,r2
 100c5e8:	1007883a 	mov	r3,r2
 100c5ec:	e0bffc17 	ldw	r2,-16(fp)
 100c5f0:	1885883a 	add	r2,r3,r2
 100c5f4:	10c00003 	ldbu	r3,0(r2)
 100c5f8:	e0bff804 	addi	r2,fp,-32
 100c5fc:	1105883a 	add	r2,r2,r4
 100c600:	10c00005 	stb	r3,0(r2)
 100c604:	00000d06 	br	100c63c <get_home_directory_cluster_for_file+0x154>
			} else {
				extension[index - ext_index] =
 100c608:	e0fff417 	ldw	r3,-48(fp)
 100c60c:	e0bff217 	ldw	r2,-56(fp)
 100c610:	1889c83a 	sub	r4,r3,r2
 100c614:	e0fff417 	ldw	r3,-48(fp)
 100c618:	e0bff317 	ldw	r2,-52(fp)
 100c61c:	1885883a 	add	r2,r3,r2
 100c620:	1007883a 	mov	r3,r2
 100c624:	e0bffc17 	ldw	r2,-16(fp)
 100c628:	1885883a 	add	r2,r3,r2
 100c62c:	10c00003 	ldbu	r3,0(r2)
 100c630:	e0bffa04 	addi	r2,fp,-24
 100c634:	1105883a 	add	r2,r2,r4
 100c638:	10c00005 	stb	r3,0(r2)
		char extension[3] = { ' ', ' ', ' ' };
		int ext_index = -1;
		int new_cluster = home_dir_cluster;

		// Get the name of the directory in name/extension format.
		for (index = 0; index < location; index++) {
 100c63c:	e0bff417 	ldw	r2,-48(fp)
 100c640:	10800044 	addi	r2,r2,1
 100c644:	e0bff415 	stw	r2,-48(fp)
 100c648:	e0fff417 	ldw	r3,-48(fp)
 100c64c:	e0bff517 	ldw	r2,-44(fp)
 100c650:	18bfcf16 	blt	r3,r2,100c590 <get_home_directory_cluster_for_file+0xa8>
				extension[index - ext_index] =
						file_name[index + start_location];
			}
		}

		if (home_dir_cluster == 0) {
 100c654:	e0bff617 	ldw	r2,-40(fp)
 100c658:	1004c03a 	cmpne	r2,r2,zero
 100c65c:	1000551e 	bne	r2,zero,100c7b4 <get_home_directory_cluster_for_file+0x2cc>
			/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 100c660:	00804074 	movhi	r2,257
 100c664:	109cac04 	addi	r2,r2,29360
 100c668:	1080050b 	ldhu	r2,20(r2)
 100c66c:	10bfffcc 	andi	r2,r2,65535
 100c670:	1006917a 	slli	r3,r2,5
 100c674:	00804074 	movhi	r2,257
 100c678:	109cac04 	addi	r2,r2,29360
 100c67c:	1080030b 	ldhu	r2,12(r2)
 100c680:	10bfffcc 	andi	r2,r2,65535
 100c684:	1885283a 	div	r2,r3,r2
 100c688:	e0bff015 	stw	r2,-64(fp)
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 100c68c:	e03fef15 	stw	zero,-68(fp)
 100c690:	00003806 	br	100c774 <get_home_directory_cluster_for_file+0x28c>
					sector_index++) {
				if (Read_Sector_Data(
 100c694:	00804074 	movhi	r2,257
 100c698:	109cac04 	addi	r2,r2,29360
 100c69c:	10c01317 	ldw	r3,76(r2)
 100c6a0:	e0bfef17 	ldw	r2,-68(fp)
 100c6a4:	1885883a 	add	r2,r3,r2
 100c6a8:	1009883a 	mov	r4,r2
 100c6ac:	d1675b17 	ldw	r5,-25236(gp)
 100c6b0:	100ad140 	call	100ad14 <Read_Sector_Data>
 100c6b4:	1005003a 	cmpeq	r2,r2,zero
 100c6b8:	1000311e 	bne	r2,zero,100c780 <get_home_directory_cluster_for_file+0x298>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100c6bc:	e03fee15 	stw	zero,-72(fp)
 100c6c0:	00002306 	br	100c750 <get_home_directory_cluster_for_file+0x268>

						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 100c6c4:	e0bfee17 	ldw	r2,-72(fp)
 100c6c8:	1008917a 	slli	r4,r2,5
 100c6cc:	e1ffef17 	ldw	r7,-68(fp)
 100c6d0:	e17ffe17 	ldw	r5,-8(fp)
 100c6d4:	000d883a 	mov	r6,zero
 100c6d8:	100b15c0 	call	100b15c <Read_File_Record_At_Offset>
								file_record, 0, sector_index);
						if ((file_record->name[0] != 0xe5)
 100c6dc:	e0bffe17 	ldw	r2,-8(fp)
 100c6e0:	10800003 	ldbu	r2,0(r2)
 100c6e4:	10803fcc 	andi	r2,r2,255
 100c6e8:	10803960 	cmpeqi	r2,r2,229
 100c6ec:	1000151e 	bne	r2,zero,100c744 <get_home_directory_cluster_for_file+0x25c>
 100c6f0:	e0bffe17 	ldw	r2,-8(fp)
 100c6f4:	10800003 	ldbu	r2,0(r2)
 100c6f8:	10803fcc 	andi	r2,r2,255
 100c6fc:	1005003a 	cmpeq	r2,r2,zero
 100c700:	1000101e 	bne	r2,zero,100c744 <get_home_directory_cluster_for_file+0x25c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 100c704:	e17ff804 	addi	r5,fp,-32
 100c708:	e1bffa04 	addi	r6,fp,-24
 100c70c:	e13ffe17 	ldw	r4,-8(fp)
 100c710:	100c1fc0 	call	100c1fc <match_file_record_to_name_ext>
 100c714:	e0bfed15 	stw	r2,-76(fp)
							if (match) {
 100c718:	e0bfed17 	ldw	r2,-76(fp)
 100c71c:	1005003a 	cmpeq	r2,r2,zero
 100c720:	1000081e 	bne	r2,zero,100c744 <get_home_directory_cluster_for_file+0x25c>
								new_cluster = file_record->start_cluster_index;
 100c724:	e0bffe17 	ldw	r2,-8(fp)
 100c728:	1080058b 	ldhu	r2,22(r2)
 100c72c:	10bfffcc 	andi	r2,r2,65535
 100c730:	e0bff115 	stw	r2,-60(fp)
								file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 100c734:	e0fffe17 	ldw	r3,-8(fp)
 100c738:	00800044 	movi	r2,1
 100c73c:	18800a15 	stw	r2,40(r3)
								break;
 100c740:	00000606 	br	100c75c <get_home_directory_cluster_for_file+0x274>
						sector_index
								+ boot_sector_data.root_directory_sector_offset,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100c744:	e0bfee17 	ldw	r2,-72(fp)
 100c748:	10800044 	addi	r2,r2,1
 100c74c:	e0bfee15 	stw	r2,-72(fp)
 100c750:	e0bfee17 	ldw	r2,-72(fp)
 100c754:	10800410 	cmplti	r2,r2,16
 100c758:	103fda1e 	bne	r2,zero,100c6c4 <get_home_directory_cluster_for_file+0x1dc>
						}
					}
				} else {
					break;
				}
				if (new_cluster != home_dir_cluster) {
 100c75c:	e0fff117 	ldw	r3,-60(fp)
 100c760:	e0bff617 	ldw	r2,-40(fp)
 100c764:	1880061e 	bne	r3,r2,100c780 <get_home_directory_cluster_for_file+0x298>
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
					sector_index++) {
 100c768:	e0bfef17 	ldw	r2,-68(fp)
 100c76c:	10800044 	addi	r2,r2,1
 100c770:	e0bfef15 	stw	r2,-68(fp)
			int max_root_dir_sectors = ((32
					* boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
			int sector_index;

			for (sector_index = 0; sector_index < max_root_dir_sectors;
 100c774:	e0ffef17 	ldw	r3,-68(fp)
 100c778:	e0bff017 	ldw	r2,-64(fp)
 100c77c:	18bfc516 	blt	r3,r2,100c694 <get_home_directory_cluster_for_file+0x1ac>
				}
				if (new_cluster != home_dir_cluster) {
					break;
				}
			}
			if (new_cluster != home_dir_cluster) {
 100c780:	e0fff117 	ldw	r3,-60(fp)
 100c784:	e0bff617 	ldw	r2,-40(fp)
 100c788:	18800826 	beq	r3,r2,100c7ac <get_home_directory_cluster_for_file+0x2c4>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 100c78c:	e0bff117 	ldw	r2,-60(fp)
 100c790:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 100c794:	e0fff317 	ldw	r3,-52(fp)
 100c798:	e0bff517 	ldw	r2,-44(fp)
 100c79c:	1885883a 	add	r2,r3,r2
 100c7a0:	10800044 	addi	r2,r2,1
 100c7a4:	e0bff315 	stw	r2,-52(fp)
 100c7a8:	00007406 	br	100c97c <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 100c7ac:	e03fff15 	stw	zero,-4(fp)
 100c7b0:	00008c06 	br	100c9e4 <get_home_directory_cluster_for_file+0x4fc>
			}
		} else {
			// This is a subdirectory that can have any number of elements. So scan through it as though it was a file
			// and see if you can find the directory of interest.
			int cluster = home_dir_cluster;
 100c7b4:	e0bff617 	ldw	r2,-40(fp)
 100c7b8:	e0bfec15 	stw	r2,-80(fp)

			do {
				int start_sector = (cluster - 2)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
 100c7bc:	e0bfec17 	ldw	r2,-80(fp)
 100c7c0:	10ffff84 	addi	r3,r2,-2
 100c7c4:	00804074 	movhi	r2,257
 100c7c8:	109cac04 	addi	r2,r2,29360
 100c7cc:	10800383 	ldbu	r2,14(r2)
 100c7d0:	10803fcc 	andi	r2,r2,255
 100c7d4:	1885383a 	mul	r2,r3,r2
 100c7d8:	1007883a 	mov	r3,r2
 100c7dc:	00804074 	movhi	r2,257
 100c7e0:	109cac04 	addi	r2,r2,29360
 100c7e4:	10801417 	ldw	r2,80(r2)
 100c7e8:	1885883a 	add	r2,r3,r2
 100c7ec:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index;

				for (sector_index = 0;
 100c7f0:	e03fea15 	stw	zero,-88(fp)
						sector_index < boot_sector_data.sectors_per_cluster;
 100c7f4:	00003206 	br	100c8c0 <get_home_directory_cluster_for_file+0x3d8>
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
 100c7f8:	e0ffea17 	ldw	r3,-88(fp)
 100c7fc:	e0bfeb17 	ldw	r2,-84(fp)
 100c800:	1889883a 	add	r4,r3,r2
 100c804:	d1675b17 	ldw	r5,-25236(gp)
 100c808:	100ad140 	call	100ad14 <Read_Sector_Data>
 100c80c:	1005003a 	cmpeq	r2,r2,zero
 100c810:	1000311e 	bne	r2,zero,100c8d8 <get_home_directory_cluster_for_file+0x3f0>
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 100c814:	e03fe915 	stw	zero,-92(fp)
 100c818:	00002006 	br	100c89c <get_home_directory_cluster_for_file+0x3b4>
								file_counter++) {
							// Read file record.
							Read_File_Record_At_Offset(file_counter * 32,
 100c81c:	e0bfe917 	ldw	r2,-92(fp)
 100c820:	1008917a 	slli	r4,r2,5
 100c824:	e1bfec17 	ldw	r6,-80(fp)
 100c828:	e1ffea17 	ldw	r7,-88(fp)
 100c82c:	e17ffe17 	ldw	r5,-8(fp)
 100c830:	100b15c0 	call	100b15c <Read_File_Record_At_Offset>
									file_record, cluster, sector_index);
							if ((file_record->name[0] != 0xe5)
 100c834:	e0bffe17 	ldw	r2,-8(fp)
 100c838:	10800003 	ldbu	r2,0(r2)
 100c83c:	10803fcc 	andi	r2,r2,255
 100c840:	10803960 	cmpeqi	r2,r2,229
 100c844:	1000121e 	bne	r2,zero,100c890 <get_home_directory_cluster_for_file+0x3a8>
 100c848:	e0bffe17 	ldw	r2,-8(fp)
 100c84c:	10800003 	ldbu	r2,0(r2)
 100c850:	10803fcc 	andi	r2,r2,255
 100c854:	1005003a 	cmpeq	r2,r2,zero
 100c858:	10000d1e 	bne	r2,zero,100c890 <get_home_directory_cluster_for_file+0x3a8>
									&& (file_record->name[0] != 0x00)) {
								bool match = match_file_record_to_name_ext(
										file_record, name, extension);
 100c85c:	e17ff804 	addi	r5,fp,-32
 100c860:	e1bffa04 	addi	r6,fp,-24
 100c864:	e13ffe17 	ldw	r4,-8(fp)
 100c868:	100c1fc0 	call	100c1fc <match_file_record_to_name_ext>
 100c86c:	e0bfe815 	stw	r2,-96(fp)
								if (match) {
 100c870:	e0bfe817 	ldw	r2,-96(fp)
 100c874:	1005003a 	cmpeq	r2,r2,zero
 100c878:	1000051e 	bne	r2,zero,100c890 <get_home_directory_cluster_for_file+0x3a8>
									new_cluster =
 100c87c:	e0bffe17 	ldw	r2,-8(fp)
 100c880:	1080058b 	ldhu	r2,22(r2)
 100c884:	10bfffcc 	andi	r2,r2,65535
 100c888:	e0bff115 	stw	r2,-60(fp)
											file_record->start_cluster_index;
									break;
 100c88c:	00000606 	br	100c8a8 <get_home_directory_cluster_for_file+0x3c0>
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
								file_counter++) {
 100c890:	e0bfe917 	ldw	r2,-92(fp)
 100c894:	10800044 	addi	r2,r2,1
 100c898:	e0bfe915 	stw	r2,-92(fp)
						sector_index++) {
					if (Read_Sector_Data(sector_index + start_sector,
							fat_partition_offset_in_512_byte_sectors)) {
						int file_counter;

						for (file_counter = 0; file_counter < 16;
 100c89c:	e0bfe917 	ldw	r2,-92(fp)
 100c8a0:	10800410 	cmplti	r2,r2,16
 100c8a4:	103fdd1e 	bne	r2,zero,100c81c <get_home_directory_cluster_for_file+0x334>
							}
						}
					} else {
						break;
					}
					if (new_cluster != home_dir_cluster) {
 100c8a8:	e0fff117 	ldw	r3,-60(fp)
 100c8ac:	e0bff617 	ldw	r2,-40(fp)
 100c8b0:	1880091e 	bne	r3,r2,100c8d8 <get_home_directory_cluster_for_file+0x3f0>
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
						sector_index++) {
 100c8b4:	e0bfea17 	ldw	r2,-88(fp)
 100c8b8:	10800044 	addi	r2,r2,1
 100c8bc:	e0bfea15 	stw	r2,-88(fp)
						* (boot_sector_data.sectors_per_cluster)
						+ boot_sector_data.data_sector_offset;
				int sector_index;

				for (sector_index = 0;
						sector_index < boot_sector_data.sectors_per_cluster;
 100c8c0:	00804074 	movhi	r2,257
 100c8c4:	109cac04 	addi	r2,r2,29360
 100c8c8:	10800383 	ldbu	r2,14(r2)
 100c8cc:	10c03fcc 	andi	r3,r2,255
 100c8d0:	e0bfea17 	ldw	r2,-88(fp)
 100c8d4:	10ffc816 	blt	r2,r3,100c7f8 <get_home_directory_cluster_for_file+0x310>
						break;
					}
				}
				// If this is the end of the cluster and the directory has not been found, then see if there is another cluster
				// that holds data for the current directory.
				if (new_cluster == home_dir_cluster) {
 100c8d8:	e0fff117 	ldw	r3,-60(fp)
 100c8dc:	e0bff617 	ldw	r2,-40(fp)
 100c8e0:	1880131e 	bne	r3,r2,100c930 <get_home_directory_cluster_for_file+0x448>
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster)) {
 100c8e4:	e13ff117 	ldw	r4,-60(fp)
 100c8e8:	e17ffb04 	addi	r5,fp,-20
 100c8ec:	100ae100 	call	100ae10 <get_cluster_flag>
 100c8f0:	1005003a 	cmpeq	r2,r2,zero
 100c8f4:	10000c1e 	bne	r2,zero,100c928 <get_home_directory_cluster_for_file+0x440>
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 100c8f8:	e0bffb0b 	ldhu	r2,-20(fp)
 100c8fc:	10bfffcc 	andi	r2,r2,65535
 100c900:	10fffe0c 	andi	r3,r2,65528
 100c904:	00bffe14 	movui	r2,65528
 100c908:	1880021e 	bne	r3,r2,100c914 <get_home_directory_cluster_for_file+0x42c>
							return false;
 100c90c:	e03fff15 	stw	zero,-4(fp)
 100c910:	00003406 	br	100c9e4 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 100c914:	e0bffb0b 	ldhu	r2,-20(fp)
 100c918:	10bfffcc 	andi	r2,r2,65535
 100c91c:	10bffe0c 	andi	r2,r2,65528
 100c920:	e0bff115 	stw	r2,-60(fp)
 100c924:	00000206 	br	100c930 <get_home_directory_cluster_for_file+0x448>
					} else {
						// Directory path is invalid.                 
						return false;
 100c928:	e03fff15 	stw	zero,-4(fp)
 100c92c:	00002d06 	br	100c9e4 <get_home_directory_cluster_for_file+0x4fc>
					}
				}
			} while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 100c930:	e0ffec17 	ldw	r3,-80(fp)
 100c934:	00bffdd4 	movui	r2,65527
 100c938:	10c00316 	blt	r2,r3,100c948 <get_home_directory_cluster_for_file+0x460>
 100c93c:	e0fff117 	ldw	r3,-60(fp)
 100c940:	e0bff617 	ldw	r2,-40(fp)
 100c944:	18bf9d26 	beq	r3,r2,100c7bc <get_home_directory_cluster_for_file+0x2d4>
			if (new_cluster != home_dir_cluster) {
 100c948:	e0fff117 	ldw	r3,-60(fp)
 100c94c:	e0bff617 	ldw	r2,-40(fp)
 100c950:	18800826 	beq	r3,r2,100c974 <get_home_directory_cluster_for_file+0x48c>
				// A valid directory is found, so go to it.
				home_dir_cluster = new_cluster;
 100c954:	e0bff117 	ldw	r2,-60(fp)
 100c958:	e0bff615 	stw	r2,-40(fp)
				start_location = start_location + location + 1;
 100c95c:	e0fff317 	ldw	r3,-52(fp)
 100c960:	e0bff517 	ldw	r2,-44(fp)
 100c964:	1885883a 	add	r2,r3,r2
 100c968:	10800044 	addi	r2,r2,1
 100c96c:	e0bff315 	stw	r2,-52(fp)
 100c970:	00000206 	br	100c97c <get_home_directory_cluster_for_file+0x494>
			} else {
				// Directory path is invalid.
				return false;
 100c974:	e03fff15 	stw	zero,-4(fp)
 100c978:	00001a06 	br	100c9e4 <get_home_directory_cluster_for_file+0x4fc>
			}
		}
		location = get_dir_divider_location(&(file_name[start_location]));
 100c97c:	e0bff317 	ldw	r2,-52(fp)
 100c980:	1007883a 	mov	r3,r2
 100c984:	e0bffc17 	ldw	r2,-16(fp)
 100c988:	1889883a 	add	r4,r3,r2
 100c98c:	100c13c0 	call	100c13c <get_dir_divider_location>
 100c990:	e0bff515 	stw	r2,-44(fp)
		if (location < 0) {
 100c994:	e0bff517 	ldw	r2,-44(fp)
 100c998:	1004403a 	cmpge	r2,r2,zero
 100c99c:	1000021e 	bne	r2,zero,100c9a8 <get_home_directory_cluster_for_file+0x4c0>
			// Directory has been located.
			result = true;
 100c9a0:	00800044 	movi	r2,1
 100c9a4:	e0bff715 	stw	r2,-36(fp)
	int location, index;
	int start_location = 0;

	/* Get Next Directory. */
	location = get_dir_divider_location(file_name);
	while (location > 0) {
 100c9a8:	e0bff517 	ldw	r2,-44(fp)
 100c9ac:	10800048 	cmpgei	r2,r2,1
 100c9b0:	103edb1e 	bne	r2,zero,100c520 <get_home_directory_cluster_for_file+0x38>
			// Directory has been located.
			result = true;
		}
	}

	*home_directory_cluster = home_dir_cluster;
 100c9b4:	e0fffd17 	ldw	r3,-12(fp)
 100c9b8:	e0bff617 	ldw	r2,-40(fp)
 100c9bc:	18800015 	stw	r2,0(r3)
	if (home_dir_cluster == 0) {
 100c9c0:	e0bff617 	ldw	r2,-40(fp)
 100c9c4:	1004c03a 	cmpne	r2,r2,zero
 100c9c8:	1000041e 	bne	r2,zero,100c9dc <get_home_directory_cluster_for_file+0x4f4>
		file_record->file_record_cluster = 0; // Home directory is the root directory.
 100c9cc:	e0bffe17 	ldw	r2,-8(fp)
 100c9d0:	10000a15 	stw	zero,40(r2)
		result = true;
 100c9d4:	00800044 	movi	r2,1
 100c9d8:	e0bff715 	stw	r2,-36(fp)
	}
	return result;
 100c9dc:	e0bff717 	ldw	r2,-36(fp)
 100c9e0:	e0bfff15 	stw	r2,-4(fp)
 100c9e4:	e0bfff17 	ldw	r2,-4(fp)
}
 100c9e8:	e037883a 	mov	sp,fp
 100c9ec:	dfc00117 	ldw	ra,4(sp)
 100c9f0:	df000017 	ldw	fp,0(sp)
 100c9f4:	dec00204 	addi	sp,sp,8
 100c9f8:	f800283a 	ret

0100c9fc <find_file_in_directory>:

bool find_file_in_directory(int directory_start_cluster, char *file_name,
		t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 100c9fc:	deffe704 	addi	sp,sp,-100
 100ca00:	dfc01815 	stw	ra,96(sp)
 100ca04:	df001715 	stw	fp,92(sp)
 100ca08:	df001704 	addi	fp,sp,92
 100ca0c:	e13ffc15 	stw	r4,-16(fp)
 100ca10:	e17ffd15 	stw	r5,-12(fp)
 100ca14:	e1bffe15 	stw	r6,-8(fp)
	int location = get_dir_divider_location(file_name);
 100ca18:	e13ffd17 	ldw	r4,-12(fp)
 100ca1c:	100c13c0 	call	100c13c <get_dir_divider_location>
 100ca20:	e0bff715 	stw	r2,-36(fp)
	int last_dir_separator = 0;
 100ca24:	e03ff615 	stw	zero,-40(fp)
	char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 100ca28:	00800804 	movi	r2,32
 100ca2c:	e0bff805 	stb	r2,-32(fp)
 100ca30:	00800804 	movi	r2,32
 100ca34:	e0bff845 	stb	r2,-31(fp)
 100ca38:	00800804 	movi	r2,32
 100ca3c:	e0bff885 	stb	r2,-30(fp)
 100ca40:	00800804 	movi	r2,32
 100ca44:	e0bff8c5 	stb	r2,-29(fp)
 100ca48:	00800804 	movi	r2,32
 100ca4c:	e0bff905 	stb	r2,-28(fp)
 100ca50:	00800804 	movi	r2,32
 100ca54:	e0bff945 	stb	r2,-27(fp)
 100ca58:	00800804 	movi	r2,32
 100ca5c:	e0bff985 	stb	r2,-26(fp)
 100ca60:	00800804 	movi	r2,32
 100ca64:	e0bff9c5 	stb	r2,-25(fp)
	char extension[3] = { ' ', ' ', ' ' };
 100ca68:	00800804 	movi	r2,32
 100ca6c:	e0bffa05 	stb	r2,-24(fp)
 100ca70:	00800804 	movi	r2,32
 100ca74:	e0bffa45 	stb	r2,-23(fp)
 100ca78:	00800804 	movi	r2,32
 100ca7c:	e0bffa85 	stb	r2,-22(fp)
	int ext_index = -1;
 100ca80:	00bfffc4 	movi	r2,-1
 100ca84:	e0bff515 	stw	r2,-44(fp)
	int cluster = directory_start_cluster;
 100ca88:	e0bffc17 	ldw	r2,-16(fp)
 100ca8c:	e0bff415 	stw	r2,-48(fp)
	int index;
	int length = strlen(file_name);
 100ca90:	e13ffd17 	ldw	r4,-12(fp)
 100ca94:	10006d80 	call	10006d8 <strlen>
 100ca98:	e0bff215 	stw	r2,-56(fp)
	bool result = false;
 100ca9c:	e03ff115 	stw	zero,-60(fp)

	// Skip through all directory separators.
	while (location > 0) {
 100caa0:	00000b06 	br	100cad0 <find_file_in_directory+0xd4>
		last_dir_separator = last_dir_separator + location + 1;
 100caa4:	e0fff617 	ldw	r3,-40(fp)
 100caa8:	e0bff717 	ldw	r2,-36(fp)
 100caac:	1885883a 	add	r2,r3,r2
 100cab0:	10800044 	addi	r2,r2,1
 100cab4:	e0bff615 	stw	r2,-40(fp)
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
 100cab8:	e0bff617 	ldw	r2,-40(fp)
 100cabc:	1007883a 	mov	r3,r2
 100cac0:	e0bffd17 	ldw	r2,-12(fp)
 100cac4:	1889883a 	add	r4,r3,r2
 100cac8:	100c13c0 	call	100c13c <get_dir_divider_location>
 100cacc:	e0bff715 	stw	r2,-36(fp)
	int index;
	int length = strlen(file_name);
	bool result = false;

	// Skip through all directory separators.
	while (location > 0) {
 100cad0:	e0bff717 	ldw	r2,-36(fp)
 100cad4:	10800048 	cmpgei	r2,r2,1
 100cad8:	103ff21e 	bne	r2,zero,100caa4 <find_file_in_directory+0xa8>
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 100cadc:	e0bff617 	ldw	r2,-40(fp)
 100cae0:	e0bff315 	stw	r2,-52(fp)
 100cae4:	00002b06 	br	100cb94 <find_file_in_directory+0x198>
		if (file_name[index] == '.') {
 100cae8:	e0bff317 	ldw	r2,-52(fp)
 100caec:	1007883a 	mov	r3,r2
 100caf0:	e0bffd17 	ldw	r2,-12(fp)
 100caf4:	1885883a 	add	r2,r3,r2
 100caf8:	10800003 	ldbu	r2,0(r2)
 100cafc:	10803fcc 	andi	r2,r2,255
 100cb00:	1080201c 	xori	r2,r2,128
 100cb04:	10bfe004 	addi	r2,r2,-128
 100cb08:	10800b98 	cmpnei	r2,r2,46
 100cb0c:	1000031e 	bne	r2,zero,100cb1c <find_file_in_directory+0x120>
			ext_index = index;
 100cb10:	e0bff317 	ldw	r2,-52(fp)
 100cb14:	e0bff515 	stw	r2,-44(fp)
 100cb18:	00001b06 	br	100cb88 <find_file_in_directory+0x18c>
		} else if (ext_index < 0) {
 100cb1c:	e0bff517 	ldw	r2,-44(fp)
 100cb20:	1004403a 	cmpge	r2,r2,zero
 100cb24:	10000c1e 	bne	r2,zero,100cb58 <find_file_in_directory+0x15c>
			name[index - last_dir_separator] = file_name[index];
 100cb28:	e0fff317 	ldw	r3,-52(fp)
 100cb2c:	e0bff617 	ldw	r2,-40(fp)
 100cb30:	1889c83a 	sub	r4,r3,r2
 100cb34:	e0bff317 	ldw	r2,-52(fp)
 100cb38:	1007883a 	mov	r3,r2
 100cb3c:	e0bffd17 	ldw	r2,-12(fp)
 100cb40:	1885883a 	add	r2,r3,r2
 100cb44:	10c00003 	ldbu	r3,0(r2)
 100cb48:	e0bff804 	addi	r2,fp,-32
 100cb4c:	1105883a 	add	r2,r2,r4
 100cb50:	10c00005 	stb	r3,0(r2)
 100cb54:	00000c06 	br	100cb88 <find_file_in_directory+0x18c>
		} else {
			extension[index - ext_index - 1] = file_name[index];
 100cb58:	e0fff317 	ldw	r3,-52(fp)
 100cb5c:	e0bff517 	ldw	r2,-44(fp)
 100cb60:	1885c83a 	sub	r2,r3,r2
 100cb64:	113fffc4 	addi	r4,r2,-1
 100cb68:	e0bff317 	ldw	r2,-52(fp)
 100cb6c:	1007883a 	mov	r3,r2
 100cb70:	e0bffd17 	ldw	r2,-12(fp)
 100cb74:	1885883a 	add	r2,r3,r2
 100cb78:	10c00003 	ldbu	r3,0(r2)
 100cb7c:	e0bffa04 	addi	r2,fp,-24
 100cb80:	1105883a 	add	r2,r2,r4
 100cb84:	10c00005 	stb	r3,0(r2)
		last_dir_separator = last_dir_separator + location + 1;
		location = get_dir_divider_location(&(file_name[last_dir_separator]));
	}

	// Get the name of the file in name/extension format.
	for (index = last_dir_separator; index < length; index++) {
 100cb88:	e0bff317 	ldw	r2,-52(fp)
 100cb8c:	10800044 	addi	r2,r2,1
 100cb90:	e0bff315 	stw	r2,-52(fp)
 100cb94:	e0fff317 	ldw	r3,-52(fp)
 100cb98:	e0bff217 	ldw	r2,-56(fp)
 100cb9c:	18bfd216 	blt	r3,r2,100cae8 <find_file_in_directory+0xec>
			extension[index - ext_index - 1] = file_name[index];
		}
	}

	// Look for the file.
	if (directory_start_cluster == 0) {
 100cba0:	e0bffc17 	ldw	r2,-16(fp)
 100cba4:	1004c03a 	cmpne	r2,r2,zero
 100cba8:	1000441e 	bne	r2,zero,100ccbc <find_file_in_directory+0x2c0>
		/* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
 100cbac:	00804074 	movhi	r2,257
 100cbb0:	109cac04 	addi	r2,r2,29360
 100cbb4:	1080050b 	ldhu	r2,20(r2)
 100cbb8:	10bfffcc 	andi	r2,r2,65535
 100cbbc:	1006917a 	slli	r3,r2,5
 100cbc0:	00804074 	movhi	r2,257
 100cbc4:	109cac04 	addi	r2,r2,29360
 100cbc8:	1080030b 	ldhu	r2,12(r2)
 100cbcc:	10bfffcc 	andi	r2,r2,65535
 100cbd0:	1885283a 	div	r2,r3,r2
 100cbd4:	e0bff015 	stw	r2,-64(fp)
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 100cbd8:	e03fef15 	stw	zero,-68(fp)
 100cbdc:	00003306 	br	100ccac <find_file_in_directory+0x2b0>
				sector_index++) {
			if (Read_Sector_Data(
 100cbe0:	00804074 	movhi	r2,257
 100cbe4:	109cac04 	addi	r2,r2,29360
 100cbe8:	10c01317 	ldw	r3,76(r2)
 100cbec:	e0bfef17 	ldw	r2,-68(fp)
 100cbf0:	1885883a 	add	r2,r3,r2
 100cbf4:	1009883a 	mov	r4,r2
 100cbf8:	d1675b17 	ldw	r5,-25236(gp)
 100cbfc:	100ad140 	call	100ad14 <Read_Sector_Data>
 100cc00:	1005003a 	cmpeq	r2,r2,zero
 100cc04:	10008e1e 	bne	r2,zero,100ce40 <find_file_in_directory+0x444>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100cc08:	e03fee15 	stw	zero,-72(fp)
 100cc0c:	00001e06 	br	100cc88 <find_file_in_directory+0x28c>
					// Read file record.
					Read_File_Record_At_Offset(file_counter * 32, file_record,
 100cc10:	e0bfee17 	ldw	r2,-72(fp)
 100cc14:	1008917a 	slli	r4,r2,5
 100cc18:	e1ffef17 	ldw	r7,-68(fp)
 100cc1c:	e17ffe17 	ldw	r5,-8(fp)
 100cc20:	000d883a 	mov	r6,zero
 100cc24:	100b15c0 	call	100b15c <Read_File_Record_At_Offset>
							0, sector_index);
					if ((file_record->name[0] != 0xe5)
 100cc28:	e0bffe17 	ldw	r2,-8(fp)
 100cc2c:	10800003 	ldbu	r2,0(r2)
 100cc30:	10803fcc 	andi	r2,r2,255
 100cc34:	10803960 	cmpeqi	r2,r2,229
 100cc38:	1000101e 	bne	r2,zero,100cc7c <find_file_in_directory+0x280>
 100cc3c:	e0bffe17 	ldw	r2,-8(fp)
 100cc40:	10800003 	ldbu	r2,0(r2)
 100cc44:	10803fcc 	andi	r2,r2,255
 100cc48:	1005003a 	cmpeq	r2,r2,zero
 100cc4c:	10000b1e 	bne	r2,zero,100cc7c <find_file_in_directory+0x280>
							&& (file_record->name[0] != 0x00)) {
						bool match = match_file_record_to_name_ext(file_record,
								name, extension);
 100cc50:	e17ff804 	addi	r5,fp,-32
 100cc54:	e1bffa04 	addi	r6,fp,-24
 100cc58:	e13ffe17 	ldw	r4,-8(fp)
 100cc5c:	100c1fc0 	call	100c1fc <match_file_record_to_name_ext>
 100cc60:	e0bfed15 	stw	r2,-76(fp)

						if (match) {
 100cc64:	e0bfed17 	ldw	r2,-76(fp)
 100cc68:	1005003a 	cmpeq	r2,r2,zero
 100cc6c:	1000031e 	bne	r2,zero,100cc7c <find_file_in_directory+0x280>
							result = true;
 100cc70:	00800044 	movi	r2,1
 100cc74:	e0bff115 	stw	r2,-60(fp)
							break;
 100cc78:	00000606 	br	100cc94 <find_file_in_directory+0x298>
					sector_index
							+ boot_sector_data.root_directory_sector_offset,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100cc7c:	e0bfee17 	ldw	r2,-72(fp)
 100cc80:	10800044 	addi	r2,r2,1
 100cc84:	e0bfee15 	stw	r2,-72(fp)
 100cc88:	e0bfee17 	ldw	r2,-72(fp)
 100cc8c:	10800410 	cmplti	r2,r2,16
 100cc90:	103fdf1e 	bne	r2,zero,100cc10 <find_file_in_directory+0x214>
					}
				}
			} else {
				break;
			}
			if (result) {
 100cc94:	e0bff117 	ldw	r2,-60(fp)
 100cc98:	1004c03a 	cmpne	r2,r2,zero
 100cc9c:	1000681e 	bne	r2,zero,100ce40 <find_file_in_directory+0x444>
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
				sector_index++) {
 100cca0:	e0bfef17 	ldw	r2,-68(fp)
 100cca4:	10800044 	addi	r2,r2,1
 100cca8:	e0bfef15 	stw	r2,-68(fp)
		int max_root_dir_sectors = ((32
				* boot_sector_data.max_number_of_dir_entires)
				/ boot_sector_data.sector_size_in_bytes);
		int sector_index;

		for (sector_index = 0; sector_index < max_root_dir_sectors;
 100ccac:	e0ffef17 	ldw	r3,-68(fp)
 100ccb0:	e0bff017 	ldw	r2,-64(fp)
 100ccb4:	18bfca16 	blt	r3,r2,100cbe0 <find_file_in_directory+0x1e4>
 100ccb8:	00006106 	br	100ce40 <find_file_in_directory+0x444>
		}
	} else {
		do {
			int start_sector = (cluster - 2)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
 100ccbc:	e0bff417 	ldw	r2,-48(fp)
 100ccc0:	10ffff84 	addi	r3,r2,-2
 100ccc4:	00804074 	movhi	r2,257
 100ccc8:	109cac04 	addi	r2,r2,29360
 100cccc:	10800383 	ldbu	r2,14(r2)
 100ccd0:	10803fcc 	andi	r2,r2,255
 100ccd4:	1885383a 	mul	r2,r3,r2
 100ccd8:	1007883a 	mov	r3,r2
 100ccdc:	00804074 	movhi	r2,257
 100cce0:	109cac04 	addi	r2,r2,29360
 100cce4:	10801417 	ldw	r2,80(r2)
 100cce8:	1885883a 	add	r2,r3,r2
 100ccec:	e0bfec15 	stw	r2,-80(fp)
			int sector_index;

			for (sector_index = 0;
 100ccf0:	e03feb15 	stw	zero,-84(fp)
					sector_index < boot_sector_data.sectors_per_cluster;
 100ccf4:	00003006 	br	100cdb8 <find_file_in_directory+0x3bc>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
 100ccf8:	e0ffeb17 	ldw	r3,-84(fp)
 100ccfc:	e0bfec17 	ldw	r2,-80(fp)
 100cd00:	1889883a 	add	r4,r3,r2
 100cd04:	d1675b17 	ldw	r5,-25236(gp)
 100cd08:	100ad140 	call	100ad14 <Read_Sector_Data>
 100cd0c:	1005003a 	cmpeq	r2,r2,zero
 100cd10:	10002f1e 	bne	r2,zero,100cdd0 <find_file_in_directory+0x3d4>
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100cd14:	e03fea15 	stw	zero,-88(fp)
 100cd18:	00001e06 	br	100cd94 <find_file_in_directory+0x398>
						// Read file record.
						Read_File_Record_At_Offset(file_counter * 32,
 100cd1c:	e0bfea17 	ldw	r2,-88(fp)
 100cd20:	1008917a 	slli	r4,r2,5
 100cd24:	e1bff417 	ldw	r6,-48(fp)
 100cd28:	e1ffeb17 	ldw	r7,-84(fp)
 100cd2c:	e17ffe17 	ldw	r5,-8(fp)
 100cd30:	100b15c0 	call	100b15c <Read_File_Record_At_Offset>
								file_record, cluster, sector_index);
						if ((file_record->name[0] != 0xe5)
 100cd34:	e0bffe17 	ldw	r2,-8(fp)
 100cd38:	10800003 	ldbu	r2,0(r2)
 100cd3c:	10803fcc 	andi	r2,r2,255
 100cd40:	10803960 	cmpeqi	r2,r2,229
 100cd44:	1000101e 	bne	r2,zero,100cd88 <find_file_in_directory+0x38c>
 100cd48:	e0bffe17 	ldw	r2,-8(fp)
 100cd4c:	10800003 	ldbu	r2,0(r2)
 100cd50:	10803fcc 	andi	r2,r2,255
 100cd54:	1005003a 	cmpeq	r2,r2,zero
 100cd58:	10000b1e 	bne	r2,zero,100cd88 <find_file_in_directory+0x38c>
								&& (file_record->name[0] != 0x00)) {
							bool match = match_file_record_to_name_ext(
									file_record, name, extension);
 100cd5c:	e17ff804 	addi	r5,fp,-32
 100cd60:	e1bffa04 	addi	r6,fp,-24
 100cd64:	e13ffe17 	ldw	r4,-8(fp)
 100cd68:	100c1fc0 	call	100c1fc <match_file_record_to_name_ext>
 100cd6c:	e0bfe915 	stw	r2,-92(fp)

							if (match) {
 100cd70:	e0bfe917 	ldw	r2,-92(fp)
 100cd74:	1005003a 	cmpeq	r2,r2,zero
 100cd78:	1000031e 	bne	r2,zero,100cd88 <find_file_in_directory+0x38c>
								result = true;
 100cd7c:	00800044 	movi	r2,1
 100cd80:	e0bff115 	stw	r2,-60(fp)
								break;
 100cd84:	00000606 	br	100cda0 <find_file_in_directory+0x3a4>
					sector_index++) {
				if (Read_Sector_Data(sector_index + start_sector,
						fat_partition_offset_in_512_byte_sectors)) {
					int file_counter;

					for (file_counter = 0; file_counter < 16; file_counter++) {
 100cd88:	e0bfea17 	ldw	r2,-88(fp)
 100cd8c:	10800044 	addi	r2,r2,1
 100cd90:	e0bfea15 	stw	r2,-88(fp)
 100cd94:	e0bfea17 	ldw	r2,-88(fp)
 100cd98:	10800410 	cmplti	r2,r2,16
 100cd9c:	103fdf1e 	bne	r2,zero,100cd1c <find_file_in_directory+0x320>
						}
					}
				} else {
					break;
				}
				if (result) {
 100cda0:	e0bff117 	ldw	r2,-60(fp)
 100cda4:	1004c03a 	cmpne	r2,r2,zero
 100cda8:	1000091e 	bne	r2,zero,100cdd0 <find_file_in_directory+0x3d4>
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
					sector_index++) {
 100cdac:	e0bfeb17 	ldw	r2,-84(fp)
 100cdb0:	10800044 	addi	r2,r2,1
 100cdb4:	e0bfeb15 	stw	r2,-84(fp)
					* (boot_sector_data.sectors_per_cluster)
					+ boot_sector_data.data_sector_offset;
			int sector_index;

			for (sector_index = 0;
					sector_index < boot_sector_data.sectors_per_cluster;
 100cdb8:	00804074 	movhi	r2,257
 100cdbc:	109cac04 	addi	r2,r2,29360
 100cdc0:	10800383 	ldbu	r2,14(r2)
 100cdc4:	10c03fcc 	andi	r3,r2,255
 100cdc8:	e0bfeb17 	ldw	r2,-84(fp)
 100cdcc:	10ffca16 	blt	r2,r3,100ccf8 <find_file_in_directory+0x2fc>
					break;
				}
			}
			// If this is the end of the cluster and the file has not been found, then see if there is another cluster
			// that holds data for the current directory.
			if (result == false) {
 100cdd0:	e0bff117 	ldw	r2,-60(fp)
 100cdd4:	1004c03a 	cmpne	r2,r2,zero
 100cdd8:	1000131e 	bne	r2,zero,100ce28 <find_file_in_directory+0x42c>
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster)) {
 100cddc:	e13ff417 	ldw	r4,-48(fp)
 100cde0:	e17ffb04 	addi	r5,fp,-20
 100cde4:	100ae100 	call	100ae10 <get_cluster_flag>
 100cde8:	1005003a 	cmpeq	r2,r2,zero
 100cdec:	10000c1e 	bne	r2,zero,100ce20 <find_file_in_directory+0x424>
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 100cdf0:	e0bffb0b 	ldhu	r2,-20(fp)
 100cdf4:	10bfffcc 	andi	r2,r2,65535
 100cdf8:	10fffe0c 	andi	r3,r2,65528
 100cdfc:	00bffe14 	movui	r2,65528
 100ce00:	1880021e 	bne	r3,r2,100ce0c <find_file_in_directory+0x410>
						return false;
 100ce04:	e03fff15 	stw	zero,-4(fp)
 100ce08:	00000f06 	br	100ce48 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 100ce0c:	e0bffb0b 	ldhu	r2,-20(fp)
 100ce10:	10bfffcc 	andi	r2,r2,65535
 100ce14:	10bffe0c 	andi	r2,r2,65528
 100ce18:	e0bff415 	stw	r2,-48(fp)
 100ce1c:	00000206 	br	100ce28 <find_file_in_directory+0x42c>
				} else {
					// Directory path is invalid.
					return false;
 100ce20:	e03fff15 	stw	zero,-4(fp)
 100ce24:	00000806 	br	100ce48 <find_file_in_directory+0x44c>
				}
			}
		} while ((cluster < 0x0000fff8) && (result == false));
 100ce28:	e0fff417 	ldw	r3,-48(fp)
 100ce2c:	00bffdd4 	movui	r2,65527
 100ce30:	10c00316 	blt	r2,r3,100ce40 <find_file_in_directory+0x444>
 100ce34:	e0bff117 	ldw	r2,-60(fp)
 100ce38:	1005003a 	cmpeq	r2,r2,zero
 100ce3c:	103f9f1e 	bne	r2,zero,100ccbc <find_file_in_directory+0x2c0>
	}

	return result;
 100ce40:	e0bff117 	ldw	r2,-60(fp)
 100ce44:	e0bfff15 	stw	r2,-4(fp)
 100ce48:	e0bfff17 	ldw	r2,-4(fp)
}
 100ce4c:	e037883a 	mov	sp,fp
 100ce50:	dfc00117 	ldw	ra,4(sp)
 100ce54:	df000017 	ldw	fp,0(sp)
 100ce58:	dec00204 	addi	sp,sp,8
 100ce5c:	f800283a 	ret

0100ce60 <find_first_empty_cluster>:

bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 100ce60:	defff504 	addi	sp,sp,-44
 100ce64:	dfc00a15 	stw	ra,40(sp)
 100ce68:	df000915 	stw	fp,36(sp)
 100ce6c:	df000904 	addi	fp,sp,36
 100ce70:	e13fff15 	stw	r4,-4(fp)
	unsigned int sector = boot_sector_data.first_fat_sector_offset;
 100ce74:	00804074 	movhi	r2,257
 100ce78:	109cac04 	addi	r2,r2,29360
 100ce7c:	10801117 	ldw	r2,68(r2)
 100ce80:	e0bffe15 	stw	r2,-8(fp)
	unsigned int cluster_index = 2;
 100ce84:	00800084 	movi	r2,2
 100ce88:	e0bffd15 	stw	r2,-12(fp)
	short int cluster = -1;
 100ce8c:	00bfffc4 	movi	r2,-1
 100ce90:	e0bffc0d 	sth	r2,-16(fp)
	bool result = false;
 100ce94:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 100ce98:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 100ce9c:	00804074 	movhi	r2,257
 100cea0:	109cac04 	addi	r2,r2,29360
 100cea4:	10801417 	ldw	r2,80(r2)
 100cea8:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 100ceac:	00804074 	movhi	r2,257
 100ceb0:	109cac04 	addi	r2,r2,29360
 100ceb4:	1080058b 	ldhu	r2,22(r2)
 100ceb8:	10bfffcc 	andi	r2,r2,65535
 100cebc:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 =
			boot_sector_data.total_sector_count_if_above_32MB;
 100cec0:	00804074 	movhi	r2,257
 100cec4:	109cac04 	addi	r2,r2,29360
 100cec8:	10800917 	ldw	r2,36(r2)
 100cecc:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32) {
 100ced0:	e0fff817 	ldw	r3,-32(fp)
 100ced4:	e0bff717 	ldw	r2,-36(fp)
 100ced8:	10c00b2e 	bgeu	r2,r3,100cf08 <find_first_empty_cluster+0xa8>
		max_cluster_index = ((less_than_32 - non_data_sectors)
 100cedc:	e0fff817 	ldw	r3,-32(fp)
 100cee0:	e0bff917 	ldw	r2,-28(fp)
 100cee4:	1887c83a 	sub	r3,r3,r2
 100cee8:	00804074 	movhi	r2,257
 100ceec:	109cac04 	addi	r2,r2,29360
 100cef0:	10800383 	ldbu	r2,14(r2)
 100cef4:	10803fcc 	andi	r2,r2,255
 100cef8:	1885203a 	divu	r2,r3,r2
 100cefc:	10800044 	addi	r2,r2,1
 100cf00:	e0bffa15 	stw	r2,-24(fp)
 100cf04:	00002906 	br	100cfac <find_first_empty_cluster+0x14c>
				/ boot_sector_data.sectors_per_cluster) + 1;
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
 100cf08:	e0fff717 	ldw	r3,-36(fp)
 100cf0c:	e0bff917 	ldw	r2,-28(fp)
 100cf10:	1887c83a 	sub	r3,r3,r2
 100cf14:	00804074 	movhi	r2,257
 100cf18:	109cac04 	addi	r2,r2,29360
 100cf1c:	10800383 	ldbu	r2,14(r2)
 100cf20:	10803fcc 	andi	r2,r2,255
 100cf24:	1885203a 	divu	r2,r3,r2
 100cf28:	10800044 	addi	r2,r2,1
 100cf2c:	e0bffa15 	stw	r2,-24(fp)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 100cf30:	00001e06 	br	100cfac <find_first_empty_cluster+0x14c>
		if (Read_Sector_Data(sector,
 100cf34:	e13ffe17 	ldw	r4,-8(fp)
 100cf38:	d1675b17 	ldw	r5,-25236(gp)
 100cf3c:	100ad140 	call	100ad14 <Read_Sector_Data>
 100cf40:	1005003a 	cmpeq	r2,r2,zero
 100cf44:	1000131e 	bne	r2,zero,100cf94 <find_first_empty_cluster+0x134>
				fat_partition_offset_in_512_byte_sectors)) {
			do {
				cluster =
 100cf48:	d0a75d17 	ldw	r2,-25228(gp)
 100cf4c:	10800a17 	ldw	r2,40(r2)
 100cf50:	1007883a 	mov	r3,r2
 100cf54:	e0bffd17 	ldw	r2,-12(fp)
 100cf58:	10803fcc 	andi	r2,r2,255
 100cf5c:	1085883a 	add	r2,r2,r2
 100cf60:	1885883a 	add	r2,r3,r2
 100cf64:	1080002b 	ldhuio	r2,0(r2)
 100cf68:	e0bffc0d 	sth	r2,-16(fp)
						((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
				if (cluster == 0) {
 100cf6c:	e0bffc0f 	ldh	r2,-16(fp)
 100cf70:	1005003a 	cmpeq	r2,r2,zero
 100cf74:	1000071e 	bne	r2,zero,100cf94 <find_first_empty_cluster+0x134>
					// Free cluster found.
					break;
				} else {
					cluster_index++;
 100cf78:	e0bffd17 	ldw	r2,-12(fp)
 100cf7c:	10800044 	addi	r2,r2,1
 100cf80:	e0bffd15 	stw	r2,-12(fp)
				}
			} while ((cluster_index % 256) != 0);
 100cf84:	e0bffd17 	ldw	r2,-12(fp)
 100cf88:	10803fcc 	andi	r2,r2,255
 100cf8c:	1004c03a 	cmpne	r2,r2,zero
 100cf90:	103fed1e 	bne	r2,zero,100cf48 <find_first_empty_cluster+0xe8>
		}
		if (cluster == 0) {
 100cf94:	e0bffc0f 	ldh	r2,-16(fp)
 100cf98:	1005003a 	cmpeq	r2,r2,zero
 100cf9c:	1000081e 	bne	r2,zero,100cfc0 <find_first_empty_cluster+0x160>
			break;
		}
		sector++;
 100cfa0:	e0bffe17 	ldw	r2,-8(fp)
 100cfa4:	10800044 	addi	r2,r2,1
 100cfa8:	e0bffe15 	stw	r2,-8(fp)
	} else {
		max_cluster_index = ((greater_than_32 - non_data_sectors)
				/ boot_sector_data.sectors_per_cluster) + 1;
	}
	// Find an empty cluster for the file.
	while (sector != boot_sector_data.second_fat_sector_offset) {
 100cfac:	00804074 	movhi	r2,257
 100cfb0:	109cac04 	addi	r2,r2,29360
 100cfb4:	10c01217 	ldw	r3,72(r2)
 100cfb8:	e0bffe17 	ldw	r2,-8(fp)
 100cfbc:	18bfdd1e 	bne	r3,r2,100cf34 <find_first_empty_cluster+0xd4>
		if (cluster == 0) {
			break;
		}
		sector++;
	}
	if ((cluster == 0) && (cluster <= max_cluster_index)) {
 100cfc0:	e0bffc0f 	ldh	r2,-16(fp)
 100cfc4:	1004c03a 	cmpne	r2,r2,zero
 100cfc8:	1000081e 	bne	r2,zero,100cfec <find_first_empty_cluster+0x18c>
 100cfcc:	e0fffc0f 	ldh	r3,-16(fp)
 100cfd0:	e0bffa17 	ldw	r2,-24(fp)
 100cfd4:	10c00536 	bltu	r2,r3,100cfec <find_first_empty_cluster+0x18c>
		*cluster_number = cluster_index;
 100cfd8:	e0bfff17 	ldw	r2,-4(fp)
 100cfdc:	e0fffd17 	ldw	r3,-12(fp)
 100cfe0:	10c00015 	stw	r3,0(r2)
		result = true;
 100cfe4:	00800044 	movi	r2,1
 100cfe8:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 100cfec:	e0bffb17 	ldw	r2,-20(fp)
}
 100cff0:	e037883a 	mov	sp,fp
 100cff4:	dfc00117 	ldw	ra,4(sp)
 100cff8:	df000017 	ldw	fp,0(sp)
 100cffc:	dec00204 	addi	sp,sp,8
 100d000:	f800283a 	ret

0100d004 <find_first_empty_record_in_a_subdirectory>:

int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 100d004:	defff404 	addi	sp,sp,-48
 100d008:	dfc00b15 	stw	ra,44(sp)
 100d00c:	df000a15 	stw	fp,40(sp)
 100d010:	df000a04 	addi	fp,sp,40
 100d014:	e13ffe15 	stw	r4,-8(fp)
	int result = -1;
 100d018:	00bfffc4 	movi	r2,-1
 100d01c:	e0bffb15 	stw	r2,-20(fp)
	int cluster = start_cluster_index;
 100d020:	e0bffe17 	ldw	r2,-8(fp)
 100d024:	e0bffa15 	stw	r2,-24(fp)
	do {
		int start_sector = (cluster - 2)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
 100d028:	e0bffa17 	ldw	r2,-24(fp)
 100d02c:	10ffff84 	addi	r3,r2,-2
 100d030:	00804074 	movhi	r2,257
 100d034:	109cac04 	addi	r2,r2,29360
 100d038:	10800383 	ldbu	r2,14(r2)
 100d03c:	10803fcc 	andi	r2,r2,255
 100d040:	1885383a 	mul	r2,r3,r2
 100d044:	1007883a 	mov	r3,r2
 100d048:	00804074 	movhi	r2,257
 100d04c:	109cac04 	addi	r2,r2,29360
 100d050:	10801417 	ldw	r2,80(r2)
 100d054:	1885883a 	add	r2,r3,r2
 100d058:	e0bff915 	stw	r2,-28(fp)
		int sector_index;

		for (sector_index = 0;
 100d05c:	e03ff815 	stw	zero,-32(fp)
				sector_index < boot_sector_data.sectors_per_cluster;
 100d060:	00002c06 	br	100d114 <find_first_empty_record_in_a_subdirectory+0x110>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
 100d064:	e0fff817 	ldw	r3,-32(fp)
 100d068:	e0bff917 	ldw	r2,-28(fp)
 100d06c:	1889883a 	add	r4,r3,r2
 100d070:	d1675b17 	ldw	r5,-25236(gp)
 100d074:	100ad140 	call	100ad14 <Read_Sector_Data>
 100d078:	1005003a 	cmpeq	r2,r2,zero
 100d07c:	10002b1e 	bne	r2,zero,100d12c <find_first_empty_record_in_a_subdirectory+0x128>
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100d080:	e03ff715 	stw	zero,-36(fp)
 100d084:	00001d06 	br	100d0fc <find_first_empty_record_in_a_subdirectory+0xf8>
					unsigned short int leading_char;

					// Read file record.
					leading_char =
 100d088:	d0a75d17 	ldw	r2,-25228(gp)
 100d08c:	10800a17 	ldw	r2,40(r2)
 100d090:	1007883a 	mov	r3,r2
 100d094:	e0bff717 	ldw	r2,-36(fp)
 100d098:	1004917a 	slli	r2,r2,5
 100d09c:	1885883a 	add	r2,r3,r2
 100d0a0:	10800023 	ldbuio	r2,0(r2)
 100d0a4:	10803fcc 	andi	r2,r2,255
 100d0a8:	e0bff60d 	sth	r2,-40(fp)
							((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
					if ((leading_char == 0x00e5) || (leading_char == 0)) {
 100d0ac:	e0bff60b 	ldhu	r2,-40(fp)
 100d0b0:	10803960 	cmpeqi	r2,r2,229
 100d0b4:	1000031e 	bne	r2,zero,100d0c4 <find_first_empty_record_in_a_subdirectory+0xc0>
 100d0b8:	e0bff60b 	ldhu	r2,-40(fp)
 100d0bc:	1004c03a 	cmpne	r2,r2,zero
 100d0c0:	10000b1e 	bne	r2,zero,100d0f0 <find_first_empty_record_in_a_subdirectory+0xec>
						result = (cluster)
 100d0c4:	e0bff817 	ldw	r2,-32(fp)
 100d0c8:	1006913a 	slli	r3,r2,4
 100d0cc:	e0bff717 	ldw	r2,-36(fp)
 100d0d0:	1885883a 	add	r2,r3,r2
 100d0d4:	1006943a 	slli	r3,r2,16
 100d0d8:	e0bffa17 	ldw	r2,-24(fp)
 100d0dc:	1884b03a 	or	r2,r3,r2
 100d0e0:	e0bffb15 	stw	r2,-20(fp)
								| ((sector_index * 16 + file_counter) << 16);
						return result;
 100d0e4:	e0bffb17 	ldw	r2,-20(fp)
 100d0e8:	e0bfff15 	stw	r2,-4(fp)
 100d0ec:	00005206 	br	100d238 <find_first_empty_record_in_a_subdirectory+0x234>
				sector_index++) {
			if (Read_Sector_Data(sector_index + start_sector,
					fat_partition_offset_in_512_byte_sectors)) {
				int file_counter;

				for (file_counter = 0; file_counter < 16; file_counter++) {
 100d0f0:	e0bff717 	ldw	r2,-36(fp)
 100d0f4:	10800044 	addi	r2,r2,1
 100d0f8:	e0bff715 	stw	r2,-36(fp)
 100d0fc:	e0bff717 	ldw	r2,-36(fp)
 100d100:	10800410 	cmplti	r2,r2,16
 100d104:	103fe01e 	bne	r2,zero,100d088 <find_first_empty_record_in_a_subdirectory+0x84>
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
				sector_index++) {
 100d108:	e0bff817 	ldw	r2,-32(fp)
 100d10c:	10800044 	addi	r2,r2,1
 100d110:	e0bff815 	stw	r2,-32(fp)
				* (boot_sector_data.sectors_per_cluster)
				+ boot_sector_data.data_sector_offset;
		int sector_index;

		for (sector_index = 0;
				sector_index < boot_sector_data.sectors_per_cluster;
 100d114:	00804074 	movhi	r2,257
 100d118:	109cac04 	addi	r2,r2,29360
 100d11c:	10800383 	ldbu	r2,14(r2)
 100d120:	10c03fcc 	andi	r3,r2,255
 100d124:	e0bff817 	ldw	r2,-32(fp)
 100d128:	10ffce16 	blt	r2,r3,100d064 <find_first_empty_record_in_a_subdirectory+0x60>
				break;
			}
		}
		// If this is the end of the cluster and the file has not been found, then see if there is another cluster
		// that holds data for the current directory.
		if (result < 0) {
 100d12c:	e0bffb17 	ldw	r2,-20(fp)
 100d130:	1004403a 	cmpge	r2,r2,zero
 100d134:	1000381e 	bne	r2,zero,100d218 <find_first_empty_record_in_a_subdirectory+0x214>
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster)) {
 100d138:	e13ffa17 	ldw	r4,-24(fp)
 100d13c:	e17ffc04 	addi	r5,fp,-16
 100d140:	100ae100 	call	100ae10 <get_cluster_flag>
 100d144:	1005003a 	cmpeq	r2,r2,zero
 100d148:	1000311e 	bne	r2,zero,100d210 <find_first_empty_record_in_a_subdirectory+0x20c>
				// The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 100d14c:	e0bffc0b 	ldhu	r2,-16(fp)
 100d150:	10bfffcc 	andi	r2,r2,65535
 100d154:	10fffe0c 	andi	r3,r2,65528
 100d158:	00bffe14 	movui	r2,65528
 100d15c:	18802e1e 	bne	r3,r2,100d218 <find_first_empty_record_in_a_subdirectory+0x214>
					int new_dir_cluster;
					if (find_first_empty_cluster(&new_dir_cluster)) {
 100d160:	e13ffd04 	addi	r4,fp,-12
 100d164:	100ce600 	call	100ce60 <find_first_empty_cluster>
 100d168:	1005003a 	cmpeq	r2,r2,zero
 100d16c:	1000231e 	bne	r2,zero,100d1fc <find_first_empty_record_in_a_subdirectory+0x1f8>
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster,
 100d170:	e13ffa17 	ldw	r4,-24(fp)
 100d174:	e0bffd17 	ldw	r2,-12(fp)
 100d178:	117fffcc 	andi	r5,r2,65535
 100d17c:	2960001c 	xori	r5,r5,32768
 100d180:	29600004 	addi	r5,r5,-32768
 100d184:	01800044 	movi	r6,1
 100d188:	100aec80 	call	100aec8 <mark_cluster>
 100d18c:	1005003a 	cmpeq	r2,r2,zero
 100d190:	10001a1e 	bne	r2,zero,100d1fc <find_first_empty_record_in_a_subdirectory+0x1f8>
 100d194:	e0bffd17 	ldw	r2,-12(fp)
 100d198:	1009883a 	mov	r4,r2
 100d19c:	017fffc4 	movi	r5,-1
 100d1a0:	01800044 	movi	r6,1
 100d1a4:	100aec80 	call	100aec8 <mark_cluster>
 100d1a8:	1005003a 	cmpeq	r2,r2,zero
 100d1ac:	1000131e 	bne	r2,zero,100d1fc <find_first_empty_record_in_a_subdirectory+0x1f8>
 100d1b0:	e13ffa17 	ldw	r4,-24(fp)
 100d1b4:	e0bffd17 	ldw	r2,-12(fp)
 100d1b8:	117fffcc 	andi	r5,r2,65535
 100d1bc:	2960001c 	xori	r5,r5,32768
 100d1c0:	29600004 	addi	r5,r5,-32768
 100d1c4:	000d883a 	mov	r6,zero
 100d1c8:	100aec80 	call	100aec8 <mark_cluster>
 100d1cc:	1005003a 	cmpeq	r2,r2,zero
 100d1d0:	10000a1e 	bne	r2,zero,100d1fc <find_first_empty_record_in_a_subdirectory+0x1f8>
 100d1d4:	e0bffd17 	ldw	r2,-12(fp)
 100d1d8:	1009883a 	mov	r4,r2
 100d1dc:	017fffc4 	movi	r5,-1
 100d1e0:	000d883a 	mov	r6,zero
 100d1e4:	100aec80 	call	100aec8 <mark_cluster>
 100d1e8:	1005003a 	cmpeq	r2,r2,zero
 100d1ec:	1000031e 	bne	r2,zero,100d1fc <find_first_empty_record_in_a_subdirectory+0x1f8>
										((short int) (0xffff)), true)
								&& mark_cluster(cluster,
										((short int) (new_dir_cluster)), false)
								&& mark_cluster(new_dir_cluster,
										((short int) (0xffff)), false)) {
							Save_Modified_Sector();
 100d1f0:	100acc40 	call	100acc4 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;
 100d1f4:	e0bffd17 	ldw	r2,-12(fp)
 100d1f8:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 100d1fc:	e0bffc0b 	ldhu	r2,-16(fp)
 100d200:	10bfffcc 	andi	r2,r2,65535
 100d204:	10bffe0c 	andi	r2,r2,65528
 100d208:	e0bffa15 	stw	r2,-24(fp)
 100d20c:	00000206 	br	100d218 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			} else {
				// Error encountered.                 
				result = -1;
 100d210:	00bfffc4 	movi	r2,-1
 100d214:	e0bffb15 	stw	r2,-20(fp)
			}
		}
	} while ((cluster < 0x0000fff8) && (result == -1));
 100d218:	e0fffa17 	ldw	r3,-24(fp)
 100d21c:	00bffdd4 	movui	r2,65527
 100d220:	10c00316 	blt	r2,r3,100d230 <find_first_empty_record_in_a_subdirectory+0x22c>
 100d224:	e0bffb17 	ldw	r2,-20(fp)
 100d228:	10bfffe0 	cmpeqi	r2,r2,-1
 100d22c:	103f7e1e 	bne	r2,zero,100d028 <find_first_empty_record_in_a_subdirectory+0x24>
	return result;
 100d230:	e0bffb17 	ldw	r2,-20(fp)
 100d234:	e0bfff15 	stw	r2,-4(fp)
 100d238:	e0bfff17 	ldw	r2,-4(fp)
}
 100d23c:	e037883a 	mov	sp,fp
 100d240:	dfc00117 	ldw	ra,4(sp)
 100d244:	df000017 	ldw	fp,0(sp)
 100d248:	dec00204 	addi	sp,sp,8
 100d24c:	f800283a 	ret

0100d250 <find_first_empty_record_in_root_directory>:

int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 100d250:	defff804 	addi	sp,sp,-32
 100d254:	dfc00715 	stw	ra,28(sp)
 100d258:	df000615 	stw	fp,24(sp)
 100d25c:	df000604 	addi	fp,sp,24
	int max_root_dir_sectors =
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
 100d260:	00804074 	movhi	r2,257
 100d264:	109cac04 	addi	r2,r2,29360
 100d268:	1080050b 	ldhu	r2,20(r2)
 100d26c:	10bfffcc 	andi	r2,r2,65535
 100d270:	1006917a 	slli	r3,r2,5
 100d274:	00804074 	movhi	r2,257
 100d278:	109cac04 	addi	r2,r2,29360
 100d27c:	1080030b 	ldhu	r2,12(r2)
 100d280:	10bfffcc 	andi	r2,r2,65535
 100d284:	1885283a 	div	r2,r3,r2
 100d288:	e0bffe15 	stw	r2,-8(fp)
	int sector_index;
	int result = -1;
 100d28c:	00bfffc4 	movi	r2,-1
 100d290:	e0bffc15 	stw	r2,-16(fp)

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 100d294:	e03ffd15 	stw	zero,-12(fp)
 100d298:	00002d06 	br	100d350 <find_first_empty_record_in_root_directory+0x100>
			sector_index++) {
		if (Read_Sector_Data(
 100d29c:	00804074 	movhi	r2,257
 100d2a0:	109cac04 	addi	r2,r2,29360
 100d2a4:	10c01317 	ldw	r3,76(r2)
 100d2a8:	e0bffd17 	ldw	r2,-12(fp)
 100d2ac:	1885883a 	add	r2,r3,r2
 100d2b0:	1009883a 	mov	r4,r2
 100d2b4:	d1675b17 	ldw	r5,-25236(gp)
 100d2b8:	100ad140 	call	100ad14 <Read_Sector_Data>
 100d2bc:	1005003a 	cmpeq	r2,r2,zero
 100d2c0:	1000261e 	bne	r2,zero,100d35c <find_first_empty_record_in_root_directory+0x10c>
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 100d2c4:	e03ffb15 	stw	zero,-20(fp)
 100d2c8:	00001b06 	br	100d338 <find_first_empty_record_in_root_directory+0xe8>
				unsigned short int leading_char;

				// Read first character of the file record.
				leading_char =
 100d2cc:	d0a75d17 	ldw	r2,-25228(gp)
 100d2d0:	10800a17 	ldw	r2,40(r2)
 100d2d4:	1007883a 	mov	r3,r2
 100d2d8:	e0bffb17 	ldw	r2,-20(fp)
 100d2dc:	1004917a 	slli	r2,r2,5
 100d2e0:	1885883a 	add	r2,r3,r2
 100d2e4:	10800023 	ldbuio	r2,0(r2)
 100d2e8:	10803fcc 	andi	r2,r2,255
 100d2ec:	e0bffa0d 	sth	r2,-24(fp)
						((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
				if ((leading_char == 0x00e5) || (leading_char == 0)) {
 100d2f0:	e0bffa0b 	ldhu	r2,-24(fp)
 100d2f4:	10803960 	cmpeqi	r2,r2,229
 100d2f8:	1000031e 	bne	r2,zero,100d308 <find_first_empty_record_in_root_directory+0xb8>
 100d2fc:	e0bffa0b 	ldhu	r2,-24(fp)
 100d300:	1004c03a 	cmpne	r2,r2,zero
 100d304:	1000091e 	bne	r2,zero,100d32c <find_first_empty_record_in_root_directory+0xdc>
					result = (sector_index * 16 + file_counter) << 16;
 100d308:	e0bffd17 	ldw	r2,-12(fp)
 100d30c:	1006913a 	slli	r3,r2,4
 100d310:	e0bffb17 	ldw	r2,-20(fp)
 100d314:	1885883a 	add	r2,r3,r2
 100d318:	1004943a 	slli	r2,r2,16
 100d31c:	e0bffc15 	stw	r2,-16(fp)
					return result;
 100d320:	e0bffc17 	ldw	r2,-16(fp)
 100d324:	e0bfff15 	stw	r2,-4(fp)
 100d328:	00000e06 	br	100d364 <find_first_empty_record_in_root_directory+0x114>
		if (Read_Sector_Data(
				sector_index + boot_sector_data.root_directory_sector_offset,
				fat_partition_offset_in_512_byte_sectors)) {
			int file_counter;

			for (file_counter = 0; file_counter < 16; file_counter++) {
 100d32c:	e0bffb17 	ldw	r2,-20(fp)
 100d330:	10800044 	addi	r2,r2,1
 100d334:	e0bffb15 	stw	r2,-20(fp)
 100d338:	e0bffb17 	ldw	r2,-20(fp)
 100d33c:	10800410 	cmplti	r2,r2,16
 100d340:	103fe21e 	bne	r2,zero,100d2cc <find_first_empty_record_in_root_directory+0x7c>
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
			sector_index++) {
 100d344:	e0bffd17 	ldw	r2,-12(fp)
 100d348:	10800044 	addi	r2,r2,1
 100d34c:	e0bffd15 	stw	r2,-12(fp)
			((32 * boot_sector_data.max_number_of_dir_entires)
					/ boot_sector_data.sector_size_in_bytes);
	int sector_index;
	int result = -1;

	for (sector_index = 0; sector_index < max_root_dir_sectors;
 100d350:	e0fffd17 	ldw	r3,-12(fp)
 100d354:	e0bffe17 	ldw	r2,-8(fp)
 100d358:	18bfd016 	blt	r3,r2,100d29c <find_first_empty_record_in_root_directory+0x4c>
			}
		} else {
			break;
		}
	}
	return result;
 100d35c:	e0bffc17 	ldw	r2,-16(fp)
 100d360:	e0bfff15 	stw	r2,-4(fp)
 100d364:	e0bfff17 	ldw	r2,-4(fp)
}
 100d368:	e037883a 	mov	sp,fp
 100d36c:	dfc00117 	ldw	ra,4(sp)
 100d370:	df000017 	ldw	fp,0(sp)
 100d374:	dec00204 	addi	sp,sp,8
 100d378:	f800283a 	ret

0100d37c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name,
		char *extension)
// This function converts the file name into a name . extension format.
{
 100d37c:	defffa04 	addi	sp,sp,-24
 100d380:	df000515 	stw	fp,20(sp)
 100d384:	df000504 	addi	fp,sp,20
 100d388:	e13ffd15 	stw	r4,-12(fp)
 100d38c:	e17ffe15 	stw	r5,-8(fp)
 100d390:	e1bfff15 	stw	r6,-4(fp)
	int counter;
	int local = 0;
 100d394:	e03ffb15 	stw	zero,-20(fp)

	for (counter = 0; counter < 8; counter++) {
 100d398:	e03ffc15 	stw	zero,-16(fp)
 100d39c:	00002b06 	br	100d44c <convert_filename_to_name_extension+0xd0>
		if (filename[local] != '.') {
 100d3a0:	e0bffb17 	ldw	r2,-20(fp)
 100d3a4:	1007883a 	mov	r3,r2
 100d3a8:	e0bffd17 	ldw	r2,-12(fp)
 100d3ac:	1885883a 	add	r2,r3,r2
 100d3b0:	10800003 	ldbu	r2,0(r2)
 100d3b4:	10803fcc 	andi	r2,r2,255
 100d3b8:	1080201c 	xori	r2,r2,128
 100d3bc:	10bfe004 	addi	r2,r2,-128
 100d3c0:	10800ba0 	cmpeqi	r2,r2,46
 100d3c4:	1000181e 	bne	r2,zero,100d428 <convert_filename_to_name_extension+0xac>
			name[counter] = filename[local];
 100d3c8:	e0bffc17 	ldw	r2,-16(fp)
 100d3cc:	1007883a 	mov	r3,r2
 100d3d0:	e0bffe17 	ldw	r2,-8(fp)
 100d3d4:	1889883a 	add	r4,r3,r2
 100d3d8:	e0bffb17 	ldw	r2,-20(fp)
 100d3dc:	1007883a 	mov	r3,r2
 100d3e0:	e0bffd17 	ldw	r2,-12(fp)
 100d3e4:	1885883a 	add	r2,r3,r2
 100d3e8:	10800003 	ldbu	r2,0(r2)
 100d3ec:	20800005 	stb	r2,0(r4)
			if (filename[local] != 0)
 100d3f0:	e0bffb17 	ldw	r2,-20(fp)
 100d3f4:	1007883a 	mov	r3,r2
 100d3f8:	e0bffd17 	ldw	r2,-12(fp)
 100d3fc:	1885883a 	add	r2,r3,r2
 100d400:	10800003 	ldbu	r2,0(r2)
 100d404:	10803fcc 	andi	r2,r2,255
 100d408:	1080201c 	xori	r2,r2,128
 100d40c:	10bfe004 	addi	r2,r2,-128
 100d410:	1005003a 	cmpeq	r2,r2,zero
 100d414:	10000a1e 	bne	r2,zero,100d440 <convert_filename_to_name_extension+0xc4>
				local++;
 100d418:	e0bffb17 	ldw	r2,-20(fp)
 100d41c:	10800044 	addi	r2,r2,1
 100d420:	e0bffb15 	stw	r2,-20(fp)
 100d424:	00000606 	br	100d440 <convert_filename_to_name_extension+0xc4>
		} else {
			name[counter] = ' ';
 100d428:	e0bffc17 	ldw	r2,-16(fp)
 100d42c:	1007883a 	mov	r3,r2
 100d430:	e0bffe17 	ldw	r2,-8(fp)
 100d434:	1887883a 	add	r3,r3,r2
 100d438:	00800804 	movi	r2,32
 100d43c:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
	int counter;
	int local = 0;

	for (counter = 0; counter < 8; counter++) {
 100d440:	e0bffc17 	ldw	r2,-16(fp)
 100d444:	10800044 	addi	r2,r2,1
 100d448:	e0bffc15 	stw	r2,-16(fp)
 100d44c:	e0bffc17 	ldw	r2,-16(fp)
 100d450:	10800210 	cmplti	r2,r2,8
 100d454:	103fd21e 	bne	r2,zero,100d3a0 <convert_filename_to_name_extension+0x24>
				local++;
		} else {
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
 100d458:	e0bffb17 	ldw	r2,-20(fp)
 100d45c:	1007883a 	mov	r3,r2
 100d460:	e0bffd17 	ldw	r2,-12(fp)
 100d464:	1885883a 	add	r2,r3,r2
 100d468:	10800003 	ldbu	r2,0(r2)
 100d46c:	10803fcc 	andi	r2,r2,255
 100d470:	1080201c 	xori	r2,r2,128
 100d474:	10bfe004 	addi	r2,r2,-128
 100d478:	10800b98 	cmpnei	r2,r2,46
 100d47c:	1000031e 	bne	r2,zero,100d48c <convert_filename_to_name_extension+0x110>
		local++;
 100d480:	e0bffb17 	ldw	r2,-20(fp)
 100d484:	10800044 	addi	r2,r2,1
 100d488:	e0bffb15 	stw	r2,-20(fp)
	for (counter = 0; counter < 3; counter++) {
 100d48c:	e03ffc15 	stw	zero,-16(fp)
 100d490:	00002106 	br	100d518 <convert_filename_to_name_extension+0x19c>
		if (filename[local] != 0) {
 100d494:	e0bffb17 	ldw	r2,-20(fp)
 100d498:	1007883a 	mov	r3,r2
 100d49c:	e0bffd17 	ldw	r2,-12(fp)
 100d4a0:	1885883a 	add	r2,r3,r2
 100d4a4:	10800003 	ldbu	r2,0(r2)
 100d4a8:	10803fcc 	andi	r2,r2,255
 100d4ac:	1080201c 	xori	r2,r2,128
 100d4b0:	10bfe004 	addi	r2,r2,-128
 100d4b4:	1005003a 	cmpeq	r2,r2,zero
 100d4b8:	10000e1e 	bne	r2,zero,100d4f4 <convert_filename_to_name_extension+0x178>
			extension[counter] = filename[local];
 100d4bc:	e0bffc17 	ldw	r2,-16(fp)
 100d4c0:	1007883a 	mov	r3,r2
 100d4c4:	e0bfff17 	ldw	r2,-4(fp)
 100d4c8:	1889883a 	add	r4,r3,r2
 100d4cc:	e0bffb17 	ldw	r2,-20(fp)
 100d4d0:	1007883a 	mov	r3,r2
 100d4d4:	e0bffd17 	ldw	r2,-12(fp)
 100d4d8:	1885883a 	add	r2,r3,r2
 100d4dc:	10800003 	ldbu	r2,0(r2)
 100d4e0:	20800005 	stb	r2,0(r4)
			local++;
 100d4e4:	e0bffb17 	ldw	r2,-20(fp)
 100d4e8:	10800044 	addi	r2,r2,1
 100d4ec:	e0bffb15 	stw	r2,-20(fp)
 100d4f0:	00000606 	br	100d50c <convert_filename_to_name_extension+0x190>
		} else {
			extension[counter] = ' ';
 100d4f4:	e0bffc17 	ldw	r2,-16(fp)
 100d4f8:	1007883a 	mov	r3,r2
 100d4fc:	e0bfff17 	ldw	r2,-4(fp)
 100d500:	1887883a 	add	r3,r3,r2
 100d504:	00800804 	movi	r2,32
 100d508:	18800005 	stb	r2,0(r3)
			name[counter] = ' ';
		}
	}
	if (filename[local] == '.')
		local++;
	for (counter = 0; counter < 3; counter++) {
 100d50c:	e0bffc17 	ldw	r2,-16(fp)
 100d510:	10800044 	addi	r2,r2,1
 100d514:	e0bffc15 	stw	r2,-16(fp)
 100d518:	e0bffc17 	ldw	r2,-16(fp)
 100d51c:	108000d0 	cmplti	r2,r2,3
 100d520:	103fdc1e 	bne	r2,zero,100d494 <convert_filename_to_name_extension+0x118>
		} else {
			extension[counter] = ' ';
		}
	}

}
 100d524:	e037883a 	mov	sp,fp
 100d528:	df000017 	ldw	fp,0(sp)
 100d52c:	dec00104 	addi	sp,sp,4
 100d530:	f800283a 	ret

0100d534 <create_file>:

bool create_file(char *name, t_file_record *file_record,
		t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 100d534:	defff304 	addi	sp,sp,-52
 100d538:	dfc00c15 	stw	ra,48(sp)
 100d53c:	df000b15 	stw	fp,44(sp)
 100d540:	df000b04 	addi	fp,sp,44
 100d544:	e13ffb15 	stw	r4,-20(fp)
 100d548:	e17ffc15 	stw	r5,-16(fp)
 100d54c:	e1bffd15 	stw	r6,-12(fp)
	unsigned int cluster_number;
	bool result = false;
 100d550:	e03ff915 	stw	zero,-28(fp)

	if (find_first_empty_cluster(&cluster_number)) {
 100d554:	e13ffa04 	addi	r4,fp,-24
 100d558:	100ce600 	call	100ce60 <find_first_empty_cluster>
 100d55c:	1005003a 	cmpeq	r2,r2,zero
 100d560:	1000a31e 	bne	r2,zero,100d7f0 <create_file+0x2bc>
		int record_index;

		if (home_dir->file_record_cluster == 0) {
 100d564:	e0bffd17 	ldw	r2,-12(fp)
 100d568:	10800a17 	ldw	r2,40(r2)
 100d56c:	1004c03a 	cmpne	r2,r2,zero
 100d570:	1000031e 	bne	r2,zero,100d580 <create_file+0x4c>
			// Put a file in the root directory.
			record_index = find_first_empty_record_in_root_directory();
 100d574:	100d2500 	call	100d250 <find_first_empty_record_in_root_directory>
 100d578:	e0bff815 	stw	r2,-32(fp)
 100d57c:	00000506 	br	100d594 <create_file+0x60>
		} else {
			// Put a file in a subdirectory.
			record_index = find_first_empty_record_in_a_subdirectory(
 100d580:	e0bffd17 	ldw	r2,-12(fp)
 100d584:	1080058b 	ldhu	r2,22(r2)
 100d588:	113fffcc 	andi	r4,r2,65535
 100d58c:	100d0040 	call	100d004 <find_first_empty_record_in_a_subdirectory>
 100d590:	e0bff815 	stw	r2,-32(fp)
					home_dir->start_cluster_index);
		}
		if (record_index >= 0) {
 100d594:	e0bff817 	ldw	r2,-32(fp)
 100d598:	1004803a 	cmplt	r2,r2,zero
 100d59c:	1000941e 	bne	r2,zero,100d7f0 <create_file+0x2bc>
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
 100d5a0:	e13ffb17 	ldw	r4,-20(fp)
 100d5a4:	100c13c0 	call	100c13c <get_dir_divider_location>
 100d5a8:	e0bff615 	stw	r2,-40(fp)
			int last_dir_separator = 0;
 100d5ac:	e03ff515 	stw	zero,-44(fp)

			// Skip through all directory separators.
			while (location > 0) {
 100d5b0:	00000b06 	br	100d5e0 <create_file+0xac>
				last_dir_separator = last_dir_separator + location + 1;
 100d5b4:	e0fff517 	ldw	r3,-44(fp)
 100d5b8:	e0bff617 	ldw	r2,-40(fp)
 100d5bc:	1885883a 	add	r2,r3,r2
 100d5c0:	10800044 	addi	r2,r2,1
 100d5c4:	e0bff515 	stw	r2,-44(fp)
				location = get_dir_divider_location(
 100d5c8:	e0bff517 	ldw	r2,-44(fp)
 100d5cc:	1007883a 	mov	r3,r2
 100d5d0:	e0bffb17 	ldw	r2,-20(fp)
 100d5d4:	1889883a 	add	r4,r3,r2
 100d5d8:	100c13c0 	call	100c13c <get_dir_divider_location>
 100d5dc:	e0bff615 	stw	r2,-40(fp)
			unsigned int file_record_sector;
			int location = get_dir_divider_location(name);
			int last_dir_separator = 0;

			// Skip through all directory separators.
			while (location > 0) {
 100d5e0:	e0bff617 	ldw	r2,-40(fp)
 100d5e4:	10800048 	cmpgei	r2,r2,1
 100d5e8:	103ff21e 	bne	r2,zero,100d5b4 <create_file+0x80>
				last_dir_separator = last_dir_separator + location + 1;
				location = get_dir_divider_location(
						&(name[last_dir_separator]));
			}

			convert_filename_to_name_extension(&(name[last_dir_separator]),
 100d5ec:	e0bff517 	ldw	r2,-44(fp)
 100d5f0:	1007883a 	mov	r3,r2
 100d5f4:	e0bffb17 	ldw	r2,-20(fp)
 100d5f8:	1889883a 	add	r4,r3,r2
 100d5fc:	e0bffc17 	ldw	r2,-16(fp)
 100d600:	100b883a 	mov	r5,r2
 100d604:	e0bffc17 	ldw	r2,-16(fp)
 100d608:	10800204 	addi	r2,r2,8
 100d60c:	100d883a 	mov	r6,r2
 100d610:	100d37c0 	call	100d37c <convert_filename_to_name_extension>
					file_record->name, file_record->extension);

			file_record->attributes = 0;
 100d614:	e0bffc17 	ldw	r2,-16(fp)
 100d618:	100002c5 	stb	zero,11(r2)
			file_record->create_time = 0;
 100d61c:	e0bffc17 	ldw	r2,-16(fp)
 100d620:	1000030d 	sth	zero,12(r2)
			file_record->create_date = 0;
 100d624:	e0bffc17 	ldw	r2,-16(fp)
 100d628:	1000038d 	sth	zero,14(r2)
			file_record->last_access_date = 0;
 100d62c:	e0bffc17 	ldw	r2,-16(fp)
 100d630:	1000040d 	sth	zero,16(r2)
			file_record->last_modified_time = 0;
 100d634:	e0bffc17 	ldw	r2,-16(fp)
 100d638:	1000048d 	sth	zero,18(r2)
			file_record->last_modified_date = 0;
 100d63c:	e0bffc17 	ldw	r2,-16(fp)
 100d640:	1000050d 	sth	zero,20(r2)
			file_record->start_cluster_index = cluster_number;
 100d644:	e0bffa17 	ldw	r2,-24(fp)
 100d648:	1007883a 	mov	r3,r2
 100d64c:	e0bffc17 	ldw	r2,-16(fp)
 100d650:	10c0058d 	sth	r3,22(r2)
			file_record->file_size_in_bytes = 0;
 100d654:	e0bffc17 	ldw	r2,-16(fp)
 100d658:	10000615 	stw	zero,24(r2)
			file_record->current_cluster_index = cluster_number;
 100d65c:	e0fffa17 	ldw	r3,-24(fp)
 100d660:	e0bffc17 	ldw	r2,-16(fp)
 100d664:	10c00715 	stw	r3,28(r2)
			file_record->current_sector_in_cluster = 0;
 100d668:	e0bffc17 	ldw	r2,-16(fp)
 100d66c:	10000815 	stw	zero,32(r2)
			file_record->current_byte_position = 0;
 100d670:	e0bffc17 	ldw	r2,-16(fp)
 100d674:	10000915 	stw	zero,36(r2)
			file_record->file_record_cluster = record_index & 0x0000ffff;
 100d678:	e0bff817 	ldw	r2,-32(fp)
 100d67c:	10ffffcc 	andi	r3,r2,65535
 100d680:	e0bffc17 	ldw	r2,-16(fp)
 100d684:	10c00a15 	stw	r3,40(r2)
			file_record->file_record_sector_in_cluster = ((record_index >> 16)
 100d688:	e0bff817 	ldw	r2,-32(fp)
 100d68c:	1005d43a 	srai	r2,r2,16
 100d690:	10bfffcc 	andi	r2,r2,65535
 100d694:	e0bfff15 	stw	r2,-4(fp)
 100d698:	e0ffff17 	ldw	r3,-4(fp)
 100d69c:	1804403a 	cmpge	r2,r3,zero
 100d6a0:	1000031e 	bne	r2,zero,100d6b0 <create_file+0x17c>
 100d6a4:	e0bfff17 	ldw	r2,-4(fp)
 100d6a8:	108003c4 	addi	r2,r2,15
 100d6ac:	e0bfff15 	stw	r2,-4(fp)
 100d6b0:	e0ffff17 	ldw	r3,-4(fp)
 100d6b4:	1805d13a 	srai	r2,r3,4
 100d6b8:	1007883a 	mov	r3,r2
 100d6bc:	e0bffc17 	ldw	r2,-16(fp)
 100d6c0:	10c00b15 	stw	r3,44(r2)
					& 0x0000ffff) / 16;
			file_record->file_record_offset = (((record_index >> 16)
 100d6c4:	e0bff817 	ldw	r2,-32(fp)
 100d6c8:	1005d43a 	srai	r2,r2,16
 100d6cc:	108003cc 	andi	r2,r2,15
 100d6d0:	1004917a 	slli	r2,r2,5
 100d6d4:	1007883a 	mov	r3,r2
 100d6d8:	e0bffc17 	ldw	r2,-16(fp)
 100d6dc:	10c00c0d 	sth	r3,48(r2)
					& 0x0000ffff) % 16) * 32;
			file_record->home_directory_cluster = home_dir->start_cluster_index;
 100d6e0:	e0bffd17 	ldw	r2,-12(fp)
 100d6e4:	1080058b 	ldhu	r2,22(r2)
 100d6e8:	10ffffcc 	andi	r3,r2,65535
 100d6ec:	e0bffc17 	ldw	r2,-16(fp)
 100d6f0:	10c00d15 	stw	r3,52(r2)
			file_record->in_use = true;
 100d6f4:	e0fffc17 	ldw	r3,-16(fp)
 100d6f8:	00800044 	movi	r2,1
 100d6fc:	18800f15 	stw	r2,60(r3)
			file_record->modified = true;
 100d700:	e0fffc17 	ldw	r3,-16(fp)
 100d704:	00800044 	movi	r2,1
 100d708:	18800e15 	stw	r2,56(r3)
			// Now write the record at the specified location.
			file_record_sector =
 100d70c:	e0bffc17 	ldw	r2,-16(fp)
 100d710:	10800a17 	ldw	r2,40(r2)
 100d714:	1004c03a 	cmpne	r2,r2,zero
 100d718:	1000081e 	bne	r2,zero,100d73c <create_file+0x208>
 100d71c:	00804074 	movhi	r2,257
 100d720:	109cac04 	addi	r2,r2,29360
 100d724:	10c01317 	ldw	r3,76(r2)
 100d728:	e0bffc17 	ldw	r2,-16(fp)
 100d72c:	10800b17 	ldw	r2,44(r2)
 100d730:	1887883a 	add	r3,r3,r2
 100d734:	e0fffe15 	stw	r3,-8(fp)
 100d738:	00001006 	br	100d77c <create_file+0x248>
 100d73c:	00804074 	movhi	r2,257
 100d740:	109cac04 	addi	r2,r2,29360
 100d744:	11001417 	ldw	r4,80(r2)
 100d748:	e0bffc17 	ldw	r2,-16(fp)
 100d74c:	10800a17 	ldw	r2,40(r2)
 100d750:	10ffff84 	addi	r3,r2,-2
 100d754:	00804074 	movhi	r2,257
 100d758:	109cac04 	addi	r2,r2,29360
 100d75c:	10800383 	ldbu	r2,14(r2)
 100d760:	10803fcc 	andi	r2,r2,255
 100d764:	1885383a 	mul	r2,r3,r2
 100d768:	2087883a 	add	r3,r4,r2
 100d76c:	e0bffc17 	ldw	r2,-16(fp)
 100d770:	10800b17 	ldw	r2,44(r2)
 100d774:	1887883a 	add	r3,r3,r2
 100d778:	e0fffe15 	stw	r3,-8(fp)
 100d77c:	e0bffe17 	ldw	r2,-8(fp)
 100d780:	e0bff715 	stw	r2,-36(fp)
							(boot_sector_data.data_sector_offset
									+ (file_record->file_record_cluster - 2)
											* boot_sector_data.sectors_per_cluster
									+ file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector,
 100d784:	e13ff717 	ldw	r4,-36(fp)
 100d788:	d1675b17 	ldw	r5,-25236(gp)
 100d78c:	100ad140 	call	100ad14 <Read_Sector_Data>
 100d790:	1005003a 	cmpeq	r2,r2,zero
 100d794:	1000161e 	bne	r2,zero,100d7f0 <create_file+0x2bc>
					fat_partition_offset_in_512_byte_sectors)) {
				if (Write_File_Record_At_Offset(file_record->file_record_offset,
 100d798:	e0bffc17 	ldw	r2,-16(fp)
 100d79c:	10800c0b 	ldhu	r2,48(r2)
 100d7a0:	113fffcc 	andi	r4,r2,65535
 100d7a4:	2120001c 	xori	r4,r4,32768
 100d7a8:	21200004 	addi	r4,r4,-32768
 100d7ac:	e17ffc17 	ldw	r5,-16(fp)
 100d7b0:	100b3e00 	call	100b3e0 <Write_File_Record_At_Offset>
 100d7b4:	1005003a 	cmpeq	r2,r2,zero
 100d7b8:	10000d1e 	bne	r2,zero,100d7f0 <create_file+0x2bc>
						file_record)) {
					Save_Modified_Sector();
 100d7bc:	100acc40 	call	100acc4 <Save_Modified_Sector>
					// Mark the first cluster of the file as the last cluster at first.
					mark_cluster(cluster_number, ((short int) (0xffff)), true);
 100d7c0:	e13ffa17 	ldw	r4,-24(fp)
 100d7c4:	017fffc4 	movi	r5,-1
 100d7c8:	01800044 	movi	r6,1
 100d7cc:	100aec80 	call	100aec8 <mark_cluster>
					if (mark_cluster(cluster_number, ((short int) (0xffff)),
 100d7d0:	e13ffa17 	ldw	r4,-24(fp)
 100d7d4:	017fffc4 	movi	r5,-1
 100d7d8:	000d883a 	mov	r6,zero
 100d7dc:	100aec80 	call	100aec8 <mark_cluster>
 100d7e0:	1005003a 	cmpeq	r2,r2,zero
 100d7e4:	1000021e 	bne	r2,zero,100d7f0 <create_file+0x2bc>
							false)) {
						result = true;
 100d7e8:	00800044 	movi	r2,1
 100d7ec:	e0bff915 	stw	r2,-28(fp)
				}
			}
		}

	}
	return result;
 100d7f0:	e0bff917 	ldw	r2,-28(fp)
}
 100d7f4:	e037883a 	mov	sp,fp
 100d7f8:	dfc00117 	ldw	ra,4(sp)
 100d7fc:	df000017 	ldw	fp,0(sp)
 100d800:	dec00204 	addi	sp,sp,8
 100d804:	f800283a 	ret

0100d808 <copy_file_record_name_to_string>:

void copy_file_record_name_to_string(t_file_record *file_record,
		char *file_name)
/* Copy a file name from the file record to a given string */
{
 100d808:	defffb04 	addi	sp,sp,-20
 100d80c:	df000415 	stw	fp,16(sp)
 100d810:	df000404 	addi	fp,sp,16
 100d814:	e13ffe15 	stw	r4,-8(fp)
 100d818:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 100d81c:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 100d820:	e03ffd15 	stw	zero,-12(fp)
 100d824:	00001606 	br	100d880 <copy_file_record_name_to_string+0x78>
		if (file_record->name[index] != ' ') {
 100d828:	e0fffd17 	ldw	r3,-12(fp)
 100d82c:	e0bffe17 	ldw	r2,-8(fp)
 100d830:	10c5883a 	add	r2,r2,r3
 100d834:	10800003 	ldbu	r2,0(r2)
 100d838:	10803fcc 	andi	r2,r2,255
 100d83c:	10800820 	cmpeqi	r2,r2,32
 100d840:	10000c1e 	bne	r2,zero,100d874 <copy_file_record_name_to_string+0x6c>
			file_name[flength] = file_record->name[index];
 100d844:	e0bffc17 	ldw	r2,-16(fp)
 100d848:	1007883a 	mov	r3,r2
 100d84c:	e0bfff17 	ldw	r2,-4(fp)
 100d850:	1889883a 	add	r4,r3,r2
 100d854:	e0fffd17 	ldw	r3,-12(fp)
 100d858:	e0bffe17 	ldw	r2,-8(fp)
 100d85c:	10c5883a 	add	r2,r2,r3
 100d860:	10800003 	ldbu	r2,0(r2)
 100d864:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 100d868:	e0bffc17 	ldw	r2,-16(fp)
 100d86c:	10800044 	addi	r2,r2,1
 100d870:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++) {
 100d874:	e0bffd17 	ldw	r2,-12(fp)
 100d878:	10800044 	addi	r2,r2,1
 100d87c:	e0bffd15 	stw	r2,-12(fp)
 100d880:	e0bffd17 	ldw	r2,-12(fp)
 100d884:	10800210 	cmplti	r2,r2,8
 100d888:	103fe71e 	bne	r2,zero,100d828 <copy_file_record_name_to_string+0x20>
		if (file_record->name[index] != ' ') {
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ') {
 100d88c:	e0bffe17 	ldw	r2,-8(fp)
 100d890:	10800203 	ldbu	r2,8(r2)
 100d894:	10803fcc 	andi	r2,r2,255
 100d898:	10800820 	cmpeqi	r2,r2,32
 100d89c:	1000261e 	bne	r2,zero,100d938 <copy_file_record_name_to_string+0x130>
		file_name[flength] = '.';
 100d8a0:	e0bffc17 	ldw	r2,-16(fp)
 100d8a4:	1007883a 	mov	r3,r2
 100d8a8:	e0bfff17 	ldw	r2,-4(fp)
 100d8ac:	1887883a 	add	r3,r3,r2
 100d8b0:	00800b84 	movi	r2,46
 100d8b4:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 100d8b8:	e0bffc17 	ldw	r2,-16(fp)
 100d8bc:	10800044 	addi	r2,r2,1
 100d8c0:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++) {
 100d8c4:	e03ffd15 	stw	zero,-12(fp)
 100d8c8:	00001806 	br	100d92c <copy_file_record_name_to_string+0x124>
			if (file_record->extension[index] != ' ') {
 100d8cc:	e0fffd17 	ldw	r3,-12(fp)
 100d8d0:	e0bffe17 	ldw	r2,-8(fp)
 100d8d4:	1885883a 	add	r2,r3,r2
 100d8d8:	10800204 	addi	r2,r2,8
 100d8dc:	10800003 	ldbu	r2,0(r2)
 100d8e0:	10803fcc 	andi	r2,r2,255
 100d8e4:	10800820 	cmpeqi	r2,r2,32
 100d8e8:	10000d1e 	bne	r2,zero,100d920 <copy_file_record_name_to_string+0x118>
				file_name[flength] = file_record->extension[index];
 100d8ec:	e0bffc17 	ldw	r2,-16(fp)
 100d8f0:	1007883a 	mov	r3,r2
 100d8f4:	e0bfff17 	ldw	r2,-4(fp)
 100d8f8:	1889883a 	add	r4,r3,r2
 100d8fc:	e0fffd17 	ldw	r3,-12(fp)
 100d900:	e0bffe17 	ldw	r2,-8(fp)
 100d904:	1885883a 	add	r2,r3,r2
 100d908:	10800204 	addi	r2,r2,8
 100d90c:	10800003 	ldbu	r2,0(r2)
 100d910:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 100d914:	e0bffc17 	ldw	r2,-16(fp)
 100d918:	10800044 	addi	r2,r2,1
 100d91c:	e0bffc15 	stw	r2,-16(fp)
		}
	}
	if (file_record->extension[0] != ' ') {
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++) {
 100d920:	e0bffd17 	ldw	r2,-12(fp)
 100d924:	10800044 	addi	r2,r2,1
 100d928:	e0bffd15 	stw	r2,-12(fp)
 100d92c:	e0bffd17 	ldw	r2,-12(fp)
 100d930:	108000d0 	cmplti	r2,r2,3
 100d934:	103fe51e 	bne	r2,zero,100d8cc <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 100d938:	e0bffc17 	ldw	r2,-16(fp)
 100d93c:	1007883a 	mov	r3,r2
 100d940:	e0bfff17 	ldw	r2,-4(fp)
 100d944:	1885883a 	add	r2,r3,r2
 100d948:	10000005 	stb	zero,0(r2)
}
 100d94c:	e037883a 	mov	sp,fp
 100d950:	df000017 	ldw	fp,0(sp)
 100d954:	dec00104 	addi	sp,sp,4
 100d958:	f800283a 	ret

0100d95c <alt_up_sd_card_open_dev>:

///////////////////////////////////////////////////////////////////////////
// Direct functions
///////////////////////////////////////////////////////////////////////////

alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name) {
 100d95c:	defffc04 	addi	sp,sp,-16
 100d960:	dfc00315 	stw	ra,12(sp)
 100d964:	df000215 	stw	fp,8(sp)
 100d968:	df000204 	addi	fp,sp,8
 100d96c:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name,
			&alt_dev_list);
 100d970:	e13fff17 	ldw	r4,-4(fp)
 100d974:	01404074 	movhi	r5,257
 100d978:	2954c204 	addi	r5,r5,21256
 100d97c:	10109d80 	call	10109d8 <alt_find_dev>
 100d980:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL) {
 100d984:	e0bffe17 	ldw	r2,-8(fp)
 100d988:	1005003a 	cmpeq	r2,r2,zero
 100d98c:	10001e1e 	bne	r2,zero,100da08 <alt_up_sd_card_open_dev+0xac>
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 100d990:	e0bffe17 	ldw	r2,-8(fp)
 100d994:	10800a17 	ldw	r2,40(r2)
 100d998:	10808d04 	addi	r2,r2,564
 100d99c:	d0a75515 	stw	r2,-25260(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 100d9a0:	e0bffe17 	ldw	r2,-8(fp)
 100d9a4:	10800a17 	ldw	r2,40(r2)
 100d9a8:	10808904 	addi	r2,r2,548
 100d9ac:	d0a75615 	stw	r2,-25256(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 100d9b0:	e0bffe17 	ldw	r2,-8(fp)
 100d9b4:	10800a17 	ldw	r2,40(r2)
 100d9b8:	10808404 	addi	r2,r2,528
 100d9bc:	d0a75715 	stw	r2,-25252(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 100d9c0:	e0bffe17 	ldw	r2,-8(fp)
 100d9c4:	10800a17 	ldw	r2,40(r2)
 100d9c8:	10808c04 	addi	r2,r2,560
 100d9cc:	d0a75815 	stw	r2,-25248(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 100d9d0:	e0bffe17 	ldw	r2,-8(fp)
 100d9d4:	10800a17 	ldw	r2,40(r2)
 100d9d8:	10808b04 	addi	r2,r2,556
 100d9dc:	d0a75915 	stw	r2,-25244(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 100d9e0:	e0bffe17 	ldw	r2,-8(fp)
 100d9e4:	10800a17 	ldw	r2,40(r2)
 100d9e8:	d0a75a15 	stw	r2,-25240(gp)
		device_pointer = dev;
 100d9ec:	e0bffe17 	ldw	r2,-8(fp)
 100d9f0:	d0a75d15 	stw	r2,-25228(gp)
		initialized = false;
 100d9f4:	d0275315 	stw	zero,-25268(gp)
		is_sd_card_formated_as_FAT16 = false;
 100d9f8:	d0275415 	stw	zero,-25264(gp)
		search_data.valid = false;
 100d9fc:	00804074 	movhi	r2,257
 100da00:	109ca704 	addi	r2,r2,29340
 100da04:	10000415 	stw	zero,16(r2)
	}
	return dev;
 100da08:	e0bffe17 	ldw	r2,-8(fp)
}
 100da0c:	e037883a 	mov	sp,fp
 100da10:	dfc00117 	ldw	ra,4(sp)
 100da14:	df000017 	ldw	fp,0(sp)
 100da18:	dec00204 	addi	sp,sp,8
 100da1c:	f800283a 	ret

0100da20 <alt_up_sd_card_is_Present>:

bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 100da20:	defffd04 	addi	sp,sp,-12
 100da24:	df000215 	stw	fp,8(sp)
 100da28:	df000204 	addi	fp,sp,8
	bool result = false;
 100da2c:	e03fff15 	stw	zero,-4(fp)

	if ((device_pointer != NULL)
 100da30:	d0a75d17 	ldw	r2,-25228(gp)
 100da34:	1005003a 	cmpeq	r2,r2,zero
 100da38:	1000081e 	bne	r2,zero,100da5c <alt_up_sd_card_is_Present+0x3c>
 100da3c:	d0a75517 	ldw	r2,-25260(gp)
 100da40:	1080002b 	ldhuio	r2,0(r2)
 100da44:	1080008c 	andi	r2,r2,2
 100da48:	1005003a 	cmpeq	r2,r2,zero
 100da4c:	1000031e 	bne	r2,zero,100da5c <alt_up_sd_card_is_Present+0x3c>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
 100da50:	00800044 	movi	r2,1
 100da54:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
	bool result = false;

	if ((device_pointer != NULL)
 100da58:	00001e06 	br	100dad4 <alt_up_sd_card_is_Present+0xb4>
			&& ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0)) {
		result = true;
	} else if (initialized == true) {
 100da5c:	d0a75317 	ldw	r2,-25268(gp)
 100da60:	10800058 	cmpnei	r2,r2,1
 100da64:	10001b1e 	bne	r2,zero,100dad4 <alt_up_sd_card_is_Present+0xb4>
		int index;

		initialized = false;
 100da68:	d0275315 	stw	zero,-25268(gp)
		search_data.valid = false;
 100da6c:	00804074 	movhi	r2,257
 100da70:	109ca704 	addi	r2,r2,29340
 100da74:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 100da78:	d0275415 	stw	zero,-25264(gp)

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 100da7c:	e03ffe15 	stw	zero,-8(fp)
 100da80:	00001106 	br	100dac8 <alt_up_sd_card_is_Present+0xa8>
			active_files[index].in_use = false;
 100da84:	e0bffe17 	ldw	r2,-8(fp)
 100da88:	00c04074 	movhi	r3,257
 100da8c:	18dcc104 	addi	r3,r3,29444
 100da90:	100491ba 	slli	r2,r2,6
 100da94:	10c5883a 	add	r2,r2,r3
 100da98:	10800f04 	addi	r2,r2,60
 100da9c:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 100daa0:	e0bffe17 	ldw	r2,-8(fp)
 100daa4:	00c04074 	movhi	r3,257
 100daa8:	18dcc104 	addi	r3,r3,29444
 100daac:	100491ba 	slli	r2,r2,6
 100dab0:	10c5883a 	add	r2,r2,r3
 100dab4:	10800e04 	addi	r2,r2,56
 100dab8:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for (index = 0; index < MAX_FILES_OPENED; index++) {
 100dabc:	e0bffe17 	ldw	r2,-8(fp)
 100dac0:	10800044 	addi	r2,r2,1
 100dac4:	e0bffe15 	stw	r2,-8(fp)
 100dac8:	e0bffe17 	ldw	r2,-8(fp)
 100dacc:	10800510 	cmplti	r2,r2,20
 100dad0:	103fec1e 	bne	r2,zero,100da84 <alt_up_sd_card_is_Present+0x64>
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
	return result;
 100dad4:	e0bfff17 	ldw	r2,-4(fp)
}
 100dad8:	e037883a 	mov	sp,fp
 100dadc:	df000017 	ldw	fp,0(sp)
 100dae0:	dec00104 	addi	sp,sp,4
 100dae4:	f800283a 	ret

0100dae8 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 100dae8:	defffd04 	addi	sp,sp,-12
 100daec:	dfc00215 	stw	ra,8(sp)
 100daf0:	df000115 	stw	fp,4(sp)
 100daf4:	df000104 	addi	fp,sp,4
	bool result = false;
 100daf8:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present()) {
 100dafc:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100db00:	1005003a 	cmpeq	r2,r2,zero
 100db04:	10000d1e 	bne	r2,zero,100db3c <alt_up_sd_card_is_FAT16+0x54>
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false) {
 100db08:	d0a75317 	ldw	r2,-25268(gp)
 100db0c:	1004c03a 	cmpne	r2,r2,zero
 100db10:	1000071e 	bne	r2,zero,100db30 <alt_up_sd_card_is_FAT16+0x48>
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 100db14:	100bcd80 	call	100bcd8 <Look_for_FAT16>
 100db18:	d0a75415 	stw	r2,-25264(gp)
			initialized = is_sd_card_formated_as_FAT16;
 100db1c:	d0a75417 	ldw	r2,-25264(gp)
 100db20:	d0a75315 	stw	r2,-25268(gp)
			search_data.valid = false;
 100db24:	00804074 	movhi	r2,257
 100db28:	109ca704 	addi	r2,r2,29340
 100db2c:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 100db30:	d0a75417 	ldw	r2,-25264(gp)
 100db34:	e0bfff15 	stw	r2,-4(fp)
 100db38:	00000206 	br	100db44 <alt_up_sd_card_is_FAT16+0x5c>
	} else {
		// If not then you may as well not open the device.
		initialized = false;
 100db3c:	d0275315 	stw	zero,-25268(gp)
		is_sd_card_formated_as_FAT16 = false;
 100db40:	d0275415 	stw	zero,-25264(gp)
	}

	return result;
 100db44:	e0bfff17 	ldw	r2,-4(fp)
}
 100db48:	e037883a 	mov	sp,fp
 100db4c:	dfc00117 	ldw	ra,4(sp)
 100db50:	df000017 	ldw	fp,0(sp)
 100db54:	dec00204 	addi	sp,sp,8
 100db58:	f800283a 	ret

0100db5c <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 100db5c:	deffea04 	addi	sp,sp,-88
 100db60:	dfc01515 	stw	ra,84(sp)
 100db64:	df001415 	stw	fp,80(sp)
 100db68:	df001404 	addi	fp,sp,80
 100db6c:	e13ffe15 	stw	r4,-8(fp)
 100db70:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 100db74:	00800084 	movi	r2,2
 100db78:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100db7c:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100db80:	1005003a 	cmpeq	r2,r2,zero
 100db84:	1000241e 	bne	r2,zero,100dc18 <alt_up_sd_card_find_first+0xbc>
 100db88:	d0a75417 	ldw	r2,-25264(gp)
 100db8c:	1005003a 	cmpeq	r2,r2,zero
 100db90:	1000211e 	bne	r2,zero,100dc18 <alt_up_sd_card_find_first+0xbc>
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through,
 100db94:	e17fed04 	addi	r5,fp,-76
 100db98:	e1bfee04 	addi	r6,fp,-72
 100db9c:	e13ffe17 	ldw	r4,-8(fp)
 100dba0:	100c4e80 	call	100c4e8 <get_home_directory_cluster_for_file>
 100dba4:	1005003a 	cmpeq	r2,r2,zero
 100dba8:	1000191e 	bne	r2,zero,100dc10 <alt_up_sd_card_find_first+0xb4>
				&home_directory_cluster, &file_record)) {
			search_data.directory_root_cluster = home_directory_cluster;
 100dbac:	e0bfed17 	ldw	r2,-76(fp)
 100dbb0:	1007883a 	mov	r3,r2
 100dbb4:	00804074 	movhi	r2,257
 100dbb8:	109ca704 	addi	r2,r2,29340
 100dbbc:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 100dbc0:	e0bfed17 	ldw	r2,-76(fp)
 100dbc4:	1007883a 	mov	r3,r2
 100dbc8:	00804074 	movhi	r2,257
 100dbcc:	109ca704 	addi	r2,r2,29340
 100dbd0:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 100dbd4:	00804074 	movhi	r2,257
 100dbd8:	109ca704 	addi	r2,r2,29340
 100dbdc:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 100dbe0:	00c04074 	movhi	r3,257
 100dbe4:	18dca704 	addi	r3,r3,29340
 100dbe8:	00bfffc4 	movi	r2,-1
 100dbec:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 100dbf0:	00c04074 	movhi	r3,257
 100dbf4:	18dca704 	addi	r3,r3,29340
 100dbf8:	00800044 	movi	r2,1
 100dbfc:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 100dc00:	e13fff17 	ldw	r4,-4(fp)
 100dc04:	100dc300 	call	100dc30 <alt_up_sd_card_find_next>
 100dc08:	e0bfec0d 	sth	r2,-80(fp)
 100dc0c:	00000206 	br	100dc18 <alt_up_sd_card_find_first+0xbc>
		} else {
			result = 1;
 100dc10:	00800044 	movi	r2,1
 100dc14:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 100dc18:	e0bfec0f 	ldh	r2,-80(fp)
}
 100dc1c:	e037883a 	mov	sp,fp
 100dc20:	dfc00117 	ldw	ra,4(sp)
 100dc24:	df000017 	ldw	fp,0(sp)
 100dc28:	dec00204 	addi	sp,sp,8
 100dc2c:	f800283a 	ret

0100dc30 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 100dc30:	deffe404 	addi	sp,sp,-112
 100dc34:	dfc01b15 	stw	ra,108(sp)
 100dc38:	df001a15 	stw	fp,104(sp)
 100dc3c:	df001a04 	addi	fp,sp,104
 100dc40:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 100dc44:	00800084 	movi	r2,2
 100dc48:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100dc4c:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100dc50:	1005003a 	cmpeq	r2,r2,zero
 100dc54:	1000da1e 	bne	r2,zero,100dfc0 <alt_up_sd_card_find_next+0x390>
 100dc58:	d0a75417 	ldw	r2,-25264(gp)
 100dc5c:	1005003a 	cmpeq	r2,r2,zero
 100dc60:	1000d71e 	bne	r2,zero,100dfc0 <alt_up_sd_card_find_next+0x390>
		if (search_data.valid) {
 100dc64:	00804074 	movhi	r2,257
 100dc68:	109ca704 	addi	r2,r2,29340
 100dc6c:	10800417 	ldw	r2,16(r2)
 100dc70:	1005003a 	cmpeq	r2,r2,zero
 100dc74:	1000d01e 	bne	r2,zero,100dfb8 <alt_up_sd_card_find_next+0x388>
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 100dc78:	00804074 	movhi	r2,257
 100dc7c:	109ca704 	addi	r2,r2,29340
 100dc80:	10800117 	ldw	r2,4(r2)
 100dc84:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0) {
 100dc88:	e0bfec17 	ldw	r2,-80(fp)
 100dc8c:	1004c03a 	cmpne	r2,r2,zero
 100dc90:	1000511e 	bne	r2,zero,100ddd8 <alt_up_sd_card_find_next+0x1a8>
				// Searching through the root directory
				int max_root_dir_sectors = ((32
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
 100dc94:	00804074 	movhi	r2,257
 100dc98:	109cac04 	addi	r2,r2,29360
 100dc9c:	1080050b 	ldhu	r2,20(r2)
 100dca0:	10bfffcc 	andi	r2,r2,65535
 100dca4:	1006917a 	slli	r3,r2,5
 100dca8:	00804074 	movhi	r2,257
 100dcac:	109cac04 	addi	r2,r2,29360
 100dcb0:	1080030b 	ldhu	r2,12(r2)
 100dcb4:	10bfffcc 	andi	r2,r2,65535
 100dcb8:	1885283a 	div	r2,r3,r2
 100dcbc:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 100dcc0:	00804074 	movhi	r2,257
 100dcc4:	109ca704 	addi	r2,r2,29340
 100dcc8:	10800217 	ldw	r2,8(r2)
 100dccc:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector + 1;
 100dcd0:	00804074 	movhi	r2,257
 100dcd4:	109ca704 	addi	r2,r2,29340
 100dcd8:	1080030b 	ldhu	r2,12(r2)
 100dcdc:	10bfffcc 	andi	r2,r2,65535
 100dce0:	10a0001c 	xori	r2,r2,32768
 100dce4:	10a00004 	addi	r2,r2,-32768
 100dce8:	10800044 	addi	r2,r2,1
 100dcec:	e0bfe915 	stw	r2,-92(fp)

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 100dcf0:	00003306 	br	100ddc0 <alt_up_sd_card_find_next+0x190>
					if (Read_Sector_Data(
 100dcf4:	00804074 	movhi	r2,257
 100dcf8:	109cac04 	addi	r2,r2,29360
 100dcfc:	10c01317 	ldw	r3,76(r2)
 100dd00:	e0bfea17 	ldw	r2,-88(fp)
 100dd04:	1885883a 	add	r2,r3,r2
 100dd08:	1009883a 	mov	r4,r2
 100dd0c:	d1675b17 	ldw	r5,-25236(gp)
 100dd10:	100ad140 	call	100ad14 <Read_Sector_Data>
 100dd14:	1005003a 	cmpeq	r2,r2,zero
 100dd18:	10002c1e 	bne	r2,zero,100ddcc <alt_up_sd_card_find_next+0x19c>
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 100dd1c:	00002106 	br	100dda4 <alt_up_sd_card_find_next+0x174>
							if (Read_File_Record_At_Offset(file_counter * 32,
 100dd20:	e0bfe917 	ldw	r2,-92(fp)
 100dd24:	1008917a 	slli	r4,r2,5
 100dd28:	e1ffea17 	ldw	r7,-88(fp)
 100dd2c:	e17fee04 	addi	r5,fp,-72
 100dd30:	000d883a 	mov	r6,zero
 100dd34:	100b15c0 	call	100b15c <Read_File_Record_At_Offset>
 100dd38:	1005003a 	cmpeq	r2,r2,zero
 100dd3c:	1000161e 	bne	r2,zero,100dd98 <alt_up_sd_card_find_next+0x168>
									&file_record, 0, sector_index)) {
								if ((file_record.name[0] != 0)
 100dd40:	e0bfee03 	ldbu	r2,-72(fp)
 100dd44:	10803fcc 	andi	r2,r2,255
 100dd48:	1005003a 	cmpeq	r2,r2,zero
 100dd4c:	1000121e 	bne	r2,zero,100dd98 <alt_up_sd_card_find_next+0x168>
 100dd50:	e0bfee03 	ldbu	r2,-72(fp)
 100dd54:	10803fcc 	andi	r2,r2,255
 100dd58:	10803960 	cmpeqi	r2,r2,229
 100dd5c:	10000e1e 	bne	r2,zero,100dd98 <alt_up_sd_card_find_next+0x168>
										&& (file_record.name[0] != 0xe5)) {
									/* Update search structure. */
									search_data.file_index_in_sector =
 100dd60:	e0bfe917 	ldw	r2,-92(fp)
 100dd64:	1007883a 	mov	r3,r2
 100dd68:	00804074 	movhi	r2,257
 100dd6c:	109ca704 	addi	r2,r2,29340
 100dd70:	10c0030d 	sth	r3,12(r2)
											file_counter;
									search_data.current_sector_in_cluster =
 100dd74:	e0ffea17 	ldw	r3,-88(fp)
 100dd78:	00804074 	movhi	r2,257
 100dd7c:	109ca704 	addi	r2,r2,29340
 100dd80:	10c00215 	stw	r3,8(r2)
											sector_index;

									/* Copy file name.*/
									copy_file_record_name_to_string(
 100dd84:	e13fee04 	addi	r4,fp,-72
 100dd88:	e17ffe17 	ldw	r5,-8(fp)
 100dd8c:	100d8080 	call	100d808 <copy_file_record_name_to_string>
											&file_record, file_name);
									return 0;
 100dd90:	e03fff15 	stw	zero,-4(fp)
 100dd94:	00008c06 	br	100dfc8 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++) {
					if (Read_Sector_Data(
							sector_index
									+ boot_sector_data.root_directory_sector_offset,
							fat_partition_offset_in_512_byte_sectors)) {
						for (; file_counter < 16; file_counter++) {
 100dd98:	e0bfe917 	ldw	r2,-92(fp)
 100dd9c:	10800044 	addi	r2,r2,1
 100dda0:	e0bfe915 	stw	r2,-92(fp)
 100dda4:	e0bfe917 	ldw	r2,-92(fp)
 100dda8:	10800410 	cmplti	r2,r2,16
 100ddac:	103fdc1e 	bne	r2,zero,100dd20 <alt_up_sd_card_find_next+0xf0>
											&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 100ddb0:	e03fe915 	stw	zero,-92(fp)
						* boot_sector_data.max_number_of_dir_entires)
						/ boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector + 1;

				for (; sector_index < max_root_dir_sectors; sector_index++) {
 100ddb4:	e0bfea17 	ldw	r2,-88(fp)
 100ddb8:	10800044 	addi	r2,r2,1
 100ddbc:	e0bfea15 	stw	r2,-88(fp)
 100ddc0:	e0ffea17 	ldw	r3,-88(fp)
 100ddc4:	e0bfeb17 	ldw	r2,-84(fp)
 100ddc8:	18bfca16 	blt	r3,r2,100dcf4 <alt_up_sd_card_find_next+0xc4>
						file_counter = 0;
					} else {
						break;
					}
				}
				result = -1;
 100ddcc:	00bfffc4 	movi	r2,-1
 100ddd0:	e0bfed0d 	sth	r2,-76(fp)
 100ddd4:	00007a06 	br	100dfc0 <alt_up_sd_card_find_next+0x390>
			} else {
				int file_counter = search_data.file_index_in_sector + 1;
 100ddd8:	00804074 	movhi	r2,257
 100dddc:	109ca704 	addi	r2,r2,29340
 100dde0:	1080030b 	ldhu	r2,12(r2)
 100dde4:	10bfffcc 	andi	r2,r2,65535
 100dde8:	10a0001c 	xori	r2,r2,32768
 100ddec:	10a00004 	addi	r2,r2,-32768
 100ddf0:	10800044 	addi	r2,r2,1
 100ddf4:	e0bfe815 	stw	r2,-96(fp)
				do {
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
 100ddf8:	e0bfec17 	ldw	r2,-80(fp)
 100ddfc:	10ffff84 	addi	r3,r2,-2
 100de00:	00804074 	movhi	r2,257
 100de04:	109cac04 	addi	r2,r2,29360
 100de08:	10800383 	ldbu	r2,14(r2)
 100de0c:	10803fcc 	andi	r2,r2,255
 100de10:	1885383a 	mul	r2,r3,r2
 100de14:	1007883a 	mov	r3,r2
 100de18:	00804074 	movhi	r2,257
 100de1c:	109cac04 	addi	r2,r2,29360
 100de20:	10801417 	ldw	r2,80(r2)
 100de24:	1885883a 	add	r2,r3,r2
 100de28:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 100de2c:	00804074 	movhi	r2,257
 100de30:	109ca704 	addi	r2,r2,29340
 100de34:	10800217 	ldw	r2,8(r2)
 100de38:	e0bfe615 	stw	r2,-104(fp)

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 100de3c:	00003406 	br	100df10 <alt_up_sd_card_find_next+0x2e0>
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
 100de40:	e0ffe617 	ldw	r3,-104(fp)
 100de44:	e0bfe717 	ldw	r2,-100(fp)
 100de48:	1889883a 	add	r4,r3,r2
 100de4c:	d1675b17 	ldw	r5,-25236(gp)
 100de50:	100ad140 	call	100ad14 <Read_Sector_Data>
 100de54:	1005003a 	cmpeq	r2,r2,zero
 100de58:	1000331e 	bne	r2,zero,100df28 <alt_up_sd_card_find_next+0x2f8>
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 100de5c:	00002506 	br	100def4 <alt_up_sd_card_find_next+0x2c4>
								if (Read_File_Record_At_Offset(
 100de60:	e0bfe817 	ldw	r2,-96(fp)
 100de64:	1008917a 	slli	r4,r2,5
 100de68:	e1bfec17 	ldw	r6,-80(fp)
 100de6c:	e1ffe617 	ldw	r7,-104(fp)
 100de70:	e17fee04 	addi	r5,fp,-72
 100de74:	100b15c0 	call	100b15c <Read_File_Record_At_Offset>
 100de78:	1005003a 	cmpeq	r2,r2,zero
 100de7c:	10001a1e 	bne	r2,zero,100dee8 <alt_up_sd_card_find_next+0x2b8>
										file_counter * 32, &file_record,
										cluster, sector_index)) {
									if ((file_record.name[0] != 0)
 100de80:	e0bfee03 	ldbu	r2,-72(fp)
 100de84:	10803fcc 	andi	r2,r2,255
 100de88:	1005003a 	cmpeq	r2,r2,zero
 100de8c:	1000161e 	bne	r2,zero,100dee8 <alt_up_sd_card_find_next+0x2b8>
 100de90:	e0bfee03 	ldbu	r2,-72(fp)
 100de94:	10803fcc 	andi	r2,r2,255
 100de98:	10803960 	cmpeqi	r2,r2,229
 100de9c:	1000121e 	bne	r2,zero,100dee8 <alt_up_sd_card_find_next+0x2b8>
											&& (file_record.name[0] != 0xe5)) {
										/* Update search structure. */
										search_data.current_cluster_index =
 100dea0:	e0ffec17 	ldw	r3,-80(fp)
 100dea4:	00804074 	movhi	r2,257
 100dea8:	109ca704 	addi	r2,r2,29340
 100deac:	10c00115 	stw	r3,4(r2)
												cluster;
										search_data.file_index_in_sector =
 100deb0:	e0bfe817 	ldw	r2,-96(fp)
 100deb4:	1007883a 	mov	r3,r2
 100deb8:	00804074 	movhi	r2,257
 100debc:	109ca704 	addi	r2,r2,29340
 100dec0:	10c0030d 	sth	r3,12(r2)
												file_counter;
										search_data.current_sector_in_cluster =
 100dec4:	e0ffe617 	ldw	r3,-104(fp)
 100dec8:	00804074 	movhi	r2,257
 100decc:	109ca704 	addi	r2,r2,29340
 100ded0:	10c00215 	stw	r3,8(r2)
												sector_index;

										/* Copy file name.*/
										copy_file_record_name_to_string(
 100ded4:	e13fee04 	addi	r4,fp,-72
 100ded8:	e17ffe17 	ldw	r5,-8(fp)
 100dedc:	100d8080 	call	100d808 <copy_file_record_name_to_string>
												&file_record, file_name);
										return 0;
 100dee0:	e03fff15 	stw	zero,-4(fp)
 100dee4:	00003806 	br	100dfc8 <alt_up_sd_card_find_next+0x398>

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
						if (Read_Sector_Data(sector_index + start_sector,
								fat_partition_offset_in_512_byte_sectors)) {
							for (; file_counter < 16; file_counter++) {
 100dee8:	e0bfe817 	ldw	r2,-96(fp)
 100deec:	10800044 	addi	r2,r2,1
 100def0:	e0bfe815 	stw	r2,-96(fp)
 100def4:	e0bfe817 	ldw	r2,-96(fp)
 100def8:	10800410 	cmplti	r2,r2,16
 100defc:	103fd81e 	bne	r2,zero,100de60 <alt_up_sd_card_find_next+0x230>
												&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 100df00:	e03fe815 	stw	zero,-96(fp)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
							sector_index++) {
 100df04:	e0bfe617 	ldw	r2,-104(fp)
 100df08:	10800044 	addi	r2,r2,1
 100df0c:	e0bfe615 	stw	r2,-104(fp)
					int start_sector = (cluster - 2)
							* (boot_sector_data.sectors_per_cluster)
							+ boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;

					for (; sector_index < boot_sector_data.sectors_per_cluster;
 100df10:	00804074 	movhi	r2,257
 100df14:	109cac04 	addi	r2,r2,29360
 100df18:	10800383 	ldbu	r2,14(r2)
 100df1c:	10c03fcc 	andi	r3,r2,255
 100df20:	e0bfe617 	ldw	r2,-104(fp)
 100df24:	10ffc616 	blt	r2,r3,100de40 <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster) {
 100df28:	00804074 	movhi	r2,257
 100df2c:	109cac04 	addi	r2,r2,29360
 100df30:	10800383 	ldbu	r2,14(r2)
 100df34:	10c03fcc 	andi	r3,r2,255
 100df38:	e0bfe617 	ldw	r2,-104(fp)
 100df3c:	10c01a16 	blt	r2,r3,100dfa8 <alt_up_sd_card_find_next+0x378>
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster)) {
 100df40:	e13fec17 	ldw	r4,-80(fp)
 100df44:	e17fed84 	addi	r5,fp,-74
 100df48:	100ae100 	call	100ae10 <get_cluster_flag>
 100df4c:	1005003a 	cmpeq	r2,r2,zero
 100df50:	1000131e 	bne	r2,zero,100dfa0 <alt_up_sd_card_find_next+0x370>
							if ((new_cluster & 0x0000fff8) == 0x0000fff8) {
 100df54:	e0bfed8b 	ldhu	r2,-74(fp)
 100df58:	10bfffcc 	andi	r2,r2,65535
 100df5c:	10a0001c 	xori	r2,r2,32768
 100df60:	10a00004 	addi	r2,r2,-32768
 100df64:	10fffe0c 	andi	r3,r2,65528
 100df68:	00bffe14 	movui	r2,65528
 100df6c:	1880051e 	bne	r3,r2,100df84 <alt_up_sd_card_find_next+0x354>
								result = -1;
 100df70:	00bfffc4 	movi	r2,-1
 100df74:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 100df78:	00804074 	movhi	r2,257
 100df7c:	109ca704 	addi	r2,r2,29340
 100df80:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 100df84:	e0bfed8b 	ldhu	r2,-74(fp)
 100df88:	10bfffcc 	andi	r2,r2,65535
 100df8c:	10a0001c 	xori	r2,r2,32768
 100df90:	10a00004 	addi	r2,r2,-32768
 100df94:	10bffe0c 	andi	r2,r2,65528
 100df98:	e0bfec15 	stw	r2,-80(fp)
 100df9c:	00000206 	br	100dfa8 <alt_up_sd_card_find_next+0x378>
						} else {
							// Error encountered.                 
							result = -1;
 100dfa0:	00bfffc4 	movi	r2,-1
 100dfa4:	e0bfed0d 	sth	r2,-76(fp)
						}
					}
				} while (cluster < 0x0000fff8);
 100dfa8:	e0ffec17 	ldw	r3,-80(fp)
 100dfac:	00bffdd4 	movui	r2,65527
 100dfb0:	10ff910e 	bge	r2,r3,100ddf8 <alt_up_sd_card_find_next+0x1c8>
 100dfb4:	00000206 	br	100dfc0 <alt_up_sd_card_find_next+0x390>
			}
		} else {
			// Call Find_First first.
			result = 3;
 100dfb8:	008000c4 	movi	r2,3
 100dfbc:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 100dfc0:	e0bfed0f 	ldh	r2,-76(fp)
 100dfc4:	e0bfff15 	stw	r2,-4(fp)
 100dfc8:	e0bfff17 	ldw	r2,-4(fp)
}
 100dfcc:	e037883a 	mov	sp,fp
 100dfd0:	dfc00117 	ldw	ra,4(sp)
 100dfd4:	df000017 	ldw	fp,0(sp)
 100dfd8:	dec00204 	addi	sp,sp,8
 100dfdc:	f800283a 	ret

0100dfe0 <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 100dfe0:	deffe804 	addi	sp,sp,-96
 100dfe4:	dfc01715 	stw	ra,92(sp)
 100dfe8:	df001615 	stw	fp,88(sp)
 100dfec:	df001604 	addi	fp,sp,88
 100dff0:	e13ffd15 	stw	r4,-12(fp)
 100dff4:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 100dff8:	00bfffc4 	movi	r2,-1
 100dffc:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100e000:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100e004:	1005003a 	cmpeq	r2,r2,zero
 100e008:	1000d71e 	bne	r2,zero,100e368 <alt_up_sd_card_fopen+0x388>
 100e00c:	d0a75417 	ldw	r2,-25264(gp)
 100e010:	1005003a 	cmpeq	r2,r2,zero
 100e014:	1000d41e 	bne	r2,zero,100e368 <alt_up_sd_card_fopen+0x388>
		unsigned int home_directory_cluster = 0;
 100e018:	e03fec15 	stw	zero,-80(fp)
		 * Rules:
		 *  - no spaces
		 *  - at most 12 chatacters per name, with a period in 9th position.
		 *  - a / or a \ every at most 12 characters.
		 */
		filename_to_upper_case(name);
 100e01c:	e13ffd17 	ldw	r4,-12(fp)
 100e020:	100bddc0 	call	100bddc <filename_to_upper_case>
		if (check_file_name_for_FAT16_compliance(name)) {
 100e024:	e13ffd17 	ldw	r4,-12(fp)
 100e028:	100beac0 	call	100beac <check_file_name_for_FAT16_compliance>
 100e02c:	1005003a 	cmpeq	r2,r2,zero
 100e030:	1000cd1e 	bne	r2,zero,100e368 <alt_up_sd_card_fopen+0x388>
			int index;

			/* Get home directory cluster location for the specified file. 0 means root directory. */
			if (!get_home_directory_cluster_for_file(name,
 100e034:	e17fec04 	addi	r5,fp,-80
 100e038:	e1bfed04 	addi	r6,fp,-76
 100e03c:	e13ffd17 	ldw	r4,-12(fp)
 100e040:	100c4e80 	call	100c4e8 <get_home_directory_cluster_for_file>
 100e044:	1004c03a 	cmpne	r2,r2,zero
 100e048:	1000031e 	bne	r2,zero,100e058 <alt_up_sd_card_fopen+0x78>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
 100e04c:	e0bfeb0f 	ldh	r2,-84(fp)
 100e050:	e0bfff15 	stw	r2,-4(fp)
 100e054:	0000c606 	br	100e370 <alt_up_sd_card_fopen+0x390>
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 100e058:	e03fea15 	stw	zero,-88(fp)
 100e05c:	00000f06 	br	100e09c <alt_up_sd_card_fopen+0xbc>
				if (active_files[index].in_use == false) {
 100e060:	e0bfea17 	ldw	r2,-88(fp)
 100e064:	00c04074 	movhi	r3,257
 100e068:	18dcc104 	addi	r3,r3,29444
 100e06c:	100491ba 	slli	r2,r2,6
 100e070:	10c5883a 	add	r2,r2,r3
 100e074:	10800f04 	addi	r2,r2,60
 100e078:	10800017 	ldw	r2,0(r2)
 100e07c:	1004c03a 	cmpne	r2,r2,zero
 100e080:	1000031e 	bne	r2,zero,100e090 <alt_up_sd_card_fopen+0xb0>
					file_record_index = index;
 100e084:	e0bfea17 	ldw	r2,-88(fp)
 100e088:	e0bfeb0d 	sth	r2,-84(fp)
					break;
 100e08c:	00000606 	br	100e0a8 <alt_up_sd_card_fopen+0xc8>
					&home_directory_cluster, &home_dir)) {
				return file_record_index;
			}

			/* Find a free file slot to store file specs in. */
			for (index = 0; index < MAX_FILES_OPENED; index++) {
 100e090:	e0bfea17 	ldw	r2,-88(fp)
 100e094:	10800044 	addi	r2,r2,1
 100e098:	e0bfea15 	stw	r2,-88(fp)
 100e09c:	e0bfea17 	ldw	r2,-88(fp)
 100e0a0:	10800510 	cmplti	r2,r2,20
 100e0a4:	103fee1e 	bne	r2,zero,100e060 <alt_up_sd_card_fopen+0x80>
				if (active_files[index].in_use == false) {
					file_record_index = index;
					break;
				}
			}
			if (file_record_index >= 0) {
 100e0a8:	e0bfeb0f 	ldh	r2,-84(fp)
 100e0ac:	1004803a 	cmplt	r2,r2,zero
 100e0b0:	1000ad1e 	bne	r2,zero,100e368 <alt_up_sd_card_fopen+0x388>
				/* If file record is found, then look for the specified file. If the create flag is set to true
				 * and the file is not found, then it should be created in the current directory.
				 */

				if (find_file_in_directory(home_directory_cluster, name,
 100e0b4:	e0bfec17 	ldw	r2,-80(fp)
 100e0b8:	1009883a 	mov	r4,r2
 100e0bc:	e0bfeb0f 	ldh	r2,-84(fp)
 100e0c0:	100491ba 	slli	r2,r2,6
 100e0c4:	1007883a 	mov	r3,r2
 100e0c8:	00804074 	movhi	r2,257
 100e0cc:	109cc104 	addi	r2,r2,29444
 100e0d0:	188d883a 	add	r6,r3,r2
 100e0d4:	e17ffd17 	ldw	r5,-12(fp)
 100e0d8:	100c9fc0 	call	100c9fc <find_file_in_directory>
 100e0dc:	1005003a 	cmpeq	r2,r2,zero
 100e0e0:	10007d1e 	bne	r2,zero,100e2d8 <alt_up_sd_card_fopen+0x2f8>
						&(active_files[file_record_index]))) {
					if (create) {
 100e0e4:	e0bffe17 	ldw	r2,-8(fp)
 100e0e8:	1005003a 	cmpeq	r2,r2,zero
 100e0ec:	1000031e 	bne	r2,zero,100e0fc <alt_up_sd_card_fopen+0x11c>
						/* Do not allow overwriting existing files for now. */
						return -1;
 100e0f0:	00bfffc4 	movi	r2,-1
 100e0f4:	e0bfff15 	stw	r2,-4(fp)
 100e0f8:	00009d06 	br	100e370 <alt_up_sd_card_fopen+0x390>
					}
					active_files[file_record_index].current_cluster_index =
 100e0fc:	e17feb0f 	ldh	r5,-84(fp)
 100e100:	e0bfeb0f 	ldh	r2,-84(fp)
 100e104:	00c04074 	movhi	r3,257
 100e108:	18dcc104 	addi	r3,r3,29444
 100e10c:	100491ba 	slli	r2,r2,6
 100e110:	10c5883a 	add	r2,r2,r3
 100e114:	10800504 	addi	r2,r2,20
 100e118:	1080008b 	ldhu	r2,2(r2)
 100e11c:	113fffcc 	andi	r4,r2,65535
 100e120:	00c04074 	movhi	r3,257
 100e124:	18dcc104 	addi	r3,r3,29444
 100e128:	280491ba 	slli	r2,r5,6
 100e12c:	10c5883a 	add	r2,r2,r3
 100e130:	10800704 	addi	r2,r2,28
 100e134:	11000015 	stw	r4,0(r2)
							active_files[file_record_index].start_cluster_index;
					active_files[file_record_index].current_sector_in_cluster =
 100e138:	e0bfeb0f 	ldh	r2,-84(fp)
 100e13c:	00c04074 	movhi	r3,257
 100e140:	18dcc104 	addi	r3,r3,29444
 100e144:	100491ba 	slli	r2,r2,6
 100e148:	10c5883a 	add	r2,r2,r3
 100e14c:	10800804 	addi	r2,r2,32
 100e150:	10000015 	stw	zero,0(r2)
							0;
					active_files[file_record_index].current_byte_position = 0;
 100e154:	e0bfeb0f 	ldh	r2,-84(fp)
 100e158:	00c04074 	movhi	r3,257
 100e15c:	18dcc104 	addi	r3,r3,29444
 100e160:	100491ba 	slli	r2,r2,6
 100e164:	10c5883a 	add	r2,r2,r3
 100e168:	10800904 	addi	r2,r2,36
 100e16c:	10000015 	stw	zero,0(r2)
					active_files[file_record_index].in_use = true;
 100e170:	e0bfeb0f 	ldh	r2,-84(fp)
 100e174:	00c04074 	movhi	r3,257
 100e178:	18dcc104 	addi	r3,r3,29444
 100e17c:	100491ba 	slli	r2,r2,6
 100e180:	10c5883a 	add	r2,r2,r3
 100e184:	10c00f04 	addi	r3,r2,60
 100e188:	00800044 	movi	r2,1
 100e18c:	18800015 	stw	r2,0(r3)
					active_files[file_record_index].modified = false;
 100e190:	e0bfeb0f 	ldh	r2,-84(fp)
 100e194:	00c04074 	movhi	r3,257
 100e198:	18dcc104 	addi	r3,r3,29444
 100e19c:	100491ba 	slli	r2,r2,6
 100e1a0:	10c5883a 	add	r2,r2,r3
 100e1a4:	10800e04 	addi	r2,r2,56
 100e1a8:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 100e1ac:	e03fea15 	stw	zero,-88(fp)
 100e1b0:	00004506 	br	100e2c8 <alt_up_sd_card_fopen+0x2e8>
						if ((file_record_index != index)
 100e1b4:	e0ffeb0f 	ldh	r3,-84(fp)
 100e1b8:	e0bfea17 	ldw	r2,-88(fp)
 100e1bc:	18803f26 	beq	r3,r2,100e2bc <alt_up_sd_card_fopen+0x2dc>
 100e1c0:	e0bfea17 	ldw	r2,-88(fp)
 100e1c4:	00c04074 	movhi	r3,257
 100e1c8:	18dcc104 	addi	r3,r3,29444
 100e1cc:	100491ba 	slli	r2,r2,6
 100e1d0:	10c5883a 	add	r2,r2,r3
 100e1d4:	10800f04 	addi	r2,r2,60
 100e1d8:	10800017 	ldw	r2,0(r2)
 100e1dc:	10800058 	cmpnei	r2,r2,1
 100e1e0:	1000361e 	bne	r2,zero,100e2bc <alt_up_sd_card_fopen+0x2dc>
								&& (active_files[index].in_use == true)) {
							if ((active_files[file_record_index].file_record_cluster
 100e1e4:	e0bfeb0f 	ldh	r2,-84(fp)
 100e1e8:	00c04074 	movhi	r3,257
 100e1ec:	18dcc104 	addi	r3,r3,29444
 100e1f0:	100491ba 	slli	r2,r2,6
 100e1f4:	10c5883a 	add	r2,r2,r3
 100e1f8:	10800a04 	addi	r2,r2,40
 100e1fc:	11000017 	ldw	r4,0(r2)
 100e200:	e0bfea17 	ldw	r2,-88(fp)
 100e204:	00c04074 	movhi	r3,257
 100e208:	18dcc104 	addi	r3,r3,29444
 100e20c:	100491ba 	slli	r2,r2,6
 100e210:	10c5883a 	add	r2,r2,r3
 100e214:	10800a04 	addi	r2,r2,40
 100e218:	10800017 	ldw	r2,0(r2)
 100e21c:	2080271e 	bne	r4,r2,100e2bc <alt_up_sd_card_fopen+0x2dc>
 100e220:	e0bfeb0f 	ldh	r2,-84(fp)
 100e224:	00c04074 	movhi	r3,257
 100e228:	18dcc104 	addi	r3,r3,29444
 100e22c:	100491ba 	slli	r2,r2,6
 100e230:	10c5883a 	add	r2,r2,r3
 100e234:	10800b04 	addi	r2,r2,44
 100e238:	11000017 	ldw	r4,0(r2)
 100e23c:	e0bfea17 	ldw	r2,-88(fp)
 100e240:	00c04074 	movhi	r3,257
 100e244:	18dcc104 	addi	r3,r3,29444
 100e248:	100491ba 	slli	r2,r2,6
 100e24c:	10c5883a 	add	r2,r2,r3
 100e250:	10800b04 	addi	r2,r2,44
 100e254:	10800017 	ldw	r2,0(r2)
 100e258:	2080181e 	bne	r4,r2,100e2bc <alt_up_sd_card_fopen+0x2dc>
 100e25c:	e0bfeb0f 	ldh	r2,-84(fp)
 100e260:	00c04074 	movhi	r3,257
 100e264:	18dcc104 	addi	r3,r3,29444
 100e268:	100491ba 	slli	r2,r2,6
 100e26c:	10c5883a 	add	r2,r2,r3
 100e270:	10800c04 	addi	r2,r2,48
 100e274:	1100000b 	ldhu	r4,0(r2)
 100e278:	e0bfea17 	ldw	r2,-88(fp)
 100e27c:	00c04074 	movhi	r3,257
 100e280:	18dcc104 	addi	r3,r3,29444
 100e284:	100491ba 	slli	r2,r2,6
 100e288:	10c5883a 	add	r2,r2,r3
 100e28c:	10800c04 	addi	r2,r2,48
 100e290:	1080000b 	ldhu	r2,0(r2)
 100e294:	20ffffcc 	andi	r3,r4,65535
 100e298:	18e0001c 	xori	r3,r3,32768
 100e29c:	18e00004 	addi	r3,r3,-32768
 100e2a0:	10bfffcc 	andi	r2,r2,65535
 100e2a4:	10a0001c 	xori	r2,r2,32768
 100e2a8:	10a00004 	addi	r2,r2,-32768
 100e2ac:	1880031e 	bne	r3,r2,100e2bc <alt_up_sd_card_fopen+0x2dc>
									&& (active_files[file_record_index].file_record_sector_in_cluster
											== active_files[index].file_record_sector_in_cluster)
									&& (active_files[file_record_index].file_record_offset
											== active_files[index].file_record_offset)) {
								// file already in use.
								file_record_index = -2;
 100e2b0:	00bfff84 	movi	r2,-2
 100e2b4:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 100e2b8:	00002b06 	br	100e368 <alt_up_sd_card_fopen+0x388>
					active_files[file_record_index].current_byte_position = 0;
					active_files[file_record_index].in_use = true;
					active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++) {
 100e2bc:	e0bfea17 	ldw	r2,-88(fp)
 100e2c0:	10800044 	addi	r2,r2,1
 100e2c4:	e0bfea15 	stw	r2,-88(fp)
 100e2c8:	e0bfea17 	ldw	r2,-88(fp)
 100e2cc:	10800510 	cmplti	r2,r2,20
 100e2d0:	103fb81e 	bne	r2,zero,100e1b4 <alt_up_sd_card_fopen+0x1d4>
 100e2d4:	00002406 	br	100e368 <alt_up_sd_card_fopen+0x388>
								break;
							}
						}
					}

				} else if (create) {
 100e2d8:	e0bffe17 	ldw	r2,-8(fp)
 100e2dc:	1005003a 	cmpeq	r2,r2,zero
 100e2e0:	10001f1e 	bne	r2,zero,100e360 <alt_up_sd_card_fopen+0x380>
					/* Create file if needed. */
					if (create_file(name, &(active_files[file_record_index]),
 100e2e4:	e0bfeb0f 	ldh	r2,-84(fp)
 100e2e8:	100491ba 	slli	r2,r2,6
 100e2ec:	1007883a 	mov	r3,r2
 100e2f0:	00804074 	movhi	r2,257
 100e2f4:	109cc104 	addi	r2,r2,29444
 100e2f8:	188b883a 	add	r5,r3,r2
 100e2fc:	e1bfed04 	addi	r6,fp,-76
 100e300:	e13ffd17 	ldw	r4,-12(fp)
 100e304:	100d5340 	call	100d534 <create_file>
 100e308:	1005003a 	cmpeq	r2,r2,zero
 100e30c:	1000111e 	bne	r2,zero,100e354 <alt_up_sd_card_fopen+0x374>
							&home_dir)) {
						active_files[file_record_index].in_use = true;
 100e310:	e0bfeb0f 	ldh	r2,-84(fp)
 100e314:	00c04074 	movhi	r3,257
 100e318:	18dcc104 	addi	r3,r3,29444
 100e31c:	100491ba 	slli	r2,r2,6
 100e320:	10c5883a 	add	r2,r2,r3
 100e324:	10c00f04 	addi	r3,r2,60
 100e328:	00800044 	movi	r2,1
 100e32c:	18800015 	stw	r2,0(r3)
						active_files[file_record_index].modified = true;
 100e330:	e0bfeb0f 	ldh	r2,-84(fp)
 100e334:	00c04074 	movhi	r3,257
 100e338:	18dcc104 	addi	r3,r3,29444
 100e33c:	100491ba 	slli	r2,r2,6
 100e340:	10c5883a 	add	r2,r2,r3
 100e344:	10c00e04 	addi	r3,r2,56
 100e348:	00800044 	movi	r2,1
 100e34c:	18800015 	stw	r2,0(r3)
 100e350:	00000506 	br	100e368 <alt_up_sd_card_fopen+0x388>
					} else {
						/* If file creation fails then return an invalid file handle. */
						file_record_index = -1;
 100e354:	00bfffc4 	movi	r2,-1
 100e358:	e0bfeb0d 	sth	r2,-84(fp)
 100e35c:	00000206 	br	100e368 <alt_up_sd_card_fopen+0x388>
					}
				} else {
					/* Otherwise the file could not be opened.*/
					file_record_index = -1;
 100e360:	00bfffc4 	movi	r2,-1
 100e364:	e0bfeb0d 	sth	r2,-84(fp)
				}
			}
		}
	}

	return file_record_index;
 100e368:	e0bfeb0f 	ldh	r2,-84(fp)
 100e36c:	e0bfff15 	stw	r2,-4(fp)
 100e370:	e0bfff17 	ldw	r2,-4(fp)
}
 100e374:	e037883a 	mov	sp,fp
 100e378:	dfc00117 	ldw	ra,4(sp)
 100e37c:	df000017 	ldw	fp,0(sp)
 100e380:	dec00204 	addi	sp,sp,8
 100e384:	f800283a 	ret

0100e388 <alt_up_sd_card_set_attributes>:

void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 100e388:	defffd04 	addi	sp,sp,-12
 100e38c:	df000215 	stw	fp,8(sp)
 100e390:	df000204 	addi	fp,sp,8
 100e394:	e13ffe0d 	sth	r4,-8(fp)
 100e398:	e17fff0d 	sth	r5,-4(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 100e39c:	e0bffe0f 	ldh	r2,-8(fp)
 100e3a0:	1004803a 	cmplt	r2,r2,zero
 100e3a4:	1000181e 	bne	r2,zero,100e408 <alt_up_sd_card_set_attributes+0x80>
 100e3a8:	e0bffe0f 	ldh	r2,-8(fp)
 100e3ac:	10800508 	cmpgei	r2,r2,20
 100e3b0:	1000151e 	bne	r2,zero,100e408 <alt_up_sd_card_set_attributes+0x80>
		if (active_files[file_handle].in_use) {
 100e3b4:	e0bffe0f 	ldh	r2,-8(fp)
 100e3b8:	00c04074 	movhi	r3,257
 100e3bc:	18dcc104 	addi	r3,r3,29444
 100e3c0:	100491ba 	slli	r2,r2,6
 100e3c4:	10c5883a 	add	r2,r2,r3
 100e3c8:	10800f04 	addi	r2,r2,60
 100e3cc:	10800017 	ldw	r2,0(r2)
 100e3d0:	1005003a 	cmpeq	r2,r2,zero
 100e3d4:	10000c1e 	bne	r2,zero,100e408 <alt_up_sd_card_set_attributes+0x80>
			active_files[file_handle].attributes =
 100e3d8:	e17ffe0f 	ldh	r5,-8(fp)
 100e3dc:	e0bfff0b 	ldhu	r2,-4(fp)
 100e3e0:	1007883a 	mov	r3,r2
 100e3e4:	00bfffc4 	movi	r2,-1
 100e3e8:	1884703a 	and	r2,r3,r2
 100e3ec:	1009883a 	mov	r4,r2
 100e3f0:	00c04074 	movhi	r3,257
 100e3f4:	18dcc104 	addi	r3,r3,29444
 100e3f8:	280491ba 	slli	r2,r5,6
 100e3fc:	10c5883a 	add	r2,r2,r3
 100e400:	10800204 	addi	r2,r2,8
 100e404:	110000c5 	stb	r4,3(r2)
					((char) (attributes & 0x00ff));
		}
	}
}
 100e408:	e037883a 	mov	sp,fp
 100e40c:	df000017 	ldw	fp,0(sp)
 100e410:	dec00104 	addi	sp,sp,4
 100e414:	f800283a 	ret

0100e418 <alt_up_sd_card_get_attributes>:

short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 100e418:	defffd04 	addi	sp,sp,-12
 100e41c:	df000215 	stw	fp,8(sp)
 100e420:	df000204 	addi	fp,sp,8
 100e424:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 100e428:	00bfffc4 	movi	r2,-1
 100e42c:	e0bffe0d 	sth	r2,-8(fp)
	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 100e430:	e0bfff0f 	ldh	r2,-4(fp)
 100e434:	1004803a 	cmplt	r2,r2,zero
 100e438:	1000151e 	bne	r2,zero,100e490 <alt_up_sd_card_get_attributes+0x78>
 100e43c:	e0bfff0f 	ldh	r2,-4(fp)
 100e440:	10800508 	cmpgei	r2,r2,20
 100e444:	1000121e 	bne	r2,zero,100e490 <alt_up_sd_card_get_attributes+0x78>
		if (active_files[file_handle].in_use) {
 100e448:	e0bfff0f 	ldh	r2,-4(fp)
 100e44c:	00c04074 	movhi	r3,257
 100e450:	18dcc104 	addi	r3,r3,29444
 100e454:	100491ba 	slli	r2,r2,6
 100e458:	10c5883a 	add	r2,r2,r3
 100e45c:	10800f04 	addi	r2,r2,60
 100e460:	10800017 	ldw	r2,0(r2)
 100e464:	1005003a 	cmpeq	r2,r2,zero
 100e468:	1000091e 	bne	r2,zero,100e490 <alt_up_sd_card_get_attributes+0x78>
			result = ((active_files[file_handle].attributes) & 0x00ff);
 100e46c:	e0bfff0f 	ldh	r2,-4(fp)
 100e470:	00c04074 	movhi	r3,257
 100e474:	18dcc104 	addi	r3,r3,29444
 100e478:	100491ba 	slli	r2,r2,6
 100e47c:	10c5883a 	add	r2,r2,r3
 100e480:	10800204 	addi	r2,r2,8
 100e484:	108000c3 	ldbu	r2,3(r2)
 100e488:	10803fcc 	andi	r2,r2,255
 100e48c:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 100e490:	e0bffe0f 	ldh	r2,-8(fp)
}
 100e494:	e037883a 	mov	sp,fp
 100e498:	df000017 	ldw	fp,0(sp)
 100e49c:	dec00104 	addi	sp,sp,4
 100e4a0:	f800283a 	ret

0100e4a4 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 100e4a4:	defffa04 	addi	sp,sp,-24
 100e4a8:	dfc00515 	stw	ra,20(sp)
 100e4ac:	df000415 	stw	fp,16(sp)
 100e4b0:	df000404 	addi	fp,sp,16
 100e4b4:	e13ffe0d 	sth	r4,-8(fp)
	short int ch = -1;
 100e4b8:	00bfffc4 	movi	r2,-1
 100e4bc:	e0bffd0d 	sth	r2,-12(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 100e4c0:	e0bffe0f 	ldh	r2,-8(fp)
 100e4c4:	1004803a 	cmplt	r2,r2,zero
 100e4c8:	1000d31e 	bne	r2,zero,100e818 <alt_up_sd_card_read+0x374>
 100e4cc:	e0bffe0f 	ldh	r2,-8(fp)
 100e4d0:	10800508 	cmpgei	r2,r2,20
 100e4d4:	1000d01e 	bne	r2,zero,100e818 <alt_up_sd_card_read+0x374>
		if (active_files[file_handle].in_use) {
 100e4d8:	e0bffe0f 	ldh	r2,-8(fp)
 100e4dc:	00c04074 	movhi	r3,257
 100e4e0:	18dcc104 	addi	r3,r3,29444
 100e4e4:	100491ba 	slli	r2,r2,6
 100e4e8:	10c5883a 	add	r2,r2,r3
 100e4ec:	10800f04 	addi	r2,r2,60
 100e4f0:	10800017 	ldw	r2,0(r2)
 100e4f4:	1005003a 	cmpeq	r2,r2,zero
 100e4f8:	1000c71e 	bne	r2,zero,100e818 <alt_up_sd_card_read+0x374>
			if (active_files[file_handle].current_byte_position
 100e4fc:	e0bffe0f 	ldh	r2,-8(fp)
 100e500:	00c04074 	movhi	r3,257
 100e504:	18dcc104 	addi	r3,r3,29444
 100e508:	100491ba 	slli	r2,r2,6
 100e50c:	10c5883a 	add	r2,r2,r3
 100e510:	10800904 	addi	r2,r2,36
 100e514:	11000017 	ldw	r4,0(r2)
 100e518:	e0bffe0f 	ldh	r2,-8(fp)
 100e51c:	00c04074 	movhi	r3,257
 100e520:	18dcc104 	addi	r3,r3,29444
 100e524:	100491ba 	slli	r2,r2,6
 100e528:	10c5883a 	add	r2,r2,r3
 100e52c:	10800604 	addi	r2,r2,24
 100e530:	10800017 	ldw	r2,0(r2)
 100e534:	2080b82e 	bgeu	r4,r2,100e818 <alt_up_sd_card_read+0x374>
					< active_files[file_handle].file_size_in_bytes) {
				int data_sector = boot_sector_data.data_sector_offset
						+ (active_files[file_handle].current_cluster_index - 2)
								* boot_sector_data.sectors_per_cluster
						+ active_files[file_handle].current_sector_in_cluster;
 100e538:	00804074 	movhi	r2,257
 100e53c:	109cac04 	addi	r2,r2,29360
 100e540:	11001417 	ldw	r4,80(r2)
 100e544:	e0bffe0f 	ldh	r2,-8(fp)
 100e548:	00c04074 	movhi	r3,257
 100e54c:	18dcc104 	addi	r3,r3,29444
 100e550:	100491ba 	slli	r2,r2,6
 100e554:	10c5883a 	add	r2,r2,r3
 100e558:	10800704 	addi	r2,r2,28
 100e55c:	10800017 	ldw	r2,0(r2)
 100e560:	10ffff84 	addi	r3,r2,-2
 100e564:	00804074 	movhi	r2,257
 100e568:	109cac04 	addi	r2,r2,29360
 100e56c:	10800383 	ldbu	r2,14(r2)
 100e570:	10803fcc 	andi	r2,r2,255
 100e574:	1885383a 	mul	r2,r3,r2
 100e578:	2089883a 	add	r4,r4,r2
 100e57c:	e0bffe0f 	ldh	r2,-8(fp)
 100e580:	00c04074 	movhi	r3,257
 100e584:	18dcc104 	addi	r3,r3,29444
 100e588:	100491ba 	slli	r2,r2,6
 100e58c:	10c5883a 	add	r2,r2,r3
 100e590:	10800804 	addi	r2,r2,32
 100e594:	10800017 	ldw	r2,0(r2)
 100e598:	2085883a 	add	r2,r4,r2
 100e59c:	e0bffc15 	stw	r2,-16(fp)

				if ((active_files[file_handle].current_byte_position > 0)
 100e5a0:	e0bffe0f 	ldh	r2,-8(fp)
 100e5a4:	00c04074 	movhi	r3,257
 100e5a8:	18dcc104 	addi	r3,r3,29444
 100e5ac:	100491ba 	slli	r2,r2,6
 100e5b0:	10c5883a 	add	r2,r2,r3
 100e5b4:	10800904 	addi	r2,r2,36
 100e5b8:	10800017 	ldw	r2,0(r2)
 100e5bc:	1005003a 	cmpeq	r2,r2,zero
 100e5c0:	10006a1e 	bne	r2,zero,100e76c <alt_up_sd_card_read+0x2c8>
 100e5c4:	e0bffe0f 	ldh	r2,-8(fp)
 100e5c8:	00c04074 	movhi	r3,257
 100e5cc:	18dcc104 	addi	r3,r3,29444
 100e5d0:	100491ba 	slli	r2,r2,6
 100e5d4:	10c5883a 	add	r2,r2,r3
 100e5d8:	10800904 	addi	r2,r2,36
 100e5dc:	10800017 	ldw	r2,0(r2)
 100e5e0:	10807fcc 	andi	r2,r2,511
 100e5e4:	1004c03a 	cmpne	r2,r2,zero
 100e5e8:	1000601e 	bne	r2,zero,100e76c <alt_up_sd_card_read+0x2c8>
						&& ((active_files[file_handle].current_byte_position
								% 512) == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 100e5ec:	e0bffe0f 	ldh	r2,-8(fp)
 100e5f0:	00c04074 	movhi	r3,257
 100e5f4:	18dcc104 	addi	r3,r3,29444
 100e5f8:	100491ba 	slli	r2,r2,6
 100e5fc:	10c5883a 	add	r2,r2,r3
 100e600:	10800804 	addi	r2,r2,32
 100e604:	10c00017 	ldw	r3,0(r2)
 100e608:	00804074 	movhi	r2,257
 100e60c:	109cac04 	addi	r2,r2,29360
 100e610:	10800383 	ldbu	r2,14(r2)
 100e614:	10803fcc 	andi	r2,r2,255
 100e618:	10bfffc4 	addi	r2,r2,-1
 100e61c:	1880411e 	bne	r3,r2,100e724 <alt_up_sd_card_read+0x280>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 100e620:	e0bffe0f 	ldh	r2,-8(fp)
 100e624:	00c04074 	movhi	r3,257
 100e628:	18dcc104 	addi	r3,r3,29444
 100e62c:	100491ba 	slli	r2,r2,6
 100e630:	10c5883a 	add	r2,r2,r3
 100e634:	10800704 	addi	r2,r2,28
 100e638:	11000017 	ldw	r4,0(r2)
 100e63c:	e17ffd84 	addi	r5,fp,-10
 100e640:	100ae100 	call	100ae10 <get_cluster_flag>
 100e644:	1005003a 	cmpeq	r2,r2,zero
 100e648:	1000331e 	bne	r2,zero,100e718 <alt_up_sd_card_read+0x274>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if ((next_cluster & 0x0000fff8) == 0x0000fff8) {
 100e64c:	e0bffd8b 	ldhu	r2,-10(fp)
 100e650:	10bfffcc 	andi	r2,r2,65535
 100e654:	10fffe0c 	andi	r3,r2,65528
 100e658:	00bffe14 	movui	r2,65528
 100e65c:	1880031e 	bne	r3,r2,100e66c <alt_up_sd_card_read+0x1c8>
								/* End of file */
								return -1;
 100e660:	00bfffc4 	movi	r2,-1
 100e664:	e0bfff15 	stw	r2,-4(fp)
 100e668:	00006d06 	br	100e820 <alt_up_sd_card_read+0x37c>
							} else {
								active_files[file_handle].current_cluster_index =
 100e66c:	e13ffe0f 	ldh	r4,-8(fp)
 100e670:	e0bffd8b 	ldhu	r2,-10(fp)
 100e674:	117fffcc 	andi	r5,r2,65535
 100e678:	00c04074 	movhi	r3,257
 100e67c:	18dcc104 	addi	r3,r3,29444
 100e680:	200491ba 	slli	r2,r4,6
 100e684:	10c5883a 	add	r2,r2,r3
 100e688:	10800704 	addi	r2,r2,28
 100e68c:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 100e690:	e0bffe0f 	ldh	r2,-8(fp)
 100e694:	00c04074 	movhi	r3,257
 100e698:	18dcc104 	addi	r3,r3,29444
 100e69c:	100491ba 	slli	r2,r2,6
 100e6a0:	10c5883a 	add	r2,r2,r3
 100e6a4:	10800804 	addi	r2,r2,32
 100e6a8:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 100e6ac:	00804074 	movhi	r2,257
 100e6b0:	109cac04 	addi	r2,r2,29360
 100e6b4:	11001417 	ldw	r4,80(r2)
 100e6b8:	e0bffe0f 	ldh	r2,-8(fp)
 100e6bc:	00c04074 	movhi	r3,257
 100e6c0:	18dcc104 	addi	r3,r3,29444
 100e6c4:	100491ba 	slli	r2,r2,6
 100e6c8:	10c5883a 	add	r2,r2,r3
 100e6cc:	10800704 	addi	r2,r2,28
 100e6d0:	10800017 	ldw	r2,0(r2)
 100e6d4:	10ffff84 	addi	r3,r2,-2
 100e6d8:	00804074 	movhi	r2,257
 100e6dc:	109cac04 	addi	r2,r2,29360
 100e6e0:	10800383 	ldbu	r2,14(r2)
 100e6e4:	10803fcc 	andi	r2,r2,255
 100e6e8:	1885383a 	mul	r2,r3,r2
 100e6ec:	2089883a 	add	r4,r4,r2
 100e6f0:	e0bffe0f 	ldh	r2,-8(fp)
 100e6f4:	00c04074 	movhi	r3,257
 100e6f8:	18dcc104 	addi	r3,r3,29444
 100e6fc:	100491ba 	slli	r2,r2,6
 100e700:	10c5883a 	add	r2,r2,r3
 100e704:	10800804 	addi	r2,r2,32
 100e708:	10800017 	ldw	r2,0(r2)
 100e70c:	2085883a 	add	r2,r4,r2
 100e710:	e0bffc15 	stw	r2,-16(fp)
 100e714:	00001506 	br	100e76c <alt_up_sd_card_read+0x2c8>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return -2;
 100e718:	00bfff84 	movi	r2,-2
 100e71c:	e0bfff15 	stw	r2,-4(fp)
 100e720:	00003f06 	br	100e820 <alt_up_sd_card_read+0x37c>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster =
 100e724:	e17ffe0f 	ldh	r5,-8(fp)
 100e728:	e0bffe0f 	ldh	r2,-8(fp)
 100e72c:	00c04074 	movhi	r3,257
 100e730:	18dcc104 	addi	r3,r3,29444
 100e734:	100491ba 	slli	r2,r2,6
 100e738:	10c5883a 	add	r2,r2,r3
 100e73c:	10800804 	addi	r2,r2,32
 100e740:	10800017 	ldw	r2,0(r2)
 100e744:	11000044 	addi	r4,r2,1
 100e748:	00c04074 	movhi	r3,257
 100e74c:	18dcc104 	addi	r3,r3,29444
 100e750:	280491ba 	slli	r2,r5,6
 100e754:	10c5883a 	add	r2,r2,r3
 100e758:	10800804 	addi	r2,r2,32
 100e75c:	11000015 	stw	r4,0(r2)
								active_files[file_handle].current_sector_in_cluster
										+ 1;
						data_sector = data_sector + 1;
 100e760:	e0bffc17 	ldw	r2,-16(fp)
 100e764:	10800044 	addi	r2,r2,1
 100e768:	e0bffc15 	stw	r2,-16(fp)
					}
				}
				// Reading te first byte of the file.
				if (current_sector_index
 100e76c:	d0e75b17 	ldw	r3,-25236(gp)
 100e770:	e0bffc17 	ldw	r2,-16(fp)
 100e774:	1885883a 	add	r2,r3,r2
 100e778:	1007883a 	mov	r3,r2
 100e77c:	d0a75f17 	ldw	r2,-25220(gp)
 100e780:	18800826 	beq	r3,r2,100e7a4 <alt_up_sd_card_read+0x300>
						!= (data_sector
								+ fat_partition_offset_in_512_byte_sectors)) {
					if (!Read_Sector_Data(data_sector,
 100e784:	d1675b17 	ldw	r5,-25236(gp)
 100e788:	e13ffc17 	ldw	r4,-16(fp)
 100e78c:	100ad140 	call	100ad14 <Read_Sector_Data>
 100e790:	1004c03a 	cmpne	r2,r2,zero
 100e794:	1000031e 	bne	r2,zero,100e7a4 <alt_up_sd_card_read+0x300>
							fat_partition_offset_in_512_byte_sectors)) {
						return -2;
 100e798:	00bfff84 	movi	r2,-2
 100e79c:	e0bfff15 	stw	r2,-4(fp)
 100e7a0:	00001f06 	br	100e820 <alt_up_sd_card_read+0x37c>
					}
				}

				ch =
 100e7a4:	e0bffe0f 	ldh	r2,-8(fp)
 100e7a8:	00c04074 	movhi	r3,257
 100e7ac:	18dcc104 	addi	r3,r3,29444
 100e7b0:	100491ba 	slli	r2,r2,6
 100e7b4:	10c5883a 	add	r2,r2,r3
 100e7b8:	10800904 	addi	r2,r2,36
 100e7bc:	10800017 	ldw	r2,0(r2)
 100e7c0:	10807fcc 	andi	r2,r2,511
 100e7c4:	1007883a 	mov	r3,r2
 100e7c8:	d0a75a17 	ldw	r2,-25240(gp)
 100e7cc:	1885883a 	add	r2,r3,r2
 100e7d0:	10800023 	ldbuio	r2,0(r2)
 100e7d4:	10803fcc 	andi	r2,r2,255
 100e7d8:	e0bffd0d 	sth	r2,-12(fp)
						(unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
				active_files[file_handle].current_byte_position =
 100e7dc:	e17ffe0f 	ldh	r5,-8(fp)
 100e7e0:	e0bffe0f 	ldh	r2,-8(fp)
 100e7e4:	00c04074 	movhi	r3,257
 100e7e8:	18dcc104 	addi	r3,r3,29444
 100e7ec:	100491ba 	slli	r2,r2,6
 100e7f0:	10c5883a 	add	r2,r2,r3
 100e7f4:	10800904 	addi	r2,r2,36
 100e7f8:	10800017 	ldw	r2,0(r2)
 100e7fc:	11000044 	addi	r4,r2,1
 100e800:	00c04074 	movhi	r3,257
 100e804:	18dcc104 	addi	r3,r3,29444
 100e808:	280491ba 	slli	r2,r5,6
 100e80c:	10c5883a 	add	r2,r2,r3
 100e810:	10800904 	addi	r2,r2,36
 100e814:	11000015 	stw	r4,0(r2)
						active_files[file_handle].current_byte_position + 1;
			}
		}
	}

	return ch;
 100e818:	e0bffd0f 	ldh	r2,-12(fp)
 100e81c:	e0bfff15 	stw	r2,-4(fp)
 100e820:	e0bfff17 	ldw	r2,-4(fp)
}
 100e824:	e037883a 	mov	sp,fp
 100e828:	dfc00117 	ldw	ra,4(sp)
 100e82c:	df000017 	ldw	fp,0(sp)
 100e830:	dec00204 	addi	sp,sp,8
 100e834:	f800283a 	ret

0100e838 <alt_up_sd_card_write>:

bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 100e838:	defff604 	addi	sp,sp,-40
 100e83c:	dfc00915 	stw	ra,36(sp)
 100e840:	df000815 	stw	fp,32(sp)
 100e844:	df000804 	addi	fp,sp,32
 100e848:	e13ffd0d 	sth	r4,-12(fp)
 100e84c:	e17ffe05 	stb	r5,-8(fp)
	bool result = false;
 100e850:	e03ffa15 	stw	zero,-24(fp)

	if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED)) {
 100e854:	e0bffd0f 	ldh	r2,-12(fp)
 100e858:	1004803a 	cmplt	r2,r2,zero
 100e85c:	10017d1e 	bne	r2,zero,100ee54 <alt_up_sd_card_write+0x61c>
 100e860:	e0bffd0f 	ldh	r2,-12(fp)
 100e864:	10800508 	cmpgei	r2,r2,20
 100e868:	10017a1e 	bne	r2,zero,100ee54 <alt_up_sd_card_write+0x61c>
		if (active_files[file_handle].in_use) {
 100e86c:	e0bffd0f 	ldh	r2,-12(fp)
 100e870:	00c04074 	movhi	r3,257
 100e874:	18dcc104 	addi	r3,r3,29444
 100e878:	100491ba 	slli	r2,r2,6
 100e87c:	10c5883a 	add	r2,r2,r3
 100e880:	10800f04 	addi	r2,r2,60
 100e884:	10800017 	ldw	r2,0(r2)
 100e888:	1005003a 	cmpeq	r2,r2,zero
 100e88c:	1001711e 	bne	r2,zero,100ee54 <alt_up_sd_card_write+0x61c>
			int data_sector = boot_sector_data.data_sector_offset
					+ (active_files[file_handle].current_cluster_index - 2)
							* boot_sector_data.sectors_per_cluster
					+ active_files[file_handle].current_sector_in_cluster;
 100e890:	00804074 	movhi	r2,257
 100e894:	109cac04 	addi	r2,r2,29360
 100e898:	11001417 	ldw	r4,80(r2)
 100e89c:	e0bffd0f 	ldh	r2,-12(fp)
 100e8a0:	00c04074 	movhi	r3,257
 100e8a4:	18dcc104 	addi	r3,r3,29444
 100e8a8:	100491ba 	slli	r2,r2,6
 100e8ac:	10c5883a 	add	r2,r2,r3
 100e8b0:	10800704 	addi	r2,r2,28
 100e8b4:	10800017 	ldw	r2,0(r2)
 100e8b8:	10ffff84 	addi	r3,r2,-2
 100e8bc:	00804074 	movhi	r2,257
 100e8c0:	109cac04 	addi	r2,r2,29360
 100e8c4:	10800383 	ldbu	r2,14(r2)
 100e8c8:	10803fcc 	andi	r2,r2,255
 100e8cc:	1885383a 	mul	r2,r3,r2
 100e8d0:	2089883a 	add	r4,r4,r2
 100e8d4:	e0bffd0f 	ldh	r2,-12(fp)
 100e8d8:	00c04074 	movhi	r3,257
 100e8dc:	18dcc104 	addi	r3,r3,29444
 100e8e0:	100491ba 	slli	r2,r2,6
 100e8e4:	10c5883a 	add	r2,r2,r3
 100e8e8:	10800804 	addi	r2,r2,32
 100e8ec:	10800017 	ldw	r2,0(r2)
 100e8f0:	2085883a 	add	r2,r4,r2
 100e8f4:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset =
					active_files[file_handle].current_byte_position
							% boot_sector_data.sector_size_in_bytes;
 100e8f8:	e0bffd0f 	ldh	r2,-12(fp)
 100e8fc:	00c04074 	movhi	r3,257
 100e900:	18dcc104 	addi	r3,r3,29444
 100e904:	100491ba 	slli	r2,r2,6
 100e908:	10c5883a 	add	r2,r2,r3
 100e90c:	10800904 	addi	r2,r2,36
 100e910:	11000017 	ldw	r4,0(r2)
 100e914:	00804074 	movhi	r2,257
 100e918:	109cac04 	addi	r2,r2,29360
 100e91c:	1080030b 	ldhu	r2,12(r2)
 100e920:	10ffffcc 	andi	r3,r2,65535
 100e924:	20c5203a 	divu	r2,r4,r3
 100e928:	10c5383a 	mul	r2,r2,r3
 100e92c:	2085c83a 	sub	r2,r4,r2
 100e930:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position
 100e934:	e0bffd0f 	ldh	r2,-12(fp)
 100e938:	00c04074 	movhi	r3,257
 100e93c:	18dcc104 	addi	r3,r3,29444
 100e940:	100491ba 	slli	r2,r2,6
 100e944:	10c5883a 	add	r2,r2,r3
 100e948:	10800904 	addi	r2,r2,36
 100e94c:	11000017 	ldw	r4,0(r2)
 100e950:	e0bffd0f 	ldh	r2,-12(fp)
 100e954:	00c04074 	movhi	r3,257
 100e958:	18dcc104 	addi	r3,r3,29444
 100e95c:	100491ba 	slli	r2,r2,6
 100e960:	10c5883a 	add	r2,r2,r3
 100e964:	10800604 	addi	r2,r2,24
 100e968:	10800017 	ldw	r2,0(r2)
 100e96c:	2080682e 	bgeu	r4,r2,100eb10 <alt_up_sd_card_write+0x2d8>
					< active_files[file_handle].file_size_in_bytes) {
				if ((active_files[file_handle].current_byte_position > 0)
 100e970:	e0bffd0f 	ldh	r2,-12(fp)
 100e974:	00c04074 	movhi	r3,257
 100e978:	18dcc104 	addi	r3,r3,29444
 100e97c:	100491ba 	slli	r2,r2,6
 100e980:	10c5883a 	add	r2,r2,r3
 100e984:	10800904 	addi	r2,r2,36
 100e988:	10800017 	ldw	r2,0(r2)
 100e98c:	1005003a 	cmpeq	r2,r2,zero
 100e990:	1000e41e 	bne	r2,zero,100ed24 <alt_up_sd_card_write+0x4ec>
 100e994:	e0bff80f 	ldh	r2,-32(fp)
 100e998:	1004c03a 	cmpne	r2,r2,zero
 100e99c:	1000e11e 	bne	r2,zero,100ed24 <alt_up_sd_card_write+0x4ec>
						&& (buffer_offset == 0)) {
					// Read in a new sector of data.
					if (active_files[file_handle].current_sector_in_cluster
 100e9a0:	e0bffd0f 	ldh	r2,-12(fp)
 100e9a4:	00c04074 	movhi	r3,257
 100e9a8:	18dcc104 	addi	r3,r3,29444
 100e9ac:	100491ba 	slli	r2,r2,6
 100e9b0:	10c5883a 	add	r2,r2,r3
 100e9b4:	10800804 	addi	r2,r2,32
 100e9b8:	10c00017 	ldw	r3,0(r2)
 100e9bc:	00804074 	movhi	r2,257
 100e9c0:	109cac04 	addi	r2,r2,29360
 100e9c4:	10800383 	ldbu	r2,14(r2)
 100e9c8:	10803fcc 	andi	r2,r2,255
 100e9cc:	10bfffc4 	addi	r2,r2,-1
 100e9d0:	18803c1e 	bne	r3,r2,100eac4 <alt_up_sd_card_write+0x28c>
							== boot_sector_data.sectors_per_cluster - 1) {
						// Go to the next cluster.
						unsigned short int next_cluster;
						if (get_cluster_flag(
 100e9d4:	e0bffd0f 	ldh	r2,-12(fp)
 100e9d8:	00c04074 	movhi	r3,257
 100e9dc:	18dcc104 	addi	r3,r3,29444
 100e9e0:	100491ba 	slli	r2,r2,6
 100e9e4:	10c5883a 	add	r2,r2,r3
 100e9e8:	10800704 	addi	r2,r2,28
 100e9ec:	11000017 	ldw	r4,0(r2)
 100e9f0:	e17ffb04 	addi	r5,fp,-20
 100e9f4:	100ae100 	call	100ae10 <get_cluster_flag>
 100e9f8:	1005003a 	cmpeq	r2,r2,zero
 100e9fc:	10002f1e 	bne	r2,zero,100eabc <alt_up_sd_card_write+0x284>
								active_files[file_handle].current_cluster_index,
								&next_cluster)) {
							if (next_cluster < 0x0000fff8) {
 100ea00:	e0bffb0b 	ldhu	r2,-20(fp)
 100ea04:	10ffffcc 	andi	r3,r2,65535
 100ea08:	00bffdd4 	movui	r2,65527
 100ea0c:	10c0c536 	bltu	r2,r3,100ed24 <alt_up_sd_card_write+0x4ec>
								active_files[file_handle].current_cluster_index =
 100ea10:	e13ffd0f 	ldh	r4,-12(fp)
 100ea14:	e0bffb0b 	ldhu	r2,-20(fp)
 100ea18:	117fffcc 	andi	r5,r2,65535
 100ea1c:	00c04074 	movhi	r3,257
 100ea20:	18dcc104 	addi	r3,r3,29444
 100ea24:	200491ba 	slli	r2,r4,6
 100ea28:	10c5883a 	add	r2,r2,r3
 100ea2c:	10800704 	addi	r2,r2,28
 100ea30:	11400015 	stw	r5,0(r2)
										next_cluster;
								active_files[file_handle].current_sector_in_cluster =
 100ea34:	e0bffd0f 	ldh	r2,-12(fp)
 100ea38:	00c04074 	movhi	r3,257
 100ea3c:	18dcc104 	addi	r3,r3,29444
 100ea40:	100491ba 	slli	r2,r2,6
 100ea44:	10c5883a 	add	r2,r2,r3
 100ea48:	10800804 	addi	r2,r2,32
 100ea4c:	10000015 	stw	zero,0(r2)
										0;
								data_sector =
 100ea50:	00804074 	movhi	r2,257
 100ea54:	109cac04 	addi	r2,r2,29360
 100ea58:	11001417 	ldw	r4,80(r2)
 100ea5c:	e0bffd0f 	ldh	r2,-12(fp)
 100ea60:	00c04074 	movhi	r3,257
 100ea64:	18dcc104 	addi	r3,r3,29444
 100ea68:	100491ba 	slli	r2,r2,6
 100ea6c:	10c5883a 	add	r2,r2,r3
 100ea70:	10800704 	addi	r2,r2,28
 100ea74:	10800017 	ldw	r2,0(r2)
 100ea78:	10ffff84 	addi	r3,r2,-2
 100ea7c:	00804074 	movhi	r2,257
 100ea80:	109cac04 	addi	r2,r2,29360
 100ea84:	10800383 	ldbu	r2,14(r2)
 100ea88:	10803fcc 	andi	r2,r2,255
 100ea8c:	1885383a 	mul	r2,r3,r2
 100ea90:	2089883a 	add	r4,r4,r2
 100ea94:	e0bffd0f 	ldh	r2,-12(fp)
 100ea98:	00c04074 	movhi	r3,257
 100ea9c:	18dcc104 	addi	r3,r3,29444
 100eaa0:	100491ba 	slli	r2,r2,6
 100eaa4:	10c5883a 	add	r2,r2,r3
 100eaa8:	10800804 	addi	r2,r2,32
 100eaac:	10800017 	ldw	r2,0(r2)
 100eab0:	2085883a 	add	r2,r4,r2
 100eab4:	e0bff915 	stw	r2,-28(fp)
 100eab8:	00009a06 	br	100ed24 <alt_up_sd_card_write+0x4ec>
														- 2)
														* boot_sector_data.sectors_per_cluster
												+ active_files[file_handle].current_sector_in_cluster;
							}
						} else {
							return false;
 100eabc:	e03fff15 	stw	zero,-4(fp)
 100eac0:	0000e606 	br	100ee5c <alt_up_sd_card_write+0x624>
						}
					} else {
						active_files[file_handle].current_sector_in_cluster
 100eac4:	e17ffd0f 	ldh	r5,-12(fp)
 100eac8:	e0bffd0f 	ldh	r2,-12(fp)
 100eacc:	00c04074 	movhi	r3,257
 100ead0:	18dcc104 	addi	r3,r3,29444
 100ead4:	100491ba 	slli	r2,r2,6
 100ead8:	10c5883a 	add	r2,r2,r3
 100eadc:	10800804 	addi	r2,r2,32
 100eae0:	10800017 	ldw	r2,0(r2)
 100eae4:	11000044 	addi	r4,r2,1
 100eae8:	00c04074 	movhi	r3,257
 100eaec:	18dcc104 	addi	r3,r3,29444
 100eaf0:	280491ba 	slli	r2,r5,6
 100eaf4:	10c5883a 	add	r2,r2,r3
 100eaf8:	10800804 	addi	r2,r2,32
 100eafc:	11000015 	stw	r4,0(r2)
										+ 1;
//						active_files[file_handle].current_sector_in_cluster =
//								(active_files[file_handle].current_byte_position
//										/ boot_sector_data.sector_size_in_bytes)
//										% boot_sector_data.sectors_per_cluster;
						data_sector = data_sector + 1;
 100eb00:	e0bff917 	ldw	r2,-28(fp)
 100eb04:	10800044 	addi	r2,r2,1
 100eb08:	e0bff915 	stw	r2,-28(fp)
 100eb0c:	00008506 	br	100ed24 <alt_up_sd_card_write+0x4ec>
					}
				}
			} else {
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0)
 100eb10:	e0bffd0f 	ldh	r2,-12(fp)
 100eb14:	00c04074 	movhi	r3,257
 100eb18:	18dcc104 	addi	r3,r3,29444
 100eb1c:	100491ba 	slli	r2,r2,6
 100eb20:	10c5883a 	add	r2,r2,r3
 100eb24:	10800904 	addi	r2,r2,36
 100eb28:	10800017 	ldw	r2,0(r2)
 100eb2c:	1005003a 	cmpeq	r2,r2,zero
 100eb30:	10007c1e 	bne	r2,zero,100ed24 <alt_up_sd_card_write+0x4ec>
 100eb34:	e0bff80f 	ldh	r2,-32(fp)
 100eb38:	1004c03a 	cmpne	r2,r2,zero
 100eb3c:	1000791e 	bne	r2,zero,100ed24 <alt_up_sd_card_write+0x4ec>
						&& (buffer_offset == 0)) {
					if (active_files[file_handle].current_sector_in_cluster
 100eb40:	e0bffd0f 	ldh	r2,-12(fp)
 100eb44:	00c04074 	movhi	r3,257
 100eb48:	18dcc104 	addi	r3,r3,29444
 100eb4c:	100491ba 	slli	r2,r2,6
 100eb50:	10c5883a 	add	r2,r2,r3
 100eb54:	10800804 	addi	r2,r2,32
 100eb58:	10c00017 	ldw	r3,0(r2)
 100eb5c:	00804074 	movhi	r2,257
 100eb60:	109cac04 	addi	r2,r2,29360
 100eb64:	10800383 	ldbu	r2,14(r2)
 100eb68:	10803fcc 	andi	r2,r2,255
 100eb6c:	10bfffc4 	addi	r2,r2,-1
 100eb70:	1880381e 	bne	r3,r2,100ec54 <alt_up_sd_card_write+0x41c>
							== boot_sector_data.sectors_per_cluster - 1) {
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number)) {
 100eb74:	e13ffc04 	addi	r4,fp,-16
 100eb78:	100ce600 	call	100ce60 <find_first_empty_cluster>
 100eb7c:	1005003a 	cmpeq	r2,r2,zero
 100eb80:	1000321e 	bne	r2,zero,100ec4c <alt_up_sd_card_write+0x414>
							// mark clusters in both File Allocation Tables.
							mark_cluster(
 100eb84:	e0bffd0f 	ldh	r2,-12(fp)
 100eb88:	00c04074 	movhi	r3,257
 100eb8c:	18dcc104 	addi	r3,r3,29444
 100eb90:	100491ba 	slli	r2,r2,6
 100eb94:	10c5883a 	add	r2,r2,r3
 100eb98:	10800704 	addi	r2,r2,28
 100eb9c:	11000017 	ldw	r4,0(r2)
 100eba0:	e0bffc17 	ldw	r2,-16(fp)
 100eba4:	117fffcc 	andi	r5,r2,65535
 100eba8:	2960001c 	xori	r5,r5,32768
 100ebac:	29600004 	addi	r5,r5,-32768
 100ebb0:	01800044 	movi	r6,1
 100ebb4:	100aec80 	call	100aec8 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), true);
							mark_cluster(cluster_number, 0xffff, true);
 100ebb8:	e13ffc17 	ldw	r4,-16(fp)
 100ebbc:	017fffc4 	movi	r5,-1
 100ebc0:	01800044 	movi	r6,1
 100ebc4:	100aec80 	call	100aec8 <mark_cluster>
							mark_cluster(
 100ebc8:	e0bffd0f 	ldh	r2,-12(fp)
 100ebcc:	00c04074 	movhi	r3,257
 100ebd0:	18dcc104 	addi	r3,r3,29444
 100ebd4:	100491ba 	slli	r2,r2,6
 100ebd8:	10c5883a 	add	r2,r2,r3
 100ebdc:	10800704 	addi	r2,r2,28
 100ebe0:	11000017 	ldw	r4,0(r2)
 100ebe4:	e0bffc17 	ldw	r2,-16(fp)
 100ebe8:	117fffcc 	andi	r5,r2,65535
 100ebec:	2960001c 	xori	r5,r5,32768
 100ebf0:	29600004 	addi	r5,r5,-32768
 100ebf4:	000d883a 	mov	r6,zero
 100ebf8:	100aec80 	call	100aec8 <mark_cluster>
									active_files[file_handle].current_cluster_index,
									((unsigned short int) (cluster_number
											& 0x0000ffff)), false);
							mark_cluster(cluster_number, 0xffff, false);
 100ebfc:	e13ffc17 	ldw	r4,-16(fp)
 100ec00:	017fffc4 	movi	r5,-1
 100ec04:	000d883a 	mov	r6,zero
 100ec08:	100aec80 	call	100aec8 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index =
 100ec0c:	e0bffd0f 	ldh	r2,-12(fp)
 100ec10:	e13ffc17 	ldw	r4,-16(fp)
 100ec14:	00c04074 	movhi	r3,257
 100ec18:	18dcc104 	addi	r3,r3,29444
 100ec1c:	100491ba 	slli	r2,r2,6
 100ec20:	10c5883a 	add	r2,r2,r3
 100ec24:	10800704 	addi	r2,r2,28
 100ec28:	11000015 	stw	r4,0(r2)
									cluster_number;
							active_files[file_handle].current_sector_in_cluster =
 100ec2c:	e0bffd0f 	ldh	r2,-12(fp)
 100ec30:	00c04074 	movhi	r3,257
 100ec34:	18dcc104 	addi	r3,r3,29444
 100ec38:	100491ba 	slli	r2,r2,6
 100ec3c:	10c5883a 	add	r2,r2,r3
 100ec40:	10800804 	addi	r2,r2,32
 100ec44:	10000015 	stw	zero,0(r2)
 100ec48:	00001c06 	br	100ecbc <alt_up_sd_card_write+0x484>
									0;
						} else {
							return false;
 100ec4c:	e03fff15 	stw	zero,-4(fp)
 100ec50:	00008206 	br	100ee5c <alt_up_sd_card_write+0x624>
						}
					} else {
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster =
 100ec54:	e17ffd0f 	ldh	r5,-12(fp)
 100ec58:	e0bffd0f 	ldh	r2,-12(fp)
 100ec5c:	00c04074 	movhi	r3,257
 100ec60:	18dcc104 	addi	r3,r3,29444
 100ec64:	100491ba 	slli	r2,r2,6
 100ec68:	10c5883a 	add	r2,r2,r3
 100ec6c:	10800904 	addi	r2,r2,36
 100ec70:	10c00017 	ldw	r3,0(r2)
 100ec74:	00804074 	movhi	r2,257
 100ec78:	109cac04 	addi	r2,r2,29360
 100ec7c:	1080030b 	ldhu	r2,12(r2)
 100ec80:	10bfffcc 	andi	r2,r2,65535
 100ec84:	1889203a 	divu	r4,r3,r2
 100ec88:	00804074 	movhi	r2,257
 100ec8c:	109cac04 	addi	r2,r2,29360
 100ec90:	10800383 	ldbu	r2,14(r2)
 100ec94:	10c03fcc 	andi	r3,r2,255
 100ec98:	20c5203a 	divu	r2,r4,r3
 100ec9c:	10c5383a 	mul	r2,r2,r3
 100eca0:	2089c83a 	sub	r4,r4,r2
 100eca4:	00c04074 	movhi	r3,257
 100eca8:	18dcc104 	addi	r3,r3,29444
 100ecac:	280491ba 	slli	r2,r5,6
 100ecb0:	10c5883a 	add	r2,r2,r3
 100ecb4:	10800804 	addi	r2,r2,32
 100ecb8:	11000015 	stw	r4,0(r2)
								(active_files[file_handle].current_byte_position
										/ boot_sector_data.sector_size_in_bytes) % boot_sector_data.sectors_per_cluster;
					}
					data_sector =
 100ecbc:	00804074 	movhi	r2,257
 100ecc0:	109cac04 	addi	r2,r2,29360
 100ecc4:	11001417 	ldw	r4,80(r2)
 100ecc8:	e0bffd0f 	ldh	r2,-12(fp)
 100eccc:	00c04074 	movhi	r3,257
 100ecd0:	18dcc104 	addi	r3,r3,29444
 100ecd4:	100491ba 	slli	r2,r2,6
 100ecd8:	10c5883a 	add	r2,r2,r3
 100ecdc:	10800704 	addi	r2,r2,28
 100ece0:	10800017 	ldw	r2,0(r2)
 100ece4:	10ffff84 	addi	r3,r2,-2
 100ece8:	00804074 	movhi	r2,257
 100ecec:	109cac04 	addi	r2,r2,29360
 100ecf0:	10800383 	ldbu	r2,14(r2)
 100ecf4:	10803fcc 	andi	r2,r2,255
 100ecf8:	1885383a 	mul	r2,r3,r2
 100ecfc:	2089883a 	add	r4,r4,r2
 100ed00:	e0bffd0f 	ldh	r2,-12(fp)
 100ed04:	00c04074 	movhi	r3,257
 100ed08:	18dcc104 	addi	r3,r3,29444
 100ed0c:	100491ba 	slli	r2,r2,6
 100ed10:	10c5883a 	add	r2,r2,r3
 100ed14:	10800804 	addi	r2,r2,32
 100ed18:	10800017 	ldw	r2,0(r2)
 100ed1c:	2085883a 	add	r2,r4,r2
 100ed20:	e0bff915 	stw	r2,-28(fp)
									+ active_files[file_handle].current_sector_in_cluster;
				}
			}
			// Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
			if (current_sector_index
 100ed24:	d0e75b17 	ldw	r3,-25236(gp)
 100ed28:	e0bff917 	ldw	r2,-28(fp)
 100ed2c:	1885883a 	add	r2,r3,r2
 100ed30:	1007883a 	mov	r3,r2
 100ed34:	d0a75f17 	ldw	r2,-25220(gp)
 100ed38:	18800726 	beq	r3,r2,100ed58 <alt_up_sd_card_write+0x520>
					!= data_sector + fat_partition_offset_in_512_byte_sectors) {
				if (!Read_Sector_Data_Attempt_CRC(data_sector,
 100ed3c:	d1675b17 	ldw	r5,-25236(gp)
 100ed40:	e13ff917 	ldw	r4,-28(fp)
 100ed44:	100f1680 	call	100f168 <Read_Sector_Data_Attempt_CRC>
 100ed48:	1004c03a 	cmpne	r2,r2,zero
 100ed4c:	1000021e 	bne	r2,zero,100ed58 <alt_up_sd_card_write+0x520>
						fat_partition_offset_in_512_byte_sectors)) {
					return false;
 100ed50:	e03fff15 	stw	zero,-4(fp)
 100ed54:	00004106 	br	100ee5c <alt_up_sd_card_write+0x624>
				}
			}
			// Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 100ed58:	e0bff80f 	ldh	r2,-32(fp)
 100ed5c:	1007883a 	mov	r3,r2
 100ed60:	d0a75a17 	ldw	r2,-25240(gp)
 100ed64:	1885883a 	add	r2,r3,r2
 100ed68:	e0fffe07 	ldb	r3,-8(fp)
 100ed6c:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position =
 100ed70:	e17ffd0f 	ldh	r5,-12(fp)
 100ed74:	e0bffd0f 	ldh	r2,-12(fp)
 100ed78:	00c04074 	movhi	r3,257
 100ed7c:	18dcc104 	addi	r3,r3,29444
 100ed80:	100491ba 	slli	r2,r2,6
 100ed84:	10c5883a 	add	r2,r2,r3
 100ed88:	10800904 	addi	r2,r2,36
 100ed8c:	10800017 	ldw	r2,0(r2)
 100ed90:	11000044 	addi	r4,r2,1
 100ed94:	00c04074 	movhi	r3,257
 100ed98:	18dcc104 	addi	r3,r3,29444
 100ed9c:	280491ba 	slli	r2,r5,6
 100eda0:	10c5883a 	add	r2,r2,r3
 100eda4:	10800904 	addi	r2,r2,36
 100eda8:	11000015 	stw	r4,0(r2)
					active_files[file_handle].current_byte_position + 1;

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position
 100edac:	e0bffd0f 	ldh	r2,-12(fp)
 100edb0:	00c04074 	movhi	r3,257
 100edb4:	18dcc104 	addi	r3,r3,29444
 100edb8:	100491ba 	slli	r2,r2,6
 100edbc:	10c5883a 	add	r2,r2,r3
 100edc0:	10800904 	addi	r2,r2,36
 100edc4:	11000017 	ldw	r4,0(r2)
 100edc8:	e0bffd0f 	ldh	r2,-12(fp)
 100edcc:	00c04074 	movhi	r3,257
 100edd0:	18dcc104 	addi	r3,r3,29444
 100edd4:	100491ba 	slli	r2,r2,6
 100edd8:	10c5883a 	add	r2,r2,r3
 100eddc:	10800604 	addi	r2,r2,24
 100ede0:	10800017 	ldw	r2,0(r2)
 100ede4:	1100172e 	bgeu	r2,r4,100ee44 <alt_up_sd_card_write+0x60c>
					> active_files[file_handle].file_size_in_bytes) {
				active_files[file_handle].file_size_in_bytes =
 100ede8:	e17ffd0f 	ldh	r5,-12(fp)
 100edec:	e0bffd0f 	ldh	r2,-12(fp)
 100edf0:	00c04074 	movhi	r3,257
 100edf4:	18dcc104 	addi	r3,r3,29444
 100edf8:	100491ba 	slli	r2,r2,6
 100edfc:	10c5883a 	add	r2,r2,r3
 100ee00:	10800604 	addi	r2,r2,24
 100ee04:	10800017 	ldw	r2,0(r2)
 100ee08:	11000044 	addi	r4,r2,1
 100ee0c:	00c04074 	movhi	r3,257
 100ee10:	18dcc104 	addi	r3,r3,29444
 100ee14:	280491ba 	slli	r2,r5,6
 100ee18:	10c5883a 	add	r2,r2,r3
 100ee1c:	10800604 	addi	r2,r2,24
 100ee20:	11000015 	stw	r4,0(r2)
						active_files[file_handle].file_size_in_bytes + 1;
				active_files[file_handle].modified = true;
 100ee24:	e0bffd0f 	ldh	r2,-12(fp)
 100ee28:	00c04074 	movhi	r3,257
 100ee2c:	18dcc104 	addi	r3,r3,29444
 100ee30:	100491ba 	slli	r2,r2,6
 100ee34:	10c5883a 	add	r2,r2,r3
 100ee38:	10c00e04 	addi	r3,r2,56
 100ee3c:	00800044 	movi	r2,1
 100ee40:	18800015 	stw	r2,0(r3)
			}
			// Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
			current_sector_modified = true;
 100ee44:	00800044 	movi	r2,1
 100ee48:	d0a75e15 	stw	r2,-25224(gp)
			result = true;
 100ee4c:	00800044 	movi	r2,1
 100ee50:	e0bffa15 	stw	r2,-24(fp)
		}
	}

	return result;
 100ee54:	e0bffa17 	ldw	r2,-24(fp)
 100ee58:	e0bfff15 	stw	r2,-4(fp)
 100ee5c:	e0bfff17 	ldw	r2,-4(fp)
}
 100ee60:	e037883a 	mov	sp,fp
 100ee64:	dfc00117 	ldw	ra,4(sp)
 100ee68:	df000017 	ldw	fp,0(sp)
 100ee6c:	dec00204 	addi	sp,sp,8
 100ee70:	f800283a 	ret

0100ee74 <alt_up_sd_card_fclose>:

bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 100ee74:	defffb04 	addi	sp,sp,-20
 100ee78:	dfc00415 	stw	ra,16(sp)
 100ee7c:	df000315 	stw	fp,12(sp)
 100ee80:	df000304 	addi	fp,sp,12
 100ee84:	e13fff0d 	sth	r4,-4(fp)
	assert(file_handle >= 0);
 100ee88:	e0bfff0f 	ldh	r2,-4(fp)
 100ee8c:	1004403a 	cmpge	r2,r2,zero
 100ee90:	1000081e 	bne	r2,zero,100eeb4 <alt_up_sd_card_fclose+0x40>
 100ee94:	01004074 	movhi	r4,257
 100ee98:	210d6804 	addi	r4,r4,13728
 100ee9c:	0141bf04 	movi	r5,1788
 100eea0:	01804074 	movhi	r6,257
 100eea4:	318d6204 	addi	r6,r6,13704
 100eea8:	01c04074 	movhi	r7,257
 100eeac:	39cd7504 	addi	r7,r7,13780
 100eeb0:	10114880 	call	1011488 <__assert_func>

	bool result = false;
 100eeb4:	e03ffe15 	stw	zero,-8(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16)) {
 100eeb8:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100eebc:	1005003a 	cmpeq	r2,r2,zero
 100eec0:	1000641e 	bne	r2,zero,100f054 <alt_up_sd_card_fclose+0x1e0>
 100eec4:	d0a75417 	ldw	r2,-25264(gp)
 100eec8:	1005003a 	cmpeq	r2,r2,zero
 100eecc:	1000611e 	bne	r2,zero,100f054 <alt_up_sd_card_fclose+0x1e0>
		if (active_files[file_handle].in_use) {
 100eed0:	e0bfff0f 	ldh	r2,-4(fp)
 100eed4:	00c04074 	movhi	r3,257
 100eed8:	18dcc104 	addi	r3,r3,29444
 100eedc:	100491ba 	slli	r2,r2,6
 100eee0:	10c5883a 	add	r2,r2,r3
 100eee4:	10800f04 	addi	r2,r2,60
 100eee8:	10800017 	ldw	r2,0(r2)
 100eeec:	1005003a 	cmpeq	r2,r2,zero
 100eef0:	1000581e 	bne	r2,zero,100f054 <alt_up_sd_card_fclose+0x1e0>
			if (active_files[file_handle].modified) {
 100eef4:	e0bfff0f 	ldh	r2,-4(fp)
 100eef8:	00c04074 	movhi	r3,257
 100eefc:	18dcc104 	addi	r3,r3,29444
 100ef00:	100491ba 	slli	r2,r2,6
 100ef04:	10c5883a 	add	r2,r2,r3
 100ef08:	10800e04 	addi	r2,r2,56
 100ef0c:	10800017 	ldw	r2,0(r2)
 100ef10:	1005003a 	cmpeq	r2,r2,zero
 100ef14:	1000461e 	bne	r2,zero,100f030 <alt_up_sd_card_fclose+0x1bc>
				unsigned int record_sector =
						active_files[file_handle].file_record_sector_in_cluster;
 100ef18:	e0bfff0f 	ldh	r2,-4(fp)
 100ef1c:	00c04074 	movhi	r3,257
 100ef20:	18dcc104 	addi	r3,r3,29444
 100ef24:	100491ba 	slli	r2,r2,6
 100ef28:	10c5883a 	add	r2,r2,r3
 100ef2c:	10800b04 	addi	r2,r2,44
 100ef30:	10800017 	ldw	r2,0(r2)
 100ef34:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0) {
 100ef38:	e0bfff0f 	ldh	r2,-4(fp)
 100ef3c:	00c04074 	movhi	r3,257
 100ef40:	18dcc104 	addi	r3,r3,29444
 100ef44:	100491ba 	slli	r2,r2,6
 100ef48:	10c5883a 	add	r2,r2,r3
 100ef4c:	10800a04 	addi	r2,r2,40
 100ef50:	10800017 	ldw	r2,0(r2)
 100ef54:	1004c03a 	cmpne	r2,r2,zero
 100ef58:	1000071e 	bne	r2,zero,100ef78 <alt_up_sd_card_fclose+0x104>
					record_sector = record_sector
 100ef5c:	00804074 	movhi	r2,257
 100ef60:	109cac04 	addi	r2,r2,29360
 100ef64:	10c01317 	ldw	r3,76(r2)
 100ef68:	e0bffd17 	ldw	r2,-12(fp)
 100ef6c:	10c5883a 	add	r2,r2,r3
 100ef70:	e0bffd15 	stw	r2,-12(fp)
 100ef74:	00001406 	br	100efc8 <alt_up_sd_card_fclose+0x154>
							+ boot_sector_data.root_directory_sector_offset;
				} else {
					record_sector =
 100ef78:	00804074 	movhi	r2,257
 100ef7c:	109cac04 	addi	r2,r2,29360
 100ef80:	10c01417 	ldw	r3,80(r2)
 100ef84:	e0bffd17 	ldw	r2,-12(fp)
 100ef88:	1889883a 	add	r4,r3,r2
 100ef8c:	e0bfff0f 	ldh	r2,-4(fp)
 100ef90:	00c04074 	movhi	r3,257
 100ef94:	18dcc104 	addi	r3,r3,29444
 100ef98:	100491ba 	slli	r2,r2,6
 100ef9c:	10c5883a 	add	r2,r2,r3
 100efa0:	10800a04 	addi	r2,r2,40
 100efa4:	10800017 	ldw	r2,0(r2)
 100efa8:	10ffff84 	addi	r3,r2,-2
 100efac:	00804074 	movhi	r2,257
 100efb0:	109cac04 	addi	r2,r2,29360
 100efb4:	10800383 	ldbu	r2,14(r2)
 100efb8:	10803fcc 	andi	r2,r2,255
 100efbc:	1885383a 	mul	r2,r3,r2
 100efc0:	2085883a 	add	r2,r4,r2
 100efc4:	e0bffd15 	stw	r2,-12(fp)
							record_sector + boot_sector_data.data_sector_offset
									+ (active_files[file_handle].file_record_cluster
											- 2)
											* boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector,
 100efc8:	e13ffd17 	ldw	r4,-12(fp)
 100efcc:	d1675b17 	ldw	r5,-25236(gp)
 100efd0:	100ad140 	call	100ad14 <Read_Sector_Data>
 100efd4:	1005003a 	cmpeq	r2,r2,zero
 100efd8:	1000151e 	bne	r2,zero,100f030 <alt_up_sd_card_fclose+0x1bc>
						fat_partition_offset_in_512_byte_sectors)) {
					if (Write_File_Record_At_Offset(
 100efdc:	e0bfff0f 	ldh	r2,-4(fp)
 100efe0:	00c04074 	movhi	r3,257
 100efe4:	18dcc104 	addi	r3,r3,29444
 100efe8:	100491ba 	slli	r2,r2,6
 100efec:	10c5883a 	add	r2,r2,r3
 100eff0:	10800c04 	addi	r2,r2,48
 100eff4:	1080000b 	ldhu	r2,0(r2)
 100eff8:	113fffcc 	andi	r4,r2,65535
 100effc:	2120001c 	xori	r4,r4,32768
 100f000:	21200004 	addi	r4,r4,-32768
 100f004:	e0bfff0f 	ldh	r2,-4(fp)
 100f008:	100491ba 	slli	r2,r2,6
 100f00c:	1007883a 	mov	r3,r2
 100f010:	00804074 	movhi	r2,257
 100f014:	109cc104 	addi	r2,r2,29444
 100f018:	188b883a 	add	r5,r3,r2
 100f01c:	100b3e00 	call	100b3e0 <Write_File_Record_At_Offset>
 100f020:	1005003a 	cmpeq	r2,r2,zero
 100f024:	1000021e 	bne	r2,zero,100f030 <alt_up_sd_card_fclose+0x1bc>
							active_files[file_handle].file_record_offset,
							&(active_files[file_handle]))) {
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 100f028:	100acc40 	call	100acc4 <Save_Modified_Sector>
 100f02c:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 100f030:	e0bfff0f 	ldh	r2,-4(fp)
 100f034:	00c04074 	movhi	r3,257
 100f038:	18dcc104 	addi	r3,r3,29444
 100f03c:	100491ba 	slli	r2,r2,6
 100f040:	10c5883a 	add	r2,r2,r3
 100f044:	10800f04 	addi	r2,r2,60
 100f048:	10000015 	stw	zero,0(r2)
			result = true;
 100f04c:	00800044 	movi	r2,1
 100f050:	e0bffe15 	stw	r2,-8(fp)
		}
	}

	return result;
 100f054:	e0bffe17 	ldw	r2,-8(fp)
}
 100f058:	e037883a 	mov	sp,fp
 100f05c:	dfc00117 	ldw	ra,4(sp)
 100f060:	df000017 	ldw	fp,0(sp)
 100f064:	dec00204 	addi	sp,sp,8
 100f068:	f800283a 	ret

0100f06c <Read_Sector_Data_CRC>:

bool Read_Sector_Data_CRC(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 100f06c:	defff904 	addi	sp,sp,-28
 100f070:	dfc00615 	stw	ra,24(sp)
 100f074:	df000515 	stw	fp,20(sp)
 100f078:	df000504 	addi	fp,sp,20
 100f07c:	e13ffd15 	stw	r4,-12(fp)
 100f080:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 100f084:	e03ffc15 	stw	zero,-16(fp)

	if (alt_up_sd_card_is_Present()) {
 100f088:	100da200 	call	100da20 <alt_up_sd_card_is_Present>
 100f08c:	1005003a 	cmpeq	r2,r2,zero
 100f090:	10002d1e 	bne	r2,zero,100f148 <Read_Sector_Data_CRC+0xdc>
		short int reg_state = 0xff;
 100f094:	00803fc4 	movi	r2,255
 100f098:	e0bffb0d 	sth	r2,-20(fp)

		/* Write data to the SD card if the current buffer is out of date. */
		if (current_sector_modified) {
 100f09c:	d0a75e17 	ldw	r2,-25224(gp)
 100f0a0:	1005003a 	cmpeq	r2,r2,zero
 100f0a4:	1000081e 	bne	r2,zero,100f0c8 <Read_Sector_Data_CRC+0x5c>
			if (Write_Sector_Data(current_sector_index, 0) == false) {
 100f0a8:	d0a75f17 	ldw	r2,-25220(gp)
 100f0ac:	1009883a 	mov	r4,r2
 100f0b0:	000b883a 	mov	r5,zero
 100f0b4:	100abfc0 	call	100abfc <Write_Sector_Data>
 100f0b8:	1004c03a 	cmpne	r2,r2,zero
 100f0bc:	1000021e 	bne	r2,zero,100f0c8 <Read_Sector_Data_CRC+0x5c>
				return false;
 100f0c0:	e03fff15 	stw	zero,-4(fp)
 100f0c4:	00002206 	br	100f150 <Read_Sector_Data_CRC+0xe4>
			}
		}
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
		IOWR_32DIRECT(command_argument_register, 0,
 100f0c8:	d0a75917 	ldw	r2,-25244(gp)
 100f0cc:	1009883a 	mov	r4,r2
 100f0d0:	e0fffd17 	ldw	r3,-12(fp)
 100f0d4:	e0bffe17 	ldw	r2,-8(fp)
 100f0d8:	1885883a 	add	r2,r3,r2
 100f0dc:	1006927a 	slli	r3,r2,9
 100f0e0:	2005883a 	mov	r2,r4
 100f0e4:	10c00035 	stwio	r3,0(r2)
				(sector_index + partition_offset)*512);
		IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 100f0e8:	d0a75817 	ldw	r2,-25248(gp)
 100f0ec:	1007883a 	mov	r3,r2
 100f0f0:	00800444 	movi	r2,17
 100f0f4:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 100f0f8:	d0a75517 	ldw	r2,-25260(gp)
 100f0fc:	1080002b 	ldhuio	r2,0(r2)
 100f100:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04) != 0);
 100f104:	e0bffb0b 	ldhu	r2,-20(fp)
 100f108:	10bfffcc 	andi	r2,r2,65535
 100f10c:	1080010c 	andi	r2,r2,4
 100f110:	1004c03a 	cmpne	r2,r2,zero
 100f114:	103ff81e 	bne	r2,zero,100f0f8 <Read_Sector_Data_CRC+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x30) == 0) {
 100f118:	e0bffb0b 	ldhu	r2,-20(fp)
 100f11c:	10bfffcc 	andi	r2,r2,65535
 100f120:	10800c0c 	andi	r2,r2,48
 100f124:	1004c03a 	cmpne	r2,r2,zero
 100f128:	1000071e 	bne	r2,zero,100f148 <Read_Sector_Data_CRC+0xdc>
			result = true;
 100f12c:	00800044 	movi	r2,1
 100f130:	e0bffc15 	stw	r2,-16(fp)
			current_sector_modified = false;
 100f134:	d0275e15 	stw	zero,-25224(gp)
			current_sector_index = sector_index + partition_offset;
 100f138:	e0fffd17 	ldw	r3,-12(fp)
 100f13c:	e0bffe17 	ldw	r2,-8(fp)
 100f140:	1885883a 	add	r2,r3,r2
 100f144:	d0a75f15 	stw	r2,-25220(gp)
		}
	}
	return result;
 100f148:	e0bffc17 	ldw	r2,-16(fp)
 100f14c:	e0bfff15 	stw	r2,-4(fp)
 100f150:	e0bfff17 	ldw	r2,-4(fp)
}
 100f154:	e037883a 	mov	sp,fp
 100f158:	dfc00117 	ldw	ra,4(sp)
 100f15c:	df000017 	ldw	fp,0(sp)
 100f160:	dec00204 	addi	sp,sp,8
 100f164:	f800283a 	ret

0100f168 <Read_Sector_Data_Attempt_CRC>:

bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
 100f168:	defff804 	addi	sp,sp,-32
 100f16c:	dfc00715 	stw	ra,28(sp)
 100f170:	df000615 	stw	fp,24(sp)
 100f174:	df000604 	addi	fp,sp,24
 100f178:	e13ffd15 	stw	r4,-12(fp)
 100f17c:	e17ffe15 	stw	r5,-8(fp)
	int i;
	bool correct;
	const int attempts = 100;
 100f180:	00801904 	movi	r2,100
 100f184:	e0bffa15 	stw	r2,-24(fp)

	for (i = 0; i < attempts; i++) {
 100f188:	e03ffc15 	stw	zero,-16(fp)
 100f18c:	00000d06 	br	100f1c4 <Read_Sector_Data_Attempt_CRC+0x5c>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
 100f190:	e13ffd17 	ldw	r4,-12(fp)
 100f194:	e17ffe17 	ldw	r5,-8(fp)
 100f198:	100f06c0 	call	100f06c <Read_Sector_Data_CRC>
 100f19c:	e0bffb15 	stw	r2,-20(fp)
		if (correct) {
 100f1a0:	e0bffb17 	ldw	r2,-20(fp)
 100f1a4:	1005003a 	cmpeq	r2,r2,zero
 100f1a8:	1000031e 	bne	r2,zero,100f1b8 <Read_Sector_Data_Attempt_CRC+0x50>
			return true;
 100f1ac:	00800044 	movi	r2,1
 100f1b0:	e0bfff15 	stw	r2,-4(fp)
 100f1b4:	00000a06 	br	100f1e0 <Read_Sector_Data_Attempt_CRC+0x78>
bool Read_Sector_Data_Attempt_CRC(int sector_index, int partition_offset) {
	int i;
	bool correct;
	const int attempts = 100;

	for (i = 0; i < attempts; i++) {
 100f1b8:	e0bffc17 	ldw	r2,-16(fp)
 100f1bc:	10800044 	addi	r2,r2,1
 100f1c0:	e0bffc15 	stw	r2,-16(fp)
 100f1c4:	e0fffc17 	ldw	r3,-16(fp)
 100f1c8:	e0bffa17 	ldw	r2,-24(fp)
 100f1cc:	18bff016 	blt	r3,r2,100f190 <Read_Sector_Data_Attempt_CRC+0x28>
		correct = Read_Sector_Data_CRC(sector_index, partition_offset);
		if (correct) {
			return true;
		}
	}
	return Read_Sector_Data(sector_index, partition_offset);
 100f1d0:	e13ffd17 	ldw	r4,-12(fp)
 100f1d4:	e17ffe17 	ldw	r5,-8(fp)
 100f1d8:	100ad140 	call	100ad14 <Read_Sector_Data>
 100f1dc:	e0bfff15 	stw	r2,-4(fp)
 100f1e0:	e0bfff17 	ldw	r2,-4(fp)
}
 100f1e4:	e037883a 	mov	sp,fp
 100f1e8:	dfc00117 	ldw	ra,4(sp)
 100f1ec:	df000017 	ldw	fp,0(sp)
 100f1f0:	dec00204 	addi	sp,sp,8
 100f1f4:	f800283a 	ret

0100f1f8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100f1f8:	defffa04 	addi	sp,sp,-24
 100f1fc:	dfc00515 	stw	ra,20(sp)
 100f200:	df000415 	stw	fp,16(sp)
 100f204:	df000404 	addi	fp,sp,16
 100f208:	e13ffd15 	stw	r4,-12(fp)
 100f20c:	e17ffe15 	stw	r5,-8(fp)
 100f210:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100f214:	e0bffd17 	ldw	r2,-12(fp)
 100f218:	10800017 	ldw	r2,0(r2)
 100f21c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100f220:	e0bffc17 	ldw	r2,-16(fp)
 100f224:	11000a04 	addi	r4,r2,40
 100f228:	e0bffd17 	ldw	r2,-12(fp)
 100f22c:	11c00217 	ldw	r7,8(r2)
 100f230:	e17ffe17 	ldw	r5,-8(fp)
 100f234:	e1bfff17 	ldw	r6,-4(fp)
 100f238:	100f83c0 	call	100f83c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100f23c:	e037883a 	mov	sp,fp
 100f240:	dfc00117 	ldw	ra,4(sp)
 100f244:	df000017 	ldw	fp,0(sp)
 100f248:	dec00204 	addi	sp,sp,8
 100f24c:	f800283a 	ret

0100f250 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100f250:	defffa04 	addi	sp,sp,-24
 100f254:	dfc00515 	stw	ra,20(sp)
 100f258:	df000415 	stw	fp,16(sp)
 100f25c:	df000404 	addi	fp,sp,16
 100f260:	e13ffd15 	stw	r4,-12(fp)
 100f264:	e17ffe15 	stw	r5,-8(fp)
 100f268:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100f26c:	e0bffd17 	ldw	r2,-12(fp)
 100f270:	10800017 	ldw	r2,0(r2)
 100f274:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100f278:	e0bffc17 	ldw	r2,-16(fp)
 100f27c:	11000a04 	addi	r4,r2,40
 100f280:	e0bffd17 	ldw	r2,-12(fp)
 100f284:	11c00217 	ldw	r7,8(r2)
 100f288:	e17ffe17 	ldw	r5,-8(fp)
 100f28c:	e1bfff17 	ldw	r6,-4(fp)
 100f290:	100fa600 	call	100fa60 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100f294:	e037883a 	mov	sp,fp
 100f298:	dfc00117 	ldw	ra,4(sp)
 100f29c:	df000017 	ldw	fp,0(sp)
 100f2a0:	dec00204 	addi	sp,sp,8
 100f2a4:	f800283a 	ret

0100f2a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100f2a8:	defffc04 	addi	sp,sp,-16
 100f2ac:	dfc00315 	stw	ra,12(sp)
 100f2b0:	df000215 	stw	fp,8(sp)
 100f2b4:	df000204 	addi	fp,sp,8
 100f2b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100f2bc:	e0bfff17 	ldw	r2,-4(fp)
 100f2c0:	10800017 	ldw	r2,0(r2)
 100f2c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100f2c8:	e0bffe17 	ldw	r2,-8(fp)
 100f2cc:	11000a04 	addi	r4,r2,40
 100f2d0:	e0bfff17 	ldw	r2,-4(fp)
 100f2d4:	11400217 	ldw	r5,8(r2)
 100f2d8:	100f6d40 	call	100f6d4 <altera_avalon_jtag_uart_close>
}
 100f2dc:	e037883a 	mov	sp,fp
 100f2e0:	dfc00117 	ldw	ra,4(sp)
 100f2e4:	df000017 	ldw	fp,0(sp)
 100f2e8:	dec00204 	addi	sp,sp,8
 100f2ec:	f800283a 	ret

0100f2f0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100f2f0:	defffa04 	addi	sp,sp,-24
 100f2f4:	dfc00515 	stw	ra,20(sp)
 100f2f8:	df000415 	stw	fp,16(sp)
 100f2fc:	df000404 	addi	fp,sp,16
 100f300:	e13ffd15 	stw	r4,-12(fp)
 100f304:	e17ffe15 	stw	r5,-8(fp)
 100f308:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100f30c:	e0bffd17 	ldw	r2,-12(fp)
 100f310:	10800017 	ldw	r2,0(r2)
 100f314:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100f318:	e0bffc17 	ldw	r2,-16(fp)
 100f31c:	11000a04 	addi	r4,r2,40
 100f320:	e17ffe17 	ldw	r5,-8(fp)
 100f324:	e1bfff17 	ldw	r6,-4(fp)
 100f328:	100f7480 	call	100f748 <altera_avalon_jtag_uart_ioctl>
}
 100f32c:	e037883a 	mov	sp,fp
 100f330:	dfc00117 	ldw	ra,4(sp)
 100f334:	df000017 	ldw	fp,0(sp)
 100f338:	dec00204 	addi	sp,sp,8
 100f33c:	f800283a 	ret

0100f340 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100f340:	defffb04 	addi	sp,sp,-20
 100f344:	dfc00415 	stw	ra,16(sp)
 100f348:	df000315 	stw	fp,12(sp)
 100f34c:	df000304 	addi	fp,sp,12
 100f350:	e13ffd15 	stw	r4,-12(fp)
 100f354:	e17ffe15 	stw	r5,-8(fp)
 100f358:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100f35c:	e0fffd17 	ldw	r3,-12(fp)
 100f360:	00800044 	movi	r2,1
 100f364:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100f368:	e0bffd17 	ldw	r2,-12(fp)
 100f36c:	10800017 	ldw	r2,0(r2)
 100f370:	11000104 	addi	r4,r2,4
 100f374:	e0bffd17 	ldw	r2,-12(fp)
 100f378:	10800817 	ldw	r2,32(r2)
 100f37c:	1007883a 	mov	r3,r2
 100f380:	2005883a 	mov	r2,r4
 100f384:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 100f388:	e13fff17 	ldw	r4,-4(fp)
 100f38c:	e17ffd17 	ldw	r5,-12(fp)
 100f390:	01804074 	movhi	r6,257
 100f394:	31bcfe04 	addi	r6,r6,-3080
 100f398:	1010bd80 	call	1010bd8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100f39c:	e0bffd17 	ldw	r2,-12(fp)
 100f3a0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100f3a4:	e0bffd17 	ldw	r2,-12(fp)
 100f3a8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100f3ac:	00804074 	movhi	r2,257
 100f3b0:	109c1b04 	addi	r2,r2,28780
 100f3b4:	10800017 	ldw	r2,0(r2)
 100f3b8:	100b883a 	mov	r5,r2
 100f3bc:	01804074 	movhi	r6,257
 100f3c0:	31bd8904 	addi	r6,r6,-2524
 100f3c4:	e1fffd17 	ldw	r7,-12(fp)
 100f3c8:	10106640 	call	1010664 <alt_alarm_start>
 100f3cc:	1004403a 	cmpge	r2,r2,zero
 100f3d0:	1000041e 	bne	r2,zero,100f3e4 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100f3d4:	e0fffd17 	ldw	r3,-12(fp)
 100f3d8:	00a00034 	movhi	r2,32768
 100f3dc:	10bfffc4 	addi	r2,r2,-1
 100f3e0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100f3e4:	e037883a 	mov	sp,fp
 100f3e8:	dfc00117 	ldw	ra,4(sp)
 100f3ec:	df000017 	ldw	fp,0(sp)
 100f3f0:	dec00204 	addi	sp,sp,8
 100f3f4:	f800283a 	ret

0100f3f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100f3f8:	defff704 	addi	sp,sp,-36
 100f3fc:	df000815 	stw	fp,32(sp)
 100f400:	df000804 	addi	fp,sp,32
 100f404:	e13ffe15 	stw	r4,-8(fp)
 100f408:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100f40c:	e0bffe17 	ldw	r2,-8(fp)
 100f410:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 100f414:	e0bffd17 	ldw	r2,-12(fp)
 100f418:	10800017 	ldw	r2,0(r2)
 100f41c:	e0bffc15 	stw	r2,-16(fp)
 100f420:	00000006 	br	100f424 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f424:	e0bffc17 	ldw	r2,-16(fp)
 100f428:	10800104 	addi	r2,r2,4
 100f42c:	10800037 	ldwio	r2,0(r2)
 100f430:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100f434:	e0bffb17 	ldw	r2,-20(fp)
 100f438:	1080c00c 	andi	r2,r2,768
 100f43c:	1005003a 	cmpeq	r2,r2,zero
 100f440:	1000741e 	bne	r2,zero,100f614 <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100f444:	e0bffb17 	ldw	r2,-20(fp)
 100f448:	1080400c 	andi	r2,r2,256
 100f44c:	1005003a 	cmpeq	r2,r2,zero
 100f450:	1000351e 	bne	r2,zero,100f528 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100f454:	00800074 	movhi	r2,1
 100f458:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f45c:	e0bffd17 	ldw	r2,-12(fp)
 100f460:	10800a17 	ldw	r2,40(r2)
 100f464:	10800044 	addi	r2,r2,1
 100f468:	1081ffcc 	andi	r2,r2,2047
 100f46c:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 100f470:	e0bffd17 	ldw	r2,-12(fp)
 100f474:	10c00b17 	ldw	r3,44(r2)
 100f478:	e0bff917 	ldw	r2,-28(fp)
 100f47c:	18801626 	beq	r3,r2,100f4d8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100f480:	e0bffc17 	ldw	r2,-16(fp)
 100f484:	10800037 	ldwio	r2,0(r2)
 100f488:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100f48c:	e0bffa17 	ldw	r2,-24(fp)
 100f490:	10a0000c 	andi	r2,r2,32768
 100f494:	1005003a 	cmpeq	r2,r2,zero
 100f498:	10000f1e 	bne	r2,zero,100f4d8 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100f49c:	e0bffd17 	ldw	r2,-12(fp)
 100f4a0:	10c00a17 	ldw	r3,40(r2)
 100f4a4:	e0bffa17 	ldw	r2,-24(fp)
 100f4a8:	1009883a 	mov	r4,r2
 100f4ac:	e0bffd17 	ldw	r2,-12(fp)
 100f4b0:	1885883a 	add	r2,r3,r2
 100f4b4:	10800e04 	addi	r2,r2,56
 100f4b8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f4bc:	e0bffd17 	ldw	r2,-12(fp)
 100f4c0:	10800a17 	ldw	r2,40(r2)
 100f4c4:	10800044 	addi	r2,r2,1
 100f4c8:	10c1ffcc 	andi	r3,r2,2047
 100f4cc:	e0bffd17 	ldw	r2,-12(fp)
 100f4d0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100f4d4:	003fe106 	br	100f45c <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100f4d8:	e0bffa17 	ldw	r2,-24(fp)
 100f4dc:	10bfffec 	andhi	r2,r2,65535
 100f4e0:	1005003a 	cmpeq	r2,r2,zero
 100f4e4:	1000101e 	bne	r2,zero,100f528 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100f4e8:	e0bffd17 	ldw	r2,-12(fp)
 100f4ec:	10c00817 	ldw	r3,32(r2)
 100f4f0:	00bfff84 	movi	r2,-2
 100f4f4:	1886703a 	and	r3,r3,r2
 100f4f8:	e0bffd17 	ldw	r2,-12(fp)
 100f4fc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100f500:	e0bffc17 	ldw	r2,-16(fp)
 100f504:	11000104 	addi	r4,r2,4
 100f508:	e0bffd17 	ldw	r2,-12(fp)
 100f50c:	10800817 	ldw	r2,32(r2)
 100f510:	1007883a 	mov	r3,r2
 100f514:	2005883a 	mov	r2,r4
 100f518:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f51c:	e0bffc17 	ldw	r2,-16(fp)
 100f520:	10800104 	addi	r2,r2,4
 100f524:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100f528:	e0bffb17 	ldw	r2,-20(fp)
 100f52c:	1080800c 	andi	r2,r2,512
 100f530:	1005003a 	cmpeq	r2,r2,zero
 100f534:	103fbb1e 	bne	r2,zero,100f424 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100f538:	e0bffb17 	ldw	r2,-20(fp)
 100f53c:	10bfffec 	andhi	r2,r2,65535
 100f540:	1004d43a 	srli	r2,r2,16
 100f544:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100f548:	00001506 	br	100f5a0 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100f54c:	e13ffc17 	ldw	r4,-16(fp)
 100f550:	e0bffd17 	ldw	r2,-12(fp)
 100f554:	10c00d17 	ldw	r3,52(r2)
 100f558:	e0bffd17 	ldw	r2,-12(fp)
 100f55c:	1885883a 	add	r2,r3,r2
 100f560:	10820e04 	addi	r2,r2,2104
 100f564:	10800003 	ldbu	r2,0(r2)
 100f568:	10c03fcc 	andi	r3,r2,255
 100f56c:	18c0201c 	xori	r3,r3,128
 100f570:	18ffe004 	addi	r3,r3,-128
 100f574:	2005883a 	mov	r2,r4
 100f578:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f57c:	e0bffd17 	ldw	r2,-12(fp)
 100f580:	10800d17 	ldw	r2,52(r2)
 100f584:	10800044 	addi	r2,r2,1
 100f588:	10c1ffcc 	andi	r3,r2,2047
 100f58c:	e0bffd17 	ldw	r2,-12(fp)
 100f590:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100f594:	e0bff817 	ldw	r2,-32(fp)
 100f598:	10bfffc4 	addi	r2,r2,-1
 100f59c:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100f5a0:	e0bff817 	ldw	r2,-32(fp)
 100f5a4:	1005003a 	cmpeq	r2,r2,zero
 100f5a8:	1000051e 	bne	r2,zero,100f5c0 <altera_avalon_jtag_uart_irq+0x1c8>
 100f5ac:	e0bffd17 	ldw	r2,-12(fp)
 100f5b0:	10c00d17 	ldw	r3,52(r2)
 100f5b4:	e0bffd17 	ldw	r2,-12(fp)
 100f5b8:	10800c17 	ldw	r2,48(r2)
 100f5bc:	18bfe31e 	bne	r3,r2,100f54c <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100f5c0:	e0bff817 	ldw	r2,-32(fp)
 100f5c4:	1005003a 	cmpeq	r2,r2,zero
 100f5c8:	103f961e 	bne	r2,zero,100f424 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100f5cc:	e0bffd17 	ldw	r2,-12(fp)
 100f5d0:	10c00817 	ldw	r3,32(r2)
 100f5d4:	00bfff44 	movi	r2,-3
 100f5d8:	1886703a 	and	r3,r3,r2
 100f5dc:	e0bffd17 	ldw	r2,-12(fp)
 100f5e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100f5e4:	e0bffd17 	ldw	r2,-12(fp)
 100f5e8:	10800017 	ldw	r2,0(r2)
 100f5ec:	11000104 	addi	r4,r2,4
 100f5f0:	e0bffd17 	ldw	r2,-12(fp)
 100f5f4:	10800817 	ldw	r2,32(r2)
 100f5f8:	1007883a 	mov	r3,r2
 100f5fc:	2005883a 	mov	r2,r4
 100f600:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100f604:	e0bffc17 	ldw	r2,-16(fp)
 100f608:	10800104 	addi	r2,r2,4
 100f60c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100f610:	003f8406 	br	100f424 <altera_avalon_jtag_uart_irq+0x2c>
}
 100f614:	e037883a 	mov	sp,fp
 100f618:	df000017 	ldw	fp,0(sp)
 100f61c:	dec00104 	addi	sp,sp,4
 100f620:	f800283a 	ret

0100f624 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100f624:	defffc04 	addi	sp,sp,-16
 100f628:	df000315 	stw	fp,12(sp)
 100f62c:	df000304 	addi	fp,sp,12
 100f630:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100f634:	e0bfff17 	ldw	r2,-4(fp)
 100f638:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100f63c:	e0bffe17 	ldw	r2,-8(fp)
 100f640:	10800017 	ldw	r2,0(r2)
 100f644:	10800104 	addi	r2,r2,4
 100f648:	10800037 	ldwio	r2,0(r2)
 100f64c:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100f650:	e0bffd17 	ldw	r2,-12(fp)
 100f654:	1081000c 	andi	r2,r2,1024
 100f658:	1005003a 	cmpeq	r2,r2,zero
 100f65c:	10000c1e 	bne	r2,zero,100f690 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100f660:	e0bffe17 	ldw	r2,-8(fp)
 100f664:	10800017 	ldw	r2,0(r2)
 100f668:	11000104 	addi	r4,r2,4
 100f66c:	e0bffe17 	ldw	r2,-8(fp)
 100f670:	10800817 	ldw	r2,32(r2)
 100f674:	10810014 	ori	r2,r2,1024
 100f678:	1007883a 	mov	r3,r2
 100f67c:	2005883a 	mov	r2,r4
 100f680:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100f684:	e0bffe17 	ldw	r2,-8(fp)
 100f688:	10000915 	stw	zero,36(r2)
 100f68c:	00000a06 	br	100f6b8 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100f690:	e0bffe17 	ldw	r2,-8(fp)
 100f694:	10c00917 	ldw	r3,36(r2)
 100f698:	00a00034 	movhi	r2,32768
 100f69c:	10bfff04 	addi	r2,r2,-4
 100f6a0:	10c00536 	bltu	r2,r3,100f6b8 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100f6a4:	e0bffe17 	ldw	r2,-8(fp)
 100f6a8:	10800917 	ldw	r2,36(r2)
 100f6ac:	10c00044 	addi	r3,r2,1
 100f6b0:	e0bffe17 	ldw	r2,-8(fp)
 100f6b4:	10c00915 	stw	r3,36(r2)
 100f6b8:	00804074 	movhi	r2,257
 100f6bc:	109c1b04 	addi	r2,r2,28780
 100f6c0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100f6c4:	e037883a 	mov	sp,fp
 100f6c8:	df000017 	ldw	fp,0(sp)
 100f6cc:	dec00104 	addi	sp,sp,4
 100f6d0:	f800283a 	ret

0100f6d4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100f6d4:	defffc04 	addi	sp,sp,-16
 100f6d8:	df000315 	stw	fp,12(sp)
 100f6dc:	df000304 	addi	fp,sp,12
 100f6e0:	e13ffd15 	stw	r4,-12(fp)
 100f6e4:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100f6e8:	00000706 	br	100f708 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100f6ec:	e0bffe17 	ldw	r2,-8(fp)
 100f6f0:	1090000c 	andi	r2,r2,16384
 100f6f4:	1005003a 	cmpeq	r2,r2,zero
 100f6f8:	1000031e 	bne	r2,zero,100f708 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100f6fc:	00bffd44 	movi	r2,-11
 100f700:	e0bfff15 	stw	r2,-4(fp)
 100f704:	00000b06 	br	100f734 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100f708:	e0bffd17 	ldw	r2,-12(fp)
 100f70c:	10c00d17 	ldw	r3,52(r2)
 100f710:	e0bffd17 	ldw	r2,-12(fp)
 100f714:	10800c17 	ldw	r2,48(r2)
 100f718:	18800526 	beq	r3,r2,100f730 <altera_avalon_jtag_uart_close+0x5c>
 100f71c:	e0bffd17 	ldw	r2,-12(fp)
 100f720:	10c00917 	ldw	r3,36(r2)
 100f724:	e0bffd17 	ldw	r2,-12(fp)
 100f728:	10800117 	ldw	r2,4(r2)
 100f72c:	18bfef36 	bltu	r3,r2,100f6ec <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100f730:	e03fff15 	stw	zero,-4(fp)
 100f734:	e0bfff17 	ldw	r2,-4(fp)
}
 100f738:	e037883a 	mov	sp,fp
 100f73c:	df000017 	ldw	fp,0(sp)
 100f740:	dec00104 	addi	sp,sp,4
 100f744:	f800283a 	ret

0100f748 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100f748:	defff804 	addi	sp,sp,-32
 100f74c:	df000715 	stw	fp,28(sp)
 100f750:	df000704 	addi	fp,sp,28
 100f754:	e13ffb15 	stw	r4,-20(fp)
 100f758:	e17ffc15 	stw	r5,-16(fp)
 100f75c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100f760:	00bff9c4 	movi	r2,-25
 100f764:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100f768:	e0bffc17 	ldw	r2,-16(fp)
 100f76c:	e0bfff15 	stw	r2,-4(fp)
 100f770:	e0ffff17 	ldw	r3,-4(fp)
 100f774:	189a8060 	cmpeqi	r2,r3,27137
 100f778:	1000041e 	bne	r2,zero,100f78c <altera_avalon_jtag_uart_ioctl+0x44>
 100f77c:	e0ffff17 	ldw	r3,-4(fp)
 100f780:	189a80a0 	cmpeqi	r2,r3,27138
 100f784:	10001b1e 	bne	r2,zero,100f7f4 <altera_avalon_jtag_uart_ioctl+0xac>
 100f788:	00002706 	br	100f828 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100f78c:	e0bffb17 	ldw	r2,-20(fp)
 100f790:	10c00117 	ldw	r3,4(r2)
 100f794:	00a00034 	movhi	r2,32768
 100f798:	10bfffc4 	addi	r2,r2,-1
 100f79c:	18802226 	beq	r3,r2,100f828 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100f7a0:	e0bffd17 	ldw	r2,-12(fp)
 100f7a4:	10800017 	ldw	r2,0(r2)
 100f7a8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100f7ac:	e0bff917 	ldw	r2,-28(fp)
 100f7b0:	10800090 	cmplti	r2,r2,2
 100f7b4:	1000071e 	bne	r2,zero,100f7d4 <altera_avalon_jtag_uart_ioctl+0x8c>
 100f7b8:	e0fff917 	ldw	r3,-28(fp)
 100f7bc:	00a00034 	movhi	r2,32768
 100f7c0:	10bfffc4 	addi	r2,r2,-1
 100f7c4:	18800326 	beq	r3,r2,100f7d4 <altera_avalon_jtag_uart_ioctl+0x8c>
 100f7c8:	e0bff917 	ldw	r2,-28(fp)
 100f7cc:	e0bffe15 	stw	r2,-8(fp)
 100f7d0:	00000306 	br	100f7e0 <altera_avalon_jtag_uart_ioctl+0x98>
 100f7d4:	00e00034 	movhi	r3,32768
 100f7d8:	18ffff84 	addi	r3,r3,-2
 100f7dc:	e0fffe15 	stw	r3,-8(fp)
 100f7e0:	e0bffb17 	ldw	r2,-20(fp)
 100f7e4:	e0fffe17 	ldw	r3,-8(fp)
 100f7e8:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100f7ec:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100f7f0:	00000d06 	br	100f828 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100f7f4:	e0bffb17 	ldw	r2,-20(fp)
 100f7f8:	10c00117 	ldw	r3,4(r2)
 100f7fc:	00a00034 	movhi	r2,32768
 100f800:	10bfffc4 	addi	r2,r2,-1
 100f804:	18800826 	beq	r3,r2,100f828 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100f808:	e13ffd17 	ldw	r4,-12(fp)
 100f80c:	e0bffb17 	ldw	r2,-20(fp)
 100f810:	10c00917 	ldw	r3,36(r2)
 100f814:	e0bffb17 	ldw	r2,-20(fp)
 100f818:	10800117 	ldw	r2,4(r2)
 100f81c:	1885803a 	cmpltu	r2,r3,r2
 100f820:	20800015 	stw	r2,0(r4)
      rc = 0;
 100f824:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100f828:	e0bffa17 	ldw	r2,-24(fp)
}
 100f82c:	e037883a 	mov	sp,fp
 100f830:	df000017 	ldw	fp,0(sp)
 100f834:	dec00104 	addi	sp,sp,4
 100f838:	f800283a 	ret

0100f83c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100f83c:	defff204 	addi	sp,sp,-56
 100f840:	dfc00d15 	stw	ra,52(sp)
 100f844:	df000c15 	stw	fp,48(sp)
 100f848:	df000c04 	addi	fp,sp,48
 100f84c:	e13ffb15 	stw	r4,-20(fp)
 100f850:	e17ffc15 	stw	r5,-16(fp)
 100f854:	e1bffd15 	stw	r6,-12(fp)
 100f858:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100f85c:	e0bffc17 	ldw	r2,-16(fp)
 100f860:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100f864:	00004806 	br	100f988 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100f868:	e0bffb17 	ldw	r2,-20(fp)
 100f86c:	10800a17 	ldw	r2,40(r2)
 100f870:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100f874:	e0bffb17 	ldw	r2,-20(fp)
 100f878:	10800b17 	ldw	r2,44(r2)
 100f87c:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100f880:	e0fff717 	ldw	r3,-36(fp)
 100f884:	e0bff617 	ldw	r2,-40(fp)
 100f888:	18800536 	bltu	r3,r2,100f8a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100f88c:	e0bff717 	ldw	r2,-36(fp)
 100f890:	e0fff617 	ldw	r3,-40(fp)
 100f894:	10c5c83a 	sub	r2,r2,r3
 100f898:	e0bff815 	stw	r2,-32(fp)
 100f89c:	00000406 	br	100f8b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100f8a0:	00820004 	movi	r2,2048
 100f8a4:	e0fff617 	ldw	r3,-40(fp)
 100f8a8:	10c5c83a 	sub	r2,r2,r3
 100f8ac:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100f8b0:	e0bff817 	ldw	r2,-32(fp)
 100f8b4:	1005003a 	cmpeq	r2,r2,zero
 100f8b8:	10001f1e 	bne	r2,zero,100f938 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100f8bc:	e0fffd17 	ldw	r3,-12(fp)
 100f8c0:	e0bff817 	ldw	r2,-32(fp)
 100f8c4:	1880022e 	bgeu	r3,r2,100f8d0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100f8c8:	e0bffd17 	ldw	r2,-12(fp)
 100f8cc:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100f8d0:	e0bffb17 	ldw	r2,-20(fp)
 100f8d4:	10c00e04 	addi	r3,r2,56
 100f8d8:	e0bff617 	ldw	r2,-40(fp)
 100f8dc:	1887883a 	add	r3,r3,r2
 100f8e0:	e0bffa17 	ldw	r2,-24(fp)
 100f8e4:	1009883a 	mov	r4,r2
 100f8e8:	180b883a 	mov	r5,r3
 100f8ec:	e1bff817 	ldw	r6,-32(fp)
 100f8f0:	10059440 	call	1005944 <memcpy>
      ptr   += n;
 100f8f4:	e0fff817 	ldw	r3,-32(fp)
 100f8f8:	e0bffa17 	ldw	r2,-24(fp)
 100f8fc:	10c5883a 	add	r2,r2,r3
 100f900:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100f904:	e0fffd17 	ldw	r3,-12(fp)
 100f908:	e0bff817 	ldw	r2,-32(fp)
 100f90c:	1885c83a 	sub	r2,r3,r2
 100f910:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100f914:	e0fff617 	ldw	r3,-40(fp)
 100f918:	e0bff817 	ldw	r2,-32(fp)
 100f91c:	1885883a 	add	r2,r3,r2
 100f920:	10c1ffcc 	andi	r3,r2,2047
 100f924:	e0bffb17 	ldw	r2,-20(fp)
 100f928:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100f92c:	e0bffd17 	ldw	r2,-12(fp)
 100f930:	10800048 	cmpgei	r2,r2,1
 100f934:	103fcc1e 	bne	r2,zero,100f868 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100f938:	e0fffa17 	ldw	r3,-24(fp)
 100f93c:	e0bffc17 	ldw	r2,-16(fp)
 100f940:	1880141e 	bne	r3,r2,100f994 <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100f944:	e0bffe17 	ldw	r2,-8(fp)
 100f948:	1090000c 	andi	r2,r2,16384
 100f94c:	1004c03a 	cmpne	r2,r2,zero
 100f950:	1000101e 	bne	r2,zero,100f994 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100f954:	e0bffb17 	ldw	r2,-20(fp)
 100f958:	10c00a17 	ldw	r3,40(r2)
 100f95c:	e0bff717 	ldw	r2,-36(fp)
 100f960:	1880051e 	bne	r3,r2,100f978 <altera_avalon_jtag_uart_read+0x13c>
 100f964:	e0bffb17 	ldw	r2,-20(fp)
 100f968:	10c00917 	ldw	r3,36(r2)
 100f96c:	e0bffb17 	ldw	r2,-20(fp)
 100f970:	10800117 	ldw	r2,4(r2)
 100f974:	18bff736 	bltu	r3,r2,100f954 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100f978:	e0bffb17 	ldw	r2,-20(fp)
 100f97c:	10c00a17 	ldw	r3,40(r2)
 100f980:	e0bff717 	ldw	r2,-36(fp)
 100f984:	18800326 	beq	r3,r2,100f994 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100f988:	e0bffd17 	ldw	r2,-12(fp)
 100f98c:	10800048 	cmpgei	r2,r2,1
 100f990:	103fb51e 	bne	r2,zero,100f868 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100f994:	e0fffa17 	ldw	r3,-24(fp)
 100f998:	e0bffc17 	ldw	r2,-16(fp)
 100f99c:	18801926 	beq	r3,r2,100fa04 <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100f9a0:	0005303a 	rdctl	r2,status
 100f9a4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100f9a8:	e0fff517 	ldw	r3,-44(fp)
 100f9ac:	00bfff84 	movi	r2,-2
 100f9b0:	1884703a 	and	r2,r3,r2
 100f9b4:	1001703a 	wrctl	status,r2
  
  return context;
 100f9b8:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100f9bc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100f9c0:	e0bffb17 	ldw	r2,-20(fp)
 100f9c4:	10800817 	ldw	r2,32(r2)
 100f9c8:	10c00054 	ori	r3,r2,1
 100f9cc:	e0bffb17 	ldw	r2,-20(fp)
 100f9d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100f9d4:	e0bffb17 	ldw	r2,-20(fp)
 100f9d8:	10800017 	ldw	r2,0(r2)
 100f9dc:	11000104 	addi	r4,r2,4
 100f9e0:	e0bffb17 	ldw	r2,-20(fp)
 100f9e4:	10800817 	ldw	r2,32(r2)
 100f9e8:	1007883a 	mov	r3,r2
 100f9ec:	2005883a 	mov	r2,r4
 100f9f0:	10c00035 	stwio	r3,0(r2)
 100f9f4:	e0bff917 	ldw	r2,-28(fp)
 100f9f8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100f9fc:	e0bff417 	ldw	r2,-48(fp)
 100fa00:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100fa04:	e0fffa17 	ldw	r3,-24(fp)
 100fa08:	e0bffc17 	ldw	r2,-16(fp)
 100fa0c:	18800526 	beq	r3,r2,100fa24 <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100fa10:	e0fffa17 	ldw	r3,-24(fp)
 100fa14:	e0bffc17 	ldw	r2,-16(fp)
 100fa18:	1887c83a 	sub	r3,r3,r2
 100fa1c:	e0ffff15 	stw	r3,-4(fp)
 100fa20:	00000906 	br	100fa48 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100fa24:	e0bffe17 	ldw	r2,-8(fp)
 100fa28:	1090000c 	andi	r2,r2,16384
 100fa2c:	1005003a 	cmpeq	r2,r2,zero
 100fa30:	1000031e 	bne	r2,zero,100fa40 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100fa34:	00bffd44 	movi	r2,-11
 100fa38:	e0bfff15 	stw	r2,-4(fp)
 100fa3c:	00000206 	br	100fa48 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100fa40:	00bffec4 	movi	r2,-5
 100fa44:	e0bfff15 	stw	r2,-4(fp)
 100fa48:	e0bfff17 	ldw	r2,-4(fp)
}
 100fa4c:	e037883a 	mov	sp,fp
 100fa50:	dfc00117 	ldw	ra,4(sp)
 100fa54:	df000017 	ldw	fp,0(sp)
 100fa58:	dec00204 	addi	sp,sp,8
 100fa5c:	f800283a 	ret

0100fa60 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100fa60:	defff204 	addi	sp,sp,-56
 100fa64:	dfc00d15 	stw	ra,52(sp)
 100fa68:	df000c15 	stw	fp,48(sp)
 100fa6c:	df000c04 	addi	fp,sp,48
 100fa70:	e13ffb15 	stw	r4,-20(fp)
 100fa74:	e17ffc15 	stw	r5,-16(fp)
 100fa78:	e1bffd15 	stw	r6,-12(fp)
 100fa7c:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100fa80:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100fa84:	e0bffc17 	ldw	r2,-16(fp)
 100fa88:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100fa8c:	00003a06 	br	100fb78 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100fa90:	e0bffb17 	ldw	r2,-20(fp)
 100fa94:	10800c17 	ldw	r2,48(r2)
 100fa98:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100fa9c:	e0bffb17 	ldw	r2,-20(fp)
 100faa0:	10800d17 	ldw	r2,52(r2)
 100faa4:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100faa8:	e0fffa17 	ldw	r3,-24(fp)
 100faac:	e0bff917 	ldw	r2,-28(fp)
 100fab0:	1880062e 	bgeu	r3,r2,100facc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100fab4:	e0fff917 	ldw	r3,-28(fp)
 100fab8:	e0bffa17 	ldw	r2,-24(fp)
 100fabc:	1885c83a 	sub	r2,r3,r2
 100fac0:	10bfffc4 	addi	r2,r2,-1
 100fac4:	e0bff815 	stw	r2,-32(fp)
 100fac8:	00000c06 	br	100fafc <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100facc:	e0bff917 	ldw	r2,-28(fp)
 100fad0:	1005003a 	cmpeq	r2,r2,zero
 100fad4:	1000051e 	bne	r2,zero,100faec <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100fad8:	00820004 	movi	r2,2048
 100fadc:	e0fffa17 	ldw	r3,-24(fp)
 100fae0:	10c5c83a 	sub	r2,r2,r3
 100fae4:	e0bff815 	stw	r2,-32(fp)
 100fae8:	00000406 	br	100fafc <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100faec:	0081ffc4 	movi	r2,2047
 100faf0:	e0fffa17 	ldw	r3,-24(fp)
 100faf4:	10c5c83a 	sub	r2,r2,r3
 100faf8:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100fafc:	e0bff817 	ldw	r2,-32(fp)
 100fb00:	1005003a 	cmpeq	r2,r2,zero
 100fb04:	10001f1e 	bne	r2,zero,100fb84 <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100fb08:	e0fffd17 	ldw	r3,-12(fp)
 100fb0c:	e0bff817 	ldw	r2,-32(fp)
 100fb10:	1880022e 	bgeu	r3,r2,100fb1c <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100fb14:	e0bffd17 	ldw	r2,-12(fp)
 100fb18:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100fb1c:	e0bffb17 	ldw	r2,-20(fp)
 100fb20:	10c20e04 	addi	r3,r2,2104
 100fb24:	e0bffa17 	ldw	r2,-24(fp)
 100fb28:	1885883a 	add	r2,r3,r2
 100fb2c:	e0fffc17 	ldw	r3,-16(fp)
 100fb30:	1009883a 	mov	r4,r2
 100fb34:	180b883a 	mov	r5,r3
 100fb38:	e1bff817 	ldw	r6,-32(fp)
 100fb3c:	10059440 	call	1005944 <memcpy>
      ptr   += n;
 100fb40:	e0fff817 	ldw	r3,-32(fp)
 100fb44:	e0bffc17 	ldw	r2,-16(fp)
 100fb48:	10c5883a 	add	r2,r2,r3
 100fb4c:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100fb50:	e0fffd17 	ldw	r3,-12(fp)
 100fb54:	e0bff817 	ldw	r2,-32(fp)
 100fb58:	1885c83a 	sub	r2,r3,r2
 100fb5c:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100fb60:	e0fffa17 	ldw	r3,-24(fp)
 100fb64:	e0bff817 	ldw	r2,-32(fp)
 100fb68:	1885883a 	add	r2,r3,r2
 100fb6c:	10c1ffcc 	andi	r3,r2,2047
 100fb70:	e0bffb17 	ldw	r2,-20(fp)
 100fb74:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100fb78:	e0bffd17 	ldw	r2,-12(fp)
 100fb7c:	10800048 	cmpgei	r2,r2,1
 100fb80:	103fc31e 	bne	r2,zero,100fa90 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fb84:	0005303a 	rdctl	r2,status
 100fb88:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fb8c:	e0fff517 	ldw	r3,-44(fp)
 100fb90:	00bfff84 	movi	r2,-2
 100fb94:	1884703a 	and	r2,r3,r2
 100fb98:	1001703a 	wrctl	status,r2
  
  return context;
 100fb9c:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100fba0:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100fba4:	e0bffb17 	ldw	r2,-20(fp)
 100fba8:	10800817 	ldw	r2,32(r2)
 100fbac:	10c00094 	ori	r3,r2,2
 100fbb0:	e0bffb17 	ldw	r2,-20(fp)
 100fbb4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100fbb8:	e0bffb17 	ldw	r2,-20(fp)
 100fbbc:	10800017 	ldw	r2,0(r2)
 100fbc0:	11000104 	addi	r4,r2,4
 100fbc4:	e0bffb17 	ldw	r2,-20(fp)
 100fbc8:	10800817 	ldw	r2,32(r2)
 100fbcc:	1007883a 	mov	r3,r2
 100fbd0:	2005883a 	mov	r2,r4
 100fbd4:	10c00035 	stwio	r3,0(r2)
 100fbd8:	e0bff717 	ldw	r2,-36(fp)
 100fbdc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fbe0:	e0bff417 	ldw	r2,-48(fp)
 100fbe4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100fbe8:	e0bffd17 	ldw	r2,-12(fp)
 100fbec:	10800050 	cmplti	r2,r2,1
 100fbf0:	1000111e 	bne	r2,zero,100fc38 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100fbf4:	e0bffe17 	ldw	r2,-8(fp)
 100fbf8:	1090000c 	andi	r2,r2,16384
 100fbfc:	1004c03a 	cmpne	r2,r2,zero
 100fc00:	1000101e 	bne	r2,zero,100fc44 <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100fc04:	e0bffb17 	ldw	r2,-20(fp)
 100fc08:	10c00d17 	ldw	r3,52(r2)
 100fc0c:	e0bff917 	ldw	r2,-28(fp)
 100fc10:	1880051e 	bne	r3,r2,100fc28 <altera_avalon_jtag_uart_write+0x1c8>
 100fc14:	e0bffb17 	ldw	r2,-20(fp)
 100fc18:	10c00917 	ldw	r3,36(r2)
 100fc1c:	e0bffb17 	ldw	r2,-20(fp)
 100fc20:	10800117 	ldw	r2,4(r2)
 100fc24:	18bff736 	bltu	r3,r2,100fc04 <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100fc28:	e0bffb17 	ldw	r2,-20(fp)
 100fc2c:	10c00d17 	ldw	r3,52(r2)
 100fc30:	e0bff917 	ldw	r2,-28(fp)
 100fc34:	18800326 	beq	r3,r2,100fc44 <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 100fc38:	e0bffd17 	ldw	r2,-12(fp)
 100fc3c:	10800048 	cmpgei	r2,r2,1
 100fc40:	103fcd1e 	bne	r2,zero,100fb78 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100fc44:	e0fffc17 	ldw	r3,-16(fp)
 100fc48:	e0bff617 	ldw	r2,-40(fp)
 100fc4c:	18800526 	beq	r3,r2,100fc64 <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100fc50:	e0fffc17 	ldw	r3,-16(fp)
 100fc54:	e0bff617 	ldw	r2,-40(fp)
 100fc58:	1887c83a 	sub	r3,r3,r2
 100fc5c:	e0ffff15 	stw	r3,-4(fp)
 100fc60:	00000906 	br	100fc88 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100fc64:	e0bffe17 	ldw	r2,-8(fp)
 100fc68:	1090000c 	andi	r2,r2,16384
 100fc6c:	1005003a 	cmpeq	r2,r2,zero
 100fc70:	1000031e 	bne	r2,zero,100fc80 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100fc74:	00bffd44 	movi	r2,-11
 100fc78:	e0bfff15 	stw	r2,-4(fp)
 100fc7c:	00000206 	br	100fc88 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100fc80:	00bffec4 	movi	r2,-5
 100fc84:	e0bfff15 	stw	r2,-4(fp)
 100fc88:	e0bfff17 	ldw	r2,-4(fp)
}
 100fc8c:	e037883a 	mov	sp,fp
 100fc90:	dfc00117 	ldw	ra,4(sp)
 100fc94:	df000017 	ldw	fp,0(sp)
 100fc98:	dec00204 	addi	sp,sp,8
 100fc9c:	f800283a 	ret

0100fca0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 100fca0:	defff904 	addi	sp,sp,-28
 100fca4:	dfc00615 	stw	ra,24(sp)
 100fca8:	df000515 	stw	fp,20(sp)
 100fcac:	df000504 	addi	fp,sp,20
 100fcb0:	e13ffe15 	stw	r4,-8(fp)
 100fcb4:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 100fcb8:	e0bffe17 	ldw	r2,-8(fp)
 100fcbc:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 100fcc0:	e0bffe17 	ldw	r2,-8(fp)
 100fcc4:	10800104 	addi	r2,r2,4
 100fcc8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100fccc:	0005303a 	rdctl	r2,status
 100fcd0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100fcd4:	e0fffc17 	ldw	r3,-16(fp)
 100fcd8:	00bfff84 	movi	r2,-2
 100fcdc:	1884703a 	and	r2,r3,r2
 100fce0:	1001703a 	wrctl	status,r2
  
  return context;
 100fce4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 100fce8:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 100fcec:	10110f40 	call	10110f4 <alt_tick>
 100fcf0:	e0bffd17 	ldw	r2,-12(fp)
 100fcf4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100fcf8:	e0bffb17 	ldw	r2,-20(fp)
 100fcfc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 100fd00:	e037883a 	mov	sp,fp
 100fd04:	dfc00117 	ldw	ra,4(sp)
 100fd08:	df000017 	ldw	fp,0(sp)
 100fd0c:	dec00204 	addi	sp,sp,8
 100fd10:	f800283a 	ret

0100fd14 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100fd14:	defff904 	addi	sp,sp,-28
 100fd18:	dfc00615 	stw	ra,24(sp)
 100fd1c:	df000515 	stw	fp,20(sp)
 100fd20:	df000504 	addi	fp,sp,20
 100fd24:	e13ffc15 	stw	r4,-16(fp)
 100fd28:	e17ffd15 	stw	r5,-12(fp)
 100fd2c:	e1bffe15 	stw	r6,-8(fp)
 100fd30:	e1ffff15 	stw	r7,-4(fp)
 100fd34:	e0bfff17 	ldw	r2,-4(fp)
 100fd38:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 100fd3c:	00804074 	movhi	r2,257
 100fd40:	109c1b04 	addi	r2,r2,28780
 100fd44:	10800017 	ldw	r2,0(r2)
 100fd48:	1004c03a 	cmpne	r2,r2,zero
 100fd4c:	1000041e 	bne	r2,zero,100fd60 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 100fd50:	00c04074 	movhi	r3,257
 100fd54:	18dc1b04 	addi	r3,r3,28780
 100fd58:	e0bffb17 	ldw	r2,-20(fp)
 100fd5c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 100fd60:	e0bffc17 	ldw	r2,-16(fp)
 100fd64:	10800104 	addi	r2,r2,4
 100fd68:	1007883a 	mov	r3,r2
 100fd6c:	008001c4 	movi	r2,7
 100fd70:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 100fd74:	e13ffe17 	ldw	r4,-8(fp)
 100fd78:	e17ffc17 	ldw	r5,-16(fp)
 100fd7c:	01804074 	movhi	r6,257
 100fd80:	31bf2804 	addi	r6,r6,-864
 100fd84:	1010bd80 	call	1010bd8 <alt_irq_register>
#endif  
}
 100fd88:	e037883a 	mov	sp,fp
 100fd8c:	dfc00117 	ldw	ra,4(sp)
 100fd90:	df000017 	ldw	fp,0(sp)
 100fd94:	dec00204 	addi	sp,sp,8
 100fd98:	f800283a 	ret

0100fd9c <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100fd9c:	defffc04 	addi	sp,sp,-16
 100fda0:	df000315 	stw	fp,12(sp)
 100fda4:	df000304 	addi	fp,sp,12
 100fda8:	e13ffe15 	stw	r4,-8(fp)
 100fdac:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100fdb0:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100fdb4:	e0bfff17 	ldw	r2,-4(fp)
 100fdb8:	1004c03a 	cmpne	r2,r2,zero
 100fdbc:	1000061e 	bne	r2,zero,100fdd8 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100fdc0:	e0bffe17 	ldw	r2,-8(fp)
 100fdc4:	1007883a 	mov	r3,r2
 100fdc8:	e0bffd03 	ldbu	r2,-12(fp)
 100fdcc:	10c4b03a 	or	r2,r2,r3
 100fdd0:	e0bffd05 	stb	r2,-12(fp)
 100fdd4:	00000806 	br	100fdf8 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100fdd8:	e0bffe17 	ldw	r2,-8(fp)
 100fddc:	1007883a 	mov	r3,r2
 100fde0:	e0bffd03 	ldbu	r2,-12(fp)
 100fde4:	10c4b03a 	or	r2,r2,r3
 100fde8:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100fdec:	e0bffd03 	ldbu	r2,-12(fp)
 100fdf0:	10801014 	ori	r2,r2,64
 100fdf4:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100fdf8:	e0fffd03 	ldbu	r3,-12(fp)
 100fdfc:	00bfe004 	movi	r2,-128
 100fe00:	1884b03a 	or	r2,r3,r2
 100fe04:	10803fcc 	andi	r2,r2,255
}
 100fe08:	e037883a 	mov	sp,fp
 100fe0c:	df000017 	ldw	fp,0(sp)
 100fe10:	dec00104 	addi	sp,sp,4
 100fe14:	f800283a 	ret

0100fe18 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100fe18:	defffd04 	addi	sp,sp,-12
 100fe1c:	df000215 	stw	fp,8(sp)
 100fe20:	df000204 	addi	fp,sp,8
 100fe24:	e13ffe15 	stw	r4,-8(fp)
 100fe28:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100fe2c:	e0bffe17 	ldw	r2,-8(fp)
 100fe30:	10800a17 	ldw	r2,40(r2)
 100fe34:	e0ffff03 	ldbu	r3,-4(fp)
 100fe38:	10c00025 	stbio	r3,0(r2)
}
 100fe3c:	e037883a 	mov	sp,fp
 100fe40:	df000017 	ldw	fp,0(sp)
 100fe44:	dec00104 	addi	sp,sp,4
 100fe48:	f800283a 	ret

0100fe4c <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100fe4c:	defffe04 	addi	sp,sp,-8
 100fe50:	df000115 	stw	fp,4(sp)
 100fe54:	df000104 	addi	fp,sp,4
 100fe58:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100fe5c:	e0bfff17 	ldw	r2,-4(fp)
 100fe60:	10800a17 	ldw	r2,40(r2)
 100fe64:	1007883a 	mov	r3,r2
 100fe68:	00800044 	movi	r2,1
 100fe6c:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100fe70:	e037883a 	mov	sp,fp
 100fe74:	df000017 	ldw	fp,0(sp)
 100fe78:	dec00104 	addi	sp,sp,4
 100fe7c:	f800283a 	ret

0100fe80 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100fe80:	defffc04 	addi	sp,sp,-16
 100fe84:	dfc00315 	stw	ra,12(sp)
 100fe88:	df000215 	stw	fp,8(sp)
 100fe8c:	df000204 	addi	fp,sp,8
 100fe90:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100fe94:	e13fff17 	ldw	r4,-4(fp)
 100fe98:	01404074 	movhi	r5,257
 100fe9c:	2954c204 	addi	r5,r5,21256
 100fea0:	10109d80 	call	10109d8 <alt_find_dev>
 100fea4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100fea8:	e0bffe17 	ldw	r2,-8(fp)
}
 100feac:	e037883a 	mov	sp,fp
 100feb0:	dfc00117 	ldw	ra,4(sp)
 100feb4:	df000017 	ldw	fp,0(sp)
 100feb8:	dec00204 	addi	sp,sp,8
 100febc:	f800283a 	ret

0100fec0 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100fec0:	defffb04 	addi	sp,sp,-20
 100fec4:	df000415 	stw	fp,16(sp)
 100fec8:	df000404 	addi	fp,sp,16
 100fecc:	e13ffd15 	stw	r4,-12(fp)
 100fed0:	e17ffe15 	stw	r5,-8(fp)
 100fed4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100fed8:	e03ffc15 	stw	zero,-16(fp)
 100fedc:	00000f06 	br	100ff1c <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100fee0:	e0bffd17 	ldw	r2,-12(fp)
 100fee4:	10800a17 	ldw	r2,40(r2)
 100fee8:	11000044 	addi	r4,r2,1
 100feec:	e0fffc17 	ldw	r3,-16(fp)
 100fef0:	e0bffe17 	ldw	r2,-8(fp)
 100fef4:	1885883a 	add	r2,r3,r2
 100fef8:	10800003 	ldbu	r2,0(r2)
 100fefc:	10c03fcc 	andi	r3,r2,255
 100ff00:	18c0201c 	xori	r3,r3,128
 100ff04:	18ffe004 	addi	r3,r3,-128
 100ff08:	2005883a 	mov	r2,r4
 100ff0c:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100ff10:	e0bffc17 	ldw	r2,-16(fp)
 100ff14:	10800044 	addi	r2,r2,1
 100ff18:	e0bffc15 	stw	r2,-16(fp)
 100ff1c:	e0fffc17 	ldw	r3,-16(fp)
 100ff20:	e0bfff17 	ldw	r2,-4(fp)
 100ff24:	18bfee36 	bltu	r3,r2,100fee0 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100ff28:	e037883a 	mov	sp,fp
 100ff2c:	df000017 	ldw	fp,0(sp)
 100ff30:	dec00104 	addi	sp,sp,4
 100ff34:	f800283a 	ret

0100ff38 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100ff38:	defffd04 	addi	sp,sp,-12
 100ff3c:	df000215 	stw	fp,8(sp)
 100ff40:	df000204 	addi	fp,sp,8
 100ff44:	e13ffe15 	stw	r4,-8(fp)
 100ff48:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100ff4c:	00000d06 	br	100ff84 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100ff50:	e0bffe17 	ldw	r2,-8(fp)
 100ff54:	10800a17 	ldw	r2,40(r2)
 100ff58:	11000044 	addi	r4,r2,1
 100ff5c:	e0bfff17 	ldw	r2,-4(fp)
 100ff60:	10800003 	ldbu	r2,0(r2)
 100ff64:	10c03fcc 	andi	r3,r2,255
 100ff68:	18c0201c 	xori	r3,r3,128
 100ff6c:	18ffe004 	addi	r3,r3,-128
 100ff70:	2005883a 	mov	r2,r4
 100ff74:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100ff78:	e0bfff17 	ldw	r2,-4(fp)
 100ff7c:	10800044 	addi	r2,r2,1
 100ff80:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100ff84:	e0bfff17 	ldw	r2,-4(fp)
 100ff88:	10800003 	ldbu	r2,0(r2)
 100ff8c:	10803fcc 	andi	r2,r2,255
 100ff90:	1080201c 	xori	r2,r2,128
 100ff94:	10bfe004 	addi	r2,r2,-128
 100ff98:	1004c03a 	cmpne	r2,r2,zero
 100ff9c:	103fec1e 	bne	r2,zero,100ff50 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100ffa0:	e037883a 	mov	sp,fp
 100ffa4:	df000017 	ldw	fp,0(sp)
 100ffa8:	dec00104 	addi	sp,sp,4
 100ffac:	f800283a 	ret

0100ffb0 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100ffb0:	defffb04 	addi	sp,sp,-20
 100ffb4:	dfc00415 	stw	ra,16(sp)
 100ffb8:	df000315 	stw	fp,12(sp)
 100ffbc:	df000304 	addi	fp,sp,12
 100ffc0:	e13ffd15 	stw	r4,-12(fp)
 100ffc4:	e17ffe15 	stw	r5,-8(fp)
 100ffc8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100ffcc:	e0bffd17 	ldw	r2,-12(fp)
 100ffd0:	10800017 	ldw	r2,0(r2)
 100ffd4:	1009883a 	mov	r4,r2
 100ffd8:	e1bfff17 	ldw	r6,-4(fp)
 100ffdc:	e17ffe17 	ldw	r5,-8(fp)
 100ffe0:	100fec00 	call	100fec0 <alt_up_character_lcd_write>
	return 0;
 100ffe4:	0005883a 	mov	r2,zero
}
 100ffe8:	e037883a 	mov	sp,fp
 100ffec:	dfc00117 	ldw	ra,4(sp)
 100fff0:	df000017 	ldw	fp,0(sp)
 100fff4:	dec00204 	addi	sp,sp,8
 100fff8:	f800283a 	ret

0100fffc <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100fffc:	defff904 	addi	sp,sp,-28
 1010000:	dfc00615 	stw	ra,24(sp)
 1010004:	df000515 	stw	fp,20(sp)
 1010008:	df000504 	addi	fp,sp,20
 101000c:	e13ffc15 	stw	r4,-16(fp)
 1010010:	e17ffd15 	stw	r5,-12(fp)
 1010014:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1010018:	e0bffd17 	ldw	r2,-12(fp)
 101001c:	10800a28 	cmpgeui	r2,r2,40
 1010020:	1000031e 	bne	r2,zero,1010030 <alt_up_character_lcd_set_cursor_pos+0x34>
 1010024:	e0bffe17 	ldw	r2,-8(fp)
 1010028:	108000b0 	cmpltui	r2,r2,2
 101002c:	1000031e 	bne	r2,zero,101003c <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1010030:	00bfffc4 	movi	r2,-1
 1010034:	e0bfff15 	stw	r2,-4(fp)
 1010038:	00000806 	br	101005c <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 101003c:	e13ffd17 	ldw	r4,-12(fp)
 1010040:	e17ffe17 	ldw	r5,-8(fp)
 1010044:	100fd9c0 	call	100fd9c <get_DDRAM_addr>
 1010048:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 101004c:	e17ffb03 	ldbu	r5,-20(fp)
 1010050:	e13ffc17 	ldw	r4,-16(fp)
 1010054:	100fe180 	call	100fe18 <alt_up_character_lcd_send_cmd>
	return 0;
 1010058:	e03fff15 	stw	zero,-4(fp)
 101005c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010060:	e037883a 	mov	sp,fp
 1010064:	dfc00117 	ldw	ra,4(sp)
 1010068:	df000017 	ldw	fp,0(sp)
 101006c:	dec00204 	addi	sp,sp,8
 1010070:	f800283a 	ret

01010074 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1010074:	defff904 	addi	sp,sp,-28
 1010078:	dfc00615 	stw	ra,24(sp)
 101007c:	df000515 	stw	fp,20(sp)
 1010080:	df000504 	addi	fp,sp,20
 1010084:	e13ffc15 	stw	r4,-16(fp)
 1010088:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 101008c:	e0bffd17 	ldw	r2,-12(fp)
 1010090:	1005003a 	cmpeq	r2,r2,zero
 1010094:	10001e1e 	bne	r2,zero,1010110 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1010098:	e0bffd17 	ldw	r2,-12(fp)
 101009c:	10800050 	cmplti	r2,r2,1
 10100a0:	1000031e 	bne	r2,zero,10100b0 <alt_up_character_lcd_shift_cursor+0x3c>
 10100a4:	00800504 	movi	r2,20
 10100a8:	e0bfff05 	stb	r2,-4(fp)
 10100ac:	00000206 	br	10100b8 <alt_up_character_lcd_shift_cursor+0x44>
 10100b0:	00c00404 	movi	r3,16
 10100b4:	e0ffff05 	stb	r3,-4(fp)
 10100b8:	e0bfff03 	ldbu	r2,-4(fp)
 10100bc:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 10100c0:	e0fffd17 	ldw	r3,-12(fp)
 10100c4:	e0fffe15 	stw	r3,-8(fp)
 10100c8:	e0fffe17 	ldw	r3,-8(fp)
 10100cc:	1804403a 	cmpge	r2,r3,zero
 10100d0:	1000031e 	bne	r2,zero,10100e0 <alt_up_character_lcd_shift_cursor+0x6c>
 10100d4:	e0bffe17 	ldw	r2,-8(fp)
 10100d8:	0085c83a 	sub	r2,zero,r2
 10100dc:	e0bffe15 	stw	r2,-8(fp)
 10100e0:	e0fffe17 	ldw	r3,-8(fp)
 10100e4:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 10100e8:	00000306 	br	10100f8 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 10100ec:	e17ffb43 	ldbu	r5,-19(fp)
 10100f0:	e13ffc17 	ldw	r4,-16(fp)
 10100f4:	100fe180 	call	100fe18 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10100f8:	e0bffb03 	ldbu	r2,-20(fp)
 10100fc:	10bfffc4 	addi	r2,r2,-1
 1010100:	e0bffb05 	stb	r2,-20(fp)
 1010104:	e0bffb03 	ldbu	r2,-20(fp)
 1010108:	10803fd8 	cmpnei	r2,r2,255
 101010c:	103ff71e 	bne	r2,zero,10100ec <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1010110:	e037883a 	mov	sp,fp
 1010114:	dfc00117 	ldw	ra,4(sp)
 1010118:	df000017 	ldw	fp,0(sp)
 101011c:	dec00204 	addi	sp,sp,8
 1010120:	f800283a 	ret

01010124 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1010124:	defff904 	addi	sp,sp,-28
 1010128:	dfc00615 	stw	ra,24(sp)
 101012c:	df000515 	stw	fp,20(sp)
 1010130:	df000504 	addi	fp,sp,20
 1010134:	e13ffc15 	stw	r4,-16(fp)
 1010138:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 101013c:	e0bffd17 	ldw	r2,-12(fp)
 1010140:	1005003a 	cmpeq	r2,r2,zero
 1010144:	10001e1e 	bne	r2,zero,10101c0 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1010148:	e0bffd17 	ldw	r2,-12(fp)
 101014c:	10800050 	cmplti	r2,r2,1
 1010150:	1000031e 	bne	r2,zero,1010160 <alt_up_character_lcd_shift_display+0x3c>
 1010154:	00800704 	movi	r2,28
 1010158:	e0bfff05 	stb	r2,-4(fp)
 101015c:	00000206 	br	1010168 <alt_up_character_lcd_shift_display+0x44>
 1010160:	00c00604 	movi	r3,24
 1010164:	e0ffff05 	stb	r3,-4(fp)
 1010168:	e0bfff03 	ldbu	r2,-4(fp)
 101016c:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1010170:	e0fffd17 	ldw	r3,-12(fp)
 1010174:	e0fffe15 	stw	r3,-8(fp)
 1010178:	e0fffe17 	ldw	r3,-8(fp)
 101017c:	1804403a 	cmpge	r2,r3,zero
 1010180:	1000031e 	bne	r2,zero,1010190 <alt_up_character_lcd_shift_display+0x6c>
 1010184:	e0bffe17 	ldw	r2,-8(fp)
 1010188:	0085c83a 	sub	r2,zero,r2
 101018c:	e0bffe15 	stw	r2,-8(fp)
 1010190:	e0fffe17 	ldw	r3,-8(fp)
 1010194:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1010198:	00000306 	br	10101a8 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 101019c:	e17ffb43 	ldbu	r5,-19(fp)
 10101a0:	e13ffc17 	ldw	r4,-16(fp)
 10101a4:	100fe180 	call	100fe18 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 10101a8:	e0bffb03 	ldbu	r2,-20(fp)
 10101ac:	10bfffc4 	addi	r2,r2,-1
 10101b0:	e0bffb05 	stb	r2,-20(fp)
 10101b4:	e0bffb03 	ldbu	r2,-20(fp)
 10101b8:	10803fd8 	cmpnei	r2,r2,255
 10101bc:	103ff71e 	bne	r2,zero,101019c <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 10101c0:	e037883a 	mov	sp,fp
 10101c4:	dfc00117 	ldw	ra,4(sp)
 10101c8:	df000017 	ldw	fp,0(sp)
 10101cc:	dec00204 	addi	sp,sp,8
 10101d0:	f800283a 	ret

010101d4 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 10101d4:	defff904 	addi	sp,sp,-28
 10101d8:	dfc00615 	stw	ra,24(sp)
 10101dc:	df000515 	stw	fp,20(sp)
 10101e0:	df000504 	addi	fp,sp,20
 10101e4:	e13ffc15 	stw	r4,-16(fp)
 10101e8:	e17ffd15 	stw	r5,-12(fp)
 10101ec:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 10101f0:	e0bffd17 	ldw	r2,-12(fp)
 10101f4:	10800a28 	cmpgeui	r2,r2,40
 10101f8:	1000031e 	bne	r2,zero,1010208 <alt_up_character_lcd_erase_pos+0x34>
 10101fc:	e0bffe17 	ldw	r2,-8(fp)
 1010200:	108000b0 	cmpltui	r2,r2,2
 1010204:	1000031e 	bne	r2,zero,1010214 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1010208:	00bfffc4 	movi	r2,-1
 101020c:	e0bfff15 	stw	r2,-4(fp)
 1010210:	00000e06 	br	101024c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1010214:	e13ffd17 	ldw	r4,-12(fp)
 1010218:	e17ffe17 	ldw	r5,-8(fp)
 101021c:	100fd9c0 	call	100fd9c <get_DDRAM_addr>
 1010220:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1010224:	e17ffb03 	ldbu	r5,-20(fp)
 1010228:	e13ffc17 	ldw	r4,-16(fp)
 101022c:	100fe180 	call	100fe18 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1010230:	e0bffc17 	ldw	r2,-16(fp)
 1010234:	10800a17 	ldw	r2,40(r2)
 1010238:	10800044 	addi	r2,r2,1
 101023c:	1007883a 	mov	r3,r2
 1010240:	00800084 	movi	r2,2
 1010244:	18800025 	stbio	r2,0(r3)
	return 0;
 1010248:	e03fff15 	stw	zero,-4(fp)
 101024c:	e0bfff17 	ldw	r2,-4(fp)
}
 1010250:	e037883a 	mov	sp,fp
 1010254:	dfc00117 	ldw	ra,4(sp)
 1010258:	df000017 	ldw	fp,0(sp)
 101025c:	dec00204 	addi	sp,sp,8
 1010260:	f800283a 	ret

01010264 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1010264:	defffd04 	addi	sp,sp,-12
 1010268:	dfc00215 	stw	ra,8(sp)
 101026c:	df000115 	stw	fp,4(sp)
 1010270:	df000104 	addi	fp,sp,4
 1010274:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1010278:	e13fff17 	ldw	r4,-4(fp)
 101027c:	01400304 	movi	r5,12
 1010280:	100fe180 	call	100fe18 <alt_up_character_lcd_send_cmd>
}
 1010284:	e037883a 	mov	sp,fp
 1010288:	dfc00117 	ldw	ra,4(sp)
 101028c:	df000017 	ldw	fp,0(sp)
 1010290:	dec00204 	addi	sp,sp,8
 1010294:	f800283a 	ret

01010298 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1010298:	defffd04 	addi	sp,sp,-12
 101029c:	dfc00215 	stw	ra,8(sp)
 10102a0:	df000115 	stw	fp,4(sp)
 10102a4:	df000104 	addi	fp,sp,4
 10102a8:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 10102ac:	e13fff17 	ldw	r4,-4(fp)
 10102b0:	014003c4 	movi	r5,15
 10102b4:	100fe180 	call	100fe18 <alt_up_character_lcd_send_cmd>
}
 10102b8:	e037883a 	mov	sp,fp
 10102bc:	dfc00117 	ldw	ra,4(sp)
 10102c0:	df000017 	ldw	fp,0(sp)
 10102c4:	dec00204 	addi	sp,sp,8
 10102c8:	f800283a 	ret

010102cc <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 10102cc:	defffd04 	addi	sp,sp,-12
 10102d0:	df000215 	stw	fp,8(sp)
 10102d4:	df000204 	addi	fp,sp,8
 10102d8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10102dc:	e0bfff17 	ldw	r2,-4(fp)
 10102e0:	10800a17 	ldw	r2,40(r2)
 10102e4:	10800104 	addi	r2,r2,4
 10102e8:	10800037 	ldwio	r2,0(r2)
 10102ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 10102f0:	e0bffe17 	ldw	r2,-8(fp)
 10102f4:	10800054 	ori	r2,r2,1
 10102f8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 10102fc:	e0bfff17 	ldw	r2,-4(fp)
 1010300:	10800a17 	ldw	r2,40(r2)
 1010304:	10800104 	addi	r2,r2,4
 1010308:	e0fffe17 	ldw	r3,-8(fp)
 101030c:	10c00035 	stwio	r3,0(r2)
}
 1010310:	e037883a 	mov	sp,fp
 1010314:	df000017 	ldw	fp,0(sp)
 1010318:	dec00104 	addi	sp,sp,4
 101031c:	f800283a 	ret

01010320 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1010320:	defffd04 	addi	sp,sp,-12
 1010324:	df000215 	stw	fp,8(sp)
 1010328:	df000204 	addi	fp,sp,8
 101032c:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1010330:	e0bfff17 	ldw	r2,-4(fp)
 1010334:	10800a17 	ldw	r2,40(r2)
 1010338:	10800104 	addi	r2,r2,4
 101033c:	10800037 	ldwio	r2,0(r2)
 1010340:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1010344:	e0fffe17 	ldw	r3,-8(fp)
 1010348:	00bfff84 	movi	r2,-2
 101034c:	1884703a 	and	r2,r3,r2
 1010350:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1010354:	e0bfff17 	ldw	r2,-4(fp)
 1010358:	10800a17 	ldw	r2,40(r2)
 101035c:	10800104 	addi	r2,r2,4
 1010360:	e0fffe17 	ldw	r3,-8(fp)
 1010364:	10c00035 	stwio	r3,0(r2)
}
 1010368:	e037883a 	mov	sp,fp
 101036c:	df000017 	ldw	fp,0(sp)
 1010370:	dec00104 	addi	sp,sp,4
 1010374:	f800283a 	ret

01010378 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 1010378:	defffd04 	addi	sp,sp,-12
 101037c:	df000215 	stw	fp,8(sp)
 1010380:	df000204 	addi	fp,sp,8
 1010384:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 1010388:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 101038c:	e0bfff17 	ldw	r2,-4(fp)
 1010390:	10800a17 	ldw	r2,40(r2)
 1010394:	10800084 	addi	r2,r2,2
 1010398:	1080002b 	ldhuio	r2,0(r2)
 101039c:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 10103a0:	e0bffe0b 	ldhu	r2,-8(fp)
}
 10103a4:	e037883a 	mov	sp,fp
 10103a8:	df000017 	ldw	fp,0(sp)
 10103ac:	dec00104 	addi	sp,sp,4
 10103b0:	f800283a 	ret

010103b4 <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 10103b4:	defffd04 	addi	sp,sp,-12
 10103b8:	df000215 	stw	fp,8(sp)
 10103bc:	df000204 	addi	fp,sp,8
 10103c0:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 10103c4:	e0bfff17 	ldw	r2,-4(fp)
 10103c8:	10800a17 	ldw	r2,40(r2)
 10103cc:	10800104 	addi	r2,r2,4
 10103d0:	10800037 	ldwio	r2,0(r2)
 10103d4:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 10103d8:	e0bffe17 	ldw	r2,-8(fp)
 10103dc:	10bfffec 	andhi	r2,r2,65535
 10103e0:	1004d43a 	srli	r2,r2,16
}
 10103e4:	e037883a 	mov	sp,fp
 10103e8:	df000017 	ldw	fp,0(sp)
 10103ec:	dec00104 	addi	sp,sp,4
 10103f0:	f800283a 	ret

010103f4 <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 10103f4:	defffc04 	addi	sp,sp,-16
 10103f8:	df000315 	stw	fp,12(sp)
 10103fc:	df000304 	addi	fp,sp,12
 1010400:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 1010404:	e0bffe17 	ldw	r2,-8(fp)
 1010408:	1080800c 	andi	r2,r2,512
 101040c:	1004d27a 	srli	r2,r2,9
 1010410:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 1010414:	e0bffd17 	ldw	r2,-12(fp)
 1010418:	1005003a 	cmpeq	r2,r2,zero
 101041c:	1000031e 	bne	r2,zero,101042c <alt_up_rs232_check_parity+0x38>
 1010420:	00bfffc4 	movi	r2,-1
 1010424:	e0bfff15 	stw	r2,-4(fp)
 1010428:	00000106 	br	1010430 <alt_up_rs232_check_parity+0x3c>
 101042c:	e03fff15 	stw	zero,-4(fp)
 1010430:	e0bfff17 	ldw	r2,-4(fp)
}
 1010434:	e037883a 	mov	sp,fp
 1010438:	df000017 	ldw	fp,0(sp)
 101043c:	dec00104 	addi	sp,sp,4
 1010440:	f800283a 	ret

01010444 <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 1010444:	defffc04 	addi	sp,sp,-16
 1010448:	df000315 	stw	fp,12(sp)
 101044c:	df000304 	addi	fp,sp,12
 1010450:	e13ffe15 	stw	r4,-8(fp)
 1010454:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1010458:	e0bffe17 	ldw	r2,-8(fp)
 101045c:	10800a17 	ldw	r2,40(r2)
 1010460:	10800037 	ldwio	r2,0(r2)
 1010464:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 1010468:	e0bffe17 	ldw	r2,-8(fp)
 101046c:	10800a17 	ldw	r2,40(r2)
 1010470:	e0ffff03 	ldbu	r3,-4(fp)
 1010474:	10c00035 	stwio	r3,0(r2)
	return 0;
 1010478:	0005883a 	mov	r2,zero
}
 101047c:	e037883a 	mov	sp,fp
 1010480:	df000017 	ldw	fp,0(sp)
 1010484:	dec00104 	addi	sp,sp,4
 1010488:	f800283a 	ret

0101048c <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 101048c:	defffa04 	addi	sp,sp,-24
 1010490:	dfc00515 	stw	ra,20(sp)
 1010494:	df000415 	stw	fp,16(sp)
 1010498:	df000404 	addi	fp,sp,16
 101049c:	e13ffd15 	stw	r4,-12(fp)
 10104a0:	e17ffe15 	stw	r5,-8(fp)
 10104a4:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 10104a8:	e0bffd17 	ldw	r2,-12(fp)
 10104ac:	10800a17 	ldw	r2,40(r2)
 10104b0:	10800037 	ldwio	r2,0(r2)
 10104b4:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 10104b8:	e0bffc17 	ldw	r2,-16(fp)
 10104bc:	1007883a 	mov	r3,r2
 10104c0:	e0bffe17 	ldw	r2,-8(fp)
 10104c4:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 10104c8:	e13ffc17 	ldw	r4,-16(fp)
 10104cc:	10103f40 	call	10103f4 <alt_up_rs232_check_parity>
 10104d0:	1007883a 	mov	r3,r2
 10104d4:	e0bfff17 	ldw	r2,-4(fp)
 10104d8:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 10104dc:	e0bffc17 	ldw	r2,-16(fp)
 10104e0:	10a0000c 	andi	r2,r2,32768
 10104e4:	1004d3fa 	srli	r2,r2,15
 10104e8:	10bfffc4 	addi	r2,r2,-1
}
 10104ec:	e037883a 	mov	sp,fp
 10104f0:	dfc00117 	ldw	ra,4(sp)
 10104f4:	df000017 	ldw	fp,0(sp)
 10104f8:	dec00204 	addi	sp,sp,8
 10104fc:	f800283a 	ret

01010500 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 1010500:	defff804 	addi	sp,sp,-32
 1010504:	dfc00715 	stw	ra,28(sp)
 1010508:	df000615 	stw	fp,24(sp)
 101050c:	df000604 	addi	fp,sp,24
 1010510:	e13ffd15 	stw	r4,-12(fp)
 1010514:	e17ffe15 	stw	r5,-8(fp)
 1010518:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 101051c:	e0bffd17 	ldw	r2,-12(fp)
 1010520:	10800017 	ldw	r2,0(r2)
 1010524:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 1010528:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 101052c:	00000c06 	br	1010560 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 1010530:	e17ffe17 	ldw	r5,-8(fp)
 1010534:	e0bffe17 	ldw	r2,-8(fp)
 1010538:	10800044 	addi	r2,r2,1
 101053c:	e0bffe15 	stw	r2,-8(fp)
 1010540:	e1bffc04 	addi	r6,fp,-16
 1010544:	e13ffb17 	ldw	r4,-20(fp)
 1010548:	101048c0 	call	101048c <alt_up_rs232_read_data>
 101054c:	1004c03a 	cmpne	r2,r2,zero
 1010550:	1000091e 	bne	r2,zero,1010578 <alt_up_rs232_read_fd+0x78>
			count++;
 1010554:	e0bffa17 	ldw	r2,-24(fp)
 1010558:	10800044 	addi	r2,r2,1
 101055c:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1010560:	e0bfff17 	ldw	r2,-4(fp)
 1010564:	10bfffc4 	addi	r2,r2,-1
 1010568:	e0bfff15 	stw	r2,-4(fp)
 101056c:	e0bfff17 	ldw	r2,-4(fp)
 1010570:	10bfffd8 	cmpnei	r2,r2,-1
 1010574:	103fee1e 	bne	r2,zero,1010530 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 1010578:	e0bffa17 	ldw	r2,-24(fp)
}
 101057c:	e037883a 	mov	sp,fp
 1010580:	dfc00117 	ldw	ra,4(sp)
 1010584:	df000017 	ldw	fp,0(sp)
 1010588:	dec00204 	addi	sp,sp,8
 101058c:	f800283a 	ret

01010590 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1010590:	defff904 	addi	sp,sp,-28
 1010594:	dfc00615 	stw	ra,24(sp)
 1010598:	df000515 	stw	fp,20(sp)
 101059c:	df000504 	addi	fp,sp,20
 10105a0:	e13ffd15 	stw	r4,-12(fp)
 10105a4:	e17ffe15 	stw	r5,-8(fp)
 10105a8:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 10105ac:	e0bffd17 	ldw	r2,-12(fp)
 10105b0:	10800017 	ldw	r2,0(r2)
 10105b4:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 10105b8:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 10105bc:	00000d06 	br	10105f4 <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 10105c0:	e0bffe17 	ldw	r2,-8(fp)
 10105c4:	10800003 	ldbu	r2,0(r2)
 10105c8:	11403fcc 	andi	r5,r2,255
 10105cc:	e13ffc17 	ldw	r4,-16(fp)
 10105d0:	10104440 	call	1010444 <alt_up_rs232_write_data>
 10105d4:	1004c03a 	cmpne	r2,r2,zero
 10105d8:	10000c1e 	bne	r2,zero,101060c <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 10105dc:	e0bffb17 	ldw	r2,-20(fp)
 10105e0:	10800044 	addi	r2,r2,1
 10105e4:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 10105e8:	e0bffe17 	ldw	r2,-8(fp)
 10105ec:	10800044 	addi	r2,r2,1
 10105f0:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 10105f4:	e0bfff17 	ldw	r2,-4(fp)
 10105f8:	10bfffc4 	addi	r2,r2,-1
 10105fc:	e0bfff15 	stw	r2,-4(fp)
 1010600:	e0bfff17 	ldw	r2,-4(fp)
 1010604:	10bfffd8 	cmpnei	r2,r2,-1
 1010608:	103fed1e 	bne	r2,zero,10105c0 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 101060c:	e0bffb17 	ldw	r2,-20(fp)
}
 1010610:	e037883a 	mov	sp,fp
 1010614:	dfc00117 	ldw	ra,4(sp)
 1010618:	df000017 	ldw	fp,0(sp)
 101061c:	dec00204 	addi	sp,sp,8
 1010620:	f800283a 	ret

01010624 <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 1010624:	defffc04 	addi	sp,sp,-16
 1010628:	dfc00315 	stw	ra,12(sp)
 101062c:	df000215 	stw	fp,8(sp)
 1010630:	df000204 	addi	fp,sp,8
 1010634:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 1010638:	e13fff17 	ldw	r4,-4(fp)
 101063c:	01404074 	movhi	r5,257
 1010640:	2954c204 	addi	r5,r5,21256
 1010644:	10109d80 	call	10109d8 <alt_find_dev>
 1010648:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 101064c:	e0bffe17 	ldw	r2,-8(fp)
}
 1010650:	e037883a 	mov	sp,fp
 1010654:	dfc00117 	ldw	ra,4(sp)
 1010658:	df000017 	ldw	fp,0(sp)
 101065c:	dec00204 	addi	sp,sp,8
 1010660:	f800283a 	ret

01010664 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 1010664:	defff404 	addi	sp,sp,-48
 1010668:	df000b15 	stw	fp,44(sp)
 101066c:	df000b04 	addi	fp,sp,44
 1010670:	e13ffb15 	stw	r4,-20(fp)
 1010674:	e17ffc15 	stw	r5,-16(fp)
 1010678:	e1bffd15 	stw	r6,-12(fp)
 101067c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1010680:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1010684:	00804074 	movhi	r2,257
 1010688:	109c1b04 	addi	r2,r2,28780
 101068c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1010690:	1005003a 	cmpeq	r2,r2,zero
 1010694:	1000411e 	bne	r2,zero,101079c <alt_alarm_start+0x138>
  {
    if (alarm)
 1010698:	e0bffb17 	ldw	r2,-20(fp)
 101069c:	1005003a 	cmpeq	r2,r2,zero
 10106a0:	10003b1e 	bne	r2,zero,1010790 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 10106a4:	e0fffb17 	ldw	r3,-20(fp)
 10106a8:	e0bffd17 	ldw	r2,-12(fp)
 10106ac:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 10106b0:	e0fffb17 	ldw	r3,-20(fp)
 10106b4:	e0bffe17 	ldw	r2,-8(fp)
 10106b8:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10106bc:	0005303a 	rdctl	r2,status
 10106c0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10106c4:	e0fff817 	ldw	r3,-32(fp)
 10106c8:	00bfff84 	movi	r2,-2
 10106cc:	1884703a 	and	r2,r3,r2
 10106d0:	1001703a 	wrctl	status,r2
  
  return context;
 10106d4:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 10106d8:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 10106dc:	00804074 	movhi	r2,257
 10106e0:	109c1c04 	addi	r2,r2,28784
 10106e4:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 10106e8:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 10106ec:	e0fffc17 	ldw	r3,-16(fp)
 10106f0:	e0bff917 	ldw	r2,-28(fp)
 10106f4:	1885883a 	add	r2,r3,r2
 10106f8:	10c00044 	addi	r3,r2,1
 10106fc:	e0bffb17 	ldw	r2,-20(fp)
 1010700:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 1010704:	e0bffb17 	ldw	r2,-20(fp)
 1010708:	10c00217 	ldw	r3,8(r2)
 101070c:	e0bff917 	ldw	r2,-28(fp)
 1010710:	1880042e 	bgeu	r3,r2,1010724 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 1010714:	e0fffb17 	ldw	r3,-20(fp)
 1010718:	00800044 	movi	r2,1
 101071c:	18800405 	stb	r2,16(r3)
 1010720:	00000206 	br	101072c <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 1010724:	e0bffb17 	ldw	r2,-20(fp)
 1010728:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 101072c:	e0fffb17 	ldw	r3,-20(fp)
 1010730:	00804074 	movhi	r2,257
 1010734:	1094c804 	addi	r2,r2,21280
 1010738:	e0bff615 	stw	r2,-40(fp)
 101073c:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1010740:	e0fff717 	ldw	r3,-36(fp)
 1010744:	e0bff617 	ldw	r2,-40(fp)
 1010748:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 101074c:	e0bff617 	ldw	r2,-40(fp)
 1010750:	10c00017 	ldw	r3,0(r2)
 1010754:	e0bff717 	ldw	r2,-36(fp)
 1010758:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 101075c:	e0bff617 	ldw	r2,-40(fp)
 1010760:	10c00017 	ldw	r3,0(r2)
 1010764:	e0bff717 	ldw	r2,-36(fp)
 1010768:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 101076c:	e0fff617 	ldw	r3,-40(fp)
 1010770:	e0bff717 	ldw	r2,-36(fp)
 1010774:	18800015 	stw	r2,0(r3)
 1010778:	e0bffa17 	ldw	r2,-24(fp)
 101077c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010780:	e0bff517 	ldw	r2,-44(fp)
 1010784:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1010788:	e03fff15 	stw	zero,-4(fp)
 101078c:	00000506 	br	10107a4 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1010790:	00bffa84 	movi	r2,-22
 1010794:	e0bfff15 	stw	r2,-4(fp)
 1010798:	00000206 	br	10107a4 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 101079c:	00bfde84 	movi	r2,-134
 10107a0:	e0bfff15 	stw	r2,-4(fp)
 10107a4:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 10107a8:	e037883a 	mov	sp,fp
 10107ac:	df000017 	ldw	fp,0(sp)
 10107b0:	dec00104 	addi	sp,sp,4
 10107b4:	f800283a 	ret

010107b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10107b8:	defffe04 	addi	sp,sp,-8
 10107bc:	df000115 	stw	fp,4(sp)
 10107c0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10107c4:	e03fff15 	stw	zero,-4(fp)
 10107c8:	00000506 	br	10107e0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 10107cc:	e0bfff17 	ldw	r2,-4(fp)
 10107d0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10107d4:	e0bfff17 	ldw	r2,-4(fp)
 10107d8:	10800804 	addi	r2,r2,32
 10107dc:	e0bfff15 	stw	r2,-4(fp)
 10107e0:	e0bfff17 	ldw	r2,-4(fp)
 10107e4:	10820030 	cmpltui	r2,r2,2048
 10107e8:	103ff81e 	bne	r2,zero,10107cc <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 10107ec:	e037883a 	mov	sp,fp
 10107f0:	df000017 	ldw	fp,0(sp)
 10107f4:	dec00104 	addi	sp,sp,4
 10107f8:	f800283a 	ret

010107fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 10107fc:	defff904 	addi	sp,sp,-28
 1010800:	dfc00615 	stw	ra,24(sp)
 1010804:	df000515 	stw	fp,20(sp)
 1010808:	df000504 	addi	fp,sp,20
 101080c:	e13ffd15 	stw	r4,-12(fp)
 1010810:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1010814:	e0bffd17 	ldw	r2,-12(fp)
 1010818:	1005003a 	cmpeq	r2,r2,zero
 101081c:	1000041e 	bne	r2,zero,1010830 <alt_dev_llist_insert+0x34>
 1010820:	e0bffd17 	ldw	r2,-12(fp)
 1010824:	10800217 	ldw	r2,8(r2)
 1010828:	1004c03a 	cmpne	r2,r2,zero
 101082c:	1000071e 	bne	r2,zero,101084c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1010830:	10108b00 	call	10108b0 <alt_get_errno>
 1010834:	1007883a 	mov	r3,r2
 1010838:	00800584 	movi	r2,22
 101083c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1010840:	00bffa84 	movi	r2,-22
 1010844:	e0bfff15 	stw	r2,-4(fp)
 1010848:	00001306 	br	1010898 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 101084c:	e0fffd17 	ldw	r3,-12(fp)
 1010850:	e0bffe17 	ldw	r2,-8(fp)
 1010854:	e0bffb15 	stw	r2,-20(fp)
 1010858:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 101085c:	e0fffc17 	ldw	r3,-16(fp)
 1010860:	e0bffb17 	ldw	r2,-20(fp)
 1010864:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1010868:	e0bffb17 	ldw	r2,-20(fp)
 101086c:	10c00017 	ldw	r3,0(r2)
 1010870:	e0bffc17 	ldw	r2,-16(fp)
 1010874:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1010878:	e0bffb17 	ldw	r2,-20(fp)
 101087c:	10c00017 	ldw	r3,0(r2)
 1010880:	e0bffc17 	ldw	r2,-16(fp)
 1010884:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1010888:	e0fffb17 	ldw	r3,-20(fp)
 101088c:	e0bffc17 	ldw	r2,-16(fp)
 1010890:	18800015 	stw	r2,0(r3)

  return 0;  
 1010894:	e03fff15 	stw	zero,-4(fp)
 1010898:	e0bfff17 	ldw	r2,-4(fp)
}
 101089c:	e037883a 	mov	sp,fp
 10108a0:	dfc00117 	ldw	ra,4(sp)
 10108a4:	df000017 	ldw	fp,0(sp)
 10108a8:	dec00204 	addi	sp,sp,8
 10108ac:	f800283a 	ret

010108b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10108b0:	defffd04 	addi	sp,sp,-12
 10108b4:	dfc00215 	stw	ra,8(sp)
 10108b8:	df000115 	stw	fp,4(sp)
 10108bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10108c0:	00804074 	movhi	r2,257
 10108c4:	1094c504 	addi	r2,r2,21268
 10108c8:	10800017 	ldw	r2,0(r2)
 10108cc:	1005003a 	cmpeq	r2,r2,zero
 10108d0:	1000061e 	bne	r2,zero,10108ec <alt_get_errno+0x3c>
 10108d4:	00804074 	movhi	r2,257
 10108d8:	1094c504 	addi	r2,r2,21268
 10108dc:	10800017 	ldw	r2,0(r2)
 10108e0:	103ee83a 	callr	r2
 10108e4:	e0bfff15 	stw	r2,-4(fp)
 10108e8:	00000306 	br	10108f8 <alt_get_errno+0x48>
 10108ec:	00804074 	movhi	r2,257
 10108f0:	109c0904 	addi	r2,r2,28708
 10108f4:	e0bfff15 	stw	r2,-4(fp)
 10108f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10108fc:	e037883a 	mov	sp,fp
 1010900:	dfc00117 	ldw	ra,4(sp)
 1010904:	df000017 	ldw	fp,0(sp)
 1010908:	dec00204 	addi	sp,sp,8
 101090c:	f800283a 	ret

01010910 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1010910:	defffd04 	addi	sp,sp,-12
 1010914:	dfc00215 	stw	ra,8(sp)
 1010918:	df000115 	stw	fp,4(sp)
 101091c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1010920:	00bfff04 	movi	r2,-4
 1010924:	00c04074 	movhi	r3,257
 1010928:	18cbf704 	addi	r3,r3,12252
 101092c:	1885883a 	add	r2,r3,r2
 1010930:	e0bfff15 	stw	r2,-4(fp)
 1010934:	00000606 	br	1010950 <_do_ctors+0x40>
        (*ctor) (); 
 1010938:	e0bfff17 	ldw	r2,-4(fp)
 101093c:	10800017 	ldw	r2,0(r2)
 1010940:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1010944:	e0bfff17 	ldw	r2,-4(fp)
 1010948:	10bfff04 	addi	r2,r2,-4
 101094c:	e0bfff15 	stw	r2,-4(fp)
 1010950:	e0ffff17 	ldw	r3,-4(fp)
 1010954:	00804074 	movhi	r2,257
 1010958:	108bf604 	addi	r2,r2,12248
 101095c:	18bff62e 	bgeu	r3,r2,1010938 <_do_ctors+0x28>
        (*ctor) (); 
}
 1010960:	e037883a 	mov	sp,fp
 1010964:	dfc00117 	ldw	ra,4(sp)
 1010968:	df000017 	ldw	fp,0(sp)
 101096c:	dec00204 	addi	sp,sp,8
 1010970:	f800283a 	ret

01010974 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 1010974:	defffd04 	addi	sp,sp,-12
 1010978:	dfc00215 	stw	ra,8(sp)
 101097c:	df000115 	stw	fp,4(sp)
 1010980:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1010984:	00bfff04 	movi	r2,-4
 1010988:	00c04074 	movhi	r3,257
 101098c:	18cbf704 	addi	r3,r3,12252
 1010990:	1885883a 	add	r2,r3,r2
 1010994:	e0bfff15 	stw	r2,-4(fp)
 1010998:	00000606 	br	10109b4 <_do_dtors+0x40>
        (*dtor) (); 
 101099c:	e0bfff17 	ldw	r2,-4(fp)
 10109a0:	10800017 	ldw	r2,0(r2)
 10109a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10109a8:	e0bfff17 	ldw	r2,-4(fp)
 10109ac:	10bfff04 	addi	r2,r2,-4
 10109b0:	e0bfff15 	stw	r2,-4(fp)
 10109b4:	e0ffff17 	ldw	r3,-4(fp)
 10109b8:	00804074 	movhi	r2,257
 10109bc:	108bf704 	addi	r2,r2,12252
 10109c0:	18bff62e 	bgeu	r3,r2,101099c <_do_dtors+0x28>
        (*dtor) (); 
}
 10109c4:	e037883a 	mov	sp,fp
 10109c8:	dfc00117 	ldw	ra,4(sp)
 10109cc:	df000017 	ldw	fp,0(sp)
 10109d0:	dec00204 	addi	sp,sp,8
 10109d4:	f800283a 	ret

010109d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 10109d8:	defff904 	addi	sp,sp,-28
 10109dc:	dfc00615 	stw	ra,24(sp)
 10109e0:	df000515 	stw	fp,20(sp)
 10109e4:	df000504 	addi	fp,sp,20
 10109e8:	e13ffd15 	stw	r4,-12(fp)
 10109ec:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 10109f0:	e0bffe17 	ldw	r2,-8(fp)
 10109f4:	10800017 	ldw	r2,0(r2)
 10109f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 10109fc:	e13ffd17 	ldw	r4,-12(fp)
 1010a00:	10006d80 	call	10006d8 <strlen>
 1010a04:	10800044 	addi	r2,r2,1
 1010a08:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1010a0c:	00000d06 	br	1010a44 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1010a10:	e0bffc17 	ldw	r2,-16(fp)
 1010a14:	11000217 	ldw	r4,8(r2)
 1010a18:	e1bffb17 	ldw	r6,-20(fp)
 1010a1c:	e17ffd17 	ldw	r5,-12(fp)
 1010a20:	10115b80 	call	10115b8 <memcmp>
 1010a24:	1004c03a 	cmpne	r2,r2,zero
 1010a28:	1000031e 	bne	r2,zero,1010a38 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1010a2c:	e0bffc17 	ldw	r2,-16(fp)
 1010a30:	e0bfff15 	stw	r2,-4(fp)
 1010a34:	00000706 	br	1010a54 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1010a38:	e0bffc17 	ldw	r2,-16(fp)
 1010a3c:	10800017 	ldw	r2,0(r2)
 1010a40:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1010a44:	e0fffe17 	ldw	r3,-8(fp)
 1010a48:	e0bffc17 	ldw	r2,-16(fp)
 1010a4c:	10fff01e 	bne	r2,r3,1010a10 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1010a50:	e03fff15 	stw	zero,-4(fp)
 1010a54:	e0bfff17 	ldw	r2,-4(fp)
}
 1010a58:	e037883a 	mov	sp,fp
 1010a5c:	dfc00117 	ldw	ra,4(sp)
 1010a60:	df000017 	ldw	fp,0(sp)
 1010a64:	dec00204 	addi	sp,sp,8
 1010a68:	f800283a 	ret

01010a6c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1010a6c:	defffe04 	addi	sp,sp,-8
 1010a70:	dfc00115 	stw	ra,4(sp)
 1010a74:	df000015 	stw	fp,0(sp)
 1010a78:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 1010a7c:	0009883a 	mov	r4,zero
 1010a80:	01500004 	movi	r5,16384
 1010a84:	10113f80 	call	10113f8 <alt_icache_flush>
#endif
}
 1010a88:	e037883a 	mov	sp,fp
 1010a8c:	dfc00117 	ldw	ra,4(sp)
 1010a90:	df000017 	ldw	fp,0(sp)
 1010a94:	dec00204 	addi	sp,sp,8
 1010a98:	f800283a 	ret

01010a9c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1010a9c:	defff904 	addi	sp,sp,-28
 1010aa0:	dfc00615 	stw	ra,24(sp)
 1010aa4:	df000515 	stw	fp,20(sp)
 1010aa8:	df000504 	addi	fp,sp,20
 1010aac:	e13ffc15 	stw	r4,-16(fp)
 1010ab0:	e17ffd15 	stw	r5,-12(fp)
 1010ab4:	e1bffe15 	stw	r6,-8(fp)
 1010ab8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 1010abc:	e13ffd17 	ldw	r4,-12(fp)
 1010ac0:	e17ffe17 	ldw	r5,-8(fp)
 1010ac4:	e1bfff17 	ldw	r6,-4(fp)
 1010ac8:	1010e740 	call	1010e74 <open>
 1010acc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 1010ad0:	e0bffb17 	ldw	r2,-20(fp)
 1010ad4:	1004803a 	cmplt	r2,r2,zero
 1010ad8:	10001c1e 	bne	r2,zero,1010b4c <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1010adc:	e0bffb17 	ldw	r2,-20(fp)
 1010ae0:	00c04074 	movhi	r3,257
 1010ae4:	18d02104 	addi	r3,r3,16516
 1010ae8:	10800324 	muli	r2,r2,12
 1010aec:	10c5883a 	add	r2,r2,r3
 1010af0:	10c00017 	ldw	r3,0(r2)
 1010af4:	e0bffc17 	ldw	r2,-16(fp)
 1010af8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1010afc:	e0bffb17 	ldw	r2,-20(fp)
 1010b00:	00c04074 	movhi	r3,257
 1010b04:	18d02104 	addi	r3,r3,16516
 1010b08:	10800324 	muli	r2,r2,12
 1010b0c:	10c5883a 	add	r2,r2,r3
 1010b10:	10800104 	addi	r2,r2,4
 1010b14:	10c00017 	ldw	r3,0(r2)
 1010b18:	e0bffc17 	ldw	r2,-16(fp)
 1010b1c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1010b20:	e0bffb17 	ldw	r2,-20(fp)
 1010b24:	00c04074 	movhi	r3,257
 1010b28:	18d02104 	addi	r3,r3,16516
 1010b2c:	10800324 	muli	r2,r2,12
 1010b30:	10c5883a 	add	r2,r2,r3
 1010b34:	10800204 	addi	r2,r2,8
 1010b38:	10c00017 	ldw	r3,0(r2)
 1010b3c:	e0bffc17 	ldw	r2,-16(fp)
 1010b40:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1010b44:	e13ffb17 	ldw	r4,-20(fp)
 1010b48:	100a86c0 	call	100a86c <alt_release_fd>
  }
} 
 1010b4c:	e037883a 	mov	sp,fp
 1010b50:	dfc00117 	ldw	ra,4(sp)
 1010b54:	df000017 	ldw	fp,0(sp)
 1010b58:	dec00204 	addi	sp,sp,8
 1010b5c:	f800283a 	ret

01010b60 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1010b60:	defffb04 	addi	sp,sp,-20
 1010b64:	dfc00415 	stw	ra,16(sp)
 1010b68:	df000315 	stw	fp,12(sp)
 1010b6c:	df000304 	addi	fp,sp,12
 1010b70:	e13ffd15 	stw	r4,-12(fp)
 1010b74:	e17ffe15 	stw	r5,-8(fp)
 1010b78:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1010b7c:	01004074 	movhi	r4,257
 1010b80:	21102404 	addi	r4,r4,16528
 1010b84:	e17ffd17 	ldw	r5,-12(fp)
 1010b88:	01800044 	movi	r6,1
 1010b8c:	01c07fc4 	movi	r7,511
 1010b90:	1010a9c0 	call	1010a9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1010b94:	01004074 	movhi	r4,257
 1010b98:	21102104 	addi	r4,r4,16516
 1010b9c:	e17ffe17 	ldw	r5,-8(fp)
 1010ba0:	000d883a 	mov	r6,zero
 1010ba4:	01c07fc4 	movi	r7,511
 1010ba8:	1010a9c0 	call	1010a9c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1010bac:	01004074 	movhi	r4,257
 1010bb0:	21102704 	addi	r4,r4,16540
 1010bb4:	e17fff17 	ldw	r5,-4(fp)
 1010bb8:	01800044 	movi	r6,1
 1010bbc:	01c07fc4 	movi	r7,511
 1010bc0:	1010a9c0 	call	1010a9c <alt_open_fd>
}  
 1010bc4:	e037883a 	mov	sp,fp
 1010bc8:	dfc00117 	ldw	ra,4(sp)
 1010bcc:	df000017 	ldw	fp,0(sp)
 1010bd0:	dec00204 	addi	sp,sp,8
 1010bd4:	f800283a 	ret

01010bd8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1010bd8:	deffef04 	addi	sp,sp,-68
 1010bdc:	df001015 	stw	fp,64(sp)
 1010be0:	df001004 	addi	fp,sp,64
 1010be4:	e13ffc15 	stw	r4,-16(fp)
 1010be8:	e17ffd15 	stw	r5,-12(fp)
 1010bec:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1010bf0:	00bffa84 	movi	r2,-22
 1010bf4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1010bf8:	e0bffc17 	ldw	r2,-16(fp)
 1010bfc:	10800828 	cmpgeui	r2,r2,32
 1010c00:	1000601e 	bne	r2,zero,1010d84 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010c04:	0005303a 	rdctl	r2,status
 1010c08:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010c0c:	e0fff917 	ldw	r3,-28(fp)
 1010c10:	00bfff84 	movi	r2,-2
 1010c14:	1884703a 	and	r2,r3,r2
 1010c18:	1001703a 	wrctl	status,r2
  
  return context;
 1010c1c:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1010c20:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1010c24:	e0bffc17 	ldw	r2,-16(fp)
 1010c28:	00c04074 	movhi	r3,257
 1010c2c:	18de0104 	addi	r3,r3,30724
 1010c30:	100490fa 	slli	r2,r2,3
 1010c34:	10c7883a 	add	r3,r2,r3
 1010c38:	e0bffe17 	ldw	r2,-8(fp)
 1010c3c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1010c40:	e0bffc17 	ldw	r2,-16(fp)
 1010c44:	00c04074 	movhi	r3,257
 1010c48:	18de0104 	addi	r3,r3,30724
 1010c4c:	100490fa 	slli	r2,r2,3
 1010c50:	10c5883a 	add	r2,r2,r3
 1010c54:	10c00104 	addi	r3,r2,4
 1010c58:	e0bffd17 	ldw	r2,-12(fp)
 1010c5c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1010c60:	e0bffe17 	ldw	r2,-8(fp)
 1010c64:	1005003a 	cmpeq	r2,r2,zero
 1010c68:	1000201e 	bne	r2,zero,1010cec <alt_irq_register+0x114>
 1010c6c:	e0bffc17 	ldw	r2,-16(fp)
 1010c70:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010c74:	0005303a 	rdctl	r2,status
 1010c78:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010c7c:	e0fff617 	ldw	r3,-40(fp)
 1010c80:	00bfff84 	movi	r2,-2
 1010c84:	1884703a 	and	r2,r3,r2
 1010c88:	1001703a 	wrctl	status,r2
  
  return context;
 1010c8c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010c90:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1010c94:	e0fff717 	ldw	r3,-36(fp)
 1010c98:	00800044 	movi	r2,1
 1010c9c:	10c4983a 	sll	r2,r2,r3
 1010ca0:	1007883a 	mov	r3,r2
 1010ca4:	00804074 	movhi	r2,257
 1010ca8:	109c1a04 	addi	r2,r2,28776
 1010cac:	10800017 	ldw	r2,0(r2)
 1010cb0:	1886b03a 	or	r3,r3,r2
 1010cb4:	00804074 	movhi	r2,257
 1010cb8:	109c1a04 	addi	r2,r2,28776
 1010cbc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010cc0:	00804074 	movhi	r2,257
 1010cc4:	109c1a04 	addi	r2,r2,28776
 1010cc8:	10800017 	ldw	r2,0(r2)
 1010ccc:	100170fa 	wrctl	ienable,r2
 1010cd0:	e0bff817 	ldw	r2,-32(fp)
 1010cd4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010cd8:	e0bff517 	ldw	r2,-44(fp)
 1010cdc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010ce0:	0005883a 	mov	r2,zero
 1010ce4:	e0bfff15 	stw	r2,-4(fp)
 1010ce8:	00002006 	br	1010d6c <alt_irq_register+0x194>
 1010cec:	e0bffc17 	ldw	r2,-16(fp)
 1010cf0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1010cf4:	0005303a 	rdctl	r2,status
 1010cf8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1010cfc:	e0fff217 	ldw	r3,-56(fp)
 1010d00:	00bfff84 	movi	r2,-2
 1010d04:	1884703a 	and	r2,r3,r2
 1010d08:	1001703a 	wrctl	status,r2
  
  return context;
 1010d0c:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1010d10:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 1010d14:	e0fff317 	ldw	r3,-52(fp)
 1010d18:	00800044 	movi	r2,1
 1010d1c:	10c4983a 	sll	r2,r2,r3
 1010d20:	0084303a 	nor	r2,zero,r2
 1010d24:	1007883a 	mov	r3,r2
 1010d28:	00804074 	movhi	r2,257
 1010d2c:	109c1a04 	addi	r2,r2,28776
 1010d30:	10800017 	ldw	r2,0(r2)
 1010d34:	1886703a 	and	r3,r3,r2
 1010d38:	00804074 	movhi	r2,257
 1010d3c:	109c1a04 	addi	r2,r2,28776
 1010d40:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1010d44:	00804074 	movhi	r2,257
 1010d48:	109c1a04 	addi	r2,r2,28776
 1010d4c:	10800017 	ldw	r2,0(r2)
 1010d50:	100170fa 	wrctl	ienable,r2
 1010d54:	e0bff417 	ldw	r2,-48(fp)
 1010d58:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1010d5c:	e0bff117 	ldw	r2,-60(fp)
 1010d60:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1010d64:	0005883a 	mov	r2,zero
 1010d68:	e0bfff15 	stw	r2,-4(fp)
 1010d6c:	e0bfff17 	ldw	r2,-4(fp)
 1010d70:	e0bffb15 	stw	r2,-20(fp)
 1010d74:	e0bffa17 	ldw	r2,-24(fp)
 1010d78:	e0bff015 	stw	r2,-64(fp)
 1010d7c:	e0bff017 	ldw	r2,-64(fp)
 1010d80:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1010d84:	e0bffb17 	ldw	r2,-20(fp)
}
 1010d88:	e037883a 	mov	sp,fp
 1010d8c:	df000017 	ldw	fp,0(sp)
 1010d90:	dec00104 	addi	sp,sp,4
 1010d94:	f800283a 	ret

01010d98 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 1010d98:	defffc04 	addi	sp,sp,-16
 1010d9c:	df000315 	stw	fp,12(sp)
 1010da0:	df000304 	addi	fp,sp,12
 1010da4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 1010da8:	e0bffe17 	ldw	r2,-8(fp)
 1010dac:	10800217 	ldw	r2,8(r2)
 1010db0:	10d00034 	orhi	r3,r2,16384
 1010db4:	e0bffe17 	ldw	r2,-8(fp)
 1010db8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1010dbc:	e03ffd15 	stw	zero,-12(fp)
 1010dc0:	00002006 	br	1010e44 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1010dc4:	e0bffd17 	ldw	r2,-12(fp)
 1010dc8:	00c04074 	movhi	r3,257
 1010dcc:	18d02104 	addi	r3,r3,16516
 1010dd0:	10800324 	muli	r2,r2,12
 1010dd4:	10c5883a 	add	r2,r2,r3
 1010dd8:	10c00017 	ldw	r3,0(r2)
 1010ddc:	e0bffe17 	ldw	r2,-8(fp)
 1010de0:	10800017 	ldw	r2,0(r2)
 1010de4:	1880141e 	bne	r3,r2,1010e38 <alt_file_locked+0xa0>
 1010de8:	e0bffd17 	ldw	r2,-12(fp)
 1010dec:	00c04074 	movhi	r3,257
 1010df0:	18d02104 	addi	r3,r3,16516
 1010df4:	10800324 	muli	r2,r2,12
 1010df8:	10c5883a 	add	r2,r2,r3
 1010dfc:	10800204 	addi	r2,r2,8
 1010e00:	10800017 	ldw	r2,0(r2)
 1010e04:	1004403a 	cmpge	r2,r2,zero
 1010e08:	10000b1e 	bne	r2,zero,1010e38 <alt_file_locked+0xa0>
 1010e0c:	e0bffd17 	ldw	r2,-12(fp)
 1010e10:	10800324 	muli	r2,r2,12
 1010e14:	1007883a 	mov	r3,r2
 1010e18:	00804074 	movhi	r2,257
 1010e1c:	10902104 	addi	r2,r2,16516
 1010e20:	1887883a 	add	r3,r3,r2
 1010e24:	e0bffe17 	ldw	r2,-8(fp)
 1010e28:	18800326 	beq	r3,r2,1010e38 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1010e2c:	00bffcc4 	movi	r2,-13
 1010e30:	e0bfff15 	stw	r2,-4(fp)
 1010e34:	00000a06 	br	1010e60 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1010e38:	e0bffd17 	ldw	r2,-12(fp)
 1010e3c:	10800044 	addi	r2,r2,1
 1010e40:	e0bffd15 	stw	r2,-12(fp)
 1010e44:	00804074 	movhi	r2,257
 1010e48:	1094c404 	addi	r2,r2,21264
 1010e4c:	10800017 	ldw	r2,0(r2)
 1010e50:	1007883a 	mov	r3,r2
 1010e54:	e0bffd17 	ldw	r2,-12(fp)
 1010e58:	18bfda2e 	bgeu	r3,r2,1010dc4 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1010e5c:	e03fff15 	stw	zero,-4(fp)
 1010e60:	e0bfff17 	ldw	r2,-4(fp)
}
 1010e64:	e037883a 	mov	sp,fp
 1010e68:	df000017 	ldw	fp,0(sp)
 1010e6c:	dec00104 	addi	sp,sp,4
 1010e70:	f800283a 	ret

01010e74 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 1010e74:	defff404 	addi	sp,sp,-48
 1010e78:	dfc00b15 	stw	ra,44(sp)
 1010e7c:	df000a15 	stw	fp,40(sp)
 1010e80:	df000a04 	addi	fp,sp,40
 1010e84:	e13ffb15 	stw	r4,-20(fp)
 1010e88:	e17ffc15 	stw	r5,-16(fp)
 1010e8c:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 1010e90:	00bfffc4 	movi	r2,-1
 1010e94:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 1010e98:	00bffb44 	movi	r2,-19
 1010e9c:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 1010ea0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 1010ea4:	e13ffb17 	ldw	r4,-20(fp)
 1010ea8:	01404074 	movhi	r5,257
 1010eac:	2954c204 	addi	r5,r5,21256
 1010eb0:	10109d80 	call	10109d8 <alt_find_dev>
 1010eb4:	e0bffa15 	stw	r2,-24(fp)
 1010eb8:	e0bffa17 	ldw	r2,-24(fp)
 1010ebc:	1004c03a 	cmpne	r2,r2,zero
 1010ec0:	1000051e 	bne	r2,zero,1010ed8 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1010ec4:	e13ffb17 	ldw	r4,-20(fp)
 1010ec8:	10112200 	call	1011220 <alt_find_file>
 1010ecc:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1010ed0:	00800044 	movi	r2,1
 1010ed4:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1010ed8:	e0bffa17 	ldw	r2,-24(fp)
 1010edc:	1005003a 	cmpeq	r2,r2,zero
 1010ee0:	1000301e 	bne	r2,zero,1010fa4 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1010ee4:	e13ffa17 	ldw	r4,-24(fp)
 1010ee8:	10113400 	call	1011340 <alt_get_fd>
 1010eec:	e0bff815 	stw	r2,-32(fp)
 1010ef0:	e0bff817 	ldw	r2,-32(fp)
 1010ef4:	1004403a 	cmpge	r2,r2,zero
 1010ef8:	1000031e 	bne	r2,zero,1010f08 <open+0x94>
    {
      status = index;
 1010efc:	e0bff817 	ldw	r2,-32(fp)
 1010f00:	e0bff715 	stw	r2,-36(fp)
 1010f04:	00002906 	br	1010fac <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 1010f08:	e0bff817 	ldw	r2,-32(fp)
 1010f0c:	10800324 	muli	r2,r2,12
 1010f10:	1007883a 	mov	r3,r2
 1010f14:	00804074 	movhi	r2,257
 1010f18:	10902104 	addi	r2,r2,16516
 1010f1c:	1885883a 	add	r2,r3,r2
 1010f20:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1010f24:	e0fffc17 	ldw	r3,-16(fp)
 1010f28:	00900034 	movhi	r2,16384
 1010f2c:	10bfffc4 	addi	r2,r2,-1
 1010f30:	1886703a 	and	r3,r3,r2
 1010f34:	e0bff917 	ldw	r2,-28(fp)
 1010f38:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1010f3c:	e0bff617 	ldw	r2,-40(fp)
 1010f40:	1004c03a 	cmpne	r2,r2,zero
 1010f44:	1000061e 	bne	r2,zero,1010f60 <open+0xec>
 1010f48:	e13ff917 	ldw	r4,-28(fp)
 1010f4c:	1010d980 	call	1010d98 <alt_file_locked>
 1010f50:	e0bff715 	stw	r2,-36(fp)
 1010f54:	e0bff717 	ldw	r2,-36(fp)
 1010f58:	1004803a 	cmplt	r2,r2,zero
 1010f5c:	1000131e 	bne	r2,zero,1010fac <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1010f60:	e0bffa17 	ldw	r2,-24(fp)
 1010f64:	10800317 	ldw	r2,12(r2)
 1010f68:	1005003a 	cmpeq	r2,r2,zero
 1010f6c:	1000091e 	bne	r2,zero,1010f94 <open+0x120>
 1010f70:	e0bffa17 	ldw	r2,-24(fp)
 1010f74:	10800317 	ldw	r2,12(r2)
 1010f78:	e13ff917 	ldw	r4,-28(fp)
 1010f7c:	e17ffb17 	ldw	r5,-20(fp)
 1010f80:	e1bffc17 	ldw	r6,-16(fp)
 1010f84:	e1fffd17 	ldw	r7,-12(fp)
 1010f88:	103ee83a 	callr	r2
 1010f8c:	e0bfff15 	stw	r2,-4(fp)
 1010f90:	00000106 	br	1010f98 <open+0x124>
 1010f94:	e03fff15 	stw	zero,-4(fp)
 1010f98:	e0bfff17 	ldw	r2,-4(fp)
 1010f9c:	e0bff715 	stw	r2,-36(fp)
 1010fa0:	00000206 	br	1010fac <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 1010fa4:	00bffb44 	movi	r2,-19
 1010fa8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1010fac:	e0bff717 	ldw	r2,-36(fp)
 1010fb0:	1004403a 	cmpge	r2,r2,zero
 1010fb4:	1000091e 	bne	r2,zero,1010fdc <open+0x168>
  {
    alt_release_fd (index);  
 1010fb8:	e13ff817 	ldw	r4,-32(fp)
 1010fbc:	100a86c0 	call	100a86c <alt_release_fd>
    ALT_ERRNO = -status;
 1010fc0:	1010ffc0 	call	1010ffc <alt_get_errno>
 1010fc4:	e0fff717 	ldw	r3,-36(fp)
 1010fc8:	00c7c83a 	sub	r3,zero,r3
 1010fcc:	10c00015 	stw	r3,0(r2)
    return -1;
 1010fd0:	00bfffc4 	movi	r2,-1
 1010fd4:	e0bffe15 	stw	r2,-8(fp)
 1010fd8:	00000206 	br	1010fe4 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 1010fdc:	e0bff817 	ldw	r2,-32(fp)
 1010fe0:	e0bffe15 	stw	r2,-8(fp)
 1010fe4:	e0bffe17 	ldw	r2,-8(fp)
}
 1010fe8:	e037883a 	mov	sp,fp
 1010fec:	dfc00117 	ldw	ra,4(sp)
 1010ff0:	df000017 	ldw	fp,0(sp)
 1010ff4:	dec00204 	addi	sp,sp,8
 1010ff8:	f800283a 	ret

01010ffc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1010ffc:	defffd04 	addi	sp,sp,-12
 1011000:	dfc00215 	stw	ra,8(sp)
 1011004:	df000115 	stw	fp,4(sp)
 1011008:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 101100c:	00804074 	movhi	r2,257
 1011010:	1094c504 	addi	r2,r2,21268
 1011014:	10800017 	ldw	r2,0(r2)
 1011018:	1005003a 	cmpeq	r2,r2,zero
 101101c:	1000061e 	bne	r2,zero,1011038 <alt_get_errno+0x3c>
 1011020:	00804074 	movhi	r2,257
 1011024:	1094c504 	addi	r2,r2,21268
 1011028:	10800017 	ldw	r2,0(r2)
 101102c:	103ee83a 	callr	r2
 1011030:	e0bfff15 	stw	r2,-4(fp)
 1011034:	00000306 	br	1011044 <alt_get_errno+0x48>
 1011038:	00804074 	movhi	r2,257
 101103c:	109c0904 	addi	r2,r2,28708
 1011040:	e0bfff15 	stw	r2,-4(fp)
 1011044:	e0bfff17 	ldw	r2,-4(fp)
}
 1011048:	e037883a 	mov	sp,fp
 101104c:	dfc00117 	ldw	ra,4(sp)
 1011050:	df000017 	ldw	fp,0(sp)
 1011054:	dec00204 	addi	sp,sp,8
 1011058:	f800283a 	ret

0101105c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 101105c:	defffa04 	addi	sp,sp,-24
 1011060:	df000515 	stw	fp,20(sp)
 1011064:	df000504 	addi	fp,sp,20
 1011068:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 101106c:	0005303a 	rdctl	r2,status
 1011070:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1011074:	e0fffd17 	ldw	r3,-12(fp)
 1011078:	00bfff84 	movi	r2,-2
 101107c:	1884703a 	and	r2,r3,r2
 1011080:	1001703a 	wrctl	status,r2
  
  return context;
 1011084:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1011088:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 101108c:	e0bfff17 	ldw	r2,-4(fp)
 1011090:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1011094:	e0bffc17 	ldw	r2,-16(fp)
 1011098:	10c00017 	ldw	r3,0(r2)
 101109c:	e0bffc17 	ldw	r2,-16(fp)
 10110a0:	10800117 	ldw	r2,4(r2)
 10110a4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 10110a8:	e0bffc17 	ldw	r2,-16(fp)
 10110ac:	10c00117 	ldw	r3,4(r2)
 10110b0:	e0bffc17 	ldw	r2,-16(fp)
 10110b4:	10800017 	ldw	r2,0(r2)
 10110b8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 10110bc:	e0fffc17 	ldw	r3,-16(fp)
 10110c0:	e0bffc17 	ldw	r2,-16(fp)
 10110c4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 10110c8:	e0fffc17 	ldw	r3,-16(fp)
 10110cc:	e0bffc17 	ldw	r2,-16(fp)
 10110d0:	18800015 	stw	r2,0(r3)
 10110d4:	e0bffe17 	ldw	r2,-8(fp)
 10110d8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10110dc:	e0bffb17 	ldw	r2,-20(fp)
 10110e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 10110e4:	e037883a 	mov	sp,fp
 10110e8:	df000017 	ldw	fp,0(sp)
 10110ec:	dec00104 	addi	sp,sp,4
 10110f0:	f800283a 	ret

010110f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 10110f4:	defffb04 	addi	sp,sp,-20
 10110f8:	dfc00415 	stw	ra,16(sp)
 10110fc:	df000315 	stw	fp,12(sp)
 1011100:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1011104:	d0a00e17 	ldw	r2,-32712(gp)
 1011108:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 101110c:	d0a76217 	ldw	r2,-25208(gp)
 1011110:	10800044 	addi	r2,r2,1
 1011114:	d0a76215 	stw	r2,-25208(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1011118:	00003106 	br	10111e0 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 101111c:	e0bffe17 	ldw	r2,-8(fp)
 1011120:	10800017 	ldw	r2,0(r2)
 1011124:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1011128:	e0bffe17 	ldw	r2,-8(fp)
 101112c:	10800403 	ldbu	r2,16(r2)
 1011130:	10803fcc 	andi	r2,r2,255
 1011134:	1005003a 	cmpeq	r2,r2,zero
 1011138:	1000051e 	bne	r2,zero,1011150 <alt_tick+0x5c>
 101113c:	d0a76217 	ldw	r2,-25208(gp)
 1011140:	1004c03a 	cmpne	r2,r2,zero
 1011144:	1000021e 	bne	r2,zero,1011150 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1011148:	e0bffe17 	ldw	r2,-8(fp)
 101114c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1011150:	e0bffe17 	ldw	r2,-8(fp)
 1011154:	10c00217 	ldw	r3,8(r2)
 1011158:	d0a76217 	ldw	r2,-25208(gp)
 101115c:	10c01e36 	bltu	r2,r3,10111d8 <alt_tick+0xe4>
 1011160:	e0bffe17 	ldw	r2,-8(fp)
 1011164:	10800403 	ldbu	r2,16(r2)
 1011168:	10803fcc 	andi	r2,r2,255
 101116c:	1004c03a 	cmpne	r2,r2,zero
 1011170:	1000191e 	bne	r2,zero,10111d8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1011174:	e0bffe17 	ldw	r2,-8(fp)
 1011178:	10c00317 	ldw	r3,12(r2)
 101117c:	e0bffe17 	ldw	r2,-8(fp)
 1011180:	11000517 	ldw	r4,20(r2)
 1011184:	183ee83a 	callr	r3
 1011188:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 101118c:	e0bffd17 	ldw	r2,-12(fp)
 1011190:	1004c03a 	cmpne	r2,r2,zero
 1011194:	1000031e 	bne	r2,zero,10111a4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1011198:	e13ffe17 	ldw	r4,-8(fp)
 101119c:	101105c0 	call	101105c <alt_alarm_stop>
 10111a0:	00000d06 	br	10111d8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 10111a4:	e0bffe17 	ldw	r2,-8(fp)
 10111a8:	10c00217 	ldw	r3,8(r2)
 10111ac:	e0bffd17 	ldw	r2,-12(fp)
 10111b0:	1887883a 	add	r3,r3,r2
 10111b4:	e0bffe17 	ldw	r2,-8(fp)
 10111b8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 10111bc:	e0bffe17 	ldw	r2,-8(fp)
 10111c0:	10c00217 	ldw	r3,8(r2)
 10111c4:	d0a76217 	ldw	r2,-25208(gp)
 10111c8:	1880032e 	bgeu	r3,r2,10111d8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 10111cc:	e0fffe17 	ldw	r3,-8(fp)
 10111d0:	00800044 	movi	r2,1
 10111d4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 10111d8:	e0bfff17 	ldw	r2,-4(fp)
 10111dc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 10111e0:	d0e00e04 	addi	r3,gp,-32712
 10111e4:	e0bffe17 	ldw	r2,-8(fp)
 10111e8:	10ffcc1e 	bne	r2,r3,101111c <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 10111ec:	e037883a 	mov	sp,fp
 10111f0:	dfc00117 	ldw	ra,4(sp)
 10111f4:	df000017 	ldw	fp,0(sp)
 10111f8:	dec00204 	addi	sp,sp,8
 10111fc:	f800283a 	ret

01011200 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1011200:	deffff04 	addi	sp,sp,-4
 1011204:	df000015 	stw	fp,0(sp)
 1011208:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 101120c:	000170fa 	wrctl	ienable,zero
}
 1011210:	e037883a 	mov	sp,fp
 1011214:	df000017 	ldw	fp,0(sp)
 1011218:	dec00104 	addi	sp,sp,4
 101121c:	f800283a 	ret

01011220 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1011220:	defffa04 	addi	sp,sp,-24
 1011224:	dfc00515 	stw	ra,20(sp)
 1011228:	df000415 	stw	fp,16(sp)
 101122c:	df000404 	addi	fp,sp,16
 1011230:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1011234:	00804074 	movhi	r2,257
 1011238:	1094c004 	addi	r2,r2,21248
 101123c:	10800017 	ldw	r2,0(r2)
 1011240:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1011244:	00003306 	br	1011314 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1011248:	e0bffd17 	ldw	r2,-12(fp)
 101124c:	11000217 	ldw	r4,8(r2)
 1011250:	10006d80 	call	10006d8 <strlen>
 1011254:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1011258:	e0bffd17 	ldw	r2,-12(fp)
 101125c:	10c00217 	ldw	r3,8(r2)
 1011260:	e0bffc17 	ldw	r2,-16(fp)
 1011264:	1885883a 	add	r2,r3,r2
 1011268:	10bfffc4 	addi	r2,r2,-1
 101126c:	10800003 	ldbu	r2,0(r2)
 1011270:	10803fcc 	andi	r2,r2,255
 1011274:	1080201c 	xori	r2,r2,128
 1011278:	10bfe004 	addi	r2,r2,-128
 101127c:	10800bd8 	cmpnei	r2,r2,47
 1011280:	1000031e 	bne	r2,zero,1011290 <alt_find_file+0x70>
    {
      len -= 1;
 1011284:	e0bffc17 	ldw	r2,-16(fp)
 1011288:	10bfffc4 	addi	r2,r2,-1
 101128c:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1011290:	e0bffc17 	ldw	r2,-16(fp)
 1011294:	1007883a 	mov	r3,r2
 1011298:	e0bffe17 	ldw	r2,-8(fp)
 101129c:	1885883a 	add	r2,r3,r2
 10112a0:	10800003 	ldbu	r2,0(r2)
 10112a4:	10803fcc 	andi	r2,r2,255
 10112a8:	1080201c 	xori	r2,r2,128
 10112ac:	10bfe004 	addi	r2,r2,-128
 10112b0:	10800be0 	cmpeqi	r2,r2,47
 10112b4:	10000a1e 	bne	r2,zero,10112e0 <alt_find_file+0xc0>
 10112b8:	e0bffc17 	ldw	r2,-16(fp)
 10112bc:	1007883a 	mov	r3,r2
 10112c0:	e0bffe17 	ldw	r2,-8(fp)
 10112c4:	1885883a 	add	r2,r3,r2
 10112c8:	10800003 	ldbu	r2,0(r2)
 10112cc:	10803fcc 	andi	r2,r2,255
 10112d0:	1080201c 	xori	r2,r2,128
 10112d4:	10bfe004 	addi	r2,r2,-128
 10112d8:	1004c03a 	cmpne	r2,r2,zero
 10112dc:	10000a1e 	bne	r2,zero,1011308 <alt_find_file+0xe8>
 10112e0:	e0bffd17 	ldw	r2,-12(fp)
 10112e4:	11000217 	ldw	r4,8(r2)
 10112e8:	e1bffc17 	ldw	r6,-16(fp)
 10112ec:	e17ffe17 	ldw	r5,-8(fp)
 10112f0:	10115b80 	call	10115b8 <memcmp>
 10112f4:	1004c03a 	cmpne	r2,r2,zero
 10112f8:	1000031e 	bne	r2,zero,1011308 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10112fc:	e0bffd17 	ldw	r2,-12(fp)
 1011300:	e0bfff15 	stw	r2,-4(fp)
 1011304:	00000806 	br	1011328 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1011308:	e0bffd17 	ldw	r2,-12(fp)
 101130c:	10800017 	ldw	r2,0(r2)
 1011310:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1011314:	00c04074 	movhi	r3,257
 1011318:	18d4c004 	addi	r3,r3,21248
 101131c:	e0bffd17 	ldw	r2,-12(fp)
 1011320:	10ffc91e 	bne	r2,r3,1011248 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1011324:	e03fff15 	stw	zero,-4(fp)
 1011328:	e0bfff17 	ldw	r2,-4(fp)
}
 101132c:	e037883a 	mov	sp,fp
 1011330:	dfc00117 	ldw	ra,4(sp)
 1011334:	df000017 	ldw	fp,0(sp)
 1011338:	dec00204 	addi	sp,sp,8
 101133c:	f800283a 	ret

01011340 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1011340:	defffc04 	addi	sp,sp,-16
 1011344:	df000315 	stw	fp,12(sp)
 1011348:	df000304 	addi	fp,sp,12
 101134c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1011350:	00bffa04 	movi	r2,-24
 1011354:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1011358:	e03ffe15 	stw	zero,-8(fp)
 101135c:	00001e06 	br	10113d8 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 1011360:	e0bffe17 	ldw	r2,-8(fp)
 1011364:	00c04074 	movhi	r3,257
 1011368:	18d02104 	addi	r3,r3,16516
 101136c:	10800324 	muli	r2,r2,12
 1011370:	10c5883a 	add	r2,r2,r3
 1011374:	10800017 	ldw	r2,0(r2)
 1011378:	1004c03a 	cmpne	r2,r2,zero
 101137c:	1000131e 	bne	r2,zero,10113cc <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 1011380:	e0bffe17 	ldw	r2,-8(fp)
 1011384:	00c04074 	movhi	r3,257
 1011388:	18d02104 	addi	r3,r3,16516
 101138c:	10800324 	muli	r2,r2,12
 1011390:	10c7883a 	add	r3,r2,r3
 1011394:	e0bfff17 	ldw	r2,-4(fp)
 1011398:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 101139c:	00804074 	movhi	r2,257
 10113a0:	1094c404 	addi	r2,r2,21264
 10113a4:	10c00017 	ldw	r3,0(r2)
 10113a8:	e0bffe17 	ldw	r2,-8(fp)
 10113ac:	1880040e 	bge	r3,r2,10113c0 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 10113b0:	00c04074 	movhi	r3,257
 10113b4:	18d4c404 	addi	r3,r3,21264
 10113b8:	e0bffe17 	ldw	r2,-8(fp)
 10113bc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 10113c0:	e0bffe17 	ldw	r2,-8(fp)
 10113c4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 10113c8:	00000606 	br	10113e4 <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 10113cc:	e0bffe17 	ldw	r2,-8(fp)
 10113d0:	10800044 	addi	r2,r2,1
 10113d4:	e0bffe15 	stw	r2,-8(fp)
 10113d8:	e0bffe17 	ldw	r2,-8(fp)
 10113dc:	10800810 	cmplti	r2,r2,32
 10113e0:	103fdf1e 	bne	r2,zero,1011360 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 10113e4:	e0bffd17 	ldw	r2,-12(fp)
}
 10113e8:	e037883a 	mov	sp,fp
 10113ec:	df000017 	ldw	fp,0(sp)
 10113f0:	dec00104 	addi	sp,sp,4
 10113f4:	f800283a 	ret

010113f8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 10113f8:	defffb04 	addi	sp,sp,-20
 10113fc:	df000415 	stw	fp,16(sp)
 1011400:	df000404 	addi	fp,sp,16
 1011404:	e13ffe15 	stw	r4,-8(fp)
 1011408:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 101140c:	e0bfff17 	ldw	r2,-4(fp)
 1011410:	10900070 	cmpltui	r2,r2,16385
 1011414:	1000021e 	bne	r2,zero,1011420 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1011418:	00900004 	movi	r2,16384
 101141c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1011420:	e0fffe17 	ldw	r3,-8(fp)
 1011424:	e0bfff17 	ldw	r2,-4(fp)
 1011428:	1885883a 	add	r2,r3,r2
 101142c:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1011430:	e0bffe17 	ldw	r2,-8(fp)
 1011434:	e0bffd15 	stw	r2,-12(fp)
 1011438:	00000506 	br	1011450 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 101143c:	e0bffd17 	ldw	r2,-12(fp)
 1011440:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1011444:	e0bffd17 	ldw	r2,-12(fp)
 1011448:	10800804 	addi	r2,r2,32
 101144c:	e0bffd15 	stw	r2,-12(fp)
 1011450:	e0fffd17 	ldw	r3,-12(fp)
 1011454:	e0bffc17 	ldw	r2,-16(fp)
 1011458:	18bff836 	bltu	r3,r2,101143c <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 101145c:	e0bffe17 	ldw	r2,-8(fp)
 1011460:	108007cc 	andi	r2,r2,31
 1011464:	1005003a 	cmpeq	r2,r2,zero
 1011468:	1000021e 	bne	r2,zero,1011474 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 101146c:	e0bffd17 	ldw	r2,-12(fp)
 1011470:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1011474:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1011478:	e037883a 	mov	sp,fp
 101147c:	df000017 	ldw	fp,0(sp)
 1011480:	dec00104 	addi	sp,sp,4
 1011484:	f800283a 	ret

01011488 <__assert_func>:
 1011488:	00804074 	movhi	r2,257
 101148c:	1094ba04 	addi	r2,r2,21224
 1011490:	10c00017 	ldw	r3,0(r2)
 1011494:	defffc04 	addi	sp,sp,-16
 1011498:	2011883a 	mov	r8,r4
 101149c:	dfc00315 	stw	ra,12(sp)
 10114a0:	3005883a 	mov	r2,r6
 10114a4:	2813883a 	mov	r9,r5
 10114a8:	19000317 	ldw	r4,12(r3)
 10114ac:	30000b26 	beq	r6,zero,10114dc <__assert_func+0x54>
 10114b0:	00c04074 	movhi	r3,257
 10114b4:	18cd8604 	addi	r3,r3,13848
 10114b8:	380d883a 	mov	r6,r7
 10114bc:	01404074 	movhi	r5,257
 10114c0:	294d7a04 	addi	r5,r5,13800
 10114c4:	400f883a 	mov	r7,r8
 10114c8:	da400015 	stw	r9,0(sp)
 10114cc:	d8c00115 	stw	r3,4(sp)
 10114d0:	d8800215 	stw	r2,8(sp)
 10114d4:	101154c0 	call	101154c <fiprintf>
 10114d8:	10119300 	call	1011930 <abort>
 10114dc:	00804074 	movhi	r2,257
 10114e0:	108d8904 	addi	r2,r2,13860
 10114e4:	1007883a 	mov	r3,r2
 10114e8:	003ff306 	br	10114b8 <__assert_func+0x30>

010114ec <__assert>:
 10114ec:	deffff04 	addi	sp,sp,-4
 10114f0:	300f883a 	mov	r7,r6
 10114f4:	000d883a 	mov	r6,zero
 10114f8:	dfc00015 	stw	ra,0(sp)
 10114fc:	10114880 	call	1011488 <__assert_func>

01011500 <atexit>:
 1011500:	200b883a 	mov	r5,r4
 1011504:	000d883a 	mov	r6,zero
 1011508:	0009883a 	mov	r4,zero
 101150c:	000f883a 	mov	r7,zero
 1011510:	10116481 	jmpi	1011648 <__register_exitproc>

01011514 <exit>:
 1011514:	defffe04 	addi	sp,sp,-8
 1011518:	000b883a 	mov	r5,zero
 101151c:	dc000015 	stw	r16,0(sp)
 1011520:	dfc00115 	stw	ra,4(sp)
 1011524:	2021883a 	mov	r16,r4
 1011528:	10117800 	call	1011780 <__call_exitprocs>
 101152c:	00804074 	movhi	r2,257
 1011530:	1094bb04 	addi	r2,r2,21228
 1011534:	11000017 	ldw	r4,0(r2)
 1011538:	20800f17 	ldw	r2,60(r4)
 101153c:	10000126 	beq	r2,zero,1011544 <exit+0x30>
 1011540:	103ee83a 	callr	r2
 1011544:	8009883a 	mov	r4,r16
 1011548:	1012df80 	call	1012df8 <_exit>

0101154c <fiprintf>:
 101154c:	defffc04 	addi	sp,sp,-16
 1011550:	2007883a 	mov	r3,r4
 1011554:	dfc00115 	stw	ra,4(sp)
 1011558:	d9800215 	stw	r6,8(sp)
 101155c:	d9c00315 	stw	r7,12(sp)
 1011560:	01804074 	movhi	r6,257
 1011564:	3194ba04 	addi	r6,r6,21224
 1011568:	31000017 	ldw	r4,0(r6)
 101156c:	d8800204 	addi	r2,sp,8
 1011570:	280d883a 	mov	r6,r5
 1011574:	100f883a 	mov	r7,r2
 1011578:	180b883a 	mov	r5,r3
 101157c:	d8800015 	stw	r2,0(sp)
 1011580:	101162c0 	call	101162c <_vfiprintf_r>
 1011584:	dfc00117 	ldw	ra,4(sp)
 1011588:	dec00404 	addi	sp,sp,16
 101158c:	f800283a 	ret

01011590 <_fiprintf_r>:
 1011590:	defffd04 	addi	sp,sp,-12
 1011594:	dfc00115 	stw	ra,4(sp)
 1011598:	d9c00215 	stw	r7,8(sp)
 101159c:	d8800204 	addi	r2,sp,8
 10115a0:	100f883a 	mov	r7,r2
 10115a4:	d8800015 	stw	r2,0(sp)
 10115a8:	101162c0 	call	101162c <_vfiprintf_r>
 10115ac:	dfc00117 	ldw	ra,4(sp)
 10115b0:	dec00304 	addi	sp,sp,12
 10115b4:	f800283a 	ret

010115b8 <memcmp>:
 10115b8:	00c000c4 	movi	r3,3
 10115bc:	1980032e 	bgeu	r3,r6,10115cc <memcmp+0x14>
 10115c0:	2144b03a 	or	r2,r4,r5
 10115c4:	10c4703a 	and	r2,r2,r3
 10115c8:	10000f26 	beq	r2,zero,1011608 <memcmp+0x50>
 10115cc:	31ffffc4 	addi	r7,r6,-1
 10115d0:	3000061e 	bne	r6,zero,10115ec <memcmp+0x34>
 10115d4:	00000a06 	br	1011600 <memcmp+0x48>
 10115d8:	39ffffc4 	addi	r7,r7,-1
 10115dc:	00bfffc4 	movi	r2,-1
 10115e0:	21000044 	addi	r4,r4,1
 10115e4:	29400044 	addi	r5,r5,1
 10115e8:	38800526 	beq	r7,r2,1011600 <memcmp+0x48>
 10115ec:	20c00003 	ldbu	r3,0(r4)
 10115f0:	28800003 	ldbu	r2,0(r5)
 10115f4:	18bff826 	beq	r3,r2,10115d8 <memcmp+0x20>
 10115f8:	1885c83a 	sub	r2,r3,r2
 10115fc:	f800283a 	ret
 1011600:	0005883a 	mov	r2,zero
 1011604:	f800283a 	ret
 1011608:	180f883a 	mov	r7,r3
 101160c:	20c00017 	ldw	r3,0(r4)
 1011610:	28800017 	ldw	r2,0(r5)
 1011614:	18bfed1e 	bne	r3,r2,10115cc <memcmp+0x14>
 1011618:	31bfff04 	addi	r6,r6,-4
 101161c:	21000104 	addi	r4,r4,4
 1011620:	29400104 	addi	r5,r5,4
 1011624:	39bff936 	bltu	r7,r6,101160c <memcmp+0x54>
 1011628:	003fe806 	br	10115cc <memcmp+0x14>

0101162c <_vfiprintf_r>:
 101162c:	defffe04 	addi	sp,sp,-8
 1011630:	dfc00115 	stw	ra,4(sp)
 1011634:	d9c00015 	stw	r7,0(sp)
 1011638:	1011cf00 	call	1011cf0 <___vfiprintf_internal_r>
 101163c:	dfc00117 	ldw	ra,4(sp)
 1011640:	dec00204 	addi	sp,sp,8
 1011644:	f800283a 	ret

01011648 <__register_exitproc>:
 1011648:	defffa04 	addi	sp,sp,-24
 101164c:	00804074 	movhi	r2,257
 1011650:	1094bb04 	addi	r2,r2,21228
 1011654:	dc000015 	stw	r16,0(sp)
 1011658:	14000017 	ldw	r16,0(r2)
 101165c:	dd000415 	stw	r20,16(sp)
 1011660:	2829883a 	mov	r20,r5
 1011664:	81405217 	ldw	r5,328(r16)
 1011668:	dcc00315 	stw	r19,12(sp)
 101166c:	dc800215 	stw	r18,8(sp)
 1011670:	dc400115 	stw	r17,4(sp)
 1011674:	dfc00515 	stw	ra,20(sp)
 1011678:	2023883a 	mov	r17,r4
 101167c:	3027883a 	mov	r19,r6
 1011680:	3825883a 	mov	r18,r7
 1011684:	28002526 	beq	r5,zero,101171c <__register_exitproc+0xd4>
 1011688:	29000117 	ldw	r4,4(r5)
 101168c:	008007c4 	movi	r2,31
 1011690:	11002716 	blt	r2,r4,1011730 <__register_exitproc+0xe8>
 1011694:	8800101e 	bne	r17,zero,10116d8 <__register_exitproc+0x90>
 1011698:	2105883a 	add	r2,r4,r4
 101169c:	1085883a 	add	r2,r2,r2
 10116a0:	20c00044 	addi	r3,r4,1
 10116a4:	1145883a 	add	r2,r2,r5
 10116a8:	0009883a 	mov	r4,zero
 10116ac:	15000215 	stw	r20,8(r2)
 10116b0:	28c00115 	stw	r3,4(r5)
 10116b4:	2005883a 	mov	r2,r4
 10116b8:	dfc00517 	ldw	ra,20(sp)
 10116bc:	dd000417 	ldw	r20,16(sp)
 10116c0:	dcc00317 	ldw	r19,12(sp)
 10116c4:	dc800217 	ldw	r18,8(sp)
 10116c8:	dc400117 	ldw	r17,4(sp)
 10116cc:	dc000017 	ldw	r16,0(sp)
 10116d0:	dec00604 	addi	sp,sp,24
 10116d4:	f800283a 	ret
 10116d8:	29802204 	addi	r6,r5,136
 10116dc:	00800044 	movi	r2,1
 10116e0:	110e983a 	sll	r7,r2,r4
 10116e4:	30c04017 	ldw	r3,256(r6)
 10116e8:	2105883a 	add	r2,r4,r4
 10116ec:	1085883a 	add	r2,r2,r2
 10116f0:	1185883a 	add	r2,r2,r6
 10116f4:	19c6b03a 	or	r3,r3,r7
 10116f8:	14802015 	stw	r18,128(r2)
 10116fc:	14c00015 	stw	r19,0(r2)
 1011700:	00800084 	movi	r2,2
 1011704:	30c04015 	stw	r3,256(r6)
 1011708:	88bfe31e 	bne	r17,r2,1011698 <__register_exitproc+0x50>
 101170c:	30804117 	ldw	r2,260(r6)
 1011710:	11c4b03a 	or	r2,r2,r7
 1011714:	30804115 	stw	r2,260(r6)
 1011718:	003fdf06 	br	1011698 <__register_exitproc+0x50>
 101171c:	00804074 	movhi	r2,257
 1011720:	109e4104 	addi	r2,r2,30980
 1011724:	100b883a 	mov	r5,r2
 1011728:	80805215 	stw	r2,328(r16)
 101172c:	003fd606 	br	1011688 <__register_exitproc+0x40>
 1011730:	00800034 	movhi	r2,0
 1011734:	10800004 	addi	r2,r2,0
 1011738:	1000021e 	bne	r2,zero,1011744 <__register_exitproc+0xfc>
 101173c:	013fffc4 	movi	r4,-1
 1011740:	003fdc06 	br	10116b4 <__register_exitproc+0x6c>
 1011744:	01006404 	movi	r4,400
 1011748:	103ee83a 	callr	r2
 101174c:	1007883a 	mov	r3,r2
 1011750:	103ffa26 	beq	r2,zero,101173c <__register_exitproc+0xf4>
 1011754:	80805217 	ldw	r2,328(r16)
 1011758:	180b883a 	mov	r5,r3
 101175c:	18000115 	stw	zero,4(r3)
 1011760:	18800015 	stw	r2,0(r3)
 1011764:	80c05215 	stw	r3,328(r16)
 1011768:	18006215 	stw	zero,392(r3)
 101176c:	18006315 	stw	zero,396(r3)
 1011770:	0009883a 	mov	r4,zero
 1011774:	883fc826 	beq	r17,zero,1011698 <__register_exitproc+0x50>
 1011778:	003fd706 	br	10116d8 <__register_exitproc+0x90>

0101177c <register_fini>:
 101177c:	f800283a 	ret

01011780 <__call_exitprocs>:
 1011780:	00804074 	movhi	r2,257
 1011784:	1094bb04 	addi	r2,r2,21228
 1011788:	10800017 	ldw	r2,0(r2)
 101178c:	defff304 	addi	sp,sp,-52
 1011790:	df000b15 	stw	fp,44(sp)
 1011794:	d8800115 	stw	r2,4(sp)
 1011798:	00800034 	movhi	r2,0
 101179c:	10800004 	addi	r2,r2,0
 10117a0:	1005003a 	cmpeq	r2,r2,zero
 10117a4:	d8800215 	stw	r2,8(sp)
 10117a8:	d8800117 	ldw	r2,4(sp)
 10117ac:	dd400815 	stw	r21,32(sp)
 10117b0:	dd000715 	stw	r20,28(sp)
 10117b4:	10805204 	addi	r2,r2,328
 10117b8:	dfc00c15 	stw	ra,48(sp)
 10117bc:	ddc00a15 	stw	r23,40(sp)
 10117c0:	dd800915 	stw	r22,36(sp)
 10117c4:	dcc00615 	stw	r19,24(sp)
 10117c8:	dc800515 	stw	r18,20(sp)
 10117cc:	dc400415 	stw	r17,16(sp)
 10117d0:	dc000315 	stw	r16,12(sp)
 10117d4:	282b883a 	mov	r21,r5
 10117d8:	2039883a 	mov	fp,r4
 10117dc:	d8800015 	stw	r2,0(sp)
 10117e0:	2829003a 	cmpeq	r20,r5,zero
 10117e4:	d8800117 	ldw	r2,4(sp)
 10117e8:	14405217 	ldw	r17,328(r2)
 10117ec:	88001026 	beq	r17,zero,1011830 <__call_exitprocs+0xb0>
 10117f0:	ddc00017 	ldw	r23,0(sp)
 10117f4:	88800117 	ldw	r2,4(r17)
 10117f8:	8c802204 	addi	r18,r17,136
 10117fc:	143fffc4 	addi	r16,r2,-1
 1011800:	80000916 	blt	r16,zero,1011828 <__call_exitprocs+0xa8>
 1011804:	05bfffc4 	movi	r22,-1
 1011808:	a000151e 	bne	r20,zero,1011860 <__call_exitprocs+0xe0>
 101180c:	8409883a 	add	r4,r16,r16
 1011810:	2105883a 	add	r2,r4,r4
 1011814:	1485883a 	add	r2,r2,r18
 1011818:	10c02017 	ldw	r3,128(r2)
 101181c:	a8c01126 	beq	r21,r3,1011864 <__call_exitprocs+0xe4>
 1011820:	843fffc4 	addi	r16,r16,-1
 1011824:	85bff81e 	bne	r16,r22,1011808 <__call_exitprocs+0x88>
 1011828:	d8800217 	ldw	r2,8(sp)
 101182c:	10003126 	beq	r2,zero,10118f4 <__call_exitprocs+0x174>
 1011830:	dfc00c17 	ldw	ra,48(sp)
 1011834:	df000b17 	ldw	fp,44(sp)
 1011838:	ddc00a17 	ldw	r23,40(sp)
 101183c:	dd800917 	ldw	r22,36(sp)
 1011840:	dd400817 	ldw	r21,32(sp)
 1011844:	dd000717 	ldw	r20,28(sp)
 1011848:	dcc00617 	ldw	r19,24(sp)
 101184c:	dc800517 	ldw	r18,20(sp)
 1011850:	dc400417 	ldw	r17,16(sp)
 1011854:	dc000317 	ldw	r16,12(sp)
 1011858:	dec00d04 	addi	sp,sp,52
 101185c:	f800283a 	ret
 1011860:	8409883a 	add	r4,r16,r16
 1011864:	88c00117 	ldw	r3,4(r17)
 1011868:	2105883a 	add	r2,r4,r4
 101186c:	1445883a 	add	r2,r2,r17
 1011870:	18ffffc4 	addi	r3,r3,-1
 1011874:	11800217 	ldw	r6,8(r2)
 1011878:	1c001526 	beq	r3,r16,10118d0 <__call_exitprocs+0x150>
 101187c:	10000215 	stw	zero,8(r2)
 1011880:	303fe726 	beq	r6,zero,1011820 <__call_exitprocs+0xa0>
 1011884:	00c00044 	movi	r3,1
 1011888:	1c06983a 	sll	r3,r3,r16
 101188c:	90804017 	ldw	r2,256(r18)
 1011890:	8cc00117 	ldw	r19,4(r17)
 1011894:	1884703a 	and	r2,r3,r2
 1011898:	10001426 	beq	r2,zero,10118ec <__call_exitprocs+0x16c>
 101189c:	90804117 	ldw	r2,260(r18)
 10118a0:	1884703a 	and	r2,r3,r2
 10118a4:	10000c1e 	bne	r2,zero,10118d8 <__call_exitprocs+0x158>
 10118a8:	2105883a 	add	r2,r4,r4
 10118ac:	1485883a 	add	r2,r2,r18
 10118b0:	11400017 	ldw	r5,0(r2)
 10118b4:	e009883a 	mov	r4,fp
 10118b8:	303ee83a 	callr	r6
 10118bc:	88800117 	ldw	r2,4(r17)
 10118c0:	98bfc81e 	bne	r19,r2,10117e4 <__call_exitprocs+0x64>
 10118c4:	b8800017 	ldw	r2,0(r23)
 10118c8:	147fd526 	beq	r2,r17,1011820 <__call_exitprocs+0xa0>
 10118cc:	003fc506 	br	10117e4 <__call_exitprocs+0x64>
 10118d0:	8c000115 	stw	r16,4(r17)
 10118d4:	003fea06 	br	1011880 <__call_exitprocs+0x100>
 10118d8:	2105883a 	add	r2,r4,r4
 10118dc:	1485883a 	add	r2,r2,r18
 10118e0:	11000017 	ldw	r4,0(r2)
 10118e4:	303ee83a 	callr	r6
 10118e8:	003ff406 	br	10118bc <__call_exitprocs+0x13c>
 10118ec:	303ee83a 	callr	r6
 10118f0:	003ff206 	br	10118bc <__call_exitprocs+0x13c>
 10118f4:	88800117 	ldw	r2,4(r17)
 10118f8:	1000081e 	bne	r2,zero,101191c <__call_exitprocs+0x19c>
 10118fc:	89000017 	ldw	r4,0(r17)
 1011900:	20000726 	beq	r4,zero,1011920 <__call_exitprocs+0x1a0>
 1011904:	b9000015 	stw	r4,0(r23)
 1011908:	8809883a 	mov	r4,r17
 101190c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 1011910:	bc400017 	ldw	r17,0(r23)
 1011914:	883fb71e 	bne	r17,zero,10117f4 <__call_exitprocs+0x74>
 1011918:	003fc506 	br	1011830 <__call_exitprocs+0xb0>
 101191c:	89000017 	ldw	r4,0(r17)
 1011920:	882f883a 	mov	r23,r17
 1011924:	2023883a 	mov	r17,r4
 1011928:	883fb21e 	bne	r17,zero,10117f4 <__call_exitprocs+0x74>
 101192c:	003fc006 	br	1011830 <__call_exitprocs+0xb0>

01011930 <abort>:
 1011930:	deffff04 	addi	sp,sp,-4
 1011934:	01000184 	movi	r4,6
 1011938:	dfc00015 	stw	ra,0(sp)
 101193c:	1011a140 	call	1011a14 <raise>
 1011940:	01000044 	movi	r4,1
 1011944:	1012df80 	call	1012df8 <_exit>

01011948 <_raise_r>:
 1011948:	defffd04 	addi	sp,sp,-12
 101194c:	008007c4 	movi	r2,31
 1011950:	dc400115 	stw	r17,4(sp)
 1011954:	dc000015 	stw	r16,0(sp)
 1011958:	dfc00215 	stw	ra,8(sp)
 101195c:	2821883a 	mov	r16,r5
 1011960:	2023883a 	mov	r17,r4
 1011964:	11402736 	bltu	r2,r5,1011a04 <_raise_r+0xbc>
 1011968:	20c0b717 	ldw	r3,732(r4)
 101196c:	18001326 	beq	r3,zero,10119bc <_raise_r+0x74>
 1011970:	2945883a 	add	r2,r5,r5
 1011974:	1085883a 	add	r2,r2,r2
 1011978:	188b883a 	add	r5,r3,r2
 101197c:	28c00017 	ldw	r3,0(r5)
 1011980:	18000e26 	beq	r3,zero,10119bc <_raise_r+0x74>
 1011984:	01000044 	movi	r4,1
 1011988:	19000526 	beq	r3,r4,10119a0 <_raise_r+0x58>
 101198c:	00bfffc4 	movi	r2,-1
 1011990:	18801326 	beq	r3,r2,10119e0 <_raise_r+0x98>
 1011994:	28000015 	stw	zero,0(r5)
 1011998:	8009883a 	mov	r4,r16
 101199c:	183ee83a 	callr	r3
 10119a0:	0007883a 	mov	r3,zero
 10119a4:	1805883a 	mov	r2,r3
 10119a8:	dfc00217 	ldw	ra,8(sp)
 10119ac:	dc400117 	ldw	r17,4(sp)
 10119b0:	dc000017 	ldw	r16,0(sp)
 10119b4:	dec00304 	addi	sp,sp,12
 10119b8:	f800283a 	ret
 10119bc:	1011c200 	call	1011c20 <_getpid_r>
 10119c0:	100b883a 	mov	r5,r2
 10119c4:	8809883a 	mov	r4,r17
 10119c8:	800d883a 	mov	r6,r16
 10119cc:	dfc00217 	ldw	ra,8(sp)
 10119d0:	dc400117 	ldw	r17,4(sp)
 10119d4:	dc000017 	ldw	r16,0(sp)
 10119d8:	dec00304 	addi	sp,sp,12
 10119dc:	1011c241 	jmpi	1011c24 <_kill_r>
 10119e0:	2007883a 	mov	r3,r4
 10119e4:	00800584 	movi	r2,22
 10119e8:	88800015 	stw	r2,0(r17)
 10119ec:	1805883a 	mov	r2,r3
 10119f0:	dfc00217 	ldw	ra,8(sp)
 10119f4:	dc400117 	ldw	r17,4(sp)
 10119f8:	dc000017 	ldw	r16,0(sp)
 10119fc:	dec00304 	addi	sp,sp,12
 1011a00:	f800283a 	ret
 1011a04:	00800584 	movi	r2,22
 1011a08:	00ffffc4 	movi	r3,-1
 1011a0c:	20800015 	stw	r2,0(r4)
 1011a10:	003fe406 	br	10119a4 <_raise_r+0x5c>

01011a14 <raise>:
 1011a14:	00804074 	movhi	r2,257
 1011a18:	1094ba04 	addi	r2,r2,21224
 1011a1c:	200b883a 	mov	r5,r4
 1011a20:	11000017 	ldw	r4,0(r2)
 1011a24:	10119481 	jmpi	1011948 <_raise_r>

01011a28 <_init_signal_r>:
 1011a28:	2080b717 	ldw	r2,732(r4)
 1011a2c:	defffe04 	addi	sp,sp,-8
 1011a30:	dc000015 	stw	r16,0(sp)
 1011a34:	dfc00115 	stw	ra,4(sp)
 1011a38:	2021883a 	mov	r16,r4
 1011a3c:	10000526 	beq	r2,zero,1011a54 <_init_signal_r+0x2c>
 1011a40:	0005883a 	mov	r2,zero
 1011a44:	dfc00117 	ldw	ra,4(sp)
 1011a48:	dc000017 	ldw	r16,0(sp)
 1011a4c:	dec00204 	addi	sp,sp,8
 1011a50:	f800283a 	ret
 1011a54:	01402004 	movi	r5,128
 1011a58:	10051200 	call	1005120 <_malloc_r>
 1011a5c:	1009883a 	mov	r4,r2
 1011a60:	8080b715 	stw	r2,732(r16)
 1011a64:	10000726 	beq	r2,zero,1011a84 <_init_signal_r+0x5c>
 1011a68:	0007883a 	mov	r3,zero
 1011a6c:	01402004 	movi	r5,128
 1011a70:	20c5883a 	add	r2,r4,r3
 1011a74:	18c00104 	addi	r3,r3,4
 1011a78:	10000015 	stw	zero,0(r2)
 1011a7c:	197ffc1e 	bne	r3,r5,1011a70 <_init_signal_r+0x48>
 1011a80:	003fef06 	br	1011a40 <_init_signal_r+0x18>
 1011a84:	00bfffc4 	movi	r2,-1
 1011a88:	003fee06 	br	1011a44 <_init_signal_r+0x1c>

01011a8c <_init_signal>:
 1011a8c:	00804074 	movhi	r2,257
 1011a90:	1094ba04 	addi	r2,r2,21224
 1011a94:	11000017 	ldw	r4,0(r2)
 1011a98:	1011a281 	jmpi	1011a28 <_init_signal_r>

01011a9c <__sigtramp_r>:
 1011a9c:	defffd04 	addi	sp,sp,-12
 1011aa0:	008007c4 	movi	r2,31
 1011aa4:	dc000115 	stw	r16,4(sp)
 1011aa8:	dfc00215 	stw	ra,8(sp)
 1011aac:	2021883a 	mov	r16,r4
 1011ab0:	11401336 	bltu	r2,r5,1011b00 <__sigtramp_r+0x64>
 1011ab4:	20c0b717 	ldw	r3,732(r4)
 1011ab8:	18001f26 	beq	r3,zero,1011b38 <__sigtramp_r+0x9c>
 1011abc:	2945883a 	add	r2,r5,r5
 1011ac0:	1085883a 	add	r2,r2,r2
 1011ac4:	10c9883a 	add	r4,r2,r3
 1011ac8:	20c00017 	ldw	r3,0(r4)
 1011acc:	18001626 	beq	r3,zero,1011b28 <__sigtramp_r+0x8c>
 1011ad0:	00bfffc4 	movi	r2,-1
 1011ad4:	18801626 	beq	r3,r2,1011b30 <__sigtramp_r+0x94>
 1011ad8:	00800044 	movi	r2,1
 1011adc:	18800d26 	beq	r3,r2,1011b14 <__sigtramp_r+0x78>
 1011ae0:	20000015 	stw	zero,0(r4)
 1011ae4:	2809883a 	mov	r4,r5
 1011ae8:	183ee83a 	callr	r3
 1011aec:	0005883a 	mov	r2,zero
 1011af0:	dfc00217 	ldw	ra,8(sp)
 1011af4:	dc000117 	ldw	r16,4(sp)
 1011af8:	dec00304 	addi	sp,sp,12
 1011afc:	f800283a 	ret
 1011b00:	00bfffc4 	movi	r2,-1
 1011b04:	dfc00217 	ldw	ra,8(sp)
 1011b08:	dc000117 	ldw	r16,4(sp)
 1011b0c:	dec00304 	addi	sp,sp,12
 1011b10:	f800283a 	ret
 1011b14:	008000c4 	movi	r2,3
 1011b18:	dfc00217 	ldw	ra,8(sp)
 1011b1c:	dc000117 	ldw	r16,4(sp)
 1011b20:	dec00304 	addi	sp,sp,12
 1011b24:	f800283a 	ret
 1011b28:	00800044 	movi	r2,1
 1011b2c:	003ff006 	br	1011af0 <__sigtramp_r+0x54>
 1011b30:	00800084 	movi	r2,2
 1011b34:	003fee06 	br	1011af0 <__sigtramp_r+0x54>
 1011b38:	d9400015 	stw	r5,0(sp)
 1011b3c:	1011a280 	call	1011a28 <_init_signal_r>
 1011b40:	d9400017 	ldw	r5,0(sp)
 1011b44:	103fee1e 	bne	r2,zero,1011b00 <__sigtramp_r+0x64>
 1011b48:	80c0b717 	ldw	r3,732(r16)
 1011b4c:	003fdb06 	br	1011abc <__sigtramp_r+0x20>

01011b50 <__sigtramp>:
 1011b50:	00804074 	movhi	r2,257
 1011b54:	1094ba04 	addi	r2,r2,21224
 1011b58:	200b883a 	mov	r5,r4
 1011b5c:	11000017 	ldw	r4,0(r2)
 1011b60:	1011a9c1 	jmpi	1011a9c <__sigtramp_r>

01011b64 <_signal_r>:
 1011b64:	defffc04 	addi	sp,sp,-16
 1011b68:	008007c4 	movi	r2,31
 1011b6c:	dc800215 	stw	r18,8(sp)
 1011b70:	dc400115 	stw	r17,4(sp)
 1011b74:	dc000015 	stw	r16,0(sp)
 1011b78:	dfc00315 	stw	ra,12(sp)
 1011b7c:	2823883a 	mov	r17,r5
 1011b80:	00ffffc4 	movi	r3,-1
 1011b84:	3025883a 	mov	r18,r6
 1011b88:	2021883a 	mov	r16,r4
 1011b8c:	1140092e 	bgeu	r2,r5,1011bb4 <_signal_r+0x50>
 1011b90:	00800584 	movi	r2,22
 1011b94:	20800015 	stw	r2,0(r4)
 1011b98:	1805883a 	mov	r2,r3
 1011b9c:	dfc00317 	ldw	ra,12(sp)
 1011ba0:	dc800217 	ldw	r18,8(sp)
 1011ba4:	dc400117 	ldw	r17,4(sp)
 1011ba8:	dc000017 	ldw	r16,0(sp)
 1011bac:	dec00404 	addi	sp,sp,16
 1011bb0:	f800283a 	ret
 1011bb4:	2140b717 	ldw	r5,732(r4)
 1011bb8:	28000c26 	beq	r5,zero,1011bec <_signal_r+0x88>
 1011bbc:	8c45883a 	add	r2,r17,r17
 1011bc0:	1085883a 	add	r2,r2,r2
 1011bc4:	1145883a 	add	r2,r2,r5
 1011bc8:	10c00017 	ldw	r3,0(r2)
 1011bcc:	14800015 	stw	r18,0(r2)
 1011bd0:	1805883a 	mov	r2,r3
 1011bd4:	dfc00317 	ldw	ra,12(sp)
 1011bd8:	dc800217 	ldw	r18,8(sp)
 1011bdc:	dc400117 	ldw	r17,4(sp)
 1011be0:	dc000017 	ldw	r16,0(sp)
 1011be4:	dec00404 	addi	sp,sp,16
 1011be8:	f800283a 	ret
 1011bec:	1011a280 	call	1011a28 <_init_signal_r>
 1011bf0:	1000021e 	bne	r2,zero,1011bfc <_signal_r+0x98>
 1011bf4:	8140b717 	ldw	r5,732(r16)
 1011bf8:	003ff006 	br	1011bbc <_signal_r+0x58>
 1011bfc:	00ffffc4 	movi	r3,-1
 1011c00:	003fe506 	br	1011b98 <_signal_r+0x34>

01011c04 <signal>:
 1011c04:	01804074 	movhi	r6,257
 1011c08:	3194ba04 	addi	r6,r6,21224
 1011c0c:	2007883a 	mov	r3,r4
 1011c10:	31000017 	ldw	r4,0(r6)
 1011c14:	280d883a 	mov	r6,r5
 1011c18:	180b883a 	mov	r5,r3
 1011c1c:	1011b641 	jmpi	1011b64 <_signal_r>

01011c20 <_getpid_r>:
 1011c20:	1012e181 	jmpi	1012e18 <getpid>

01011c24 <_kill_r>:
 1011c24:	defffd04 	addi	sp,sp,-12
 1011c28:	dc000015 	stw	r16,0(sp)
 1011c2c:	04004074 	movhi	r16,257
 1011c30:	841c0904 	addi	r16,r16,28708
 1011c34:	dc400115 	stw	r17,4(sp)
 1011c38:	80000015 	stw	zero,0(r16)
 1011c3c:	2023883a 	mov	r17,r4
 1011c40:	2809883a 	mov	r4,r5
 1011c44:	300b883a 	mov	r5,r6
 1011c48:	dfc00215 	stw	ra,8(sp)
 1011c4c:	1012e380 	call	1012e38 <kill>
 1011c50:	1007883a 	mov	r3,r2
 1011c54:	00bfffc4 	movi	r2,-1
 1011c58:	18800626 	beq	r3,r2,1011c74 <_kill_r+0x50>
 1011c5c:	1805883a 	mov	r2,r3
 1011c60:	dfc00217 	ldw	ra,8(sp)
 1011c64:	dc400117 	ldw	r17,4(sp)
 1011c68:	dc000017 	ldw	r16,0(sp)
 1011c6c:	dec00304 	addi	sp,sp,12
 1011c70:	f800283a 	ret
 1011c74:	80800017 	ldw	r2,0(r16)
 1011c78:	103ff826 	beq	r2,zero,1011c5c <_kill_r+0x38>
 1011c7c:	88800015 	stw	r2,0(r17)
 1011c80:	1805883a 	mov	r2,r3
 1011c84:	dfc00217 	ldw	ra,8(sp)
 1011c88:	dc400117 	ldw	r17,4(sp)
 1011c8c:	dc000017 	ldw	r16,0(sp)
 1011c90:	dec00304 	addi	sp,sp,12
 1011c94:	f800283a 	ret

01011c98 <__sprint_r>:
 1011c98:	30800217 	ldw	r2,8(r6)
 1011c9c:	defffe04 	addi	sp,sp,-8
 1011ca0:	dc000015 	stw	r16,0(sp)
 1011ca4:	dfc00115 	stw	ra,4(sp)
 1011ca8:	3021883a 	mov	r16,r6
 1011cac:	0007883a 	mov	r3,zero
 1011cb0:	1000061e 	bne	r2,zero,1011ccc <__sprint_r+0x34>
 1011cb4:	1805883a 	mov	r2,r3
 1011cb8:	30000115 	stw	zero,4(r6)
 1011cbc:	dfc00117 	ldw	ra,4(sp)
 1011cc0:	dc000017 	ldw	r16,0(sp)
 1011cc4:	dec00204 	addi	sp,sp,8
 1011cc8:	f800283a 	ret
 1011ccc:	10048ac0 	call	10048ac <__sfvwrite_r>
 1011cd0:	1007883a 	mov	r3,r2
 1011cd4:	1805883a 	mov	r2,r3
 1011cd8:	80000115 	stw	zero,4(r16)
 1011cdc:	80000215 	stw	zero,8(r16)
 1011ce0:	dfc00117 	ldw	ra,4(sp)
 1011ce4:	dc000017 	ldw	r16,0(sp)
 1011ce8:	dec00204 	addi	sp,sp,8
 1011cec:	f800283a 	ret

01011cf0 <___vfiprintf_internal_r>:
 1011cf0:	defeb604 	addi	sp,sp,-1320
 1011cf4:	dd814615 	stw	r22,1304(sp)
 1011cf8:	dd414515 	stw	r21,1300(sp)
 1011cfc:	dc014015 	stw	r16,1280(sp)
 1011d00:	dfc14915 	stw	ra,1316(sp)
 1011d04:	df014815 	stw	fp,1312(sp)
 1011d08:	ddc14715 	stw	r23,1308(sp)
 1011d0c:	dd014415 	stw	r20,1296(sp)
 1011d10:	dcc14315 	stw	r19,1292(sp)
 1011d14:	dc814215 	stw	r18,1288(sp)
 1011d18:	dc414115 	stw	r17,1284(sp)
 1011d1c:	202d883a 	mov	r22,r4
 1011d20:	282b883a 	mov	r21,r5
 1011d24:	3021883a 	mov	r16,r6
 1011d28:	20000226 	beq	r4,zero,1011d34 <___vfiprintf_internal_r+0x44>
 1011d2c:	20800e17 	ldw	r2,56(r4)
 1011d30:	1001bc26 	beq	r2,zero,1012424 <___vfiprintf_internal_r+0x734>
 1011d34:	a880030b 	ldhu	r2,12(r21)
 1011d38:	1080020c 	andi	r2,r2,8
 1011d3c:	1001cb26 	beq	r2,zero,101246c <___vfiprintf_internal_r+0x77c>
 1011d40:	a8800417 	ldw	r2,16(r21)
 1011d44:	1001c926 	beq	r2,zero,101246c <___vfiprintf_internal_r+0x77c>
 1011d48:	aa00030b 	ldhu	r8,12(r21)
 1011d4c:	00800284 	movi	r2,10
 1011d50:	40c0068c 	andi	r3,r8,26
 1011d54:	18802f1e 	bne	r3,r2,1011e14 <___vfiprintf_internal_r+0x124>
 1011d58:	a880038f 	ldh	r2,14(r21)
 1011d5c:	10002d16 	blt	r2,zero,1011e14 <___vfiprintf_internal_r+0x124>
 1011d60:	aa40038b 	ldhu	r9,14(r21)
 1011d64:	aa800717 	ldw	r10,28(r21)
 1011d68:	aac00917 	ldw	r11,36(r21)
 1011d6c:	dc401e04 	addi	r17,sp,120
 1011d70:	d8803504 	addi	r2,sp,212
 1011d74:	00c10004 	movi	r3,1024
 1011d78:	423fff4c 	andi	r8,r8,65533
 1011d7c:	800d883a 	mov	r6,r16
 1011d80:	b009883a 	mov	r4,r22
 1011d84:	880b883a 	mov	r5,r17
 1011d88:	da00210d 	sth	r8,132(sp)
 1011d8c:	da40218d 	sth	r9,134(sp)
 1011d90:	da802515 	stw	r10,148(sp)
 1011d94:	dac02715 	stw	r11,156(sp)
 1011d98:	d8802215 	stw	r2,136(sp)
 1011d9c:	d8c02315 	stw	r3,140(sp)
 1011da0:	d8801e15 	stw	r2,120(sp)
 1011da4:	d8c02015 	stw	r3,128(sp)
 1011da8:	d8002415 	stw	zero,144(sp)
 1011dac:	1011cf00 	call	1011cf0 <___vfiprintf_internal_r>
 1011db0:	d8813a15 	stw	r2,1256(sp)
 1011db4:	10000416 	blt	r2,zero,1011dc8 <___vfiprintf_internal_r+0xd8>
 1011db8:	b009883a 	mov	r4,r22
 1011dbc:	880b883a 	mov	r5,r17
 1011dc0:	1003f7c0 	call	1003f7c <_fflush_r>
 1011dc4:	1001b01e 	bne	r2,zero,1012488 <___vfiprintf_internal_r+0x798>
 1011dc8:	d880210b 	ldhu	r2,132(sp)
 1011dcc:	1080100c 	andi	r2,r2,64
 1011dd0:	10000326 	beq	r2,zero,1011de0 <___vfiprintf_internal_r+0xf0>
 1011dd4:	a880030b 	ldhu	r2,12(r21)
 1011dd8:	10801014 	ori	r2,r2,64
 1011ddc:	a880030d 	sth	r2,12(r21)
 1011de0:	d8813a17 	ldw	r2,1256(sp)
 1011de4:	dfc14917 	ldw	ra,1316(sp)
 1011de8:	df014817 	ldw	fp,1312(sp)
 1011dec:	ddc14717 	ldw	r23,1308(sp)
 1011df0:	dd814617 	ldw	r22,1304(sp)
 1011df4:	dd414517 	ldw	r21,1300(sp)
 1011df8:	dd014417 	ldw	r20,1296(sp)
 1011dfc:	dcc14317 	ldw	r19,1292(sp)
 1011e00:	dc814217 	ldw	r18,1288(sp)
 1011e04:	dc414117 	ldw	r17,1284(sp)
 1011e08:	dc014017 	ldw	r16,1280(sp)
 1011e0c:	dec14a04 	addi	sp,sp,1320
 1011e10:	f800283a 	ret
 1011e14:	d8c00e04 	addi	r3,sp,56
 1011e18:	8029883a 	mov	r20,r16
 1011e1c:	d8c00115 	stw	r3,4(sp)
 1011e20:	d8000315 	stw	zero,12(sp)
 1011e24:	d8000215 	stw	zero,8(sp)
 1011e28:	1825883a 	mov	r18,r3
 1011e2c:	d8013a15 	stw	zero,1256(sp)
 1011e30:	d8013615 	stw	zero,1240(sp)
 1011e34:	a0800007 	ldb	r2,0(r20)
 1011e38:	10001926 	beq	r2,zero,1011ea0 <___vfiprintf_internal_r+0x1b0>
 1011e3c:	00c00944 	movi	r3,37
 1011e40:	10c01726 	beq	r2,r3,1011ea0 <___vfiprintf_internal_r+0x1b0>
 1011e44:	a021883a 	mov	r16,r20
 1011e48:	00000106 	br	1011e50 <___vfiprintf_internal_r+0x160>
 1011e4c:	10c00326 	beq	r2,r3,1011e5c <___vfiprintf_internal_r+0x16c>
 1011e50:	84000044 	addi	r16,r16,1
 1011e54:	80800007 	ldb	r2,0(r16)
 1011e58:	103ffc1e 	bne	r2,zero,1011e4c <___vfiprintf_internal_r+0x15c>
 1011e5c:	8523c83a 	sub	r17,r16,r20
 1011e60:	88000e26 	beq	r17,zero,1011e9c <___vfiprintf_internal_r+0x1ac>
 1011e64:	d9400317 	ldw	r5,12(sp)
 1011e68:	d9000217 	ldw	r4,8(sp)
 1011e6c:	008001c4 	movi	r2,7
 1011e70:	2c4b883a 	add	r5,r5,r17
 1011e74:	21000044 	addi	r4,r4,1
 1011e78:	95000015 	stw	r20,0(r18)
 1011e7c:	d9400315 	stw	r5,12(sp)
 1011e80:	94400115 	stw	r17,4(r18)
 1011e84:	d9000215 	stw	r4,8(sp)
 1011e88:	1101e816 	blt	r2,r4,101262c <___vfiprintf_internal_r+0x93c>
 1011e8c:	94800204 	addi	r18,r18,8
 1011e90:	d9013a17 	ldw	r4,1256(sp)
 1011e94:	2449883a 	add	r4,r4,r17
 1011e98:	d9013a15 	stw	r4,1256(sp)
 1011e9c:	8029883a 	mov	r20,r16
 1011ea0:	a0800007 	ldb	r2,0(r20)
 1011ea4:	10012e26 	beq	r2,zero,1012360 <___vfiprintf_internal_r+0x670>
 1011ea8:	a5000044 	addi	r20,r20,1
 1011eac:	d8000005 	stb	zero,0(sp)
 1011eb0:	a0c00007 	ldb	r3,0(r20)
 1011eb4:	05ffffc4 	movi	r23,-1
 1011eb8:	d8013915 	stw	zero,1252(sp)
 1011ebc:	d8013b15 	stw	zero,1260(sp)
 1011ec0:	180b883a 	mov	r5,r3
 1011ec4:	a5000044 	addi	r20,r20,1
 1011ec8:	28fff804 	addi	r3,r5,-32
 1011ecc:	00801604 	movi	r2,88
 1011ed0:	10c06036 	bltu	r2,r3,1012054 <___vfiprintf_internal_r+0x364>
 1011ed4:	18c5883a 	add	r2,r3,r3
 1011ed8:	1085883a 	add	r2,r2,r2
 1011edc:	00c04074 	movhi	r3,257
 1011ee0:	18c7bc04 	addi	r3,r3,7920
 1011ee4:	10c5883a 	add	r2,r2,r3
 1011ee8:	11000017 	ldw	r4,0(r2)
 1011eec:	2000683a 	jmp	r4
 1011ef0:	01012758 	cmpnei	r4,zero,1181
 1011ef4:	01012054 	movui	r4,1153
 1011ef8:	01012054 	movui	r4,1153
 1011efc:	01012800 	call	101280 <__alt_mem_onchip_memory2_0+0x101280>
 1011f00:	01012054 	movui	r4,1153
 1011f04:	01012054 	movui	r4,1153
 1011f08:	01012054 	movui	r4,1153
 1011f0c:	01012054 	movui	r4,1153
 1011f10:	01012054 	movui	r4,1153
 1011f14:	01012054 	movui	r4,1153
 1011f18:	010126e0 	cmpeqi	r4,zero,1179
 1011f1c:	01012814 	movui	r4,1184
 1011f20:	01012054 	movui	r4,1153
 1011f24:	010126f8 	rdprs	r4,zero,1179
 1011f28:	010127b0 	cmpltui	r4,zero,1182
 1011f2c:	01012054 	movui	r4,1153
 1011f30:	0101279c 	xori	r4,zero,1182
 1011f34:	01012770 	cmpltui	r4,zero,1181
 1011f38:	01012770 	cmpltui	r4,zero,1181
 1011f3c:	01012770 	cmpltui	r4,zero,1181
 1011f40:	01012770 	cmpltui	r4,zero,1181
 1011f44:	01012770 	cmpltui	r4,zero,1181
 1011f48:	01012770 	cmpltui	r4,zero,1181
 1011f4c:	01012770 	cmpltui	r4,zero,1181
 1011f50:	01012770 	cmpltui	r4,zero,1181
 1011f54:	01012770 	cmpltui	r4,zero,1181
 1011f58:	01012054 	movui	r4,1153
 1011f5c:	01012054 	movui	r4,1153
 1011f60:	01012054 	movui	r4,1153
 1011f64:	01012054 	movui	r4,1153
 1011f68:	01012054 	movui	r4,1153
 1011f6c:	01012054 	movui	r4,1153
 1011f70:	01012054 	movui	r4,1153
 1011f74:	01012054 	movui	r4,1153
 1011f78:	01012054 	movui	r4,1153
 1011f7c:	01012054 	movui	r4,1153
 1011f80:	010124bc 	xorhi	r4,zero,1170
 1011f84:	01012054 	movui	r4,1153
 1011f88:	01012054 	movui	r4,1153
 1011f8c:	01012054 	movui	r4,1153
 1011f90:	01012054 	movui	r4,1153
 1011f94:	01012054 	movui	r4,1153
 1011f98:	01012054 	movui	r4,1153
 1011f9c:	01012054 	movui	r4,1153
 1011fa0:	01012054 	movui	r4,1153
 1011fa4:	01012054 	movui	r4,1153
 1011fa8:	01012054 	movui	r4,1153
 1011fac:	01012570 	cmpltui	r4,zero,1173
 1011fb0:	01012054 	movui	r4,1153
 1011fb4:	01012054 	movui	r4,1153
 1011fb8:	01012054 	movui	r4,1153
 1011fbc:	01012054 	movui	r4,1153
 1011fc0:	01012054 	movui	r4,1153
 1011fc4:	010125bc 	xorhi	r4,zero,1174
 1011fc8:	01012054 	movui	r4,1153
 1011fcc:	01012054 	movui	r4,1153
 1011fd0:	010128ac 	andhi	r4,zero,1186
 1011fd4:	01012054 	movui	r4,1153
 1011fd8:	01012054 	movui	r4,1153
 1011fdc:	01012054 	movui	r4,1153
 1011fe0:	01012054 	movui	r4,1153
 1011fe4:	01012054 	movui	r4,1153
 1011fe8:	01012054 	movui	r4,1153
 1011fec:	01012054 	movui	r4,1153
 1011ff0:	01012054 	movui	r4,1153
 1011ff4:	01012054 	movui	r4,1153
 1011ff8:	01012054 	movui	r4,1153
 1011ffc:	01012884 	movi	r4,1186
 1012000:	010124c8 	cmpgei	r4,zero,1171
 1012004:	01012054 	movui	r4,1153
 1012008:	01012054 	movui	r4,1153
 101200c:	01012054 	movui	r4,1153
 1012010:	01012990 	cmplti	r4,zero,1190
 1012014:	010124c8 	cmpgei	r4,zero,1171
 1012018:	01012054 	movui	r4,1153
 101201c:	01012054 	movui	r4,1153
 1012020:	010128e4 	muli	r4,zero,1187
 1012024:	01012054 	movui	r4,1153
 1012028:	010128bc 	xorhi	r4,zero,1186
 101202c:	0101257c 	xorhi	r4,zero,1173
 1012030:	0101294c 	andi	r4,zero,1189
 1012034:	010129a4 	muli	r4,zero,1190
 1012038:	01012054 	movui	r4,1153
 101203c:	01012900 	call	101290 <__alt_mem_onchip_memory2_0+0x101290>
 1012040:	01012054 	movui	r4,1153
 1012044:	010125c8 	cmpgei	r4,zero,1175
 1012048:	01012054 	movui	r4,1153
 101204c:	01012054 	movui	r4,1153
 1012050:	01012824 	muli	r4,zero,1184
 1012054:	2800c226 	beq	r5,zero,1012360 <___vfiprintf_internal_r+0x670>
 1012058:	07000044 	movi	fp,1
 101205c:	d9000404 	addi	r4,sp,16
 1012060:	d9c13515 	stw	r7,1236(sp)
 1012064:	d9013c15 	stw	r4,1264(sp)
 1012068:	df013715 	stw	fp,1244(sp)
 101206c:	d9400405 	stb	r5,16(sp)
 1012070:	d8000005 	stb	zero,0(sp)
 1012074:	d8013815 	stw	zero,1248(sp)
 1012078:	d9813b17 	ldw	r6,1260(sp)
 101207c:	3080008c 	andi	r2,r6,2
 1012080:	1005003a 	cmpeq	r2,r2,zero
 1012084:	d8813e15 	stw	r2,1272(sp)
 1012088:	1000011e 	bne	r2,zero,1012090 <___vfiprintf_internal_r+0x3a0>
 101208c:	e7000084 	addi	fp,fp,2
 1012090:	d8813b17 	ldw	r2,1260(sp)
 1012094:	1080210c 	andi	r2,r2,132
 1012098:	d8813d15 	stw	r2,1268(sp)
 101209c:	10002a1e 	bne	r2,zero,1012148 <___vfiprintf_internal_r+0x458>
 10120a0:	d8c13917 	ldw	r3,1252(sp)
 10120a4:	1f21c83a 	sub	r16,r3,fp
 10120a8:	0400270e 	bge	zero,r16,1012148 <___vfiprintf_internal_r+0x458>
 10120ac:	00800404 	movi	r2,16
 10120b0:	1402c80e 	bge	r2,r16,1012bd4 <___vfiprintf_internal_r+0xee4>
 10120b4:	d9400317 	ldw	r5,12(sp)
 10120b8:	d9000217 	ldw	r4,8(sp)
 10120bc:	1023883a 	mov	r17,r2
 10120c0:	05c04074 	movhi	r23,257
 10120c4:	bdcd8e04 	addi	r23,r23,13880
 10120c8:	04c001c4 	movi	r19,7
 10120cc:	00000306 	br	10120dc <___vfiprintf_internal_r+0x3ec>
 10120d0:	843ffc04 	addi	r16,r16,-16
 10120d4:	94800204 	addi	r18,r18,8
 10120d8:	8c00110e 	bge	r17,r16,1012120 <___vfiprintf_internal_r+0x430>
 10120dc:	29400404 	addi	r5,r5,16
 10120e0:	21000044 	addi	r4,r4,1
 10120e4:	95c00015 	stw	r23,0(r18)
 10120e8:	94400115 	stw	r17,4(r18)
 10120ec:	d9400315 	stw	r5,12(sp)
 10120f0:	d9000215 	stw	r4,8(sp)
 10120f4:	993ff60e 	bge	r19,r4,10120d0 <___vfiprintf_internal_r+0x3e0>
 10120f8:	b009883a 	mov	r4,r22
 10120fc:	a80b883a 	mov	r5,r21
 1012100:	d9800104 	addi	r6,sp,4
 1012104:	1011c980 	call	1011c98 <__sprint_r>
 1012108:	1000981e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 101210c:	843ffc04 	addi	r16,r16,-16
 1012110:	d9400317 	ldw	r5,12(sp)
 1012114:	d9000217 	ldw	r4,8(sp)
 1012118:	dc800e04 	addi	r18,sp,56
 101211c:	8c3fef16 	blt	r17,r16,10120dc <___vfiprintf_internal_r+0x3ec>
 1012120:	2c0b883a 	add	r5,r5,r16
 1012124:	21000044 	addi	r4,r4,1
 1012128:	008001c4 	movi	r2,7
 101212c:	95c00015 	stw	r23,0(r18)
 1012130:	94000115 	stw	r16,4(r18)
 1012134:	d9400315 	stw	r5,12(sp)
 1012138:	d9000215 	stw	r4,8(sp)
 101213c:	11015616 	blt	r2,r4,1012698 <___vfiprintf_internal_r+0x9a8>
 1012140:	94800204 	addi	r18,r18,8
 1012144:	00000206 	br	1012150 <___vfiprintf_internal_r+0x460>
 1012148:	d9400317 	ldw	r5,12(sp)
 101214c:	d9000217 	ldw	r4,8(sp)
 1012150:	d8800007 	ldb	r2,0(sp)
 1012154:	10000a26 	beq	r2,zero,1012180 <___vfiprintf_internal_r+0x490>
 1012158:	00800044 	movi	r2,1
 101215c:	29400044 	addi	r5,r5,1
 1012160:	21000044 	addi	r4,r4,1
 1012164:	90800115 	stw	r2,4(r18)
 1012168:	008001c4 	movi	r2,7
 101216c:	96c00015 	stw	sp,0(r18)
 1012170:	d9400315 	stw	r5,12(sp)
 1012174:	d9000215 	stw	r4,8(sp)
 1012178:	11013516 	blt	r2,r4,1012650 <___vfiprintf_internal_r+0x960>
 101217c:	94800204 	addi	r18,r18,8
 1012180:	d9813e17 	ldw	r6,1272(sp)
 1012184:	30000b1e 	bne	r6,zero,10121b4 <___vfiprintf_internal_r+0x4c4>
 1012188:	d8800044 	addi	r2,sp,1
 101218c:	29400084 	addi	r5,r5,2
 1012190:	21000044 	addi	r4,r4,1
 1012194:	90800015 	stw	r2,0(r18)
 1012198:	00c00084 	movi	r3,2
 101219c:	008001c4 	movi	r2,7
 10121a0:	90c00115 	stw	r3,4(r18)
 10121a4:	d9400315 	stw	r5,12(sp)
 10121a8:	d9000215 	stw	r4,8(sp)
 10121ac:	11013116 	blt	r2,r4,1012674 <___vfiprintf_internal_r+0x984>
 10121b0:	94800204 	addi	r18,r18,8
 10121b4:	d8c13d17 	ldw	r3,1268(sp)
 10121b8:	00802004 	movi	r2,128
 10121bc:	18807126 	beq	r3,r2,1012384 <___vfiprintf_internal_r+0x694>
 10121c0:	d8813817 	ldw	r2,1248(sp)
 10121c4:	d8c13717 	ldw	r3,1244(sp)
 10121c8:	10e1c83a 	sub	r16,r2,r3
 10121cc:	0400240e 	bge	zero,r16,1012260 <___vfiprintf_internal_r+0x570>
 10121d0:	00800404 	movi	r2,16
 10121d4:	1402510e 	bge	r2,r16,1012b1c <___vfiprintf_internal_r+0xe2c>
 10121d8:	1023883a 	mov	r17,r2
 10121dc:	05c04074 	movhi	r23,257
 10121e0:	bdcd8a04 	addi	r23,r23,13864
 10121e4:	04c001c4 	movi	r19,7
 10121e8:	00000306 	br	10121f8 <___vfiprintf_internal_r+0x508>
 10121ec:	843ffc04 	addi	r16,r16,-16
 10121f0:	94800204 	addi	r18,r18,8
 10121f4:	8c00110e 	bge	r17,r16,101223c <___vfiprintf_internal_r+0x54c>
 10121f8:	29400404 	addi	r5,r5,16
 10121fc:	21000044 	addi	r4,r4,1
 1012200:	95c00015 	stw	r23,0(r18)
 1012204:	94400115 	stw	r17,4(r18)
 1012208:	d9400315 	stw	r5,12(sp)
 101220c:	d9000215 	stw	r4,8(sp)
 1012210:	993ff60e 	bge	r19,r4,10121ec <___vfiprintf_internal_r+0x4fc>
 1012214:	b009883a 	mov	r4,r22
 1012218:	a80b883a 	mov	r5,r21
 101221c:	d9800104 	addi	r6,sp,4
 1012220:	1011c980 	call	1011c98 <__sprint_r>
 1012224:	1000511e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 1012228:	843ffc04 	addi	r16,r16,-16
 101222c:	d9400317 	ldw	r5,12(sp)
 1012230:	d9000217 	ldw	r4,8(sp)
 1012234:	dc800e04 	addi	r18,sp,56
 1012238:	8c3fef16 	blt	r17,r16,10121f8 <___vfiprintf_internal_r+0x508>
 101223c:	2c0b883a 	add	r5,r5,r16
 1012240:	21000044 	addi	r4,r4,1
 1012244:	008001c4 	movi	r2,7
 1012248:	95c00015 	stw	r23,0(r18)
 101224c:	94000115 	stw	r16,4(r18)
 1012250:	d9400315 	stw	r5,12(sp)
 1012254:	d9000215 	stw	r4,8(sp)
 1012258:	1100eb16 	blt	r2,r4,1012608 <___vfiprintf_internal_r+0x918>
 101225c:	94800204 	addi	r18,r18,8
 1012260:	d9813717 	ldw	r6,1244(sp)
 1012264:	d8813c17 	ldw	r2,1264(sp)
 1012268:	21000044 	addi	r4,r4,1
 101226c:	298b883a 	add	r5,r5,r6
 1012270:	90800015 	stw	r2,0(r18)
 1012274:	008001c4 	movi	r2,7
 1012278:	91800115 	stw	r6,4(r18)
 101227c:	d9400315 	stw	r5,12(sp)
 1012280:	d9000215 	stw	r4,8(sp)
 1012284:	11006b16 	blt	r2,r4,1012434 <___vfiprintf_internal_r+0x744>
 1012288:	90c00204 	addi	r3,r18,8
 101228c:	d9013b17 	ldw	r4,1260(sp)
 1012290:	2080010c 	andi	r2,r4,4
 1012294:	10002726 	beq	r2,zero,1012334 <___vfiprintf_internal_r+0x644>
 1012298:	d9813917 	ldw	r6,1252(sp)
 101229c:	3721c83a 	sub	r16,r6,fp
 10122a0:	0400240e 	bge	zero,r16,1012334 <___vfiprintf_internal_r+0x644>
 10122a4:	00800404 	movi	r2,16
 10122a8:	1402720e 	bge	r2,r16,1012c74 <___vfiprintf_internal_r+0xf84>
 10122ac:	d9000217 	ldw	r4,8(sp)
 10122b0:	1023883a 	mov	r17,r2
 10122b4:	05c04074 	movhi	r23,257
 10122b8:	bdcd8e04 	addi	r23,r23,13880
 10122bc:	048001c4 	movi	r18,7
 10122c0:	00000306 	br	10122d0 <___vfiprintf_internal_r+0x5e0>
 10122c4:	843ffc04 	addi	r16,r16,-16
 10122c8:	18c00204 	addi	r3,r3,8
 10122cc:	8c00110e 	bge	r17,r16,1012314 <___vfiprintf_internal_r+0x624>
 10122d0:	29400404 	addi	r5,r5,16
 10122d4:	21000044 	addi	r4,r4,1
 10122d8:	1dc00015 	stw	r23,0(r3)
 10122dc:	1c400115 	stw	r17,4(r3)
 10122e0:	d9400315 	stw	r5,12(sp)
 10122e4:	d9000215 	stw	r4,8(sp)
 10122e8:	913ff60e 	bge	r18,r4,10122c4 <___vfiprintf_internal_r+0x5d4>
 10122ec:	b009883a 	mov	r4,r22
 10122f0:	a80b883a 	mov	r5,r21
 10122f4:	d9800104 	addi	r6,sp,4
 10122f8:	1011c980 	call	1011c98 <__sprint_r>
 10122fc:	10001b1e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 1012300:	843ffc04 	addi	r16,r16,-16
 1012304:	d9400317 	ldw	r5,12(sp)
 1012308:	d9000217 	ldw	r4,8(sp)
 101230c:	d8c00e04 	addi	r3,sp,56
 1012310:	8c3fef16 	blt	r17,r16,10122d0 <___vfiprintf_internal_r+0x5e0>
 1012314:	2c0b883a 	add	r5,r5,r16
 1012318:	21000044 	addi	r4,r4,1
 101231c:	008001c4 	movi	r2,7
 1012320:	1dc00015 	stw	r23,0(r3)
 1012324:	1c000115 	stw	r16,4(r3)
 1012328:	d9400315 	stw	r5,12(sp)
 101232c:	d9000215 	stw	r4,8(sp)
 1012330:	11005b16 	blt	r2,r4,10124a0 <___vfiprintf_internal_r+0x7b0>
 1012334:	d8813917 	ldw	r2,1252(sp)
 1012338:	1700010e 	bge	r2,fp,1012340 <___vfiprintf_internal_r+0x650>
 101233c:	e005883a 	mov	r2,fp
 1012340:	d8c13a17 	ldw	r3,1256(sp)
 1012344:	1887883a 	add	r3,r3,r2
 1012348:	d8c13a15 	stw	r3,1256(sp)
 101234c:	2800411e 	bne	r5,zero,1012454 <___vfiprintf_internal_r+0x764>
 1012350:	d9c13517 	ldw	r7,1236(sp)
 1012354:	dc800e04 	addi	r18,sp,56
 1012358:	d8000215 	stw	zero,8(sp)
 101235c:	003eb506 	br	1011e34 <___vfiprintf_internal_r+0x144>
 1012360:	d8800317 	ldw	r2,12(sp)
 1012364:	1002521e 	bne	r2,zero,1012cb0 <___vfiprintf_internal_r+0xfc0>
 1012368:	d8000215 	stw	zero,8(sp)
 101236c:	a880030b 	ldhu	r2,12(r21)
 1012370:	1080100c 	andi	r2,r2,64
 1012374:	103e9a26 	beq	r2,zero,1011de0 <___vfiprintf_internal_r+0xf0>
 1012378:	013fffc4 	movi	r4,-1
 101237c:	d9013a15 	stw	r4,1256(sp)
 1012380:	003e9706 	br	1011de0 <___vfiprintf_internal_r+0xf0>
 1012384:	d9813917 	ldw	r6,1252(sp)
 1012388:	3721c83a 	sub	r16,r6,fp
 101238c:	043f8c0e 	bge	zero,r16,10121c0 <___vfiprintf_internal_r+0x4d0>
 1012390:	00800404 	movi	r2,16
 1012394:	14024c0e 	bge	r2,r16,1012cc8 <___vfiprintf_internal_r+0xfd8>
 1012398:	1023883a 	mov	r17,r2
 101239c:	05c04074 	movhi	r23,257
 10123a0:	bdcd8a04 	addi	r23,r23,13864
 10123a4:	04c001c4 	movi	r19,7
 10123a8:	00000306 	br	10123b8 <___vfiprintf_internal_r+0x6c8>
 10123ac:	843ffc04 	addi	r16,r16,-16
 10123b0:	94800204 	addi	r18,r18,8
 10123b4:	8c00110e 	bge	r17,r16,10123fc <___vfiprintf_internal_r+0x70c>
 10123b8:	29400404 	addi	r5,r5,16
 10123bc:	21000044 	addi	r4,r4,1
 10123c0:	95c00015 	stw	r23,0(r18)
 10123c4:	94400115 	stw	r17,4(r18)
 10123c8:	d9400315 	stw	r5,12(sp)
 10123cc:	d9000215 	stw	r4,8(sp)
 10123d0:	993ff60e 	bge	r19,r4,10123ac <___vfiprintf_internal_r+0x6bc>
 10123d4:	b009883a 	mov	r4,r22
 10123d8:	a80b883a 	mov	r5,r21
 10123dc:	d9800104 	addi	r6,sp,4
 10123e0:	1011c980 	call	1011c98 <__sprint_r>
 10123e4:	103fe11e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 10123e8:	843ffc04 	addi	r16,r16,-16
 10123ec:	d9400317 	ldw	r5,12(sp)
 10123f0:	d9000217 	ldw	r4,8(sp)
 10123f4:	dc800e04 	addi	r18,sp,56
 10123f8:	8c3fef16 	blt	r17,r16,10123b8 <___vfiprintf_internal_r+0x6c8>
 10123fc:	2c0b883a 	add	r5,r5,r16
 1012400:	21000044 	addi	r4,r4,1
 1012404:	008001c4 	movi	r2,7
 1012408:	95c00015 	stw	r23,0(r18)
 101240c:	94000115 	stw	r16,4(r18)
 1012410:	d9400315 	stw	r5,12(sp)
 1012414:	d9000215 	stw	r4,8(sp)
 1012418:	1100a816 	blt	r2,r4,10126bc <___vfiprintf_internal_r+0x9cc>
 101241c:	94800204 	addi	r18,r18,8
 1012420:	003f6706 	br	10121c0 <___vfiprintf_internal_r+0x4d0>
 1012424:	d9c13f15 	stw	r7,1276(sp)
 1012428:	10042140 	call	1004214 <__sinit>
 101242c:	d9c13f17 	ldw	r7,1276(sp)
 1012430:	003e4006 	br	1011d34 <___vfiprintf_internal_r+0x44>
 1012434:	b009883a 	mov	r4,r22
 1012438:	a80b883a 	mov	r5,r21
 101243c:	d9800104 	addi	r6,sp,4
 1012440:	1011c980 	call	1011c98 <__sprint_r>
 1012444:	103fc91e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 1012448:	d9400317 	ldw	r5,12(sp)
 101244c:	d8c00e04 	addi	r3,sp,56
 1012450:	003f8e06 	br	101228c <___vfiprintf_internal_r+0x59c>
 1012454:	b009883a 	mov	r4,r22
 1012458:	a80b883a 	mov	r5,r21
 101245c:	d9800104 	addi	r6,sp,4
 1012460:	1011c980 	call	1011c98 <__sprint_r>
 1012464:	103fba26 	beq	r2,zero,1012350 <___vfiprintf_internal_r+0x660>
 1012468:	003fc006 	br	101236c <___vfiprintf_internal_r+0x67c>
 101246c:	b009883a 	mov	r4,r22
 1012470:	a80b883a 	mov	r5,r21
 1012474:	d9c13f15 	stw	r7,1276(sp)
 1012478:	10026740 	call	1002674 <__swsetup_r>
 101247c:	d9c13f17 	ldw	r7,1276(sp)
 1012480:	103e3126 	beq	r2,zero,1011d48 <___vfiprintf_internal_r+0x58>
 1012484:	003fbc06 	br	1012378 <___vfiprintf_internal_r+0x688>
 1012488:	00bfffc4 	movi	r2,-1
 101248c:	d8813a15 	stw	r2,1256(sp)
 1012490:	d880210b 	ldhu	r2,132(sp)
 1012494:	1080100c 	andi	r2,r2,64
 1012498:	103e4e1e 	bne	r2,zero,1011dd4 <___vfiprintf_internal_r+0xe4>
 101249c:	003e5006 	br	1011de0 <___vfiprintf_internal_r+0xf0>
 10124a0:	b009883a 	mov	r4,r22
 10124a4:	a80b883a 	mov	r5,r21
 10124a8:	d9800104 	addi	r6,sp,4
 10124ac:	1011c980 	call	1011c98 <__sprint_r>
 10124b0:	103fae1e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 10124b4:	d9400317 	ldw	r5,12(sp)
 10124b8:	003f9e06 	br	1012334 <___vfiprintf_internal_r+0x644>
 10124bc:	d8813b17 	ldw	r2,1260(sp)
 10124c0:	10800414 	ori	r2,r2,16
 10124c4:	d8813b15 	stw	r2,1260(sp)
 10124c8:	d8c13b17 	ldw	r3,1260(sp)
 10124cc:	1880080c 	andi	r2,r3,32
 10124d0:	10009c1e 	bne	r2,zero,1012744 <___vfiprintf_internal_r+0xa54>
 10124d4:	d9413b17 	ldw	r5,1260(sp)
 10124d8:	2880040c 	andi	r2,r5,16
 10124dc:	1001b21e 	bne	r2,zero,1012ba8 <___vfiprintf_internal_r+0xeb8>
 10124e0:	d9813b17 	ldw	r6,1260(sp)
 10124e4:	3080100c 	andi	r2,r6,64
 10124e8:	1001af26 	beq	r2,zero,1012ba8 <___vfiprintf_internal_r+0xeb8>
 10124ec:	3880000f 	ldh	r2,0(r7)
 10124f0:	39c00104 	addi	r7,r7,4
 10124f4:	d9c13515 	stw	r7,1236(sp)
 10124f8:	1023d7fa 	srai	r17,r2,31
 10124fc:	1021883a 	mov	r16,r2
 1012500:	8801e016 	blt	r17,zero,1012c84 <___vfiprintf_internal_r+0xf94>
 1012504:	01000044 	movi	r4,1
 1012508:	b8000416 	blt	r23,zero,101251c <___vfiprintf_internal_r+0x82c>
 101250c:	d9413b17 	ldw	r5,1260(sp)
 1012510:	00bfdfc4 	movi	r2,-129
 1012514:	288a703a 	and	r5,r5,r2
 1012518:	d9413b15 	stw	r5,1260(sp)
 101251c:	8444b03a 	or	r2,r16,r17
 1012520:	1001271e 	bne	r2,zero,10129c0 <___vfiprintf_internal_r+0xcd0>
 1012524:	b801261e 	bne	r23,zero,10129c0 <___vfiprintf_internal_r+0xcd0>
 1012528:	20803fcc 	andi	r2,r4,255
 101252c:	10017e26 	beq	r2,zero,1012b28 <___vfiprintf_internal_r+0xe38>
 1012530:	d8c00e04 	addi	r3,sp,56
 1012534:	df000404 	addi	fp,sp,16
 1012538:	d8c13c15 	stw	r3,1264(sp)
 101253c:	d8c13c17 	ldw	r3,1264(sp)
 1012540:	ddc13815 	stw	r23,1248(sp)
 1012544:	e0c5c83a 	sub	r2,fp,r3
 1012548:	10800a04 	addi	r2,r2,40
 101254c:	d8813715 	stw	r2,1244(sp)
 1012550:	df013817 	ldw	fp,1248(sp)
 1012554:	d9413717 	ldw	r5,1244(sp)
 1012558:	e140010e 	bge	fp,r5,1012560 <___vfiprintf_internal_r+0x870>
 101255c:	2839883a 	mov	fp,r5
 1012560:	d8800007 	ldb	r2,0(sp)
 1012564:	103ec426 	beq	r2,zero,1012078 <___vfiprintf_internal_r+0x388>
 1012568:	e7000044 	addi	fp,fp,1
 101256c:	003ec206 	br	1012078 <___vfiprintf_internal_r+0x388>
 1012570:	d9813b17 	ldw	r6,1260(sp)
 1012574:	31800414 	ori	r6,r6,16
 1012578:	d9813b15 	stw	r6,1260(sp)
 101257c:	d8c13b17 	ldw	r3,1260(sp)
 1012580:	1880080c 	andi	r2,r3,32
 1012584:	1000681e 	bne	r2,zero,1012728 <___vfiprintf_internal_r+0xa38>
 1012588:	d9413b17 	ldw	r5,1260(sp)
 101258c:	2880040c 	andi	r2,r5,16
 1012590:	1001771e 	bne	r2,zero,1012b70 <___vfiprintf_internal_r+0xe80>
 1012594:	d9813b17 	ldw	r6,1260(sp)
 1012598:	3080100c 	andi	r2,r6,64
 101259c:	10017426 	beq	r2,zero,1012b70 <___vfiprintf_internal_r+0xe80>
 10125a0:	3c00000b 	ldhu	r16,0(r7)
 10125a4:	0009883a 	mov	r4,zero
 10125a8:	39c00104 	addi	r7,r7,4
 10125ac:	0023883a 	mov	r17,zero
 10125b0:	d9c13515 	stw	r7,1236(sp)
 10125b4:	d8000005 	stb	zero,0(sp)
 10125b8:	003fd306 	br	1012508 <___vfiprintf_internal_r+0x818>
 10125bc:	d8813b17 	ldw	r2,1260(sp)
 10125c0:	10800414 	ori	r2,r2,16
 10125c4:	d8813b15 	stw	r2,1260(sp)
 10125c8:	d8c13b17 	ldw	r3,1260(sp)
 10125cc:	1880080c 	andi	r2,r3,32
 10125d0:	10004e1e 	bne	r2,zero,101270c <___vfiprintf_internal_r+0xa1c>
 10125d4:	d9413b17 	ldw	r5,1260(sp)
 10125d8:	2880040c 	andi	r2,r5,16
 10125dc:	10016b1e 	bne	r2,zero,1012b8c <___vfiprintf_internal_r+0xe9c>
 10125e0:	d9813b17 	ldw	r6,1260(sp)
 10125e4:	3080100c 	andi	r2,r6,64
 10125e8:	10016826 	beq	r2,zero,1012b8c <___vfiprintf_internal_r+0xe9c>
 10125ec:	3c00000b 	ldhu	r16,0(r7)
 10125f0:	01000044 	movi	r4,1
 10125f4:	39c00104 	addi	r7,r7,4
 10125f8:	0023883a 	mov	r17,zero
 10125fc:	d9c13515 	stw	r7,1236(sp)
 1012600:	d8000005 	stb	zero,0(sp)
 1012604:	003fc006 	br	1012508 <___vfiprintf_internal_r+0x818>
 1012608:	b009883a 	mov	r4,r22
 101260c:	a80b883a 	mov	r5,r21
 1012610:	d9800104 	addi	r6,sp,4
 1012614:	1011c980 	call	1011c98 <__sprint_r>
 1012618:	103f541e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 101261c:	d9400317 	ldw	r5,12(sp)
 1012620:	d9000217 	ldw	r4,8(sp)
 1012624:	dc800e04 	addi	r18,sp,56
 1012628:	003f0d06 	br	1012260 <___vfiprintf_internal_r+0x570>
 101262c:	b009883a 	mov	r4,r22
 1012630:	a80b883a 	mov	r5,r21
 1012634:	d9800104 	addi	r6,sp,4
 1012638:	d9c13f15 	stw	r7,1276(sp)
 101263c:	1011c980 	call	1011c98 <__sprint_r>
 1012640:	d9c13f17 	ldw	r7,1276(sp)
 1012644:	103f491e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 1012648:	dc800e04 	addi	r18,sp,56
 101264c:	003e1006 	br	1011e90 <___vfiprintf_internal_r+0x1a0>
 1012650:	b009883a 	mov	r4,r22
 1012654:	a80b883a 	mov	r5,r21
 1012658:	d9800104 	addi	r6,sp,4
 101265c:	1011c980 	call	1011c98 <__sprint_r>
 1012660:	103f421e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 1012664:	d9400317 	ldw	r5,12(sp)
 1012668:	d9000217 	ldw	r4,8(sp)
 101266c:	dc800e04 	addi	r18,sp,56
 1012670:	003ec306 	br	1012180 <___vfiprintf_internal_r+0x490>
 1012674:	b009883a 	mov	r4,r22
 1012678:	a80b883a 	mov	r5,r21
 101267c:	d9800104 	addi	r6,sp,4
 1012680:	1011c980 	call	1011c98 <__sprint_r>
 1012684:	103f391e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 1012688:	d9400317 	ldw	r5,12(sp)
 101268c:	d9000217 	ldw	r4,8(sp)
 1012690:	dc800e04 	addi	r18,sp,56
 1012694:	003ec706 	br	10121b4 <___vfiprintf_internal_r+0x4c4>
 1012698:	b009883a 	mov	r4,r22
 101269c:	a80b883a 	mov	r5,r21
 10126a0:	d9800104 	addi	r6,sp,4
 10126a4:	1011c980 	call	1011c98 <__sprint_r>
 10126a8:	103f301e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 10126ac:	d9400317 	ldw	r5,12(sp)
 10126b0:	d9000217 	ldw	r4,8(sp)
 10126b4:	dc800e04 	addi	r18,sp,56
 10126b8:	003ea506 	br	1012150 <___vfiprintf_internal_r+0x460>
 10126bc:	b009883a 	mov	r4,r22
 10126c0:	a80b883a 	mov	r5,r21
 10126c4:	d9800104 	addi	r6,sp,4
 10126c8:	1011c980 	call	1011c98 <__sprint_r>
 10126cc:	103f271e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 10126d0:	d9400317 	ldw	r5,12(sp)
 10126d4:	d9000217 	ldw	r4,8(sp)
 10126d8:	dc800e04 	addi	r18,sp,56
 10126dc:	003eb806 	br	10121c0 <___vfiprintf_internal_r+0x4d0>
 10126e0:	38c00017 	ldw	r3,0(r7)
 10126e4:	39c00104 	addi	r7,r7,4
 10126e8:	d8c13915 	stw	r3,1252(sp)
 10126ec:	1800b20e 	bge	r3,zero,10129b8 <___vfiprintf_internal_r+0xcc8>
 10126f0:	00c7c83a 	sub	r3,zero,r3
 10126f4:	d8c13915 	stw	r3,1252(sp)
 10126f8:	d9013b17 	ldw	r4,1260(sp)
 10126fc:	a0c00007 	ldb	r3,0(r20)
 1012700:	21000114 	ori	r4,r4,4
 1012704:	d9013b15 	stw	r4,1260(sp)
 1012708:	003ded06 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>
 101270c:	3c000017 	ldw	r16,0(r7)
 1012710:	3c400117 	ldw	r17,4(r7)
 1012714:	39000204 	addi	r4,r7,8
 1012718:	d9013515 	stw	r4,1236(sp)
 101271c:	01000044 	movi	r4,1
 1012720:	d8000005 	stb	zero,0(sp)
 1012724:	003f7806 	br	1012508 <___vfiprintf_internal_r+0x818>
 1012728:	3c000017 	ldw	r16,0(r7)
 101272c:	3c400117 	ldw	r17,4(r7)
 1012730:	39000204 	addi	r4,r7,8
 1012734:	d9013515 	stw	r4,1236(sp)
 1012738:	0009883a 	mov	r4,zero
 101273c:	d8000005 	stb	zero,0(sp)
 1012740:	003f7106 	br	1012508 <___vfiprintf_internal_r+0x818>
 1012744:	3c000017 	ldw	r16,0(r7)
 1012748:	3c400117 	ldw	r17,4(r7)
 101274c:	39000204 	addi	r4,r7,8
 1012750:	d9013515 	stw	r4,1236(sp)
 1012754:	003f6a06 	br	1012500 <___vfiprintf_internal_r+0x810>
 1012758:	d8800007 	ldb	r2,0(sp)
 101275c:	1000961e 	bne	r2,zero,10129b8 <___vfiprintf_internal_r+0xcc8>
 1012760:	00800804 	movi	r2,32
 1012764:	d8800005 	stb	r2,0(sp)
 1012768:	a0c00007 	ldb	r3,0(r20)
 101276c:	003dd406 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>
 1012770:	0007883a 	mov	r3,zero
 1012774:	01000244 	movi	r4,9
 1012778:	188002a4 	muli	r2,r3,10
 101277c:	2885883a 	add	r2,r5,r2
 1012780:	a1400007 	ldb	r5,0(r20)
 1012784:	10fff404 	addi	r3,r2,-48
 1012788:	a5000044 	addi	r20,r20,1
 101278c:	28bff404 	addi	r2,r5,-48
 1012790:	20bff92e 	bgeu	r4,r2,1012778 <___vfiprintf_internal_r+0xa88>
 1012794:	d8c13915 	stw	r3,1252(sp)
 1012798:	003dcb06 	br	1011ec8 <___vfiprintf_internal_r+0x1d8>
 101279c:	d9413b17 	ldw	r5,1260(sp)
 10127a0:	a0c00007 	ldb	r3,0(r20)
 10127a4:	29402014 	ori	r5,r5,128
 10127a8:	d9413b15 	stw	r5,1260(sp)
 10127ac:	003dc406 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>
 10127b0:	a0c00007 	ldb	r3,0(r20)
 10127b4:	00800a84 	movi	r2,42
 10127b8:	a5000044 	addi	r20,r20,1
 10127bc:	18816f26 	beq	r3,r2,1012d7c <___vfiprintf_internal_r+0x108c>
 10127c0:	180b883a 	mov	r5,r3
 10127c4:	18bff404 	addi	r2,r3,-48
 10127c8:	00c00244 	movi	r3,9
 10127cc:	18816936 	bltu	r3,r2,1012d74 <___vfiprintf_internal_r+0x1084>
 10127d0:	000d883a 	mov	r6,zero
 10127d4:	308002a4 	muli	r2,r6,10
 10127d8:	1145883a 	add	r2,r2,r5
 10127dc:	a1400007 	ldb	r5,0(r20)
 10127e0:	11bff404 	addi	r6,r2,-48
 10127e4:	a5000044 	addi	r20,r20,1
 10127e8:	28bff404 	addi	r2,r5,-48
 10127ec:	18bff92e 	bgeu	r3,r2,10127d4 <___vfiprintf_internal_r+0xae4>
 10127f0:	302f883a 	mov	r23,r6
 10127f4:	303db40e 	bge	r6,zero,1011ec8 <___vfiprintf_internal_r+0x1d8>
 10127f8:	05ffffc4 	movi	r23,-1
 10127fc:	003db206 	br	1011ec8 <___vfiprintf_internal_r+0x1d8>
 1012800:	d8813b17 	ldw	r2,1260(sp)
 1012804:	a0c00007 	ldb	r3,0(r20)
 1012808:	10800054 	ori	r2,r2,1
 101280c:	d8813b15 	stw	r2,1260(sp)
 1012810:	003dab06 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>
 1012814:	00800ac4 	movi	r2,43
 1012818:	d8800005 	stb	r2,0(sp)
 101281c:	a0c00007 	ldb	r3,0(r20)
 1012820:	003da706 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>
 1012824:	01804074 	movhi	r6,257
 1012828:	318c7d04 	addi	r6,r6,12788
 101282c:	d9813615 	stw	r6,1240(sp)
 1012830:	d8c13b17 	ldw	r3,1260(sp)
 1012834:	1880080c 	andi	r2,r3,32
 1012838:	1000c226 	beq	r2,zero,1012b44 <___vfiprintf_internal_r+0xe54>
 101283c:	3c000017 	ldw	r16,0(r7)
 1012840:	3c400117 	ldw	r17,4(r7)
 1012844:	39000204 	addi	r4,r7,8
 1012848:	d9013515 	stw	r4,1236(sp)
 101284c:	d9013b17 	ldw	r4,1260(sp)
 1012850:	2080004c 	andi	r2,r4,1
 1012854:	1005003a 	cmpeq	r2,r2,zero
 1012858:	1000931e 	bne	r2,zero,1012aa8 <___vfiprintf_internal_r+0xdb8>
 101285c:	8444b03a 	or	r2,r16,r17
 1012860:	10009126 	beq	r2,zero,1012aa8 <___vfiprintf_internal_r+0xdb8>
 1012864:	21000094 	ori	r4,r4,2
 1012868:	d9013b15 	stw	r4,1260(sp)
 101286c:	00800c04 	movi	r2,48
 1012870:	01000084 	movi	r4,2
 1012874:	d8800045 	stb	r2,1(sp)
 1012878:	d9400085 	stb	r5,2(sp)
 101287c:	d8000005 	stb	zero,0(sp)
 1012880:	003f2106 	br	1012508 <___vfiprintf_internal_r+0x818>
 1012884:	38800017 	ldw	r2,0(r7)
 1012888:	07000044 	movi	fp,1
 101288c:	39c00104 	addi	r7,r7,4
 1012890:	d9800404 	addi	r6,sp,16
 1012894:	d9c13515 	stw	r7,1236(sp)
 1012898:	d9813c15 	stw	r6,1264(sp)
 101289c:	df013715 	stw	fp,1244(sp)
 10128a0:	d8800405 	stb	r2,16(sp)
 10128a4:	d8000005 	stb	zero,0(sp)
 10128a8:	003df206 	br	1012074 <___vfiprintf_internal_r+0x384>
 10128ac:	00804074 	movhi	r2,257
 10128b0:	108c8804 	addi	r2,r2,12832
 10128b4:	d8813615 	stw	r2,1240(sp)
 10128b8:	003fdd06 	br	1012830 <___vfiprintf_internal_r+0xb40>
 10128bc:	d8c13b17 	ldw	r3,1260(sp)
 10128c0:	1880080c 	andi	r2,r3,32
 10128c4:	1000e326 	beq	r2,zero,1012c54 <___vfiprintf_internal_r+0xf64>
 10128c8:	d9013a17 	ldw	r4,1256(sp)
 10128cc:	38800017 	ldw	r2,0(r7)
 10128d0:	39c00104 	addi	r7,r7,4
 10128d4:	2007d7fa 	srai	r3,r4,31
 10128d8:	11000015 	stw	r4,0(r2)
 10128dc:	10c00115 	stw	r3,4(r2)
 10128e0:	003d5406 	br	1011e34 <___vfiprintf_internal_r+0x144>
 10128e4:	a0c00007 	ldb	r3,0(r20)
 10128e8:	00801b04 	movi	r2,108
 10128ec:	1880f926 	beq	r3,r2,1012cd4 <___vfiprintf_internal_r+0xfe4>
 10128f0:	d9013b17 	ldw	r4,1260(sp)
 10128f4:	21000414 	ori	r4,r4,16
 10128f8:	d9013b15 	stw	r4,1260(sp)
 10128fc:	003d7006 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>
 1012900:	d8000005 	stb	zero,0(sp)
 1012904:	39000017 	ldw	r4,0(r7)
 1012908:	39c00104 	addi	r7,r7,4
 101290c:	d9c13515 	stw	r7,1236(sp)
 1012910:	d9013c15 	stw	r4,1264(sp)
 1012914:	20010226 	beq	r4,zero,1012d20 <___vfiprintf_internal_r+0x1030>
 1012918:	b800fc16 	blt	r23,zero,1012d0c <___vfiprintf_internal_r+0x101c>
 101291c:	d9013c17 	ldw	r4,1264(sp)
 1012920:	000b883a 	mov	r5,zero
 1012924:	b80d883a 	mov	r6,r23
 1012928:	10058600 	call	1005860 <memchr>
 101292c:	10000426 	beq	r2,zero,1012940 <___vfiprintf_internal_r+0xc50>
 1012930:	d9813c17 	ldw	r6,1264(sp)
 1012934:	1185c83a 	sub	r2,r2,r6
 1012938:	d8813715 	stw	r2,1244(sp)
 101293c:	b880010e 	bge	r23,r2,1012944 <___vfiprintf_internal_r+0xc54>
 1012940:	ddc13715 	stw	r23,1244(sp)
 1012944:	d8013815 	stw	zero,1248(sp)
 1012948:	003f0106 	br	1012550 <___vfiprintf_internal_r+0x860>
 101294c:	d8813b17 	ldw	r2,1260(sp)
 1012950:	3c000017 	ldw	r16,0(r7)
 1012954:	00c04074 	movhi	r3,257
 1012958:	18cc7d04 	addi	r3,r3,12788
 101295c:	10800094 	ori	r2,r2,2
 1012960:	d8813b15 	stw	r2,1260(sp)
 1012964:	39c00104 	addi	r7,r7,4
 1012968:	d8c13615 	stw	r3,1240(sp)
 101296c:	00800c04 	movi	r2,48
 1012970:	00c01e04 	movi	r3,120
 1012974:	0023883a 	mov	r17,zero
 1012978:	01000084 	movi	r4,2
 101297c:	d9c13515 	stw	r7,1236(sp)
 1012980:	d8800045 	stb	r2,1(sp)
 1012984:	d8c00085 	stb	r3,2(sp)
 1012988:	d8000005 	stb	zero,0(sp)
 101298c:	003ede06 	br	1012508 <___vfiprintf_internal_r+0x818>
 1012990:	d9813b17 	ldw	r6,1260(sp)
 1012994:	a0c00007 	ldb	r3,0(r20)
 1012998:	31801014 	ori	r6,r6,64
 101299c:	d9813b15 	stw	r6,1260(sp)
 10129a0:	003d4706 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>
 10129a4:	d9413b17 	ldw	r5,1260(sp)
 10129a8:	a0c00007 	ldb	r3,0(r20)
 10129ac:	29400814 	ori	r5,r5,32
 10129b0:	d9413b15 	stw	r5,1260(sp)
 10129b4:	003d4206 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>
 10129b8:	a0c00007 	ldb	r3,0(r20)
 10129bc:	003d4006 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>
 10129c0:	20c03fcc 	andi	r3,r4,255
 10129c4:	00800044 	movi	r2,1
 10129c8:	18802b26 	beq	r3,r2,1012a78 <___vfiprintf_internal_r+0xd88>
 10129cc:	18800b36 	bltu	r3,r2,10129fc <___vfiprintf_internal_r+0xd0c>
 10129d0:	00800084 	movi	r2,2
 10129d4:	18808426 	beq	r3,r2,1012be8 <___vfiprintf_internal_r+0xef8>
 10129d8:	01004074 	movhi	r4,257
 10129dc:	210c8d04 	addi	r4,r4,12852
 10129e0:	ddc13815 	stw	r23,1248(sp)
 10129e4:	10006d80 	call	10006d8 <strlen>
 10129e8:	d8813715 	stw	r2,1244(sp)
 10129ec:	00804074 	movhi	r2,257
 10129f0:	108c8d04 	addi	r2,r2,12852
 10129f4:	d8813c15 	stw	r2,1264(sp)
 10129f8:	003ed506 	br	1012550 <___vfiprintf_internal_r+0x860>
 10129fc:	d8800e04 	addi	r2,sp,56
 1012a00:	df000404 	addi	fp,sp,16
 1012a04:	d8813c15 	stw	r2,1264(sp)
 1012a08:	880a977a 	slli	r5,r17,29
 1012a0c:	8004d0fa 	srli	r2,r16,3
 1012a10:	8806d0fa 	srli	r3,r17,3
 1012a14:	810001cc 	andi	r4,r16,7
 1012a18:	2884b03a 	or	r2,r5,r2
 1012a1c:	d9413c17 	ldw	r5,1264(sp)
 1012a20:	21000c04 	addi	r4,r4,48
 1012a24:	1021883a 	mov	r16,r2
 1012a28:	297fffc4 	addi	r5,r5,-1
 1012a2c:	d9413c15 	stw	r5,1264(sp)
 1012a30:	29000005 	stb	r4,0(r5)
 1012a34:	10cab03a 	or	r5,r2,r3
 1012a38:	1823883a 	mov	r17,r3
 1012a3c:	283ff21e 	bne	r5,zero,1012a08 <___vfiprintf_internal_r+0xd18>
 1012a40:	d9813b17 	ldw	r6,1260(sp)
 1012a44:	3080004c 	andi	r2,r6,1
 1012a48:	1005003a 	cmpeq	r2,r2,zero
 1012a4c:	103ebb1e 	bne	r2,zero,101253c <___vfiprintf_internal_r+0x84c>
 1012a50:	20803fcc 	andi	r2,r4,255
 1012a54:	1080201c 	xori	r2,r2,128
 1012a58:	10bfe004 	addi	r2,r2,-128
 1012a5c:	00c00c04 	movi	r3,48
 1012a60:	10feb626 	beq	r2,r3,101253c <___vfiprintf_internal_r+0x84c>
 1012a64:	d8813c17 	ldw	r2,1264(sp)
 1012a68:	10bfffc4 	addi	r2,r2,-1
 1012a6c:	d8813c15 	stw	r2,1264(sp)
 1012a70:	10c00005 	stb	r3,0(r2)
 1012a74:	003eb106 	br	101253c <___vfiprintf_internal_r+0x84c>
 1012a78:	88800068 	cmpgeui	r2,r17,1
 1012a7c:	10000d1e 	bne	r2,zero,1012ab4 <___vfiprintf_internal_r+0xdc4>
 1012a80:	8800021e 	bne	r17,zero,1012a8c <___vfiprintf_internal_r+0xd9c>
 1012a84:	00800244 	movi	r2,9
 1012a88:	14000a36 	bltu	r2,r16,1012ab4 <___vfiprintf_internal_r+0xdc4>
 1012a8c:	d9800dc4 	addi	r6,sp,55
 1012a90:	df000404 	addi	fp,sp,16
 1012a94:	d9813c15 	stw	r6,1264(sp)
 1012a98:	d8c13c17 	ldw	r3,1264(sp)
 1012a9c:	80800c04 	addi	r2,r16,48
 1012aa0:	18800005 	stb	r2,0(r3)
 1012aa4:	003ea506 	br	101253c <___vfiprintf_internal_r+0x84c>
 1012aa8:	01000084 	movi	r4,2
 1012aac:	d8000005 	stb	zero,0(sp)
 1012ab0:	003e9506 	br	1012508 <___vfiprintf_internal_r+0x818>
 1012ab4:	df000404 	addi	fp,sp,16
 1012ab8:	dcc00e04 	addi	r19,sp,56
 1012abc:	8009883a 	mov	r4,r16
 1012ac0:	880b883a 	mov	r5,r17
 1012ac4:	01800284 	movi	r6,10
 1012ac8:	000f883a 	mov	r7,zero
 1012acc:	10081d40 	call	10081d4 <__umoddi3>
 1012ad0:	12000c04 	addi	r8,r2,48
 1012ad4:	9cffffc4 	addi	r19,r19,-1
 1012ad8:	8009883a 	mov	r4,r16
 1012adc:	880b883a 	mov	r5,r17
 1012ae0:	01800284 	movi	r6,10
 1012ae4:	000f883a 	mov	r7,zero
 1012ae8:	9a000005 	stb	r8,0(r19)
 1012aec:	1007bf80 	call	1007bf8 <__udivdi3>
 1012af0:	1009883a 	mov	r4,r2
 1012af4:	1021883a 	mov	r16,r2
 1012af8:	18800068 	cmpgeui	r2,r3,1
 1012afc:	1823883a 	mov	r17,r3
 1012b00:	103fee1e 	bne	r2,zero,1012abc <___vfiprintf_internal_r+0xdcc>
 1012b04:	1800021e 	bne	r3,zero,1012b10 <___vfiprintf_internal_r+0xe20>
 1012b08:	00800244 	movi	r2,9
 1012b0c:	113feb36 	bltu	r2,r4,1012abc <___vfiprintf_internal_r+0xdcc>
 1012b10:	9cffffc4 	addi	r19,r19,-1
 1012b14:	dcc13c15 	stw	r19,1264(sp)
 1012b18:	003fdf06 	br	1012a98 <___vfiprintf_internal_r+0xda8>
 1012b1c:	05c04074 	movhi	r23,257
 1012b20:	bdcd8a04 	addi	r23,r23,13864
 1012b24:	003dc506 	br	101223c <___vfiprintf_internal_r+0x54c>
 1012b28:	d9013b17 	ldw	r4,1260(sp)
 1012b2c:	2080004c 	andi	r2,r4,1
 1012b30:	1000421e 	bne	r2,zero,1012c3c <___vfiprintf_internal_r+0xf4c>
 1012b34:	d9400e04 	addi	r5,sp,56
 1012b38:	df000404 	addi	fp,sp,16
 1012b3c:	d9413c15 	stw	r5,1264(sp)
 1012b40:	003e7e06 	br	101253c <___vfiprintf_internal_r+0x84c>
 1012b44:	d9813b17 	ldw	r6,1260(sp)
 1012b48:	3080040c 	andi	r2,r6,16
 1012b4c:	10001c1e 	bne	r2,zero,1012bc0 <___vfiprintf_internal_r+0xed0>
 1012b50:	d8c13b17 	ldw	r3,1260(sp)
 1012b54:	1880100c 	andi	r2,r3,64
 1012b58:	10001926 	beq	r2,zero,1012bc0 <___vfiprintf_internal_r+0xed0>
 1012b5c:	3c00000b 	ldhu	r16,0(r7)
 1012b60:	0023883a 	mov	r17,zero
 1012b64:	39c00104 	addi	r7,r7,4
 1012b68:	d9c13515 	stw	r7,1236(sp)
 1012b6c:	003f3706 	br	101284c <___vfiprintf_internal_r+0xb5c>
 1012b70:	3c000017 	ldw	r16,0(r7)
 1012b74:	0009883a 	mov	r4,zero
 1012b78:	39c00104 	addi	r7,r7,4
 1012b7c:	0023883a 	mov	r17,zero
 1012b80:	d9c13515 	stw	r7,1236(sp)
 1012b84:	d8000005 	stb	zero,0(sp)
 1012b88:	003e5f06 	br	1012508 <___vfiprintf_internal_r+0x818>
 1012b8c:	3c000017 	ldw	r16,0(r7)
 1012b90:	01000044 	movi	r4,1
 1012b94:	39c00104 	addi	r7,r7,4
 1012b98:	0023883a 	mov	r17,zero
 1012b9c:	d9c13515 	stw	r7,1236(sp)
 1012ba0:	d8000005 	stb	zero,0(sp)
 1012ba4:	003e5806 	br	1012508 <___vfiprintf_internal_r+0x818>
 1012ba8:	38800017 	ldw	r2,0(r7)
 1012bac:	39c00104 	addi	r7,r7,4
 1012bb0:	d9c13515 	stw	r7,1236(sp)
 1012bb4:	1023d7fa 	srai	r17,r2,31
 1012bb8:	1021883a 	mov	r16,r2
 1012bbc:	003e5006 	br	1012500 <___vfiprintf_internal_r+0x810>
 1012bc0:	3c000017 	ldw	r16,0(r7)
 1012bc4:	0023883a 	mov	r17,zero
 1012bc8:	39c00104 	addi	r7,r7,4
 1012bcc:	d9c13515 	stw	r7,1236(sp)
 1012bd0:	003f1e06 	br	101284c <___vfiprintf_internal_r+0xb5c>
 1012bd4:	d9400317 	ldw	r5,12(sp)
 1012bd8:	d9000217 	ldw	r4,8(sp)
 1012bdc:	05c04074 	movhi	r23,257
 1012be0:	bdcd8e04 	addi	r23,r23,13880
 1012be4:	003d4e06 	br	1012120 <___vfiprintf_internal_r+0x430>
 1012be8:	d9000e04 	addi	r4,sp,56
 1012bec:	df000404 	addi	fp,sp,16
 1012bf0:	d9013c15 	stw	r4,1264(sp)
 1012bf4:	d9813617 	ldw	r6,1240(sp)
 1012bf8:	880a973a 	slli	r5,r17,28
 1012bfc:	8004d13a 	srli	r2,r16,4
 1012c00:	810003cc 	andi	r4,r16,15
 1012c04:	3109883a 	add	r4,r6,r4
 1012c08:	2884b03a 	or	r2,r5,r2
 1012c0c:	21400003 	ldbu	r5,0(r4)
 1012c10:	d9013c17 	ldw	r4,1264(sp)
 1012c14:	8806d13a 	srli	r3,r17,4
 1012c18:	1021883a 	mov	r16,r2
 1012c1c:	213fffc4 	addi	r4,r4,-1
 1012c20:	d9013c15 	stw	r4,1264(sp)
 1012c24:	d9813c17 	ldw	r6,1264(sp)
 1012c28:	10c8b03a 	or	r4,r2,r3
 1012c2c:	1823883a 	mov	r17,r3
 1012c30:	31400005 	stb	r5,0(r6)
 1012c34:	203fef1e 	bne	r4,zero,1012bf4 <___vfiprintf_internal_r+0xf04>
 1012c38:	003e4006 	br	101253c <___vfiprintf_internal_r+0x84c>
 1012c3c:	00800c04 	movi	r2,48
 1012c40:	d9800dc4 	addi	r6,sp,55
 1012c44:	df000404 	addi	fp,sp,16
 1012c48:	d8800dc5 	stb	r2,55(sp)
 1012c4c:	d9813c15 	stw	r6,1264(sp)
 1012c50:	003e3a06 	br	101253c <___vfiprintf_internal_r+0x84c>
 1012c54:	d9413b17 	ldw	r5,1260(sp)
 1012c58:	2880040c 	andi	r2,r5,16
 1012c5c:	10002326 	beq	r2,zero,1012cec <___vfiprintf_internal_r+0xffc>
 1012c60:	38800017 	ldw	r2,0(r7)
 1012c64:	d9813a17 	ldw	r6,1256(sp)
 1012c68:	39c00104 	addi	r7,r7,4
 1012c6c:	11800015 	stw	r6,0(r2)
 1012c70:	003c7006 	br	1011e34 <___vfiprintf_internal_r+0x144>
 1012c74:	d9000217 	ldw	r4,8(sp)
 1012c78:	05c04074 	movhi	r23,257
 1012c7c:	bdcd8e04 	addi	r23,r23,13880
 1012c80:	003da406 	br	1012314 <___vfiprintf_internal_r+0x624>
 1012c84:	0005883a 	mov	r2,zero
 1012c88:	1409c83a 	sub	r4,r2,r16
 1012c8c:	1105803a 	cmpltu	r2,r2,r4
 1012c90:	044bc83a 	sub	r5,zero,r17
 1012c94:	2885c83a 	sub	r2,r5,r2
 1012c98:	2021883a 	mov	r16,r4
 1012c9c:	1023883a 	mov	r17,r2
 1012ca0:	01000044 	movi	r4,1
 1012ca4:	00800b44 	movi	r2,45
 1012ca8:	d8800005 	stb	r2,0(sp)
 1012cac:	003e1606 	br	1012508 <___vfiprintf_internal_r+0x818>
 1012cb0:	b009883a 	mov	r4,r22
 1012cb4:	a80b883a 	mov	r5,r21
 1012cb8:	d9800104 	addi	r6,sp,4
 1012cbc:	1011c980 	call	1011c98 <__sprint_r>
 1012cc0:	103daa1e 	bne	r2,zero,101236c <___vfiprintf_internal_r+0x67c>
 1012cc4:	003da806 	br	1012368 <___vfiprintf_internal_r+0x678>
 1012cc8:	05c04074 	movhi	r23,257
 1012ccc:	bdcd8a04 	addi	r23,r23,13864
 1012cd0:	003dca06 	br	10123fc <___vfiprintf_internal_r+0x70c>
 1012cd4:	d8813b17 	ldw	r2,1260(sp)
 1012cd8:	a5000044 	addi	r20,r20,1
 1012cdc:	a0c00007 	ldb	r3,0(r20)
 1012ce0:	10800814 	ori	r2,r2,32
 1012ce4:	d8813b15 	stw	r2,1260(sp)
 1012ce8:	003c7506 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>
 1012cec:	d8c13b17 	ldw	r3,1260(sp)
 1012cf0:	1880100c 	andi	r2,r3,64
 1012cf4:	10001a26 	beq	r2,zero,1012d60 <___vfiprintf_internal_r+0x1070>
 1012cf8:	38800017 	ldw	r2,0(r7)
 1012cfc:	d9013a17 	ldw	r4,1256(sp)
 1012d00:	39c00104 	addi	r7,r7,4
 1012d04:	1100000d 	sth	r4,0(r2)
 1012d08:	003c4a06 	br	1011e34 <___vfiprintf_internal_r+0x144>
 1012d0c:	d9013c17 	ldw	r4,1264(sp)
 1012d10:	10006d80 	call	10006d8 <strlen>
 1012d14:	d8813715 	stw	r2,1244(sp)
 1012d18:	d8013815 	stw	zero,1248(sp)
 1012d1c:	003e0c06 	br	1012550 <___vfiprintf_internal_r+0x860>
 1012d20:	00800184 	movi	r2,6
 1012d24:	15c00836 	bltu	r2,r23,1012d48 <___vfiprintf_internal_r+0x1058>
 1012d28:	b839883a 	mov	fp,r23
 1012d2c:	b800010e 	bge	r23,zero,1012d34 <___vfiprintf_internal_r+0x1044>
 1012d30:	0039883a 	mov	fp,zero
 1012d34:	01404074 	movhi	r5,257
 1012d38:	294c8604 	addi	r5,r5,12824
 1012d3c:	ddc13715 	stw	r23,1244(sp)
 1012d40:	d9413c15 	stw	r5,1264(sp)
 1012d44:	003ccb06 	br	1012074 <___vfiprintf_internal_r+0x384>
 1012d48:	01404074 	movhi	r5,257
 1012d4c:	294c8604 	addi	r5,r5,12824
 1012d50:	1039883a 	mov	fp,r2
 1012d54:	d9413c15 	stw	r5,1264(sp)
 1012d58:	d8813715 	stw	r2,1244(sp)
 1012d5c:	003cc506 	br	1012074 <___vfiprintf_internal_r+0x384>
 1012d60:	38800017 	ldw	r2,0(r7)
 1012d64:	d9413a17 	ldw	r5,1256(sp)
 1012d68:	39c00104 	addi	r7,r7,4
 1012d6c:	11400015 	stw	r5,0(r2)
 1012d70:	003c3006 	br	1011e34 <___vfiprintf_internal_r+0x144>
 1012d74:	002f883a 	mov	r23,zero
 1012d78:	003c5306 	br	1011ec8 <___vfiprintf_internal_r+0x1d8>
 1012d7c:	3dc00017 	ldw	r23,0(r7)
 1012d80:	39c00104 	addi	r7,r7,4
 1012d84:	b83f0c0e 	bge	r23,zero,10129b8 <___vfiprintf_internal_r+0xcc8>
 1012d88:	a0c00007 	ldb	r3,0(r20)
 1012d8c:	05ffffc4 	movi	r23,-1
 1012d90:	003c4b06 	br	1011ec0 <___vfiprintf_internal_r+0x1d0>

01012d94 <__vfiprintf_internal>:
 1012d94:	00804074 	movhi	r2,257
 1012d98:	1094ba04 	addi	r2,r2,21224
 1012d9c:	2013883a 	mov	r9,r4
 1012da0:	11000017 	ldw	r4,0(r2)
 1012da4:	2805883a 	mov	r2,r5
 1012da8:	300f883a 	mov	r7,r6
 1012dac:	480b883a 	mov	r5,r9
 1012db0:	100d883a 	mov	r6,r2
 1012db4:	1011cf01 	jmpi	1011cf0 <___vfiprintf_internal_r>

01012db8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1012db8:	defffd04 	addi	sp,sp,-12
 1012dbc:	df000215 	stw	fp,8(sp)
 1012dc0:	df000204 	addi	fp,sp,8
 1012dc4:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1012dc8:	e0bfff17 	ldw	r2,-4(fp)
 1012dcc:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1012dd0:	e0bffe17 	ldw	r2,-8(fp)
 1012dd4:	1005003a 	cmpeq	r2,r2,zero
 1012dd8:	1000021e 	bne	r2,zero,1012de4 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1012ddc:	002af070 	cmpltui	zero,zero,43969
 1012de0:	00000106 	br	1012de8 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1012de4:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1012de8:	e037883a 	mov	sp,fp
 1012dec:	df000017 	ldw	fp,0(sp)
 1012df0:	dec00104 	addi	sp,sp,4
 1012df4:	f800283a 	ret

01012df8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1012df8:	defffd04 	addi	sp,sp,-12
 1012dfc:	dfc00215 	stw	ra,8(sp)
 1012e00:	df000115 	stw	fp,4(sp)
 1012e04:	df000104 	addi	fp,sp,4
 1012e08:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1012e0c:	e13fff17 	ldw	r4,-4(fp)
 1012e10:	1012db80 	call	1012db8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1012e14:	003fff06 	br	1012e14 <_exit+0x1c>

01012e18 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 1012e18:	deffff04 	addi	sp,sp,-4
 1012e1c:	df000015 	stw	fp,0(sp)
 1012e20:	d839883a 	mov	fp,sp
  return 0;
 1012e24:	0005883a 	mov	r2,zero
}
 1012e28:	e037883a 	mov	sp,fp
 1012e2c:	df000017 	ldw	fp,0(sp)
 1012e30:	dec00104 	addi	sp,sp,4
 1012e34:	f800283a 	ret

01012e38 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 1012e38:	defffa04 	addi	sp,sp,-24
 1012e3c:	dfc00515 	stw	ra,20(sp)
 1012e40:	df000415 	stw	fp,16(sp)
 1012e44:	df000404 	addi	fp,sp,16
 1012e48:	e13ffd15 	stw	r4,-12(fp)
 1012e4c:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 1012e50:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 1012e54:	e0bffd17 	ldw	r2,-12(fp)
 1012e58:	10800048 	cmpgei	r2,r2,1
 1012e5c:	1000301e 	bne	r2,zero,1012f20 <kill+0xe8>
  {
    switch (sig)
 1012e60:	e0bffe17 	ldw	r2,-8(fp)
 1012e64:	10800828 	cmpgeui	r2,r2,32
 1012e68:	10002a1e 	bne	r2,zero,1012f14 <kill+0xdc>
 1012e6c:	e0bffe17 	ldw	r2,-8(fp)
 1012e70:	1085883a 	add	r2,r2,r2
 1012e74:	1087883a 	add	r3,r2,r2
 1012e78:	00804074 	movhi	r2,257
 1012e7c:	108ba304 	addi	r2,r2,11916
 1012e80:	1885883a 	add	r2,r3,r2
 1012e84:	10800017 	ldw	r2,0(r2)
 1012e88:	1000683a 	jmp	r2
 1012e8c:	01012f34 	movhi	r4,1212
 1012e90:	01012f14 	movui	r4,1212
 1012e94:	01012f14 	movui	r4,1212
 1012e98:	01012f0c 	andi	r4,zero,1212
 1012e9c:	01012f0c 	andi	r4,zero,1212
 1012ea0:	01012f0c 	andi	r4,zero,1212
 1012ea4:	01012f0c 	andi	r4,zero,1212
 1012ea8:	01012f14 	movui	r4,1212
 1012eac:	01012f0c 	andi	r4,zero,1212
 1012eb0:	01012f0c 	andi	r4,zero,1212
 1012eb4:	01012f0c 	andi	r4,zero,1212
 1012eb8:	01012f0c 	andi	r4,zero,1212
 1012ebc:	01012f0c 	andi	r4,zero,1212
 1012ec0:	01012f0c 	andi	r4,zero,1212
 1012ec4:	01012f0c 	andi	r4,zero,1212
 1012ec8:	01012f0c 	andi	r4,zero,1212
 1012ecc:	01012f34 	movhi	r4,1212
 1012ed0:	01012f14 	movui	r4,1212
 1012ed4:	01012f14 	movui	r4,1212
 1012ed8:	01012f14 	movui	r4,1212
 1012edc:	01012f34 	movhi	r4,1212
 1012ee0:	01012f14 	movui	r4,1212
 1012ee4:	01012f14 	movui	r4,1212
 1012ee8:	01012f0c 	andi	r4,zero,1212
 1012eec:	01012f0c 	andi	r4,zero,1212
 1012ef0:	01012f0c 	andi	r4,zero,1212
 1012ef4:	01012f0c 	andi	r4,zero,1212
 1012ef8:	01012f0c 	andi	r4,zero,1212
 1012efc:	01012f14 	movui	r4,1212
 1012f00:	01012f14 	movui	r4,1212
 1012f04:	01012f0c 	andi	r4,zero,1212
 1012f08:	01012f0c 	andi	r4,zero,1212
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 1012f0c:	0009883a 	mov	r4,zero
 1012f10:	1012df80 	call	1012df8 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 1012f14:	00800584 	movi	r2,22
 1012f18:	e0bffc15 	stw	r2,-16(fp)
 1012f1c:	00000506 	br	1012f34 <kill+0xfc>
    }
  }

  else if (pid > 0)
 1012f20:	e0bffd17 	ldw	r2,-12(fp)
 1012f24:	10800050 	cmplti	r2,r2,1
 1012f28:	1000021e 	bne	r2,zero,1012f34 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 1012f2c:	008000c4 	movi	r2,3
 1012f30:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 1012f34:	e0bffc17 	ldw	r2,-16(fp)
 1012f38:	1005003a 	cmpeq	r2,r2,zero
 1012f3c:	1000071e 	bne	r2,zero,1012f5c <kill+0x124>
  {
    ALT_ERRNO = status;
 1012f40:	1012f780 	call	1012f78 <alt_get_errno>
 1012f44:	1007883a 	mov	r3,r2
 1012f48:	e0bffc17 	ldw	r2,-16(fp)
 1012f4c:	18800015 	stw	r2,0(r3)
    return -1;
 1012f50:	00bfffc4 	movi	r2,-1
 1012f54:	e0bfff15 	stw	r2,-4(fp)
 1012f58:	00000106 	br	1012f60 <kill+0x128>
  }

  return 0;
 1012f5c:	e03fff15 	stw	zero,-4(fp)
 1012f60:	e0bfff17 	ldw	r2,-4(fp)
}
 1012f64:	e037883a 	mov	sp,fp
 1012f68:	dfc00117 	ldw	ra,4(sp)
 1012f6c:	df000017 	ldw	fp,0(sp)
 1012f70:	dec00204 	addi	sp,sp,8
 1012f74:	f800283a 	ret

01012f78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1012f78:	defffd04 	addi	sp,sp,-12
 1012f7c:	dfc00215 	stw	ra,8(sp)
 1012f80:	df000115 	stw	fp,4(sp)
 1012f84:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1012f88:	00804074 	movhi	r2,257
 1012f8c:	1094c504 	addi	r2,r2,21268
 1012f90:	10800017 	ldw	r2,0(r2)
 1012f94:	1005003a 	cmpeq	r2,r2,zero
 1012f98:	1000061e 	bne	r2,zero,1012fb4 <alt_get_errno+0x3c>
 1012f9c:	00804074 	movhi	r2,257
 1012fa0:	1094c504 	addi	r2,r2,21268
 1012fa4:	10800017 	ldw	r2,0(r2)
 1012fa8:	103ee83a 	callr	r2
 1012fac:	e0bfff15 	stw	r2,-4(fp)
 1012fb0:	00000306 	br	1012fc0 <alt_get_errno+0x48>
 1012fb4:	00804074 	movhi	r2,257
 1012fb8:	109c0904 	addi	r2,r2,28708
 1012fbc:	e0bfff15 	stw	r2,-4(fp)
 1012fc0:	e0bfff17 	ldw	r2,-4(fp)
}
 1012fc4:	e037883a 	mov	sp,fp
 1012fc8:	dfc00117 	ldw	ra,4(sp)
 1012fcc:	df000017 	ldw	fp,0(sp)
 1012fd0:	dec00204 	addi	sp,sp,8
 1012fd4:	f800283a 	ret
 1012fd8:	0101177c 	xorhi	r4,zero,1117
